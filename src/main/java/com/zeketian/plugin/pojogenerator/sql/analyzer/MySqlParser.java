// Generated from resource/antlr/MySqlParser.g4 by ANTLR 4.10.1
package com.zeketian.plugin.pojogenerator.sql.analyzer;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MySqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.10.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		SPACE=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, ADD=5, 
		ALL=6, ALTER=7, ALWAYS=8, ANALYZE=9, AND=10, ARRAY=11, AS=12, ASC=13, 
		BEFORE=14, BETWEEN=15, BOTH=16, BUCKETS=17, BY=18, CALL=19, CASCADE=20, 
		CASE=21, CAST=22, CHANGE=23, CHARACTER=24, CHECK=25, COLLATE=26, COLUMN=27, 
		CONDITION=28, CONSTRAINT=29, CONTINUE=30, CONVERT=31, CREATE=32, CROSS=33, 
		CURRENT=34, CURRENT_USER=35, CURSOR=36, DATABASE=37, DATABASES=38, DECLARE=39, 
		DEFAULT=40, DELAYED=41, DELETE=42, DESC=43, DESCRIBE=44, DETERMINISTIC=45, 
		DIAGNOSTICS=46, DISTINCT=47, DISTINCTROW=48, DROP=49, EACH=50, ELSE=51, 
		ELSEIF=52, EMPTY=53, ENCLOSED=54, ESCAPED=55, EXCEPT=56, EXISTS=57, EXIT=58, 
		EXPLAIN=59, FALSE=60, FETCH=61, FOR=62, FORCE=63, FOREIGN=64, FROM=65, 
		FULLTEXT=66, GENERATED=67, GET=68, GRANT=69, GROUP=70, HAVING=71, HIGH_PRIORITY=72, 
		HISTOGRAM=73, IF=74, IGNORE=75, IGNORED=76, IN=77, INDEX=78, INFILE=79, 
		INNER=80, INOUT=81, INSERT=82, INTERVAL=83, INTO=84, IS=85, ITERATE=86, 
		JOIN=87, KEY=88, KEYS=89, KILL=90, LEADING=91, LEAVE=92, LEFT=93, LIKE=94, 
		LIMIT=95, LINEAR=96, LINES=97, LOAD=98, LOCK=99, LOCKED=100, LOOP=101, 
		LOW_PRIORITY=102, MASTER_BIND=103, MASTER_SSL_VERIFY_SERVER_CERT=104, 
		MATCH=105, MAXVALUE=106, MINVALUE=107, MODIFIES=108, NATURAL=109, NOT=110, 
		NO_WRITE_TO_BINLOG=111, NULL_LITERAL=112, NUMBER=113, ON=114, OPTIMIZE=115, 
		OPTION=116, OPTIONAL=117, OPTIONALLY=118, OR=119, ORDER=120, OUT=121, 
		OVER=122, OUTER=123, OUTFILE=124, PARTITION=125, PRIMARY=126, PROCEDURE=127, 
		PURGE=128, RANGE=129, READ=130, READS=131, REFERENCES=132, REGEXP=133, 
		RELEASE=134, RENAME=135, REPEAT=136, REPLACE=137, REQUIRE=138, RESIGNAL=139, 
		RESTRICT=140, RETAIN=141, RETURN=142, REVOKE=143, RIGHT=144, RLIKE=145, 
		SCHEMA=146, SCHEMAS=147, SELECT=148, SET=149, SEPARATOR=150, SHOW=151, 
		SIGNAL=152, SKIP_=153, SPATIAL=154, SQL=155, SQLEXCEPTION=156, SQLSTATE=157, 
		SQLWARNING=158, SQL_BIG_RESULT=159, SQL_CALC_FOUND_ROWS=160, SQL_SMALL_RESULT=161, 
		SSL=162, STACKED=163, STARTING=164, STRAIGHT_JOIN=165, TABLE=166, TERMINATED=167, 
		THEN=168, TO=169, TRAILING=170, TRIGGER=171, TRUE=172, UNDO=173, UNION=174, 
		UNIQUE=175, UNLOCK=176, UNSIGNED=177, UPDATE=178, USAGE=179, USE=180, 
		USING=181, VALUES=182, WHEN=183, WHERE=184, WHILE=185, WITH=186, WRITE=187, 
		XOR=188, ZEROFILL=189, TINYINT=190, SMALLINT=191, MEDIUMINT=192, MIDDLEINT=193, 
		INT=194, INT1=195, INT2=196, INT3=197, INT4=198, INT8=199, INTEGER=200, 
		BIGINT=201, REAL=202, DOUBLE=203, PRECISION=204, FLOAT=205, FLOAT4=206, 
		FLOAT8=207, DECIMAL=208, DEC=209, NUMERIC=210, DATE=211, TIME=212, TIMESTAMP=213, 
		DATETIME=214, YEAR=215, CHAR=216, VARCHAR=217, NVARCHAR=218, NATIONAL=219, 
		BINARY=220, VARBINARY=221, TINYBLOB=222, BLOB=223, MEDIUMBLOB=224, LONG=225, 
		LONGBLOB=226, TINYTEXT=227, TEXT=228, MEDIUMTEXT=229, LONGTEXT=230, ENUM=231, 
		VARYING=232, SERIAL=233, YEAR_MONTH=234, DAY_HOUR=235, DAY_MINUTE=236, 
		DAY_SECOND=237, HOUR_MINUTE=238, HOUR_SECOND=239, MINUTE_SECOND=240, SECOND_MICROSECOND=241, 
		MINUTE_MICROSECOND=242, HOUR_MICROSECOND=243, DAY_MICROSECOND=244, JSON_ARRAY=245, 
		JSON_OBJECT=246, JSON_QUOTE=247, JSON_CONTAINS=248, JSON_CONTAINS_PATH=249, 
		JSON_EXTRACT=250, JSON_KEYS=251, JSON_OVERLAPS=252, JSON_SEARCH=253, JSON_VALUE=254, 
		JSON_ARRAY_APPEND=255, JSON_ARRAY_INSERT=256, JSON_INSERT=257, JSON_MERGE=258, 
		JSON_MERGE_PATCH=259, JSON_MERGE_PRESERVE=260, JSON_REMOVE=261, JSON_REPLACE=262, 
		JSON_SET=263, JSON_UNQUOTE=264, JSON_DEPTH=265, JSON_LENGTH=266, JSON_TYPE=267, 
		JSON_VALID=268, JSON_TABLE=269, JSON_SCHEMA_VALID=270, JSON_SCHEMA_VALIDATION_REPORT=271, 
		JSON_PRETTY=272, JSON_STORAGE_FREE=273, JSON_STORAGE_SIZE=274, JSON_ARRAYAGG=275, 
		JSON_OBJECTAGG=276, AVG=277, BIT_AND=278, BIT_OR=279, BIT_XOR=280, COUNT=281, 
		CUME_DIST=282, DENSE_RANK=283, FIRST_VALUE=284, GROUP_CONCAT=285, LAG=286, 
		LAST_VALUE=287, LEAD=288, MAX=289, MIN=290, NTILE=291, NTH_VALUE=292, 
		PERCENT_RANK=293, RANK=294, ROW_NUMBER=295, STD=296, STDDEV=297, STDDEV_POP=298, 
		STDDEV_SAMP=299, SUM=300, VAR_POP=301, VAR_SAMP=302, VARIANCE=303, CURRENT_DATE=304, 
		CURRENT_TIME=305, CURRENT_TIMESTAMP=306, LOCALTIME=307, CURDATE=308, CURTIME=309, 
		DATE_ADD=310, DATE_SUB=311, EXTRACT=312, LOCALTIMESTAMP=313, NOW=314, 
		POSITION=315, SUBSTR=316, SUBSTRING=317, SYSDATE=318, TRIM=319, UTC_DATE=320, 
		UTC_TIME=321, UTC_TIMESTAMP=322, ACCOUNT=323, ACTION=324, AFTER=325, AGGREGATE=326, 
		ALGORITHM=327, ANY=328, AT=329, AUTHORS=330, AUTOCOMMIT=331, AUTOEXTEND_SIZE=332, 
		AUTO_INCREMENT=333, AVG_ROW_LENGTH=334, BEGIN=335, BINLOG=336, BIT=337, 
		BLOCK=338, BOOL=339, BOOLEAN=340, BTREE=341, CACHE=342, CASCADED=343, 
		CHAIN=344, CHANGED=345, CHANNEL=346, CHECKSUM=347, PAGE_CHECKSUM=348, 
		CIPHER=349, CLASS_ORIGIN=350, CLIENT=351, CLOSE=352, CLUSTERING=353, COALESCE=354, 
		CODE=355, COLUMNS=356, COLUMN_FORMAT=357, COLUMN_NAME=358, COMMENT=359, 
		COMMIT=360, COMPACT=361, COMPLETION=362, COMPRESSED=363, COMPRESSION=364, 
		CONCURRENT=365, CONNECT=366, CONNECTION=367, CONSISTENT=368, CONSTRAINT_CATALOG=369, 
		CONSTRAINT_SCHEMA=370, CONSTRAINT_NAME=371, CONTAINS=372, CONTEXT=373, 
		CONTRIBUTORS=374, COPY=375, CPU=376, CYCLE=377, CURSOR_NAME=378, DATA=379, 
		DATAFILE=380, DEALLOCATE=381, DEFAULT_AUTH=382, DEFINER=383, DELAY_KEY_WRITE=384, 
		DES_KEY_FILE=385, DIRECTORY=386, DISABLE=387, DISCARD=388, DISK=389, DO=390, 
		DUMPFILE=391, DUPLICATE=392, DYNAMIC=393, ENABLE=394, ENCRYPTION=395, 
		END=396, ENDS=397, ENGINE=398, ENGINES=399, ERROR=400, ERRORS=401, ESCAPE=402, 
		EVEN=403, EVENT=404, EVENTS=405, EVERY=406, EXCHANGE=407, EXCLUSIVE=408, 
		EXPIRE=409, EXPORT=410, EXTENDED=411, EXTENT_SIZE=412, FAST=413, FAULTS=414, 
		FIELDS=415, FILE_BLOCK_SIZE=416, FILTER=417, FIRST=418, FIXED=419, FLUSH=420, 
		FOLLOWING=421, FOLLOWS=422, FOUND=423, FULL=424, FUNCTION=425, GENERAL=426, 
		GLOBAL=427, GRANTS=428, GROUP_REPLICATION=429, HANDLER=430, HASH=431, 
		HELP=432, HOST=433, HOSTS=434, IDENTIFIED=435, IGNORE_SERVER_IDS=436, 
		IMPORT=437, INCREMENT=438, INDEXES=439, INITIAL_SIZE=440, INPLACE=441, 
		INSERT_METHOD=442, INSTALL=443, INSTANCE=444, INSTANT=445, INVISIBLE=446, 
		INVOKER=447, IO=448, IO_THREAD=449, IPC=450, ISOLATION=451, ISSUER=452, 
		JSON=453, KEY_BLOCK_SIZE=454, LANGUAGE=455, LAST=456, LEAVES=457, LESS=458, 
		LEVEL=459, LIST=460, LOCAL=461, LOGFILE=462, LOGS=463, MASTER=464, MASTER_AUTO_POSITION=465, 
		MASTER_CONNECT_RETRY=466, MASTER_DELAY=467, MASTER_HEARTBEAT_PERIOD=468, 
		MASTER_HOST=469, MASTER_LOG_FILE=470, MASTER_LOG_POS=471, MASTER_PASSWORD=472, 
		MASTER_PORT=473, MASTER_RETRY_COUNT=474, MASTER_SSL=475, MASTER_SSL_CA=476, 
		MASTER_SSL_CAPATH=477, MASTER_SSL_CERT=478, MASTER_SSL_CIPHER=479, MASTER_SSL_CRL=480, 
		MASTER_SSL_CRLPATH=481, MASTER_SSL_KEY=482, MASTER_TLS_VERSION=483, MASTER_USER=484, 
		MAX_CONNECTIONS_PER_HOUR=485, MAX_QUERIES_PER_HOUR=486, MAX_ROWS=487, 
		MAX_SIZE=488, MAX_UPDATES_PER_HOUR=489, MAX_USER_CONNECTIONS=490, MEDIUM=491, 
		MEMBER=492, MERGE=493, MESSAGE_TEXT=494, MID=495, MIGRATE=496, MIN_ROWS=497, 
		MODE=498, MODIFY=499, MUTEX=500, MYSQL=501, MYSQL_ERRNO=502, NAME=503, 
		NAMES=504, NCHAR=505, NEVER=506, NEXT=507, NO=508, NOCACHE=509, NOCOPY=510, 
		NOCYCLE=511, NOMAXVALUE=512, NOMINVALUE=513, NOWAIT=514, NODEGROUP=515, 
		NONE=516, ODBC=517, OFFLINE=518, OFFSET=519, OF=520, OJ=521, OLD_PASSWORD=522, 
		ONE=523, ONLINE=524, ONLY=525, OPEN=526, OPTIMIZER_COSTS=527, OPTIONS=528, 
		OWNER=529, PACK_KEYS=530, PAGE=531, PARSER=532, PARTIAL=533, PARTITIONING=534, 
		PARTITIONS=535, PASSWORD=536, PHASE=537, PLUGIN=538, PLUGIN_DIR=539, PLUGINS=540, 
		PORT=541, PRECEDES=542, PRECEDING=543, PREPARE=544, PRESERVE=545, PREV=546, 
		PROCESSLIST=547, PROFILE=548, PROFILES=549, PROXY=550, QUERY=551, QUICK=552, 
		REBUILD=553, RECOVER=554, RECURSIVE=555, REDO_BUFFER_SIZE=556, REDUNDANT=557, 
		RELAY=558, RELAY_LOG_FILE=559, RELAY_LOG_POS=560, RELAYLOG=561, REMOVE=562, 
		REORGANIZE=563, REPAIR=564, REPLICATE_DO_DB=565, REPLICATE_DO_TABLE=566, 
		REPLICATE_IGNORE_DB=567, REPLICATE_IGNORE_TABLE=568, REPLICATE_REWRITE_DB=569, 
		REPLICATE_WILD_DO_TABLE=570, REPLICATE_WILD_IGNORE_TABLE=571, REPLICATION=572, 
		RESET=573, RESTART=574, RESUME=575, RETURNED_SQLSTATE=576, RETURNING=577, 
		RETURNS=578, ROLE=579, ROLLBACK=580, ROLLUP=581, ROTATE=582, ROW=583, 
		ROWS=584, ROW_FORMAT=585, RTREE=586, SAVEPOINT=587, SCHEDULE=588, SECURITY=589, 
		SEQUENCE=590, SERVER=591, SESSION=592, SHARE=593, SHARED=594, SIGNED=595, 
		SIMPLE=596, SLAVE=597, SLOW=598, SNAPSHOT=599, SOCKET=600, SOME=601, SONAME=602, 
		SOUNDS=603, SOURCE=604, SQL_AFTER_GTIDS=605, SQL_AFTER_MTS_GAPS=606, SQL_BEFORE_GTIDS=607, 
		SQL_BUFFER_RESULT=608, SQL_CACHE=609, SQL_NO_CACHE=610, SQL_THREAD=611, 
		START=612, STARTS=613, STATS_AUTO_RECALC=614, STATS_PERSISTENT=615, STATS_SAMPLE_PAGES=616, 
		STATUS=617, STOP=618, STORAGE=619, STORED=620, STRING=621, SUBCLASS_ORIGIN=622, 
		SUBJECT=623, SUBPARTITION=624, SUBPARTITIONS=625, SUSPEND=626, SWAPS=627, 
		SWITCHES=628, TABLE_NAME=629, TABLESPACE=630, TABLE_TYPE=631, TEMPORARY=632, 
		TEMPTABLE=633, THAN=634, TRADITIONAL=635, TRANSACTION=636, TRANSACTIONAL=637, 
		TRIGGERS=638, TRUNCATE=639, UNBOUNDED=640, UNDEFINED=641, UNDOFILE=642, 
		UNDO_BUFFER_SIZE=643, UNINSTALL=644, UNKNOWN=645, UNTIL=646, UPGRADE=647, 
		USER=648, USE_FRM=649, USER_RESOURCES=650, VALIDATION=651, VALUE=652, 
		VARIABLES=653, VIEW=654, VIRTUAL=655, VISIBLE=656, WAIT=657, WARNINGS=658, 
		WINDOW=659, WITHOUT=660, WORK=661, WRAPPER=662, X509=663, XA=664, XML=665, 
		YES=666, EUR=667, USA=668, JIS=669, ISO=670, INTERNAL=671, QUARTER=672, 
		MONTH=673, DAY=674, HOUR=675, MINUTE=676, WEEK=677, SECOND=678, MICROSECOND=679, 
		TABLES=680, ROUTINE=681, EXECUTE=682, FILE=683, PROCESS=684, RELOAD=685, 
		SHUTDOWN=686, SUPER=687, PRIVILEGES=688, APPLICATION_PASSWORD_ADMIN=689, 
		AUDIT_ADMIN=690, BACKUP_ADMIN=691, BINLOG_ADMIN=692, BINLOG_ENCRYPTION_ADMIN=693, 
		CLONE_ADMIN=694, CONNECTION_ADMIN=695, ENCRYPTION_KEY_ADMIN=696, FIREWALL_ADMIN=697, 
		FIREWALL_USER=698, FLUSH_OPTIMIZER_COSTS=699, FLUSH_STATUS=700, FLUSH_TABLES=701, 
		FLUSH_USER_RESOURCES=702, ADMIN=703, GROUP_REPLICATION_ADMIN=704, INNODB_REDO_LOG_ARCHIVE=705, 
		INNODB_REDO_LOG_ENABLE=706, INVOKE=707, LAMBDA=708, NDB_STORED_USER=709, 
		PASSWORDLESS_USER_ADMIN=710, PERSIST_RO_VARIABLES_ADMIN=711, REPLICATION_APPLIER=712, 
		REPLICATION_SLAVE_ADMIN=713, RESOURCE_GROUP_ADMIN=714, RESOURCE_GROUP_USER=715, 
		ROLE_ADMIN=716, S3=717, SERVICE_CONNECTION_ADMIN=718, SESSION_VARIABLES_ADMIN=719, 
		SET_USER_ID=720, SHOW_ROUTINE=721, SYSTEM_VARIABLES_ADMIN=722, TABLE_ENCRYPTION_ADMIN=723, 
		VERSION_TOKEN_ADMIN=724, XA_RECOVER_ADMIN=725, ARMSCII8=726, ASCII=727, 
		BIG5=728, CP1250=729, CP1251=730, CP1256=731, CP1257=732, CP850=733, CP852=734, 
		CP866=735, CP932=736, DEC8=737, EUCJPMS=738, EUCKR=739, GB18030=740, GB2312=741, 
		GBK=742, GEOSTD8=743, GREEK=744, HEBREW=745, HP8=746, KEYBCS2=747, KOI8R=748, 
		KOI8U=749, LATIN1=750, LATIN2=751, LATIN5=752, LATIN7=753, MACCE=754, 
		MACROMAN=755, SJIS=756, SWE7=757, TIS620=758, UCS2=759, UJIS=760, UTF16=761, 
		UTF16LE=762, UTF32=763, UTF8=764, UTF8MB3=765, UTF8MB4=766, ARCHIVE=767, 
		BLACKHOLE=768, CSV=769, FEDERATED=770, INNODB=771, MEMORY=772, MRG_MYISAM=773, 
		MYISAM=774, NDB=775, NDBCLUSTER=776, PERFORMANCE_SCHEMA=777, TOKUDB=778, 
		REPEATABLE=779, COMMITTED=780, UNCOMMITTED=781, SERIALIZABLE=782, GEOMETRYCOLLECTION=783, 
		GEOMCOLLECTION=784, GEOMETRY=785, LINESTRING=786, MULTILINESTRING=787, 
		MULTIPOINT=788, MULTIPOLYGON=789, POINT=790, POLYGON=791, ABS=792, ACOS=793, 
		ADDDATE=794, ADDTIME=795, AES_DECRYPT=796, AES_ENCRYPT=797, AREA=798, 
		ASBINARY=799, ASIN=800, ASTEXT=801, ASWKB=802, ASWKT=803, ASYMMETRIC_DECRYPT=804, 
		ASYMMETRIC_DERIVE=805, ASYMMETRIC_ENCRYPT=806, ASYMMETRIC_SIGN=807, ASYMMETRIC_VERIFY=808, 
		ATAN=809, ATAN2=810, BENCHMARK=811, BIN=812, BIT_COUNT=813, BIT_LENGTH=814, 
		BUFFER=815, CATALOG_NAME=816, CEIL=817, CEILING=818, CENTROID=819, CHARACTER_LENGTH=820, 
		CHARSET=821, CHAR_LENGTH=822, COERCIBILITY=823, COLLATION=824, COMPRESS=825, 
		CONCAT=826, CONCAT_WS=827, CONNECTION_ID=828, CONV=829, CONVERT_TZ=830, 
		COS=831, COT=832, CRC32=833, CREATE_ASYMMETRIC_PRIV_KEY=834, CREATE_ASYMMETRIC_PUB_KEY=835, 
		CREATE_DH_PARAMETERS=836, CREATE_DIGEST=837, CROSSES=838, DATEDIFF=839, 
		DATE_FORMAT=840, DAYNAME=841, DAYOFMONTH=842, DAYOFWEEK=843, DAYOFYEAR=844, 
		DECODE=845, DEGREES=846, DES_DECRYPT=847, DES_ENCRYPT=848, DIMENSION=849, 
		DISJOINT=850, ELT=851, ENCODE=852, ENCRYPT=853, ENDPOINT=854, ENGINE_ATTRIBUTE=855, 
		ENVELOPE=856, EQUALS=857, EXP=858, EXPORT_SET=859, EXTERIORRING=860, EXTRACTVALUE=861, 
		FIELD=862, FIND_IN_SET=863, FLOOR=864, FORMAT=865, FOUND_ROWS=866, FROM_BASE64=867, 
		FROM_DAYS=868, FROM_UNIXTIME=869, GEOMCOLLFROMTEXT=870, GEOMCOLLFROMWKB=871, 
		GEOMETRYCOLLECTIONFROMTEXT=872, GEOMETRYCOLLECTIONFROMWKB=873, GEOMETRYFROMTEXT=874, 
		GEOMETRYFROMWKB=875, GEOMETRYN=876, GEOMETRYTYPE=877, GEOMFROMTEXT=878, 
		GEOMFROMWKB=879, GET_FORMAT=880, GET_LOCK=881, GLENGTH=882, GREATEST=883, 
		GTID_SUBSET=884, GTID_SUBTRACT=885, HEX=886, IFNULL=887, INET6_ATON=888, 
		INET6_NTOA=889, INET_ATON=890, INET_NTOA=891, INSTR=892, INTERIORRINGN=893, 
		INTERSECTS=894, ISCLOSED=895, ISEMPTY=896, ISNULL=897, ISSIMPLE=898, IS_FREE_LOCK=899, 
		IS_IPV4=900, IS_IPV4_COMPAT=901, IS_IPV4_MAPPED=902, IS_IPV6=903, IS_USED_LOCK=904, 
		LAST_INSERT_ID=905, LCASE=906, LEAST=907, LENGTH=908, LINEFROMTEXT=909, 
		LINEFROMWKB=910, LINESTRINGFROMTEXT=911, LINESTRINGFROMWKB=912, LN=913, 
		LOAD_FILE=914, LOCATE=915, LOG=916, LOG10=917, LOG2=918, LOWER=919, LPAD=920, 
		LTRIM=921, MAKEDATE=922, MAKETIME=923, MAKE_SET=924, MASTER_POS_WAIT=925, 
		MBRCONTAINS=926, MBRDISJOINT=927, MBREQUAL=928, MBRINTERSECTS=929, MBROVERLAPS=930, 
		MBRTOUCHES=931, MBRWITHIN=932, MD5=933, MLINEFROMTEXT=934, MLINEFROMWKB=935, 
		MONTHNAME=936, MPOINTFROMTEXT=937, MPOINTFROMWKB=938, MPOLYFROMTEXT=939, 
		MPOLYFROMWKB=940, MULTILINESTRINGFROMTEXT=941, MULTILINESTRINGFROMWKB=942, 
		MULTIPOINTFROMTEXT=943, MULTIPOINTFROMWKB=944, MULTIPOLYGONFROMTEXT=945, 
		MULTIPOLYGONFROMWKB=946, NAME_CONST=947, NULLIF=948, NUMGEOMETRIES=949, 
		NUMINTERIORRINGS=950, NUMPOINTS=951, OCT=952, OCTET_LENGTH=953, ORD=954, 
		OVERLAPS=955, PERIOD_ADD=956, PERIOD_DIFF=957, PI=958, POINTFROMTEXT=959, 
		POINTFROMWKB=960, POINTN=961, POLYFROMTEXT=962, POLYFROMWKB=963, POLYGONFROMTEXT=964, 
		POLYGONFROMWKB=965, POW=966, POWER=967, QUOTE=968, RADIANS=969, RAND=970, 
		RANDOM_BYTES=971, RELEASE_LOCK=972, REVERSE=973, ROUND=974, ROW_COUNT=975, 
		RPAD=976, RTRIM=977, SEC_TO_TIME=978, SECONDARY_ENGINE_ATTRIBUTE=979, 
		SESSION_USER=980, SHA=981, SHA1=982, SHA2=983, SCHEMA_NAME=984, SIGN=985, 
		SIN=986, SLEEP=987, SOUNDEX=988, SQL_THREAD_WAIT_AFTER_GTIDS=989, SQRT=990, 
		SRID=991, STARTPOINT=992, STRCMP=993, STR_TO_DATE=994, ST_AREA=995, ST_ASBINARY=996, 
		ST_ASTEXT=997, ST_ASWKB=998, ST_ASWKT=999, ST_BUFFER=1000, ST_CENTROID=1001, 
		ST_CONTAINS=1002, ST_CROSSES=1003, ST_DIFFERENCE=1004, ST_DIMENSION=1005, 
		ST_DISJOINT=1006, ST_DISTANCE=1007, ST_ENDPOINT=1008, ST_ENVELOPE=1009, 
		ST_EQUALS=1010, ST_EXTERIORRING=1011, ST_GEOMCOLLFROMTEXT=1012, ST_GEOMCOLLFROMTXT=1013, 
		ST_GEOMCOLLFROMWKB=1014, ST_GEOMETRYCOLLECTIONFROMTEXT=1015, ST_GEOMETRYCOLLECTIONFROMWKB=1016, 
		ST_GEOMETRYFROMTEXT=1017, ST_GEOMETRYFROMWKB=1018, ST_GEOMETRYN=1019, 
		ST_GEOMETRYTYPE=1020, ST_GEOMFROMTEXT=1021, ST_GEOMFROMWKB=1022, ST_INTERIORRINGN=1023, 
		ST_INTERSECTION=1024, ST_INTERSECTS=1025, ST_ISCLOSED=1026, ST_ISEMPTY=1027, 
		ST_ISSIMPLE=1028, ST_LINEFROMTEXT=1029, ST_LINEFROMWKB=1030, ST_LINESTRINGFROMTEXT=1031, 
		ST_LINESTRINGFROMWKB=1032, ST_NUMGEOMETRIES=1033, ST_NUMINTERIORRING=1034, 
		ST_NUMINTERIORRINGS=1035, ST_NUMPOINTS=1036, ST_OVERLAPS=1037, ST_POINTFROMTEXT=1038, 
		ST_POINTFROMWKB=1039, ST_POINTN=1040, ST_POLYFROMTEXT=1041, ST_POLYFROMWKB=1042, 
		ST_POLYGONFROMTEXT=1043, ST_POLYGONFROMWKB=1044, ST_SRID=1045, ST_STARTPOINT=1046, 
		ST_SYMDIFFERENCE=1047, ST_TOUCHES=1048, ST_UNION=1049, ST_WITHIN=1050, 
		ST_X=1051, ST_Y=1052, SUBDATE=1053, SUBSTRING_INDEX=1054, SUBTIME=1055, 
		SYSTEM_USER=1056, TAN=1057, TIMEDIFF=1058, TIMESTAMPADD=1059, TIMESTAMPDIFF=1060, 
		TIME_FORMAT=1061, TIME_TO_SEC=1062, TOUCHES=1063, TO_BASE64=1064, TO_DAYS=1065, 
		TO_SECONDS=1066, UCASE=1067, UNCOMPRESS=1068, UNCOMPRESSED_LENGTH=1069, 
		UNHEX=1070, UNIX_TIMESTAMP=1071, UPDATEXML=1072, UPPER=1073, UUID=1074, 
		UUID_SHORT=1075, VALIDATE_PASSWORD_STRENGTH=1076, VERSION=1077, WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=1078, 
		WEEKDAY=1079, WEEKOFYEAR=1080, WEIGHT_STRING=1081, WITHIN=1082, YEARWEEK=1083, 
		Y_FUNCTION=1084, X_FUNCTION=1085, VIA=1086, LASTVAL=1087, NEXTVAL=1088, 
		SETVAL=1089, PREVIOUS=1090, PERSISTENT=1091, BINLOG_MONITOR=1092, BINLOG_REPLAY=1093, 
		FEDERATED_ADMIN=1094, READ_ONLY_ADMIN=1095, REPLICA=1096, REPLICATION_MASTER_ADMIN=1097, 
		VAR_ASSIGN=1098, PLUS_ASSIGN=1099, MINUS_ASSIGN=1100, MULT_ASSIGN=1101, 
		DIV_ASSIGN=1102, MOD_ASSIGN=1103, AND_ASSIGN=1104, XOR_ASSIGN=1105, OR_ASSIGN=1106, 
		STAR=1107, DIVIDE=1108, MODULE=1109, PLUS=1110, MINUS=1111, DIV=1112, 
		MOD=1113, EQUAL_SYMBOL=1114, GREATER_SYMBOL=1115, LESS_SYMBOL=1116, EXCLAMATION_SYMBOL=1117, 
		BIT_NOT_OP=1118, BIT_OR_OP=1119, BIT_AND_OP=1120, BIT_XOR_OP=1121, DOT=1122, 
		LR_BRACKET=1123, RR_BRACKET=1124, COMMA=1125, SEMI=1126, AT_SIGN=1127, 
		ZERO_DECIMAL=1128, ONE_DECIMAL=1129, TWO_DECIMAL=1130, SINGLE_QUOTE_SYMB=1131, 
		DOUBLE_QUOTE_SYMB=1132, REVERSE_QUOTE_SYMB=1133, COLON_SYMB=1134, CHARSET_REVERSE_QOUTE_STRING=1135, 
		FILESIZE_LITERAL=1136, START_NATIONAL_STRING_LITERAL=1137, STRING_LITERAL=1138, 
		DECIMAL_LITERAL=1139, HEXADECIMAL_LITERAL=1140, REAL_LITERAL=1141, NULL_SPEC_LITERAL=1142, 
		BIT_STRING=1143, STRING_CHARSET_NAME=1144, DOT_ID=1145, ID=1146, REVERSE_QUOTE_ID=1147, 
		STRING_USER_NAME=1148, IP_ADDRESS=1149, STRING_USER_NAME_MARIADB=1150, 
		LOCAL_ID=1151, GLOBAL_ID=1152, ERROR_RECONGNIGION=1153, ENCRYPTED=1154, 
		ENCRYPTION_KEY_ID=1155;
	public static final int
		RULE_root = 0, RULE_sqlStatements = 1, RULE_sqlStatement = 2, RULE_emptyStatement_ = 3, 
		RULE_ddlStatement = 4, RULE_dmlStatement = 5, RULE_transactionStatement = 6, 
		RULE_replicationStatement = 7, RULE_preparedStatement = 8, RULE_compoundStatement = 9, 
		RULE_administrationStatement = 10, RULE_utilityStatement = 11, RULE_createDatabase = 12, 
		RULE_createEvent = 13, RULE_createIndex = 14, RULE_createLogfileGroup = 15, 
		RULE_createProcedure = 16, RULE_createFunction = 17, RULE_createRole = 18, 
		RULE_createServer = 19, RULE_createTable = 20, RULE_createTablespaceInnodb = 21, 
		RULE_createTablespaceNdb = 22, RULE_createTrigger = 23, RULE_withClause = 24, 
		RULE_commonTableExpressions = 25, RULE_cteName = 26, RULE_cteColumnName = 27, 
		RULE_createView = 28, RULE_createSequence = 29, RULE_sequenceSpec = 30, 
		RULE_createDatabaseOption = 31, RULE_charSet = 32, RULE_ownerStatement = 33, 
		RULE_scheduleExpression = 34, RULE_timestampValue = 35, RULE_intervalExpr = 36, 
		RULE_intervalType = 37, RULE_enableType = 38, RULE_indexType = 39, RULE_indexOption = 40, 
		RULE_procedureParameter = 41, RULE_functionParameter = 42, RULE_routineOption = 43, 
		RULE_serverOption = 44, RULE_createDefinitions = 45, RULE_createDefinition = 46, 
		RULE_columnDefinition = 47, RULE_columnConstraint = 48, RULE_tableConstraint = 49, 
		RULE_referenceDefinition = 50, RULE_referenceAction = 51, RULE_referenceControlType = 52, 
		RULE_indexColumnDefinition = 53, RULE_tableOption = 54, RULE_tableType = 55, 
		RULE_tablespaceStorage = 56, RULE_partitionDefinitions = 57, RULE_partitionFunctionDefinition = 58, 
		RULE_subpartitionFunctionDefinition = 59, RULE_partitionDefinition = 60, 
		RULE_partitionDefinerAtom = 61, RULE_partitionDefinerVector = 62, RULE_subpartitionDefinition = 63, 
		RULE_partitionOption = 64, RULE_alterDatabase = 65, RULE_alterEvent = 66, 
		RULE_alterFunction = 67, RULE_alterInstance = 68, RULE_alterLogfileGroup = 69, 
		RULE_alterProcedure = 70, RULE_alterServer = 71, RULE_alterTable = 72, 
		RULE_alterTablespace = 73, RULE_alterView = 74, RULE_alterSequence = 75, 
		RULE_alterSpecification = 76, RULE_dropDatabase = 77, RULE_dropEvent = 78, 
		RULE_dropIndex = 79, RULE_dropLogfileGroup = 80, RULE_dropProcedure = 81, 
		RULE_dropFunction = 82, RULE_dropServer = 83, RULE_dropTable = 84, RULE_dropTablespace = 85, 
		RULE_dropTrigger = 86, RULE_dropView = 87, RULE_dropRole = 88, RULE_setRole = 89, 
		RULE_dropSequence = 90, RULE_renameTable = 91, RULE_renameTableClause = 92, 
		RULE_truncateTable = 93, RULE_callStatement = 94, RULE_deleteStatement = 95, 
		RULE_doStatement = 96, RULE_handlerStatement = 97, RULE_insertStatement = 98, 
		RULE_loadDataStatement = 99, RULE_loadXmlStatement = 100, RULE_replaceStatement = 101, 
		RULE_selectStatement = 102, RULE_updateStatement = 103, RULE_insertStatementValue = 104, 
		RULE_updatedElement = 105, RULE_assignmentField = 106, RULE_lockClause = 107, 
		RULE_singleDeleteStatement = 108, RULE_multipleDeleteStatement = 109, 
		RULE_handlerOpenStatement = 110, RULE_handlerReadIndexStatement = 111, 
		RULE_handlerReadStatement = 112, RULE_handlerCloseStatement = 113, RULE_singleUpdateStatement = 114, 
		RULE_multipleUpdateStatement = 115, RULE_orderByClause = 116, RULE_orderByExpression = 117, 
		RULE_tableSources = 118, RULE_tableSource = 119, RULE_tableSourceItem = 120, 
		RULE_indexHint = 121, RULE_indexHintType = 122, RULE_joinPart = 123, RULE_queryExpression = 124, 
		RULE_queryExpressionNointo = 125, RULE_querySpecification = 126, RULE_querySpecificationNointo = 127, 
		RULE_unionParenthesis = 128, RULE_unionStatement = 129, RULE_selectSpec = 130, 
		RULE_selectElements = 131, RULE_selectElement = 132, RULE_selectIntoExpression = 133, 
		RULE_selectFieldsInto = 134, RULE_selectLinesInto = 135, RULE_fromClause = 136, 
		RULE_groupByClause = 137, RULE_havingClause = 138, RULE_windowClause = 139, 
		RULE_groupByItem = 140, RULE_limitClause = 141, RULE_limitClauseAtom = 142, 
		RULE_startTransaction = 143, RULE_beginWork = 144, RULE_commitWork = 145, 
		RULE_rollbackWork = 146, RULE_savepointStatement = 147, RULE_rollbackStatement = 148, 
		RULE_releaseStatement = 149, RULE_lockTables = 150, RULE_unlockTables = 151, 
		RULE_setAutocommitStatement = 152, RULE_setTransactionStatement = 153, 
		RULE_transactionMode = 154, RULE_lockTableElement = 155, RULE_lockAction = 156, 
		RULE_transactionOption = 157, RULE_transactionLevel = 158, RULE_changeMaster = 159, 
		RULE_changeReplicationFilter = 160, RULE_purgeBinaryLogs = 161, RULE_resetMaster = 162, 
		RULE_resetSlave = 163, RULE_startSlave = 164, RULE_stopSlave = 165, RULE_startGroupReplication = 166, 
		RULE_stopGroupReplication = 167, RULE_masterOption = 168, RULE_stringMasterOption = 169, 
		RULE_decimalMasterOption = 170, RULE_boolMasterOption = 171, RULE_channelOption = 172, 
		RULE_replicationFilter = 173, RULE_tablePair = 174, RULE_threadType = 175, 
		RULE_untilOption = 176, RULE_connectionOption = 177, RULE_gtuidSet = 178, 
		RULE_xaStartTransaction = 179, RULE_xaEndTransaction = 180, RULE_xaPrepareStatement = 181, 
		RULE_xaCommitWork = 182, RULE_xaRollbackWork = 183, RULE_xaRecoverWork = 184, 
		RULE_prepareStatement = 185, RULE_executeStatement = 186, RULE_deallocatePrepare = 187, 
		RULE_routineBody = 188, RULE_blockStatement = 189, RULE_caseStatement = 190, 
		RULE_ifStatement = 191, RULE_iterateStatement = 192, RULE_leaveStatement = 193, 
		RULE_loopStatement = 194, RULE_repeatStatement = 195, RULE_returnStatement = 196, 
		RULE_whileStatement = 197, RULE_cursorStatement = 198, RULE_declareVariable = 199, 
		RULE_declareCondition = 200, RULE_declareCursor = 201, RULE_declareHandler = 202, 
		RULE_handlerConditionValue = 203, RULE_procedureSqlStatement = 204, RULE_caseAlternative = 205, 
		RULE_elifAlternative = 206, RULE_alterUser = 207, RULE_createUser = 208, 
		RULE_dropUser = 209, RULE_grantStatement = 210, RULE_roleOption = 211, 
		RULE_grantProxy = 212, RULE_renameUser = 213, RULE_revokeStatement = 214, 
		RULE_revokeProxy = 215, RULE_setPasswordStatement = 216, RULE_userSpecification = 217, 
		RULE_userAuthOption = 218, RULE_tlsOption = 219, RULE_userResourceOption = 220, 
		RULE_userPasswordOption = 221, RULE_userLockOption = 222, RULE_privelegeClause = 223, 
		RULE_privilege = 224, RULE_privilegeLevel = 225, RULE_renameUserClause = 226, 
		RULE_analyzeTable = 227, RULE_checkTable = 228, RULE_checksumTable = 229, 
		RULE_optimizeTable = 230, RULE_repairTable = 231, RULE_checkTableOption = 232, 
		RULE_createUdfunction = 233, RULE_installPlugin = 234, RULE_uninstallPlugin = 235, 
		RULE_setStatement = 236, RULE_showStatement = 237, RULE_variableClause = 238, 
		RULE_showCommonEntity = 239, RULE_showFilter = 240, RULE_showGlobalInfoClause = 241, 
		RULE_showSchemaEntity = 242, RULE_showProfileType = 243, RULE_binlogStatement = 244, 
		RULE_cacheIndexStatement = 245, RULE_flushStatement = 246, RULE_killStatement = 247, 
		RULE_loadIndexIntoCache = 248, RULE_resetStatement = 249, RULE_shutdownStatement = 250, 
		RULE_tableIndexes = 251, RULE_flushOption = 252, RULE_flushTableOption = 253, 
		RULE_loadedTableIndexes = 254, RULE_simpleDescribeStatement = 255, RULE_fullDescribeStatement = 256, 
		RULE_helpStatement = 257, RULE_useStatement = 258, RULE_signalStatement = 259, 
		RULE_resignalStatement = 260, RULE_signalConditionInformation = 261, RULE_diagnosticsStatement = 262, 
		RULE_diagnosticsConditionInformationName = 263, RULE_describeObjectClause = 264, 
		RULE_fullId = 265, RULE_tableName = 266, RULE_roleName = 267, RULE_fullColumnName = 268, 
		RULE_indexColumnName = 269, RULE_userName = 270, RULE_mysqlVariable = 271, 
		RULE_charsetName = 272, RULE_collationName = 273, RULE_engineName = 274, 
		RULE_uuidSet = 275, RULE_xid = 276, RULE_xuidStringId = 277, RULE_authPlugin = 278, 
		RULE_uid = 279, RULE_simpleId = 280, RULE_dottedId = 281, RULE_decimalLiteral = 282, 
		RULE_fileSizeLiteral = 283, RULE_stringLiteral = 284, RULE_booleanLiteral = 285, 
		RULE_hexadecimalLiteral = 286, RULE_nullNotnull = 287, RULE_constant = 288, 
		RULE_dataType = 289, RULE_collectionOptions = 290, RULE_convertedDataType = 291, 
		RULE_lengthOneDimension = 292, RULE_lengthTwoDimension = 293, RULE_lengthTwoOptionalDimension = 294, 
		RULE_uidList = 295, RULE_tables = 296, RULE_indexColumnNames = 297, RULE_expressions = 298, 
		RULE_expressionsWithDefaults = 299, RULE_constants = 300, RULE_simpleStrings = 301, 
		RULE_userVariables = 302, RULE_defaultValue = 303, RULE_currentTimestamp = 304, 
		RULE_expressionOrDefault = 305, RULE_ifExists = 306, RULE_ifNotExists = 307, 
		RULE_waitNowaitClause = 308, RULE_lockOption = 309, RULE_functionCall = 310, 
		RULE_specificFunction = 311, RULE_caseFuncAlternative = 312, RULE_levelsInWeightString = 313, 
		RULE_levelInWeightListElement = 314, RULE_aggregateWindowedFunction = 315, 
		RULE_nonAggregateWindowedFunction = 316, RULE_overClause = 317, RULE_windowSpec = 318, 
		RULE_windowName = 319, RULE_frameClause = 320, RULE_frameUnits = 321, 
		RULE_frameExtent = 322, RULE_frameBetween = 323, RULE_frameRange = 324, 
		RULE_partitionClause = 325, RULE_scalarFunctionName = 326, RULE_passwordFunctionClause = 327, 
		RULE_functionArgs = 328, RULE_functionArg = 329, RULE_expression = 330, 
		RULE_predicate = 331, RULE_expressionAtom = 332, RULE_unaryOperator = 333, 
		RULE_comparisonOperator = 334, RULE_logicalOperator = 335, RULE_bitOperator = 336, 
		RULE_mathOperator = 337, RULE_jsonOperator = 338, RULE_charsetNameBase = 339, 
		RULE_transactionLevelBase = 340, RULE_privilegesBase = 341, RULE_intervalTypeBase = 342, 
		RULE_dataTypeBase = 343, RULE_keywordsCanBeId = 344, RULE_functionNameBase = 345;
	private static String[] makeRuleNames() {
		return new String[] {
			"root", "sqlStatements", "sqlStatement", "emptyStatement_", "ddlStatement", 
			"dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement", 
			"compoundStatement", "administrationStatement", "utilityStatement", "createDatabase", 
			"createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
			"createFunction", "createRole", "createServer", "createTable", "createTablespaceInnodb", 
			"createTablespaceNdb", "createTrigger", "withClause", "commonTableExpressions", 
			"cteName", "cteColumnName", "createView", "createSequence", "sequenceSpec", 
			"createDatabaseOption", "charSet", "ownerStatement", "scheduleExpression", 
			"timestampValue", "intervalExpr", "intervalType", "enableType", "indexType", 
			"indexOption", "procedureParameter", "functionParameter", "routineOption", 
			"serverOption", "createDefinitions", "createDefinition", "columnDefinition", 
			"columnConstraint", "tableConstraint", "referenceDefinition", "referenceAction", 
			"referenceControlType", "indexColumnDefinition", "tableOption", "tableType", 
			"tablespaceStorage", "partitionDefinitions", "partitionFunctionDefinition", 
			"subpartitionFunctionDefinition", "partitionDefinition", "partitionDefinerAtom", 
			"partitionDefinerVector", "subpartitionDefinition", "partitionOption", 
			"alterDatabase", "alterEvent", "alterFunction", "alterInstance", "alterLogfileGroup", 
			"alterProcedure", "alterServer", "alterTable", "alterTablespace", "alterView", 
			"alterSequence", "alterSpecification", "dropDatabase", "dropEvent", "dropIndex", 
			"dropLogfileGroup", "dropProcedure", "dropFunction", "dropServer", "dropTable", 
			"dropTablespace", "dropTrigger", "dropView", "dropRole", "setRole", "dropSequence", 
			"renameTable", "renameTableClause", "truncateTable", "callStatement", 
			"deleteStatement", "doStatement", "handlerStatement", "insertStatement", 
			"loadDataStatement", "loadXmlStatement", "replaceStatement", "selectStatement", 
			"updateStatement", "insertStatementValue", "updatedElement", "assignmentField", 
			"lockClause", "singleDeleteStatement", "multipleDeleteStatement", "handlerOpenStatement", 
			"handlerReadIndexStatement", "handlerReadStatement", "handlerCloseStatement", 
			"singleUpdateStatement", "multipleUpdateStatement", "orderByClause", 
			"orderByExpression", "tableSources", "tableSource", "tableSourceItem", 
			"indexHint", "indexHintType", "joinPart", "queryExpression", "queryExpressionNointo", 
			"querySpecification", "querySpecificationNointo", "unionParenthesis", 
			"unionStatement", "selectSpec", "selectElements", "selectElement", "selectIntoExpression", 
			"selectFieldsInto", "selectLinesInto", "fromClause", "groupByClause", 
			"havingClause", "windowClause", "groupByItem", "limitClause", "limitClauseAtom", 
			"startTransaction", "beginWork", "commitWork", "rollbackWork", "savepointStatement", 
			"rollbackStatement", "releaseStatement", "lockTables", "unlockTables", 
			"setAutocommitStatement", "setTransactionStatement", "transactionMode", 
			"lockTableElement", "lockAction", "transactionOption", "transactionLevel", 
			"changeMaster", "changeReplicationFilter", "purgeBinaryLogs", "resetMaster", 
			"resetSlave", "startSlave", "stopSlave", "startGroupReplication", "stopGroupReplication", 
			"masterOption", "stringMasterOption", "decimalMasterOption", "boolMasterOption", 
			"channelOption", "replicationFilter", "tablePair", "threadType", "untilOption", 
			"connectionOption", "gtuidSet", "xaStartTransaction", "xaEndTransaction", 
			"xaPrepareStatement", "xaCommitWork", "xaRollbackWork", "xaRecoverWork", 
			"prepareStatement", "executeStatement", "deallocatePrepare", "routineBody", 
			"blockStatement", "caseStatement", "ifStatement", "iterateStatement", 
			"leaveStatement", "loopStatement", "repeatStatement", "returnStatement", 
			"whileStatement", "cursorStatement", "declareVariable", "declareCondition", 
			"declareCursor", "declareHandler", "handlerConditionValue", "procedureSqlStatement", 
			"caseAlternative", "elifAlternative", "alterUser", "createUser", "dropUser", 
			"grantStatement", "roleOption", "grantProxy", "renameUser", "revokeStatement", 
			"revokeProxy", "setPasswordStatement", "userSpecification", "userAuthOption", 
			"tlsOption", "userResourceOption", "userPasswordOption", "userLockOption", 
			"privelegeClause", "privilege", "privilegeLevel", "renameUserClause", 
			"analyzeTable", "checkTable", "checksumTable", "optimizeTable", "repairTable", 
			"checkTableOption", "createUdfunction", "installPlugin", "uninstallPlugin", 
			"setStatement", "showStatement", "variableClause", "showCommonEntity", 
			"showFilter", "showGlobalInfoClause", "showSchemaEntity", "showProfileType", 
			"binlogStatement", "cacheIndexStatement", "flushStatement", "killStatement", 
			"loadIndexIntoCache", "resetStatement", "shutdownStatement", "tableIndexes", 
			"flushOption", "flushTableOption", "loadedTableIndexes", "simpleDescribeStatement", 
			"fullDescribeStatement", "helpStatement", "useStatement", "signalStatement", 
			"resignalStatement", "signalConditionInformation", "diagnosticsStatement", 
			"diagnosticsConditionInformationName", "describeObjectClause", "fullId", 
			"tableName", "roleName", "fullColumnName", "indexColumnName", "userName", 
			"mysqlVariable", "charsetName", "collationName", "engineName", "uuidSet", 
			"xid", "xuidStringId", "authPlugin", "uid", "simpleId", "dottedId", "decimalLiteral", 
			"fileSizeLiteral", "stringLiteral", "booleanLiteral", "hexadecimalLiteral", 
			"nullNotnull", "constant", "dataType", "collectionOptions", "convertedDataType", 
			"lengthOneDimension", "lengthTwoDimension", "lengthTwoOptionalDimension", 
			"uidList", "tables", "indexColumnNames", "expressions", "expressionsWithDefaults", 
			"constants", "simpleStrings", "userVariables", "defaultValue", "currentTimestamp", 
			"expressionOrDefault", "ifExists", "ifNotExists", "waitNowaitClause", 
			"lockOption", "functionCall", "specificFunction", "caseFuncAlternative", 
			"levelsInWeightString", "levelInWeightListElement", "aggregateWindowedFunction", 
			"nonAggregateWindowedFunction", "overClause", "windowSpec", "windowName", 
			"frameClause", "frameUnits", "frameExtent", "frameBetween", "frameRange", 
			"partitionClause", "scalarFunctionName", "passwordFunctionClause", "functionArgs", 
			"functionArg", "expression", "predicate", "expressionAtom", "unaryOperator", 
			"comparisonOperator", "logicalOperator", "bitOperator", "mathOperator", 
			"jsonOperator", "charsetNameBase", "transactionLevelBase", "privilegesBase", 
			"intervalTypeBase", "dataTypeBase", "keywordsCanBeId", "functionNameBase"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", 
			"'ANALYZE'", "'AND'", "'ARRAY'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", 
			"'BOTH'", "'BUCKETS'", "'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", 
			"'CHANGE'", "'CHARACTER'", "'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'", 
			"'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT'", 
			"'CURRENT_USER'", "'CURSOR'", "'DATABASE'", "'DATABASES'", "'DECLARE'", 
			"'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", 
			"'DIAGNOSTICS'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", 
			"'ELSEIF'", "'EMPTY'", "'ENCLOSED'", "'ESCAPED'", "'EXCEPT'", "'EXISTS'", 
			"'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", 
			"'FROM'", "'FULLTEXT'", "'GENERATED'", "'GET'", "'GRANT'", "'GROUP'", 
			"'HAVING'", "'HIGH_PRIORITY'", "'HISTOGRAM'", "'IF'", "'IGNORE'", "'IGNORED'", 
			"'IN'", "'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", 
			"'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", "'KILL'", 
			"'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", 
			"'LOAD'", "'LOCK'", "'LOCKED'", "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", 
			"'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", "'MINVALUE'", 
			"'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", 
			"'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONAL'", "'OPTIONALLY'", 
			"'OR'", "'ORDER'", "'OUT'", "'OVER'", "'OUTER'", "'OUTFILE'", "'PARTITION'", 
			"'PRIMARY'", "'PROCEDURE'", "'PURGE'", "'RANGE'", "'READ'", "'READS'", 
			"'REFERENCES'", "'REGEXP'", "'RELEASE'", "'RENAME'", "'REPEAT'", "'REPLACE'", 
			"'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", "'RETAIN'", "'RETURN'", "'REVOKE'", 
			"'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SET'", "'SEPARATOR'", 
			"'SHOW'", "'SIGNAL'", "'SKIP'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", 
			"'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", 
			"'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", "'STARTING'", "'STRAIGHT_JOIN'", 
			"'TABLE'", "'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", 
			"'TRUE'", "'UNDO'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", 
			"'UPDATE'", "'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", 
			"'WHILE'", "'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", 
			"'MEDIUMINT'", "'MIDDLEINT'", "'INT'", "'INT1'", "'INT2'", "'INT3'", 
			"'INT4'", "'INT8'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", 
			"'FLOAT'", "'FLOAT4'", "'FLOAT8'", "'DECIMAL'", "'DEC'", "'NUMERIC'", 
			"'DATE'", "'TIME'", "'TIMESTAMP'", "'DATETIME'", "'YEAR'", "'CHAR'", 
			"'VARCHAR'", "'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", "'TINYBLOB'", 
			"'BLOB'", "'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", 
			"'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'VARYING'", "'SERIAL'", "'YEAR_MONTH'", 
			"'DAY_HOUR'", "'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", 
			"'MINUTE_SECOND'", "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
			"'DAY_MICROSECOND'", "'JSON_ARRAY'", "'JSON_OBJECT'", "'JSON_QUOTE'", 
			"'JSON_CONTAINS'", "'JSON_CONTAINS_PATH'", "'JSON_EXTRACT'", "'JSON_KEYS'", 
			"'JSON_OVERLAPS'", "'JSON_SEARCH'", "'JSON_VALUE'", "'JSON_ARRAY_APPEND'", 
			"'JSON_ARRAY_INSERT'", "'JSON_INSERT'", "'JSON_MERGE'", "'JSON_MERGE_PATCH'", 
			"'JSON_MERGE_PRESERVE'", "'JSON_REMOVE'", "'JSON_REPLACE'", "'JSON_SET'", 
			"'JSON_UNQUOTE'", "'JSON_DEPTH'", "'JSON_LENGTH'", "'JSON_TYPE'", "'JSON_VALID'", 
			"'JSON_TABLE'", "'JSON_SCHEMA_VALID'", "'JSON_SCHEMA_VALIDATION_REPORT'", 
			"'JSON_PRETTY'", "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", "'JSON_ARRAYAGG'", 
			"'JSON_OBJECTAGG'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", 
			"'CUME_DIST'", "'DENSE_RANK'", "'FIRST_VALUE'", "'GROUP_CONCAT'", "'LAG'", 
			"'LAST_VALUE'", "'LEAD'", "'MAX'", "'MIN'", "'NTILE'", "'NTH_VALUE'", 
			"'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
			"'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", 
			"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", 
			"'CURTIME'", "'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", 
			"'NOW'", "'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", 
			"'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", 
			"'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", 
			"'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", 
			"'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", 
			"'CACHE'", "'CASCADED'", "'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", 
			"'PAGE_CHECKSUM'", "'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", 
			"'CLUSTERING'", "'COALESCE'", "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", 
			"'COLUMN_NAME'", "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPLETION'", 
			"'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'", "'CONNECT'", "'CONNECTION'", 
			"'CONSISTENT'", "'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", 
			"'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CYCLE'", 
			"'CURSOR_NAME'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", 
			"'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", 
			"'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", 
			"'ENABLE'", "'ENCRYPTION'", "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", 
			"'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", 
			"'EXCHANGE'", "'EXCLUSIVE'", "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", 
			"'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", 
			"'FIXED'", "'FLUSH'", "'FOLLOWING'", "'FOLLOWS'", "'FOUND'", "'FULL'", 
			"'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", 
			"'HANDLER'", "'HASH'", "'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", 
			"'IGNORE_SERVER_IDS'", "'IMPORT'", "'INCREMENT'", "'INDEXES'", "'INITIAL_SIZE'", 
			"'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INSTANT'", 
			"'INVISIBLE'", "'INVOKER'", "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", 
			"'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", "'LAST'", "'LEAVES'", 
			"'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", 
			"'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", 
			"'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", 
			"'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", "'MASTER_SSL'", 
			"'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", "'MASTER_SSL_CIPHER'", 
			"'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", 
			"'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", "'MAX_QUERIES_PER_HOUR'", 
			"'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", "'MAX_USER_CONNECTIONS'", 
			"'MEDIUM'", "'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", "'MID'", "'MIGRATE'", 
			"'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", "'MYSQL_ERRNO'", 
			"'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", "'NO'", "'NOCACHE'", 
			"'NOCOPY'", "'NOCYCLE'", "'NOMAXVALUE'", "'NOMINVALUE'", "'NOWAIT'", 
			"'NODEGROUP'", "'NONE'", "'ODBC'", "'OFFLINE'", "'OFFSET'", "'OF'", "'OJ'", 
			"'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", 
			"'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", "'PARSER'", "'PARTIAL'", 
			"'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", "'PHASE'", "'PLUGIN'", 
			"'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", "'PRECEDING'", "'PREPARE'", 
			"'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", "'PROXY'", 
			"'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", "'RECURSIVE'", "'REDO_BUFFER_SIZE'", 
			"'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", 
			"'REMOVE'", "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", 
			"'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", 
			"'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", 
			"'RESET'", "'RESTART'", "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNING'", 
			"'RETURNS'", "'ROLE'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", 
			"'ROWS'", "'ROW_FORMAT'", "'RTREE'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", 
			"'SEQUENCE'", "'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", 
			"'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", 
			"'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", 
			"'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", 
			"'SQL_THREAD'", "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", 
			"'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", 
			"'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", 
			"'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", 
			"'TABLE_TYPE'", "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", 
			"'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'", "'TRUNCATE'", "'UNBOUNDED'", 
			"'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", "'UNKNOWN'", 
			"'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", 
			"'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", "'WAIT'", 
			"'WARNINGS'", "'WINDOW'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", 
			"'XA'", "'XML'", "'YES'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", 
			"'QUARTER'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", 
			"'MICROSECOND'", "'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", 
			"'RELOAD'", "'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", "'APPLICATION_PASSWORD_ADMIN'", 
			"'AUDIT_ADMIN'", "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", 
			"'CLONE_ADMIN'", "'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'FIREWALL_ADMIN'", 
			"'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", "'FLUSH_TABLES'", 
			"'FLUSH_USER_RESOURCES'", "'ADMIN'", "'GROUP_REPLICATION_ADMIN'", "'INNODB_REDO_LOG_ARCHIVE'", 
			"'INNODB_REDO_LOG_ENABLE'", "'INVOKE'", "'LAMBDA'", "'NDB_STORED_USER'", 
			"'PASSWORDLESS_USER_ADMIN'", "'PERSIST_RO_VARIABLES_ADMIN'", "'REPLICATION_APPLIER'", 
			"'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'", "'RESOURCE_GROUP_USER'", 
			"'ROLE_ADMIN'", "'S3'", "'SERVICE_CONNECTION_ADMIN'", null, "'SET_USER_ID'", 
			"'SHOW_ROUTINE'", "'SYSTEM_VARIABLES_ADMIN'", "'TABLE_ENCRYPTION_ADMIN'", 
			"'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", "'ARMSCII8'", "'ASCII'", 
			"'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", 
			"'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", "'GB18030'", 
			"'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", 
			"'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", "'LATIN7'", 
			"'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", 
			"'UTF16'", "'UTF16LE'", "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", 
			"'ARCHIVE'", "'BLACKHOLE'", "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", 
			"'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", 
			"'TOKUDB'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", 
			"'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", 
			"'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", 
			"'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", 
			"'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
			"'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", 
			"'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", 
			"'BUFFER'", "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
			"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
			"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
			"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
			"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
			"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
			"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
			"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENGINE_ATTRIBUTE'", 
			"'ENVELOPE'", "'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", 
			"'EXTRACTVALUE'", "'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", 
			"'FOUND_ROWS'", "'FROM_BASE64'", "'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", 
			"'GEOMCOLLFROMWKB'", "'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", 
			"'GEOMETRYFROMTEXT'", "'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", 
			"'GEOMFROMTEXT'", "'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", 
			"'GREATEST'", "'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", 
			"'INET6_ATON'", "'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", 
			"'INTERIORRINGN'", "'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", 
			"'ISSIMPLE'", "'IS_FREE_LOCK'", "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", 
			"'IS_IPV6'", "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", 
			"'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", 
			"'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", 
			"'LOG2'", "'LOWER'", "'LPAD'", "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", 
			"'MAKE_SET'", "'MASTER_POS_WAIT'", "'MBRCONTAINS'", "'MBRDISJOINT'", 
			"'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", "'MBRWITHIN'", 
			"'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", "'MONTHNAME'", "'MPOINTFROMTEXT'", 
			"'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
			"'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", 
			"'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", 
			"'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", 
			"'ORD'", "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
			"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
			"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
			"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
			"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SECONDARY_ENGINE_ATTRIBUTE'", 
			"'SESSION_USER'", "'SHA'", "'SHA1'", "'SHA2'", "'SCHEMA_NAME'", "'SIGN'", 
			"'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", 
			"'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", 
			"'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", 
			"'ST_CONTAINS'", "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", 
			"'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", 
			"'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", 
			"'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
			"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
			"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
			"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", 
			"'ST_LINEFROMTEXT'", "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
			"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
			"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
			"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
			"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
			"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
			"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
			"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
			"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
			"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
			"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
			"'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", 
			"'WEIGHT_STRING'", "'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "'VIA'", "'LASTVAL'", 
			"'NEXTVAL'", "'SETVAL'", "'PREVIOUS'", "'PERSISTENT'", "'BINLOG_MONITOR'", 
			"'BINLOG_REPLAY'", "'FEDERATED_ADMIN'", "'READ_ONLY_ADMIN'", "'REPLICA'", 
			"'REPLICATION_MASTER_ADMIN'", "':='", "'+='", "'-='", "'*='", "'/='", 
			"'%='", "'&='", "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'-'", "'DIV'", 
			"'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", 
			"'('", "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", "'''", "'\"'", 
			"'`'", "':'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
			"ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "ARRAY", "AS", "ASC", 
			"BEFORE", "BETWEEN", "BOTH", "BUCKETS", "BY", "CALL", "CASCADE", "CASE", 
			"CAST", "CHANGE", "CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", 
			"CONSTRAINT", "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_USER", 
			"CURSOR", "DATABASE", "DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", 
			"DESC", "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", "DISTINCTROW", 
			"DROP", "EACH", "ELSE", "ELSEIF", "EMPTY", "ENCLOSED", "ESCAPED", "EXCEPT", 
			"EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", 
			"FROM", "FULLTEXT", "GENERATED", "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
			"HISTOGRAM", "IF", "IGNORE", "IGNORED", "IN", "INDEX", "INFILE", "INNER", 
			"INOUT", "INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", 
			"KEYS", "KILL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", 
			"LINES", "LOAD", "LOCK", "LOCKED", "LOOP", "LOW_PRIORITY", "MASTER_BIND", 
			"MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", "MINVALUE", "MODIFIES", 
			"NATURAL", "NOT", "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "NUMBER", "ON", 
			"OPTIMIZE", "OPTION", "OPTIONAL", "OPTIONALLY", "OR", "ORDER", "OUT", 
			"OVER", "OUTER", "OUTFILE", "PARTITION", "PRIMARY", "PROCEDURE", "PURGE", 
			"RANGE", "READ", "READS", "REFERENCES", "REGEXP", "RELEASE", "RENAME", 
			"REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", "RETAIN", "RETURN", 
			"REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", "SET", "SEPARATOR", 
			"SHOW", "SIGNAL", "SKIP_", "SPATIAL", "SQL", "SQLEXCEPTION", "SQLSTATE", 
			"SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", 
			"SSL", "STACKED", "STARTING", "STRAIGHT_JOIN", "TABLE", "TERMINATED", 
			"THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", 
			"UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", 
			"WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", "SMALLINT", 
			"MEDIUMINT", "MIDDLEINT", "INT", "INT1", "INT2", "INT3", "INT4", "INT8", 
			"INTEGER", "BIGINT", "REAL", "DOUBLE", "PRECISION", "FLOAT", "FLOAT4", 
			"FLOAT8", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", 
			"YEAR", "CHAR", "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", 
			"TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", "TINYTEXT", "TEXT", 
			"MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", "SERIAL", "YEAR_MONTH", 
			"DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", 
			"MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", 
			"DAY_MICROSECOND", "JSON_ARRAY", "JSON_OBJECT", "JSON_QUOTE", "JSON_CONTAINS", 
			"JSON_CONTAINS_PATH", "JSON_EXTRACT", "JSON_KEYS", "JSON_OVERLAPS", "JSON_SEARCH", 
			"JSON_VALUE", "JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT", "JSON_INSERT", 
			"JSON_MERGE", "JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE", "JSON_REMOVE", 
			"JSON_REPLACE", "JSON_SET", "JSON_UNQUOTE", "JSON_DEPTH", "JSON_LENGTH", 
			"JSON_TYPE", "JSON_VALID", "JSON_TABLE", "JSON_SCHEMA_VALID", "JSON_SCHEMA_VALIDATION_REPORT", 
			"JSON_PRETTY", "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE", "JSON_ARRAYAGG", 
			"JSON_OBJECTAGG", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "CUME_DIST", 
			"DENSE_RANK", "FIRST_VALUE", "GROUP_CONCAT", "LAG", "LAST_VALUE", "LEAD", 
			"MAX", "MIN", "NTILE", "NTH_VALUE", "PERCENT_RANK", "RANK", "ROW_NUMBER", 
			"STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", 
			"VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", 
			"CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", 
			"NOW", "POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", 
			"UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", 
			"ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", 
			"AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", "BINLOG", "BIT", "BLOCK", 
			"BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", 
			"CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN", "CLIENT", 
			"CLOSE", "CLUSTERING", "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", 
			"COLUMN_NAME", "COMMENT", "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", 
			"COMPRESSION", "CONCURRENT", "CONNECT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", 
			"CONSTRAINT_SCHEMA", "CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", 
			"COPY", "CPU", "CYCLE", "CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", 
			"DEFAULT_AUTH", "DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", 
			"DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", 
			"ENABLE", "ENCRYPTION", "END", "ENDS", "ENGINE", "ENGINES", "ERROR", 
			"ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", 
			"EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", "FAULTS", "FIELDS", 
			"FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWING", 
			"FOLLOWS", "FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", 
			"GROUP_REPLICATION", "HANDLER", "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED", 
			"IGNORE_SERVER_IDS", "IMPORT", "INCREMENT", "INDEXES", "INITIAL_SIZE", 
			"INPLACE", "INSERT_METHOD", "INSTALL", "INSTANCE", "INSTANT", "INVISIBLE", 
			"INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", 
			"LANGUAGE", "LAST", "LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", 
			"LOGS", "MASTER", "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", 
			"MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", 
			"MASTER_PASSWORD", "MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", 
			"MASTER_SSL_CA", "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", 
			"MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", "MASTER_TLS_VERSION", 
			"MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS", 
			"MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", "MEDIUM", 
			"MEMBER", "MERGE", "MESSAGE_TEXT", "MID", "MIGRATE", "MIN_ROWS", "MODE", 
			"MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME", "NAMES", "NCHAR", 
			"NEVER", "NEXT", "NO", "NOCACHE", "NOCOPY", "NOCYCLE", "NOMAXVALUE", 
			"NOMINVALUE", "NOWAIT", "NODEGROUP", "NONE", "ODBC", "OFFLINE", "OFFSET", 
			"OF", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", 
			"OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PARSER", "PARTIAL", "PARTITIONING", 
			"PARTITIONS", "PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", 
			"PORT", "PRECEDES", "PRECEDING", "PREPARE", "PRESERVE", "PREV", "PROCESSLIST", 
			"PROFILE", "PROFILES", "PROXY", "QUERY", "QUICK", "REBUILD", "RECOVER", 
			"RECURSIVE", "REDO_BUFFER_SIZE", "REDUNDANT", "RELAY", "RELAY_LOG_FILE", 
			"RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", 
			"REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", 
			"REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", 
			"REPLICATION", "RESET", "RESTART", "RESUME", "RETURNED_SQLSTATE", "RETURNING", 
			"RETURNS", "ROLE", "ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", 
			"RTREE", "SAVEPOINT", "SCHEDULE", "SECURITY", "SEQUENCE", "SERVER", "SESSION", 
			"SHARE", "SHARED", "SIGNED", "SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", 
			"SOME", "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", 
			"SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", 
			"SQL_THREAD", "START", "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", 
			"STATS_SAMPLE_PAGES", "STATUS", "STOP", "STORAGE", "STORED", "STRING", 
			"SUBCLASS_ORIGIN", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", "SUSPEND", 
			"SWAPS", "SWITCHES", "TABLE_NAME", "TABLESPACE", "TABLE_TYPE", "TEMPORARY", 
			"TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", "TRANSACTIONAL", "TRIGGERS", 
			"TRUNCATE", "UNBOUNDED", "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", 
			"UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", 
			"VALIDATION", "VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", 
			"WARNINGS", "WINDOW", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", "XML", 
			"YES", "EUR", "USA", "JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", 
			"HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", "TABLES", "ROUTINE", 
			"EXECUTE", "FILE", "PROCESS", "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", 
			"APPLICATION_PASSWORD_ADMIN", "AUDIT_ADMIN", "BACKUP_ADMIN", "BINLOG_ADMIN", 
			"BINLOG_ENCRYPTION_ADMIN", "CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", 
			"FIREWALL_ADMIN", "FIREWALL_USER", "FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", 
			"FLUSH_TABLES", "FLUSH_USER_RESOURCES", "ADMIN", "GROUP_REPLICATION_ADMIN", 
			"INNODB_REDO_LOG_ARCHIVE", "INNODB_REDO_LOG_ENABLE", "INVOKE", "LAMBDA", 
			"NDB_STORED_USER", "PASSWORDLESS_USER_ADMIN", "PERSIST_RO_VARIABLES_ADMIN", 
			"REPLICATION_APPLIER", "REPLICATION_SLAVE_ADMIN", "RESOURCE_GROUP_ADMIN", 
			"RESOURCE_GROUP_USER", "ROLE_ADMIN", "S3", "SERVICE_CONNECTION_ADMIN", 
			"SESSION_VARIABLES_ADMIN", "SET_USER_ID", "SHOW_ROUTINE", "SYSTEM_VARIABLES_ADMIN", 
			"TABLE_ENCRYPTION_ADMIN", "VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", 
			"ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", 
			"CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB18030", 
			"GB2312", "GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", 
			"KOI8U", "LATIN1", "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", 
			"SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", 
			"UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", 
			"INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", 
			"TOKUDB", "REPEATABLE", "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", 
			"GEOMCOLLECTION", "GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", 
			"MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", 
			"AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", 
			"ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
			"ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", 
			"BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", 
			"CENTROID", "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", 
			"COLLATION", "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", 
			"CONVERT_TZ", "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
			"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
			"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
			"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
			"ENCRYPT", "ENDPOINT", "ENGINE_ATTRIBUTE", "ENVELOPE", "EQUALS", "EXP", 
			"EXPORT_SET", "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", 
			"FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", 
			"GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT", 
			"GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", 
			"GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT", "GET_LOCK", 
			"GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", "HEX", "IFNULL", 
			"INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", "INSTR", "INTERIORRINGN", 
			"INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", "ISSIMPLE", "IS_FREE_LOCK", 
			"IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", "IS_IPV6", "IS_USED_LOCK", 
			"LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", "LINEFROMTEXT", "LINEFROMWKB", 
			"LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", "LN", "LOAD_FILE", "LOCATE", 
			"LOG", "LOG10", "LOG2", "LOWER", "LPAD", "LTRIM", "MAKEDATE", "MAKETIME", 
			"MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", "MBRDISJOINT", "MBREQUAL", 
			"MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", "MBRWITHIN", "MD5", "MLINEFROMTEXT", 
			"MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", "MPOINTFROMWKB", "MPOLYFROMTEXT", 
			"MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", "MULTILINESTRINGFROMWKB", 
			"MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", 
			"NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", 
			"OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
			"PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
			"POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
			"RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
			"RPAD", "RTRIM", "SEC_TO_TIME", "SECONDARY_ENGINE_ATTRIBUTE", "SESSION_USER", 
			"SHA", "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", "SLEEP", "SOUNDEX", 
			"SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", "STRCMP", 
			"STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", 
			"ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", "ST_DIFFERENCE", 
			"ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", "ST_ENVELOPE", 
			"ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", 
			"ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", "ST_GEOMETRYCOLLECTIONFROMWKB", 
			"ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE", 
			"ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", "ST_INTERIORRINGN", "ST_INTERSECTION", 
			"ST_INTERSECTS", "ST_ISCLOSED", "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", 
			"ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", 
			"ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", "ST_OVERLAPS", 
			"ST_POINTFROMTEXT", "ST_POINTFROMWKB", "ST_POINTN", "ST_POLYFROMTEXT", 
			"ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID", 
			"ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", "ST_UNION", "ST_WITHIN", 
			"ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", 
			"TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", "TIME_TO_SEC", 
			"TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", "UCASE", "UNCOMPRESS", 
			"UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER", 
			"UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", 
			"WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", 
			"X_FUNCTION", "VIA", "LASTVAL", "NEXTVAL", "SETVAL", "PREVIOUS", "PERSISTENT", 
			"BINLOG_MONITOR", "BINLOG_REPLAY", "FEDERATED_ADMIN", "READ_ONLY_ADMIN", 
			"REPLICA", "REPLICATION_MASTER_ADMIN", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
			"MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", 
			"OR_ASSIGN", "STAR", "DIVIDE", "MODULE", "PLUS", "MINUS", "DIV", "MOD", 
			"EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", 
			"BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", "DOT", "LR_BRACKET", 
			"RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", 
			"TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", 
			"COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", "START_NATIONAL_STRING_LITERAL", 
			"STRING_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "REAL_LITERAL", 
			"NULL_SPEC_LITERAL", "BIT_STRING", "STRING_CHARSET_NAME", "DOT_ID", "ID", 
			"REVERSE_QUOTE_ID", "STRING_USER_NAME", "IP_ADDRESS", "STRING_USER_NAME_MARIADB", 
			"LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION", "ENCRYPTED", "ENCRYPTION_KEY_ID"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "MySqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public MySqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class RootContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(MySqlParser.EOF, 0); }
		public SqlStatementsContext sqlStatements() {
			return getRuleContext(SqlStatementsContext.class,0);
		}
		public List<TerminalNode> MINUS() { return getTokens(MySqlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(MySqlParser.MINUS, i);
		}
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(693);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << ANALYZE) | (1L << CALL) | (1L << CHANGE) | (1L << CHECK) | (1L << CREATE) | (1L << DELETE) | (1L << DESC) | (1L << DESCRIBE) | (1L << DROP) | (1L << EXPLAIN))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (GET - 68)) | (1L << (GRANT - 68)) | (1L << (INSERT - 68)) | (1L << (KILL - 68)) | (1L << (LOAD - 68)) | (1L << (LOCK - 68)) | (1L << (OPTIMIZE - 68)) | (1L << (PURGE - 68)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (RELEASE - 134)) | (1L << (RENAME - 134)) | (1L << (REPLACE - 134)) | (1L << (RESIGNAL - 134)) | (1L << (REVOKE - 134)) | (1L << (SELECT - 134)) | (1L << (SET - 134)) | (1L << (SHOW - 134)) | (1L << (SIGNAL - 134)) | (1L << (UNLOCK - 134)) | (1L << (UPDATE - 134)) | (1L << (USE - 134)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BEGIN - 335)) | (1L << (BINLOG - 335)) | (1L << (CACHE - 335)) | (1L << (CHECKSUM - 335)) | (1L << (COMMIT - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DO - 335)))) != 0) || ((((_la - 420)) & ~0x3f) == 0 && ((1L << (_la - 420)) & ((1L << (FLUSH - 420)) | (1L << (HANDLER - 420)) | (1L << (HELP - 420)) | (1L << (INSTALL - 420)))) != 0) || ((((_la - 544)) & ~0x3f) == 0 && ((1L << (_la - 544)) & ((1L << (PREPARE - 544)) | (1L << (REPAIR - 544)) | (1L << (RESET - 544)) | (1L << (ROLLBACK - 544)) | (1L << (SAVEPOINT - 544)))) != 0) || ((((_la - 612)) & ~0x3f) == 0 && ((1L << (_la - 612)) & ((1L << (START - 612)) | (1L << (STOP - 612)) | (1L << (TRUNCATE - 612)) | (1L << (UNINSTALL - 612)) | (1L << (XA - 612)))) != 0) || _la==EXECUTE || _la==SHUTDOWN || _la==LR_BRACKET || _la==SEMI) {
				{
				setState(692);
				sqlStatements();
				}
			}

			setState(697);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUS) {
				{
				setState(695);
				match(MINUS);
				setState(696);
				match(MINUS);
				}
			}

			setState(699);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementsContext extends ParserRuleContext {
		public List<SqlStatementContext> sqlStatement() {
			return getRuleContexts(SqlStatementContext.class);
		}
		public SqlStatementContext sqlStatement(int i) {
			return getRuleContext(SqlStatementContext.class,i);
		}
		public List<EmptyStatement_Context> emptyStatement_() {
			return getRuleContexts(EmptyStatement_Context.class);
		}
		public EmptyStatement_Context emptyStatement_(int i) {
			return getRuleContext(EmptyStatement_Context.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(MySqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(MySqlParser.SEMI, i);
		}
		public List<TerminalNode> MINUS() { return getTokens(MySqlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(MySqlParser.MINUS, i);
		}
		public SqlStatementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSqlStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSqlStatements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSqlStatements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementsContext sqlStatements() throws RecognitionException {
		SqlStatementsContext _localctx = new SqlStatementsContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sqlStatements);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(712);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(710);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALTER:
					case ANALYZE:
					case CALL:
					case CHANGE:
					case CHECK:
					case CREATE:
					case DELETE:
					case DESC:
					case DESCRIBE:
					case DROP:
					case EXPLAIN:
					case GET:
					case GRANT:
					case INSERT:
					case KILL:
					case LOAD:
					case LOCK:
					case OPTIMIZE:
					case PURGE:
					case RELEASE:
					case RENAME:
					case REPLACE:
					case RESIGNAL:
					case REVOKE:
					case SELECT:
					case SET:
					case SHOW:
					case SIGNAL:
					case UNLOCK:
					case UPDATE:
					case USE:
					case BEGIN:
					case BINLOG:
					case CACHE:
					case CHECKSUM:
					case COMMIT:
					case DEALLOCATE:
					case DO:
					case FLUSH:
					case HANDLER:
					case HELP:
					case INSTALL:
					case PREPARE:
					case REPAIR:
					case RESET:
					case ROLLBACK:
					case SAVEPOINT:
					case START:
					case STOP:
					case TRUNCATE:
					case UNINSTALL:
					case XA:
					case EXECUTE:
					case SHUTDOWN:
					case LR_BRACKET:
						{
						setState(701);
						sqlStatement();
						setState(704);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==MINUS) {
							{
							setState(702);
							match(MINUS);
							setState(703);
							match(MINUS);
							}
						}

						setState(707);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
						case 1:
							{
							setState(706);
							match(SEMI);
							}
							break;
						}
						}
						break;
					case SEMI:
						{
						setState(709);
						emptyStatement_();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(714);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			}
			setState(724);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case LR_BRACKET:
				{
				setState(715);
				sqlStatement();
				setState(721);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
				case 1:
					{
					setState(718);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==MINUS) {
						{
						setState(716);
						match(MINUS);
						setState(717);
						match(MINUS);
						}
					}

					setState(720);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case SEMI:
				{
				setState(723);
				emptyStatement_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementContext extends ParserRuleContext {
		public DdlStatementContext ddlStatement() {
			return getRuleContext(DdlStatementContext.class,0);
		}
		public DmlStatementContext dmlStatement() {
			return getRuleContext(DmlStatementContext.class,0);
		}
		public TransactionStatementContext transactionStatement() {
			return getRuleContext(TransactionStatementContext.class,0);
		}
		public ReplicationStatementContext replicationStatement() {
			return getRuleContext(ReplicationStatementContext.class,0);
		}
		public PreparedStatementContext preparedStatement() {
			return getRuleContext(PreparedStatementContext.class,0);
		}
		public AdministrationStatementContext administrationStatement() {
			return getRuleContext(AdministrationStatementContext.class,0);
		}
		public UtilityStatementContext utilityStatement() {
			return getRuleContext(UtilityStatementContext.class,0);
		}
		public SqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementContext sqlStatement() throws RecognitionException {
		SqlStatementContext _localctx = new SqlStatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sqlStatement);
		try {
			setState(733);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(726);
				ddlStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(727);
				dmlStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(728);
				transactionStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(729);
				replicationStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(730);
				preparedStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(731);
				administrationStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(732);
				utilityStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EmptyStatement_Context extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(MySqlParser.SEMI, 0); }
		public EmptyStatement_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emptyStatement_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEmptyStatement_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEmptyStatement_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitEmptyStatement_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EmptyStatement_Context emptyStatement_() throws RecognitionException {
		EmptyStatement_Context _localctx = new EmptyStatement_Context(_ctx, getState());
		enterRule(_localctx, 6, RULE_emptyStatement_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(735);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DdlStatementContext extends ParserRuleContext {
		public CreateDatabaseContext createDatabase() {
			return getRuleContext(CreateDatabaseContext.class,0);
		}
		public CreateEventContext createEvent() {
			return getRuleContext(CreateEventContext.class,0);
		}
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public CreateLogfileGroupContext createLogfileGroup() {
			return getRuleContext(CreateLogfileGroupContext.class,0);
		}
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public CreateServerContext createServer() {
			return getRuleContext(CreateServerContext.class,0);
		}
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public CreateTablespaceInnodbContext createTablespaceInnodb() {
			return getRuleContext(CreateTablespaceInnodbContext.class,0);
		}
		public CreateTablespaceNdbContext createTablespaceNdb() {
			return getRuleContext(CreateTablespaceNdbContext.class,0);
		}
		public CreateTriggerContext createTrigger() {
			return getRuleContext(CreateTriggerContext.class,0);
		}
		public CreateViewContext createView() {
			return getRuleContext(CreateViewContext.class,0);
		}
		public CreateRoleContext createRole() {
			return getRuleContext(CreateRoleContext.class,0);
		}
		public CreateSequenceContext createSequence() {
			return getRuleContext(CreateSequenceContext.class,0);
		}
		public AlterDatabaseContext alterDatabase() {
			return getRuleContext(AlterDatabaseContext.class,0);
		}
		public AlterEventContext alterEvent() {
			return getRuleContext(AlterEventContext.class,0);
		}
		public AlterFunctionContext alterFunction() {
			return getRuleContext(AlterFunctionContext.class,0);
		}
		public AlterInstanceContext alterInstance() {
			return getRuleContext(AlterInstanceContext.class,0);
		}
		public AlterLogfileGroupContext alterLogfileGroup() {
			return getRuleContext(AlterLogfileGroupContext.class,0);
		}
		public AlterProcedureContext alterProcedure() {
			return getRuleContext(AlterProcedureContext.class,0);
		}
		public AlterServerContext alterServer() {
			return getRuleContext(AlterServerContext.class,0);
		}
		public AlterTableContext alterTable() {
			return getRuleContext(AlterTableContext.class,0);
		}
		public AlterTablespaceContext alterTablespace() {
			return getRuleContext(AlterTablespaceContext.class,0);
		}
		public AlterViewContext alterView() {
			return getRuleContext(AlterViewContext.class,0);
		}
		public AlterSequenceContext alterSequence() {
			return getRuleContext(AlterSequenceContext.class,0);
		}
		public DropDatabaseContext dropDatabase() {
			return getRuleContext(DropDatabaseContext.class,0);
		}
		public DropEventContext dropEvent() {
			return getRuleContext(DropEventContext.class,0);
		}
		public DropIndexContext dropIndex() {
			return getRuleContext(DropIndexContext.class,0);
		}
		public DropLogfileGroupContext dropLogfileGroup() {
			return getRuleContext(DropLogfileGroupContext.class,0);
		}
		public DropProcedureContext dropProcedure() {
			return getRuleContext(DropProcedureContext.class,0);
		}
		public DropFunctionContext dropFunction() {
			return getRuleContext(DropFunctionContext.class,0);
		}
		public DropServerContext dropServer() {
			return getRuleContext(DropServerContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public DropTablespaceContext dropTablespace() {
			return getRuleContext(DropTablespaceContext.class,0);
		}
		public DropTriggerContext dropTrigger() {
			return getRuleContext(DropTriggerContext.class,0);
		}
		public DropViewContext dropView() {
			return getRuleContext(DropViewContext.class,0);
		}
		public DropRoleContext dropRole() {
			return getRuleContext(DropRoleContext.class,0);
		}
		public DropSequenceContext dropSequence() {
			return getRuleContext(DropSequenceContext.class,0);
		}
		public SetRoleContext setRole() {
			return getRuleContext(SetRoleContext.class,0);
		}
		public RenameTableContext renameTable() {
			return getRuleContext(RenameTableContext.class,0);
		}
		public TruncateTableContext truncateTable() {
			return getRuleContext(TruncateTableContext.class,0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDdlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDdlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDdlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DdlStatementContext ddlStatement() throws RecognitionException {
		DdlStatementContext _localctx = new DdlStatementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_ddlStatement);
		try {
			setState(778);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(737);
				createDatabase();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(738);
				createEvent();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(739);
				createIndex();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(740);
				createLogfileGroup();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(741);
				createProcedure();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(742);
				createFunction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(743);
				createServer();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(744);
				createTable();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(745);
				createTablespaceInnodb();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(746);
				createTablespaceNdb();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(747);
				createTrigger();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(748);
				createView();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(749);
				createRole();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(750);
				createSequence();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(751);
				alterDatabase();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(752);
				alterEvent();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(753);
				alterFunction();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(754);
				alterInstance();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(755);
				alterLogfileGroup();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(756);
				alterProcedure();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(757);
				alterServer();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(758);
				alterTable();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(759);
				alterTablespace();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(760);
				alterView();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(761);
				alterSequence();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(762);
				dropDatabase();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(763);
				dropEvent();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(764);
				dropIndex();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(765);
				dropLogfileGroup();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(766);
				dropProcedure();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(767);
				dropFunction();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(768);
				dropServer();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(769);
				dropTable();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(770);
				dropTablespace();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(771);
				dropTrigger();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(772);
				dropView();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(773);
				dropRole();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(774);
				dropSequence();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(775);
				setRole();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(776);
				renameTable();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(777);
				truncateTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DmlStatementContext extends ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public CallStatementContext callStatement() {
			return getRuleContext(CallStatementContext.class,0);
		}
		public LoadDataStatementContext loadDataStatement() {
			return getRuleContext(LoadDataStatementContext.class,0);
		}
		public LoadXmlStatementContext loadXmlStatement() {
			return getRuleContext(LoadXmlStatementContext.class,0);
		}
		public DoStatementContext doStatement() {
			return getRuleContext(DoStatementContext.class,0);
		}
		public HandlerStatementContext handlerStatement() {
			return getRuleContext(HandlerStatementContext.class,0);
		}
		public DmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dmlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDmlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DmlStatementContext dmlStatement() throws RecognitionException {
		DmlStatementContext _localctx = new DmlStatementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_dmlStatement);
		try {
			setState(790);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(780);
				selectStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(781);
				insertStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(782);
				updateStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(783);
				deleteStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(784);
				replaceStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(785);
				callStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(786);
				loadDataStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(787);
				loadXmlStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(788);
				doStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(789);
				handlerStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionStatementContext extends ParserRuleContext {
		public StartTransactionContext startTransaction() {
			return getRuleContext(StartTransactionContext.class,0);
		}
		public BeginWorkContext beginWork() {
			return getRuleContext(BeginWorkContext.class,0);
		}
		public CommitWorkContext commitWork() {
			return getRuleContext(CommitWorkContext.class,0);
		}
		public RollbackWorkContext rollbackWork() {
			return getRuleContext(RollbackWorkContext.class,0);
		}
		public SavepointStatementContext savepointStatement() {
			return getRuleContext(SavepointStatementContext.class,0);
		}
		public RollbackStatementContext rollbackStatement() {
			return getRuleContext(RollbackStatementContext.class,0);
		}
		public ReleaseStatementContext releaseStatement() {
			return getRuleContext(ReleaseStatementContext.class,0);
		}
		public LockTablesContext lockTables() {
			return getRuleContext(LockTablesContext.class,0);
		}
		public UnlockTablesContext unlockTables() {
			return getRuleContext(UnlockTablesContext.class,0);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionStatementContext transactionStatement() throws RecognitionException {
		TransactionStatementContext _localctx = new TransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_transactionStatement);
		try {
			setState(801);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(792);
				startTransaction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(793);
				beginWork();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(794);
				commitWork();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(795);
				rollbackWork();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(796);
				savepointStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(797);
				rollbackStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(798);
				releaseStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(799);
				lockTables();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(800);
				unlockTables();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationStatementContext extends ParserRuleContext {
		public ChangeMasterContext changeMaster() {
			return getRuleContext(ChangeMasterContext.class,0);
		}
		public ChangeReplicationFilterContext changeReplicationFilter() {
			return getRuleContext(ChangeReplicationFilterContext.class,0);
		}
		public PurgeBinaryLogsContext purgeBinaryLogs() {
			return getRuleContext(PurgeBinaryLogsContext.class,0);
		}
		public ResetMasterContext resetMaster() {
			return getRuleContext(ResetMasterContext.class,0);
		}
		public ResetSlaveContext resetSlave() {
			return getRuleContext(ResetSlaveContext.class,0);
		}
		public StartSlaveContext startSlave() {
			return getRuleContext(StartSlaveContext.class,0);
		}
		public StopSlaveContext stopSlave() {
			return getRuleContext(StopSlaveContext.class,0);
		}
		public StartGroupReplicationContext startGroupReplication() {
			return getRuleContext(StartGroupReplicationContext.class,0);
		}
		public StopGroupReplicationContext stopGroupReplication() {
			return getRuleContext(StopGroupReplicationContext.class,0);
		}
		public XaStartTransactionContext xaStartTransaction() {
			return getRuleContext(XaStartTransactionContext.class,0);
		}
		public XaEndTransactionContext xaEndTransaction() {
			return getRuleContext(XaEndTransactionContext.class,0);
		}
		public XaPrepareStatementContext xaPrepareStatement() {
			return getRuleContext(XaPrepareStatementContext.class,0);
		}
		public XaCommitWorkContext xaCommitWork() {
			return getRuleContext(XaCommitWorkContext.class,0);
		}
		public XaRollbackWorkContext xaRollbackWork() {
			return getRuleContext(XaRollbackWorkContext.class,0);
		}
		public XaRecoverWorkContext xaRecoverWork() {
			return getRuleContext(XaRecoverWorkContext.class,0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReplicationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReplicationStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReplicationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationStatementContext replicationStatement() throws RecognitionException {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_replicationStatement);
		try {
			setState(818);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(803);
				changeMaster();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(804);
				changeReplicationFilter();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(805);
				purgeBinaryLogs();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(806);
				resetMaster();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(807);
				resetSlave();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(808);
				startSlave();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(809);
				stopSlave();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(810);
				startGroupReplication();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(811);
				stopGroupReplication();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(812);
				xaStartTransaction();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(813);
				xaEndTransaction();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(814);
				xaPrepareStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(815);
				xaCommitWork();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(816);
				xaRollbackWork();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(817);
				xaRecoverWork();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparedStatementContext extends ParserRuleContext {
		public PrepareStatementContext prepareStatement() {
			return getRuleContext(PrepareStatementContext.class,0);
		}
		public ExecuteStatementContext executeStatement() {
			return getRuleContext(ExecuteStatementContext.class,0);
		}
		public DeallocatePrepareContext deallocatePrepare() {
			return getRuleContext(DeallocatePrepareContext.class,0);
		}
		public PreparedStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparedStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPreparedStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPreparedStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPreparedStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparedStatementContext preparedStatement() throws RecognitionException {
		PreparedStatementContext _localctx = new PreparedStatementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_preparedStatement);
		try {
			setState(823);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PREPARE:
				enterOuterAlt(_localctx, 1);
				{
				setState(820);
				prepareStatement();
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(821);
				executeStatement();
				}
				break;
			case DROP:
			case DEALLOCATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(822);
				deallocatePrepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundStatementContext extends ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public CaseStatementContext caseStatement() {
			return getRuleContext(CaseStatementContext.class,0);
		}
		public IfStatementContext ifStatement() {
			return getRuleContext(IfStatementContext.class,0);
		}
		public LeaveStatementContext leaveStatement() {
			return getRuleContext(LeaveStatementContext.class,0);
		}
		public LoopStatementContext loopStatement() {
			return getRuleContext(LoopStatementContext.class,0);
		}
		public RepeatStatementContext repeatStatement() {
			return getRuleContext(RepeatStatementContext.class,0);
		}
		public WhileStatementContext whileStatement() {
			return getRuleContext(WhileStatementContext.class,0);
		}
		public IterateStatementContext iterateStatement() {
			return getRuleContext(IterateStatementContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public CursorStatementContext cursorStatement() {
			return getRuleContext(CursorStatementContext.class,0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCompoundStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCompoundStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCompoundStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompoundStatementContext compoundStatement() throws RecognitionException {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_compoundStatement);
		try {
			setState(835);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(825);
				blockStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(826);
				caseStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(827);
				ifStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(828);
				leaveStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(829);
				loopStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(830);
				repeatStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(831);
				whileStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(832);
				iterateStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(833);
				returnStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(834);
				cursorStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdministrationStatementContext extends ParserRuleContext {
		public AlterUserContext alterUser() {
			return getRuleContext(AlterUserContext.class,0);
		}
		public CreateUserContext createUser() {
			return getRuleContext(CreateUserContext.class,0);
		}
		public DropUserContext dropUser() {
			return getRuleContext(DropUserContext.class,0);
		}
		public GrantStatementContext grantStatement() {
			return getRuleContext(GrantStatementContext.class,0);
		}
		public GrantProxyContext grantProxy() {
			return getRuleContext(GrantProxyContext.class,0);
		}
		public RenameUserContext renameUser() {
			return getRuleContext(RenameUserContext.class,0);
		}
		public RevokeStatementContext revokeStatement() {
			return getRuleContext(RevokeStatementContext.class,0);
		}
		public RevokeProxyContext revokeProxy() {
			return getRuleContext(RevokeProxyContext.class,0);
		}
		public AnalyzeTableContext analyzeTable() {
			return getRuleContext(AnalyzeTableContext.class,0);
		}
		public CheckTableContext checkTable() {
			return getRuleContext(CheckTableContext.class,0);
		}
		public ChecksumTableContext checksumTable() {
			return getRuleContext(ChecksumTableContext.class,0);
		}
		public OptimizeTableContext optimizeTable() {
			return getRuleContext(OptimizeTableContext.class,0);
		}
		public RepairTableContext repairTable() {
			return getRuleContext(RepairTableContext.class,0);
		}
		public CreateUdfunctionContext createUdfunction() {
			return getRuleContext(CreateUdfunctionContext.class,0);
		}
		public InstallPluginContext installPlugin() {
			return getRuleContext(InstallPluginContext.class,0);
		}
		public UninstallPluginContext uninstallPlugin() {
			return getRuleContext(UninstallPluginContext.class,0);
		}
		public SetStatementContext setStatement() {
			return getRuleContext(SetStatementContext.class,0);
		}
		public ShowStatementContext showStatement() {
			return getRuleContext(ShowStatementContext.class,0);
		}
		public BinlogStatementContext binlogStatement() {
			return getRuleContext(BinlogStatementContext.class,0);
		}
		public CacheIndexStatementContext cacheIndexStatement() {
			return getRuleContext(CacheIndexStatementContext.class,0);
		}
		public FlushStatementContext flushStatement() {
			return getRuleContext(FlushStatementContext.class,0);
		}
		public KillStatementContext killStatement() {
			return getRuleContext(KillStatementContext.class,0);
		}
		public LoadIndexIntoCacheContext loadIndexIntoCache() {
			return getRuleContext(LoadIndexIntoCacheContext.class,0);
		}
		public ResetStatementContext resetStatement() {
			return getRuleContext(ResetStatementContext.class,0);
		}
		public ShutdownStatementContext shutdownStatement() {
			return getRuleContext(ShutdownStatementContext.class,0);
		}
		public AdministrationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_administrationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAdministrationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAdministrationStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAdministrationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AdministrationStatementContext administrationStatement() throws RecognitionException {
		AdministrationStatementContext _localctx = new AdministrationStatementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_administrationStatement);
		try {
			setState(862);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(837);
				alterUser();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(838);
				createUser();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(839);
				dropUser();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(840);
				grantStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(841);
				grantProxy();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(842);
				renameUser();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(843);
				revokeStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(844);
				revokeProxy();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(845);
				analyzeTable();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(846);
				checkTable();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(847);
				checksumTable();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(848);
				optimizeTable();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(849);
				repairTable();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(850);
				createUdfunction();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(851);
				installPlugin();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(852);
				uninstallPlugin();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(853);
				setStatement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(854);
				showStatement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(855);
				binlogStatement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(856);
				cacheIndexStatement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(857);
				flushStatement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(858);
				killStatement();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(859);
				loadIndexIntoCache();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(860);
				resetStatement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(861);
				shutdownStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UtilityStatementContext extends ParserRuleContext {
		public SimpleDescribeStatementContext simpleDescribeStatement() {
			return getRuleContext(SimpleDescribeStatementContext.class,0);
		}
		public FullDescribeStatementContext fullDescribeStatement() {
			return getRuleContext(FullDescribeStatementContext.class,0);
		}
		public HelpStatementContext helpStatement() {
			return getRuleContext(HelpStatementContext.class,0);
		}
		public UseStatementContext useStatement() {
			return getRuleContext(UseStatementContext.class,0);
		}
		public SignalStatementContext signalStatement() {
			return getRuleContext(SignalStatementContext.class,0);
		}
		public ResignalStatementContext resignalStatement() {
			return getRuleContext(ResignalStatementContext.class,0);
		}
		public DiagnosticsStatementContext diagnosticsStatement() {
			return getRuleContext(DiagnosticsStatementContext.class,0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utilityStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUtilityStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUtilityStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUtilityStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UtilityStatementContext utilityStatement() throws RecognitionException {
		UtilityStatementContext _localctx = new UtilityStatementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_utilityStatement);
		try {
			setState(871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(864);
				simpleDescribeStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(865);
				fullDescribeStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(866);
				helpStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(867);
				useStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(868);
				signalStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(869);
				resignalStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(870);
				diagnosticsStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_createDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(873);
			match(CREATE);
			setState(874);
			((CreateDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((CreateDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(876);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(875);
				ifNotExists();
				}
			}

			setState(878);
			uid();
			setState(882);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==READ || _la==CHAR || _la==ENCRYPTION || _la==CHARSET) {
				{
				{
				setState(879);
				createDatabaseOption();
				}
				}
				setState(884);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateEventContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return getRuleContext(ScheduleExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateEventContext createEvent() throws RecognitionException {
		CreateEventContext _localctx = new CreateEventContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_createEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(885);
			match(CREATE);
			setState(887);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(886);
				ownerStatement();
				}
			}

			setState(889);
			match(EVENT);
			setState(891);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(890);
				ifNotExists();
				}
			}

			setState(893);
			fullId();
			setState(894);
			match(ON);
			setState(895);
			match(SCHEDULE);
			setState(896);
			scheduleExpression();
			setState(903);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(897);
				match(ON);
				setState(898);
				match(COMPLETION);
				setState(900);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(899);
					match(NOT);
					}
				}

				setState(902);
				match(PRESERVE);
				}
			}

			setState(906);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(905);
				enableType();
				}
			}

			setState(910);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(908);
				match(COMMENT);
				setState(909);
				match(STRING_LITERAL);
				}
			}

			setState(912);
			match(DO);
			setState(913);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token indexCategory;
		public Token algType;
		public Token lockType;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public WaitNowaitClauseContext waitNowaitClause() {
			return getRuleContext(WaitNowaitClauseContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(MySqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(MySqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(MySqlParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(MySqlParser.LOCK, i);
		}
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(MySqlParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(MySqlParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(MySqlParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(MySqlParser.COPY, i);
		}
		public List<TerminalNode> NOCOPY() { return getTokens(MySqlParser.NOCOPY); }
		public TerminalNode NOCOPY(int i) {
			return getToken(MySqlParser.NOCOPY, i);
		}
		public List<TerminalNode> INSTANT() { return getTokens(MySqlParser.INSTANT); }
		public TerminalNode INSTANT(int i) {
			return getToken(MySqlParser.INSTANT, i);
		}
		public List<TerminalNode> NONE() { return getTokens(MySqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(MySqlParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(MySqlParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(MySqlParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(MySqlParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(MySqlParser.EXCLUSIVE, i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_createIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(915);
			match(CREATE);
			setState(918);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(916);
				match(OR);
				setState(917);
				match(REPLACE);
				}
			}

			setState(921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(920);
				((CreateIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((CreateIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(924);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) {
				{
				setState(923);
				((CreateIndexContext)_localctx).indexCategory = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) ) {
					((CreateIndexContext)_localctx).indexCategory = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(926);
			match(INDEX);
			setState(930);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(927);
				match(IF);
				setState(928);
				match(NOT);
				setState(929);
				match(EXISTS);
				}
			}

			setState(932);
			uid();
			setState(934);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(933);
				indexType();
				}
			}

			setState(936);
			match(ON);
			setState(937);
			tableName();
			setState(938);
			indexColumnNames();
			setState(940);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(939);
				waitNowaitClause();
				}
			}

			setState(945);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
				{
				{
				setState(942);
				indexOption();
				}
				}
				setState(947);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(960);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,36,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(958);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALGORITHM:
						{
						setState(948);
						match(ALGORITHM);
						setState(950);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(949);
							match(EQUAL_SYMBOL);
							}
						}

						setState(952);
						((CreateIndexContext)_localctx).algType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE || _la==INSTANT || _la==NOCOPY) ) {
							((CreateIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LOCK:
						{
						setState(953);
						match(LOCK);
						setState(955);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(954);
							match(EQUAL_SYMBOL);
							}
						}

						setState(957);
						((CreateIndexContext)_localctx).lockType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							((CreateIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(962);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,36,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLogfileGroupContext extends ParserRuleContext {
		public Token undoFile;
		public FileSizeLiteralContext initSize;
		public FileSizeLiteralContext undoSize;
		public FileSizeLiteralContext redoSize;
		public Token comment;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public List<FileSizeLiteralContext> fileSizeLiteral() {
			return getRuleContexts(FileSizeLiteralContext.class);
		}
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return getRuleContext(FileSizeLiteralContext.class,i);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLogfileGroupContext createLogfileGroup() throws RecognitionException {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_createLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(963);
			match(CREATE);
			setState(964);
			match(LOGFILE);
			setState(965);
			match(GROUP);
			setState(966);
			uid();
			setState(967);
			match(ADD);
			setState(968);
			match(UNDOFILE);
			setState(969);
			((CreateLogfileGroupContext)_localctx).undoFile = match(STRING_LITERAL);
			setState(975);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(970);
				match(INITIAL_SIZE);
				setState(972);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(971);
					match(EQUAL_SYMBOL);
					}
				}

				setState(974);
				((CreateLogfileGroupContext)_localctx).initSize = fileSizeLiteral();
				}
			}

			setState(982);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNDO_BUFFER_SIZE) {
				{
				setState(977);
				match(UNDO_BUFFER_SIZE);
				setState(979);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(978);
					match(EQUAL_SYMBOL);
					}
				}

				setState(981);
				((CreateLogfileGroupContext)_localctx).undoSize = fileSizeLiteral();
				}
			}

			setState(989);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REDO_BUFFER_SIZE) {
				{
				setState(984);
				match(REDO_BUFFER_SIZE);
				setState(986);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(985);
					match(EQUAL_SYMBOL);
					}
				}

				setState(988);
				((CreateLogfileGroupContext)_localctx).redoSize = fileSizeLiteral();
				}
			}

			setState(996);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(991);
				match(NODEGROUP);
				setState(993);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(992);
					match(EQUAL_SYMBOL);
					}
				}

				setState(995);
				uid();
				}
			}

			setState(999);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(998);
				match(WAIT);
				}
			}

			setState(1006);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(1001);
				match(COMMENT);
				setState(1003);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1002);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1005);
				((CreateLogfileGroupContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(1008);
			match(ENGINE);
			setState(1010);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(1009);
				match(EQUAL_SYMBOL);
				}
			}

			setState(1012);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<ProcedureParameterContext> procedureParameter() {
			return getRuleContexts(ProcedureParameterContext.class);
		}
		public ProcedureParameterContext procedureParameter(int i) {
			return getRuleContext(ProcedureParameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateProcedureContext createProcedure() throws RecognitionException {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1014);
			match(CREATE);
			setState(1016);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1015);
				ownerStatement();
				}
			}

			setState(1018);
			match(PROCEDURE);
			setState(1019);
			fullId();
			setState(1020);
			match(LR_BRACKET);
			setState(1022);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (IN - 70)) | (1L << (INOUT - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)) | (1L << (OUT - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
				{
				setState(1021);
				procedureParameter();
				}
			}

			setState(1028);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1024);
				match(COMMA);
				setState(1025);
				procedureParameter();
				}
				}
				setState(1030);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1031);
			match(RR_BRACKET);
			setState(1035);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1032);
					routineOption();
					}
					} 
				}
				setState(1037);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
			}
			setState(1038);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<FunctionParameterContext> functionParameter() {
			return getRuleContexts(FunctionParameterContext.class);
		}
		public FunctionParameterContext functionParameter(int i) {
			return getRuleContext(FunctionParameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionContext createFunction() throws RecognitionException {
		CreateFunctionContext _localctx = new CreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_createFunction);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1040);
			match(CREATE);
			setState(1042);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1041);
				ownerStatement();
				}
			}

			setState(1044);
			match(FUNCTION);
			setState(1045);
			fullId();
			setState(1046);
			match(LR_BRACKET);
			setState(1048);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
				{
				setState(1047);
				functionParameter();
				}
			}

			setState(1054);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1050);
				match(COMMA);
				setState(1051);
				functionParameter();
				}
				}
				setState(1056);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1057);
			match(RR_BRACKET);
			setState(1058);
			match(RETURNS);
			setState(1059);
			dataType();
			setState(1063);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,56,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1060);
					routineOption();
					}
					} 
				}
				setState(1065);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,56,_ctx);
			}
			setState(1068);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case ANALYZE:
			case BUCKETS:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case CURRENT:
			case DATABASE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DIAGNOSTICS:
			case DROP:
			case EXCEPT:
			case EXPLAIN:
			case GET:
			case GRANT:
			case GROUP:
			case IGNORED:
			case INSERT:
			case KILL:
			case LEFT:
			case LOAD:
			case LOCK:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIMIZE:
			case OPTIONAL:
			case ORDER:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case RIGHT:
			case SCHEMA:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case SKIP_:
			case STACKED:
			case UNLOCK:
			case UPDATE:
			case USE:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case LR_BRACKET:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				{
				setState(1066);
				routineBody();
				}
				break;
			case RETURN:
				{
				setState(1067);
				returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateRoleContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public List<RoleNameContext> roleName() {
			return getRuleContexts(RoleNameContext.class);
		}
		public RoleNameContext roleName(int i) {
			return getRuleContext(RoleNameContext.class,i);
		}
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CreateRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateRoleContext createRole() throws RecognitionException {
		CreateRoleContext _localctx = new CreateRoleContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_createRole);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1070);
			match(CREATE);
			setState(1071);
			match(ROLE);
			setState(1075);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1072);
				match(IF);
				setState(1073);
				match(NOT);
				setState(1074);
				match(EXISTS);
				}
			}

			setState(1077);
			roleName();
			setState(1082);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1078);
				match(COMMA);
				setState(1079);
				roleName();
				}
				}
				setState(1084);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateServerContext extends ParserRuleContext {
		public Token wrapperName;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(MySqlParser.WRAPPER, 0); }
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateServerContext createServer() throws RecognitionException {
		CreateServerContext _localctx = new CreateServerContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_createServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1085);
			match(CREATE);
			setState(1086);
			match(SERVER);
			setState(1087);
			uid();
			setState(1088);
			match(FOREIGN);
			setState(1089);
			match(DATA);
			setState(1090);
			match(WRAPPER);
			setState(1091);
			((CreateServerContext)_localctx).wrapperName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==MYSQL || _la==STRING_LITERAL) ) {
				((CreateServerContext)_localctx).wrapperName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1092);
			match(OPTIONS);
			setState(1093);
			match(LR_BRACKET);
			setState(1094);
			serverOption();
			setState(1099);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1095);
				match(COMMA);
				setState(1096);
				serverOption();
				}
				}
				setState(1101);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1102);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableContext extends ParserRuleContext {
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
	 
		public CreateTableContext() { }
		public void copyFrom(CreateTableContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CopyCreateTableContext extends CreateTableContext {
		public TableNameContext parenthesisTable;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CopyCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCopyCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCopyCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCopyCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ColumnCreateTableContext extends CreateTableContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ColumnCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColumnCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class QueryCreateTableContext extends CreateTableContext {
		public Token keyViolate;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public List<TerminalNode> REPLACE() { return getTokens(MySqlParser.REPLACE); }
		public TerminalNode REPLACE(int i) {
			return getToken(MySqlParser.REPLACE, i);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public QueryCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQueryCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQueryCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQueryCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_createTable);
		int _la;
		try {
			int _alt;
			setState(1194);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
			case 1:
				_localctx = new CopyCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1104);
				match(CREATE);
				setState(1107);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1105);
					match(OR);
					setState(1106);
					match(REPLACE);
					}
				}

				setState(1110);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1109);
					match(TEMPORARY);
					}
				}

				setState(1112);
				match(TABLE);
				setState(1114);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1113);
					ifNotExists();
					}
				}

				setState(1116);
				tableName();
				setState(1124);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LIKE:
					{
					setState(1117);
					match(LIKE);
					setState(1118);
					tableName();
					}
					break;
				case LR_BRACKET:
					{
					setState(1119);
					match(LR_BRACKET);
					setState(1120);
					match(LIKE);
					setState(1121);
					((CopyCreateTableContext)_localctx).parenthesisTable = tableName();
					setState(1122);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new QueryCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1126);
				match(CREATE);
				setState(1129);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1127);
					match(OR);
					setState(1128);
					match(REPLACE);
					}
				}

				setState(1132);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1131);
					match(TEMPORARY);
					}
				}

				setState(1134);
				match(TABLE);
				setState(1136);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1135);
					ifNotExists();
					}
				}

				setState(1138);
				tableName();
				setState(1140);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
				case 1:
					{
					setState(1139);
					createDefinitions();
					}
					break;
				}
				setState(1152);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (CHARACTER - 24)) | (1L << (COLLATE - 24)) | (1L << (DEFAULT - 24)) | (1L << (INDEX - 24)))) != 0) || _la==UNION || _la==CHAR || ((((_la - 332)) & ~0x3f) == 0 && ((1L << (_la - 332)) & ((1L << (AUTOEXTEND_SIZE - 332)) | (1L << (AUTO_INCREMENT - 332)) | (1L << (AVG_ROW_LENGTH - 332)) | (1L << (CHECKSUM - 332)) | (1L << (PAGE_CHECKSUM - 332)) | (1L << (COMMENT - 332)) | (1L << (COMPRESSION - 332)) | (1L << (CONNECTION - 332)) | (1L << (DATA - 332)) | (1L << (DELAY_KEY_WRITE - 332)) | (1L << (ENCRYPTION - 332)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (ENGINE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (KEY_BLOCK_SIZE - 398)))) != 0) || ((((_la - 487)) & ~0x3f) == 0 && ((1L << (_la - 487)) & ((1L << (MAX_ROWS - 487)) | (1L << (MIN_ROWS - 487)) | (1L << (PACK_KEYS - 487)) | (1L << (PASSWORD - 487)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (ROW_FORMAT - 585)) | (1L << (START - 585)) | (1L << (STATS_AUTO_RECALC - 585)) | (1L << (STATS_PERSISTENT - 585)) | (1L << (STATS_SAMPLE_PAGES - 585)) | (1L << (STORAGE - 585)) | (1L << (TABLESPACE - 585)) | (1L << (TABLE_TYPE - 585)))) != 0) || _la==CHARSET || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					setState(1142);
					tableOption();
					setState(1149);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (CHARACTER - 24)) | (1L << (COLLATE - 24)) | (1L << (DEFAULT - 24)) | (1L << (INDEX - 24)))) != 0) || _la==UNION || _la==CHAR || ((((_la - 332)) & ~0x3f) == 0 && ((1L << (_la - 332)) & ((1L << (AUTOEXTEND_SIZE - 332)) | (1L << (AUTO_INCREMENT - 332)) | (1L << (AVG_ROW_LENGTH - 332)) | (1L << (CHECKSUM - 332)) | (1L << (PAGE_CHECKSUM - 332)) | (1L << (COMMENT - 332)) | (1L << (COMPRESSION - 332)) | (1L << (CONNECTION - 332)) | (1L << (DATA - 332)) | (1L << (DELAY_KEY_WRITE - 332)) | (1L << (ENCRYPTION - 332)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (ENGINE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (KEY_BLOCK_SIZE - 398)))) != 0) || ((((_la - 487)) & ~0x3f) == 0 && ((1L << (_la - 487)) & ((1L << (MAX_ROWS - 487)) | (1L << (MIN_ROWS - 487)) | (1L << (PACK_KEYS - 487)) | (1L << (PASSWORD - 487)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (ROW_FORMAT - 585)) | (1L << (START - 585)) | (1L << (STATS_AUTO_RECALC - 585)) | (1L << (STATS_PERSISTENT - 585)) | (1L << (STATS_SAMPLE_PAGES - 585)) | (1L << (STORAGE - 585)) | (1L << (TABLESPACE - 585)) | (1L << (TABLE_TYPE - 585)))) != 0) || _la==CHARSET || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE || _la==COMMA) {
						{
						{
						setState(1144);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1143);
							match(COMMA);
							}
						}

						setState(1146);
						tableOption();
						}
						}
						setState(1151);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1155);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1154);
					partitionDefinitions();
					}
				}

				setState(1158);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==REPLACE) {
					{
					setState(1157);
					((QueryCreateTableContext)_localctx).keyViolate = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IGNORE || _la==REPLACE) ) {
						((QueryCreateTableContext)_localctx).keyViolate = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1161);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1160);
					match(AS);
					}
				}

				setState(1163);
				selectStatement();
				}
				break;
			case 3:
				_localctx = new ColumnCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1165);
				match(CREATE);
				setState(1168);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1166);
					match(OR);
					setState(1167);
					match(REPLACE);
					}
				}

				setState(1171);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1170);
					match(TEMPORARY);
					}
				}

				setState(1173);
				match(TABLE);
				setState(1175);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1174);
					ifNotExists();
					}
				}

				setState(1177);
				tableName();
				setState(1178);
				createDefinitions();
				setState(1189);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
				case 1:
					{
					setState(1179);
					tableOption();
					setState(1186);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,79,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1181);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(1180);
								match(COMMA);
								}
							}

							setState(1183);
							tableOption();
							}
							} 
						}
						setState(1188);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,79,_ctx);
					}
					}
					break;
				}
				setState(1192);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1191);
					partitionDefinitions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceInnodbContext extends ParserRuleContext {
		public Token datafile;
		public FileSizeLiteralContext fileBlockSize;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public CreateTablespaceInnodbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceInnodb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateTablespaceInnodb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateTablespaceInnodb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateTablespaceInnodb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceInnodbContext createTablespaceInnodb() throws RecognitionException {
		CreateTablespaceInnodbContext _localctx = new CreateTablespaceInnodbContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_createTablespaceInnodb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1196);
			match(CREATE);
			setState(1197);
			match(TABLESPACE);
			setState(1198);
			uid();
			setState(1199);
			match(ADD);
			setState(1200);
			match(DATAFILE);
			setState(1201);
			((CreateTablespaceInnodbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1205);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILE_BLOCK_SIZE) {
				{
				setState(1202);
				match(FILE_BLOCK_SIZE);
				setState(1203);
				match(EQUAL_SYMBOL);
				setState(1204);
				((CreateTablespaceInnodbContext)_localctx).fileBlockSize = fileSizeLiteral();
				}
			}

			setState(1212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(1207);
				match(ENGINE);
				setState(1209);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1208);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1211);
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceNdbContext extends ParserRuleContext {
		public Token datafile;
		public FileSizeLiteralContext extentSize;
		public FileSizeLiteralContext initialSize;
		public FileSizeLiteralContext autoextendSize;
		public FileSizeLiteralContext maxSize;
		public Token comment;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode EXTENT_SIZE() { return getToken(MySqlParser.EXTENT_SIZE, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode MAX_SIZE() { return getToken(MySqlParser.MAX_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public List<FileSizeLiteralContext> fileSizeLiteral() {
			return getRuleContexts(FileSizeLiteralContext.class);
		}
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return getRuleContext(FileSizeLiteralContext.class,i);
		}
		public CreateTablespaceNdbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceNdb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateTablespaceNdb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateTablespaceNdb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateTablespaceNdb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceNdbContext createTablespaceNdb() throws RecognitionException {
		CreateTablespaceNdbContext _localctx = new CreateTablespaceNdbContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_createTablespaceNdb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1214);
			match(CREATE);
			setState(1215);
			match(TABLESPACE);
			setState(1216);
			uid();
			setState(1217);
			match(ADD);
			setState(1218);
			match(DATAFILE);
			setState(1219);
			((CreateTablespaceNdbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1220);
			match(USE);
			setState(1221);
			match(LOGFILE);
			setState(1222);
			match(GROUP);
			setState(1223);
			uid();
			setState(1229);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENT_SIZE) {
				{
				setState(1224);
				match(EXTENT_SIZE);
				setState(1226);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1225);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1228);
				((CreateTablespaceNdbContext)_localctx).extentSize = fileSizeLiteral();
				}
			}

			setState(1236);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(1231);
				match(INITIAL_SIZE);
				setState(1233);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1232);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1235);
				((CreateTablespaceNdbContext)_localctx).initialSize = fileSizeLiteral();
				}
			}

			setState(1243);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOEXTEND_SIZE) {
				{
				setState(1238);
				match(AUTOEXTEND_SIZE);
				setState(1240);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1239);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1242);
				((CreateTablespaceNdbContext)_localctx).autoextendSize = fileSizeLiteral();
				}
			}

			setState(1250);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_SIZE) {
				{
				setState(1245);
				match(MAX_SIZE);
				setState(1247);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1246);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1249);
				((CreateTablespaceNdbContext)_localctx).maxSize = fileSizeLiteral();
				}
			}

			setState(1257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(1252);
				match(NODEGROUP);
				setState(1254);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1253);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1256);
				uid();
				}
			}

			setState(1260);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(1259);
				match(WAIT);
				}
			}

			setState(1267);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(1262);
				match(COMMENT);
				setState(1264);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1263);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1266);
				((CreateTablespaceNdbContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(1269);
			match(ENGINE);
			setState(1271);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(1270);
				match(EQUAL_SYMBOL);
				}
			}

			setState(1273);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTriggerContext extends ParserRuleContext {
		public FullIdContext thisTrigger;
		public Token triggerTime;
		public Token triggerEvent;
		public Token triggerPlace;
		public FullIdContext otherTrigger;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(MySqlParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public TerminalNode BEFORE() { return getToken(MySqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode FOLLOWS() { return getToken(MySqlParser.FOLLOWS, 0); }
		public TerminalNode PRECEDES() { return getToken(MySqlParser.PRECEDES, 0); }
		public CreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTriggerContext createTrigger() throws RecognitionException {
		CreateTriggerContext _localctx = new CreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_createTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1275);
			match(CREATE);
			setState(1278);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1276);
				match(OR);
				setState(1277);
				match(REPLACE);
				}
			}

			setState(1281);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1280);
				ownerStatement();
				}
			}

			setState(1283);
			match(TRIGGER);
			setState(1284);
			((CreateTriggerContext)_localctx).thisTrigger = fullId();
			setState(1285);
			((CreateTriggerContext)_localctx).triggerTime = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEFORE || _la==AFTER) ) {
				((CreateTriggerContext)_localctx).triggerTime = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1286);
			((CreateTriggerContext)_localctx).triggerEvent = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
				((CreateTriggerContext)_localctx).triggerEvent = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1287);
			match(ON);
			setState(1288);
			tableName();
			setState(1289);
			match(FOR);
			setState(1290);
			match(EACH);
			setState(1291);
			match(ROW);
			setState(1294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
			case 1:
				{
				setState(1292);
				((CreateTriggerContext)_localctx).triggerPlace = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWS || _la==PRECEDES) ) {
					((CreateTriggerContext)_localctx).triggerPlace = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1293);
				((CreateTriggerContext)_localctx).otherTrigger = fullId();
				}
				break;
			}
			setState(1296);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public CommonTableExpressionsContext commonTableExpressions() {
			return getRuleContext(CommonTableExpressionsContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(MySqlParser.RECURSIVE, 0); }
		public WithClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWithClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWithClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWithClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithClauseContext withClause() throws RecognitionException {
		WithClauseContext _localctx = new WithClauseContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_withClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1298);
			match(WITH);
			setState(1300);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
			case 1:
				{
				setState(1299);
				match(RECURSIVE);
				}
				break;
			}
			setState(1302);
			commonTableExpressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommonTableExpressionsContext extends ParserRuleContext {
		public CteNameContext cteName() {
			return getRuleContext(CteNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public DmlStatementContext dmlStatement() {
			return getRuleContext(DmlStatementContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<CteColumnNameContext> cteColumnName() {
			return getRuleContexts(CteColumnNameContext.class);
		}
		public CteColumnNameContext cteColumnName(int i) {
			return getRuleContext(CteColumnNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CommonTableExpressionsContext commonTableExpressions() {
			return getRuleContext(CommonTableExpressionsContext.class,0);
		}
		public CommonTableExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonTableExpressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCommonTableExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCommonTableExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCommonTableExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonTableExpressionsContext commonTableExpressions() throws RecognitionException {
		CommonTableExpressionsContext _localctx = new CommonTableExpressionsContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_commonTableExpressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1304);
			cteName();
			setState(1316);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(1305);
				match(LR_BRACKET);
				setState(1306);
				cteColumnName();
				setState(1311);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1307);
					match(COMMA);
					setState(1308);
					cteColumnName();
					}
					}
					setState(1313);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1314);
				match(RR_BRACKET);
				}
			}

			setState(1318);
			match(AS);
			setState(1319);
			match(LR_BRACKET);
			setState(1320);
			dmlStatement();
			setState(1321);
			match(RR_BRACKET);
			setState(1324);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1322);
				match(COMMA);
				setState(1323);
				commonTableExpressions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CteNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CteNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cteName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCteName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCteName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCteName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CteNameContext cteName() throws RecognitionException {
		CteNameContext _localctx = new CteNameContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_cteName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1326);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CteColumnNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CteColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cteColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCteColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCteColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCteColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CteColumnNameContext cteColumnName() throws RecognitionException {
		CteColumnNameContext _localctx = new CteColumnNameContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_cteColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1328);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOption;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public CreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateViewContext createView() throws RecognitionException {
		CreateViewContext _localctx = new CreateViewContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_createView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1330);
			match(CREATE);
			setState(1333);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1331);
				match(OR);
				setState(1332);
				match(REPLACE);
				}
			}

			setState(1338);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(1335);
				match(ALGORITHM);
				setState(1336);
				match(EQUAL_SYMBOL);
				setState(1337);
				((CreateViewContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((CreateViewContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1341);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1340);
				ownerStatement();
				}
			}

			setState(1346);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(1343);
				match(SQL);
				setState(1344);
				match(SECURITY);
				setState(1345);
				((CreateViewContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((CreateViewContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1348);
			match(VIEW);
			setState(1349);
			fullId();
			setState(1354);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(1350);
				match(LR_BRACKET);
				setState(1351);
				uidList();
				setState(1352);
				match(RR_BRACKET);
				}
			}

			setState(1356);
			match(AS);
			setState(1358);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1357);
				withClause();
				}
			}

			setState(1360);
			selectStatement();
			setState(1367);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1361);
				match(WITH);
				setState(1363);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(1362);
					((CreateViewContext)_localctx).checkOption = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((CreateViewContext)_localctx).checkOption = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1365);
				match(CHECK);
				setState(1366);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSequenceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(MySqlParser.SEQUENCE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<SequenceSpecContext> sequenceSpec() {
			return getRuleContexts(SequenceSpecContext.class);
		}
		public SequenceSpecContext sequenceSpec(int i) {
			return getRuleContext(SequenceSpecContext.class,i);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public CreateSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateSequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateSequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSequenceContext createSequence() throws RecognitionException {
		CreateSequenceContext _localctx = new CreateSequenceContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_createSequence);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1369);
			match(CREATE);
			setState(1372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1370);
				match(OR);
				setState(1371);
				match(REPLACE);
				}
			}

			setState(1375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(1374);
				match(TEMPORARY);
				}
			}

			setState(1377);
			match(SEQUENCE);
			setState(1379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1378);
				ifNotExists();
				}
			}

			setState(1381);
			fullId();
			setState(1386);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,119,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(1384);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
					case 1:
						{
						setState(1382);
						sequenceSpec();
						}
						break;
					case 2:
						{
						setState(1383);
						tableOption();
						}
						break;
					}
					} 
				}
				setState(1388);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,119,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceSpecContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(MySqlParser.INCREMENT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode MINVALUE() { return getToken(MySqlParser.MINVALUE, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode NOMINVALUE() { return getToken(MySqlParser.NOMINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(MySqlParser.MAXVALUE, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(MySqlParser.NOMAXVALUE, 0); }
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(MySqlParser.NOCACHE, 0); }
		public TerminalNode CYCLE() { return getToken(MySqlParser.CYCLE, 0); }
		public TerminalNode NOCYCLE() { return getToken(MySqlParser.NOCYCLE, 0); }
		public TerminalNode RESTART() { return getToken(MySqlParser.RESTART, 0); }
		public SequenceSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSequenceSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSequenceSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSequenceSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceSpecContext sequenceSpec() throws RecognitionException {
		SequenceSpecContext _localctx = new SequenceSpecContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_sequenceSpec);
		int _la;
		try {
			setState(1428);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1389);
				match(INCREMENT);
				setState(1391);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY || _la==EQUAL_SYMBOL) {
					{
					setState(1390);
					_la = _input.LA(1);
					if ( !(_la==BY || _la==EQUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1393);
				decimalLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1394);
				match(MINVALUE);
				setState(1396);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1395);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1398);
				decimalLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1399);
				match(NO);
				setState(1400);
				match(MINVALUE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1401);
				match(NOMINVALUE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1402);
				match(MAXVALUE);
				setState(1404);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1403);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1406);
				decimalLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1407);
				match(NO);
				setState(1408);
				match(MAXVALUE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1409);
				match(NOMAXVALUE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1410);
				match(START);
				setState(1412);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==EQUAL_SYMBOL) {
					{
					setState(1411);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==EQUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1414);
				decimalLiteral();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1415);
				match(CACHE);
				setState(1417);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1416);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1419);
				decimalLiteral();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1420);
				match(NOCACHE);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1421);
				match(CYCLE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1422);
				match(NOCYCLE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1423);
				match(RESTART);
				setState(1425);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==EQUAL_SYMBOL) {
					{
					setState(1424);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==EQUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1427);
				decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseOptionContext extends ParserRuleContext {
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode ENCRYPTION() { return getToken(MySqlParser.ENCRYPTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateDatabaseOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateDatabaseOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateDatabaseOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseOptionContext createDatabaseOption() throws RecognitionException {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_createDatabaseOption);
		int _la;
		try {
			setState(1463);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1431);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1430);
					match(DEFAULT);
					}
				}

				setState(1433);
				charSet();
				setState(1435);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1434);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1439);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(1437);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(1438);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1442);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1441);
					match(DEFAULT);
					}
				}

				setState(1444);
				match(COLLATE);
				setState(1446);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1445);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1448);
				collationName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1450);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1449);
					match(DEFAULT);
					}
				}

				setState(1452);
				match(ENCRYPTION);
				setState(1454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1453);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1456);
				match(STRING_LITERAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1457);
				match(READ);
				setState(1458);
				match(ONLY);
				setState(1460);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1459);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1462);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharSetContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public CharSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharSetContext charSet() throws RecognitionException {
		CharSetContext _localctx = new CharSetContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_charSet);
		try {
			setState(1470);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARACTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1465);
				match(CHARACTER);
				setState(1466);
				match(SET);
				}
				break;
			case CHARSET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1467);
				match(CHARSET);
				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(1468);
				match(CHAR);
				setState(1469);
				match(SET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OwnerStatementContext extends ParserRuleContext {
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(MySqlParser.CURRENT_USER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public OwnerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ownerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOwnerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOwnerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOwnerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OwnerStatementContext ownerStatement() throws RecognitionException {
		OwnerStatementContext _localctx = new OwnerStatementContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_ownerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1472);
			match(DEFINER);
			setState(1473);
			match(EQUAL_SYMBOL);
			setState(1480);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BUCKETS:
			case CURRENT:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case SKIP_:
			case STACKED:
			case SERIAL:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case MEMORY:
			case CATALOG_NAME:
			case ENGINE_ATTRIBUTE:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SCHEMA_NAME:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case STRING_LITERAL:
			case ID:
			case STRING_USER_NAME:
			case STRING_USER_NAME_MARIADB:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				{
				setState(1474);
				userName();
				}
				break;
			case CURRENT_USER:
				{
				setState(1475);
				match(CURRENT_USER);
				setState(1478);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1476);
					match(LR_BRACKET);
					setState(1477);
					match(RR_BRACKET);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScheduleExpressionContext extends ParserRuleContext {
		public ScheduleExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scheduleExpression; }
	 
		public ScheduleExpressionContext() { }
		public void copyFrom(ScheduleExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PreciseScheduleContext extends ScheduleExpressionContext {
		public TerminalNode AT() { return getToken(MySqlParser.AT, 0); }
		public TimestampValueContext timestampValue() {
			return getRuleContext(TimestampValueContext.class,0);
		}
		public List<IntervalExprContext> intervalExpr() {
			return getRuleContexts(IntervalExprContext.class);
		}
		public IntervalExprContext intervalExpr(int i) {
			return getRuleContext(IntervalExprContext.class,i);
		}
		public PreciseScheduleContext(ScheduleExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPreciseSchedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPreciseSchedule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPreciseSchedule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalScheduleContext extends ScheduleExpressionContext {
		public TimestampValueContext startTimestamp;
		public IntervalExprContext intervalExpr;
		public List<IntervalExprContext> startIntervals = new ArrayList<IntervalExprContext>();
		public TimestampValueContext endTimestamp;
		public List<IntervalExprContext> endIntervals = new ArrayList<IntervalExprContext>();
		public TerminalNode EVERY() { return getToken(MySqlParser.EVERY, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode STARTS() { return getToken(MySqlParser.STARTS, 0); }
		public TerminalNode ENDS() { return getToken(MySqlParser.ENDS, 0); }
		public List<TimestampValueContext> timestampValue() {
			return getRuleContexts(TimestampValueContext.class);
		}
		public TimestampValueContext timestampValue(int i) {
			return getRuleContext(TimestampValueContext.class,i);
		}
		public List<IntervalExprContext> intervalExpr() {
			return getRuleContexts(IntervalExprContext.class);
		}
		public IntervalExprContext intervalExpr(int i) {
			return getRuleContext(IntervalExprContext.class,i);
		}
		public IntervalScheduleContext(ScheduleExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalSchedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalSchedule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalSchedule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScheduleExpressionContext scheduleExpression() throws RecognitionException {
		ScheduleExpressionContext _localctx = new ScheduleExpressionContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_scheduleExpression);
		int _la;
		try {
			setState(1516);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT:
				_localctx = new PreciseScheduleContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1482);
				match(AT);
				setState(1483);
				timestampValue();
				setState(1487);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==PLUS) {
					{
					{
					setState(1484);
					intervalExpr();
					}
					}
					setState(1489);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case EVERY:
				_localctx = new IntervalScheduleContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1490);
				match(EVERY);
				setState(1493);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
				case 1:
					{
					setState(1491);
					decimalLiteral();
					}
					break;
				case 2:
					{
					setState(1492);
					expression(0);
					}
					break;
				}
				setState(1495);
				intervalType();
				setState(1504);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STARTS) {
					{
					setState(1496);
					match(STARTS);
					setState(1497);
					((IntervalScheduleContext)_localctx).startTimestamp = timestampValue();
					setState(1501);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS) {
						{
						{
						setState(1498);
						((IntervalScheduleContext)_localctx).intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx).startIntervals.add(((IntervalScheduleContext)_localctx).intervalExpr);
						}
						}
						setState(1503);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENDS) {
					{
					setState(1506);
					match(ENDS);
					setState(1507);
					((IntervalScheduleContext)_localctx).endTimestamp = timestampValue();
					setState(1511);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS) {
						{
						{
						setState(1508);
						((IntervalScheduleContext)_localctx).intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx).endIntervals.add(((IntervalScheduleContext)_localctx).intervalExpr);
						}
						}
						setState(1513);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimestampValueContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TimestampValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestampValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTimestampValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTimestampValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTimestampValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimestampValueContext timestampValue() throws RecognitionException {
		TimestampValueContext _localctx = new TimestampValueContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_timestampValue);
		try {
			setState(1522);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1518);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1519);
				stringLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1520);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1521);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalExprContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(MySqlParser.PLUS, 0); }
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalExprContext intervalExpr() throws RecognitionException {
		IntervalExprContext _localctx = new IntervalExprContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_intervalExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1524);
			match(PLUS);
			setState(1525);
			match(INTERVAL);
			setState(1528);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
			case 1:
				{
				setState(1526);
				decimalLiteral();
				}
				break;
			case 2:
				{
				setState(1527);
				expression(0);
				}
				break;
			}
			setState(1530);
			intervalType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeContext extends ParserRuleContext {
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(MySqlParser.YEAR_MONTH, 0); }
		public TerminalNode DAY_HOUR() { return getToken(MySqlParser.DAY_HOUR, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(MySqlParser.DAY_MINUTE, 0); }
		public TerminalNode DAY_SECOND() { return getToken(MySqlParser.DAY_SECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(MySqlParser.HOUR_MINUTE, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(MySqlParser.HOUR_SECOND, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(MySqlParser.MINUTE_SECOND, 0); }
		public TerminalNode SECOND_MICROSECOND() { return getToken(MySqlParser.SECOND_MICROSECOND, 0); }
		public TerminalNode MINUTE_MICROSECOND() { return getToken(MySqlParser.MINUTE_MICROSECOND, 0); }
		public TerminalNode HOUR_MICROSECOND() { return getToken(MySqlParser.HOUR_MICROSECOND, 0); }
		public TerminalNode DAY_MICROSECOND() { return getToken(MySqlParser.DAY_MICROSECOND, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeContext intervalType() throws RecognitionException {
		IntervalTypeContext _localctx = new IntervalTypeContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_intervalType);
		try {
			setState(1545);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				enterOuterAlt(_localctx, 1);
				{
				setState(1532);
				intervalTypeBase();
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(1533);
				match(YEAR);
				}
				break;
			case YEAR_MONTH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1534);
				match(YEAR_MONTH);
				}
				break;
			case DAY_HOUR:
				enterOuterAlt(_localctx, 4);
				{
				setState(1535);
				match(DAY_HOUR);
				}
				break;
			case DAY_MINUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1536);
				match(DAY_MINUTE);
				}
				break;
			case DAY_SECOND:
				enterOuterAlt(_localctx, 6);
				{
				setState(1537);
				match(DAY_SECOND);
				}
				break;
			case HOUR_MINUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1538);
				match(HOUR_MINUTE);
				}
				break;
			case HOUR_SECOND:
				enterOuterAlt(_localctx, 8);
				{
				setState(1539);
				match(HOUR_SECOND);
				}
				break;
			case MINUTE_SECOND:
				enterOuterAlt(_localctx, 9);
				{
				setState(1540);
				match(MINUTE_SECOND);
				}
				break;
			case SECOND_MICROSECOND:
				enterOuterAlt(_localctx, 10);
				{
				setState(1541);
				match(SECOND_MICROSECOND);
				}
				break;
			case MINUTE_MICROSECOND:
				enterOuterAlt(_localctx, 11);
				{
				setState(1542);
				match(MINUTE_MICROSECOND);
				}
				break;
			case HOUR_MICROSECOND:
				enterOuterAlt(_localctx, 12);
				{
				setState(1543);
				match(HOUR_MICROSECOND);
				}
				break;
			case DAY_MICROSECOND:
				enterOuterAlt(_localctx, 13);
				{
				setState(1544);
				match(DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnableTypeContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public EnableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enableType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEnableType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEnableType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitEnableType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnableTypeContext enableType() throws RecognitionException {
		EnableTypeContext _localctx = new EnableTypeContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_enableType);
		try {
			setState(1552);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,149,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1547);
				match(ENABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1548);
				match(DISABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1549);
				match(DISABLE);
				setState(1550);
				match(ON);
				setState(1551);
				match(SLAVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode BTREE() { return getToken(MySqlParser.BTREE, 0); }
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode RTREE() { return getToken(MySqlParser.RTREE, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexTypeContext indexType() throws RecognitionException {
		IndexTypeContext _localctx = new IndexTypeContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_indexType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1554);
			match(USING);
			setState(1555);
			_la = _input.LA(1);
			if ( !(_la==BTREE || _la==HASH || _la==RTREE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode PARSER() { return getToken(MySqlParser.PARSER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public TerminalNode ENGINE_ATTRIBUTE() { return getToken(MySqlParser.ENGINE_ATTRIBUTE, 0); }
		public TerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		public TerminalNode CLUSTERING() { return getToken(MySqlParser.CLUSTERING, 0); }
		public TerminalNode YES() { return getToken(MySqlParser.YES, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode IGNORED() { return getToken(MySqlParser.IGNORED, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_indexOption);
		int _la;
		try {
			setState(1587);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY_BLOCK_SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1557);
				match(KEY_BLOCK_SIZE);
				setState(1559);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1558);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1561);
				fileSizeLiteral();
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1562);
				indexType();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1563);
				match(WITH);
				setState(1564);
				match(PARSER);
				setState(1565);
				uid();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1566);
				match(COMMENT);
				setState(1567);
				match(STRING_LITERAL);
				}
				break;
			case INVISIBLE:
			case VISIBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1568);
				_la = _input.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ENGINE_ATTRIBUTE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1569);
				match(ENGINE_ATTRIBUTE);
				setState(1571);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1570);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1573);
				match(STRING_LITERAL);
				}
				break;
			case SECONDARY_ENGINE_ATTRIBUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1574);
				match(SECONDARY_ENGINE_ATTRIBUTE);
				setState(1576);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1575);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1578);
				match(STRING_LITERAL);
				}
				break;
			case CLUSTERING:
				enterOuterAlt(_localctx, 8);
				{
				setState(1579);
				match(CLUSTERING);
				setState(1580);
				match(EQUAL_SYMBOL);
				setState(1581);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case IGNORED:
			case NOT:
				enterOuterAlt(_localctx, 9);
				{
				setState(1585);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case IGNORED:
					{
					setState(1582);
					match(IGNORED);
					}
					break;
				case NOT:
					{
					setState(1583);
					match(NOT);
					setState(1584);
					match(IGNORED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureParameterContext extends ParserRuleContext {
		public Token direction;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(MySqlParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(MySqlParser.INOUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterProcedureParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitProcedureParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitProcedureParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureParameterContext procedureParameter() throws RecognitionException {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_procedureParameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1590);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (IN - 77)) | (1L << (INOUT - 77)) | (1L << (OUT - 77)))) != 0)) {
				{
				setState(1589);
				((ProcedureParameterContext)_localctx).direction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (IN - 77)) | (1L << (INOUT - 77)) | (1L << (OUT - 77)))) != 0)) ) {
					((ProcedureParameterContext)_localctx).direction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1592);
			uid();
			setState(1593);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionParameterContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionParameterContext functionParameter() throws RecognitionException {
		FunctionParameterContext _localctx = new FunctionParameterContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_functionParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1595);
			uid();
			setState(1596);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineOptionContext extends ParserRuleContext {
		public RoutineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineOption; }
	 
		public RoutineOptionContext() { }
		public void copyFrom(RoutineOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class RoutineBehaviorContext extends RoutineOptionContext {
		public TerminalNode DETERMINISTIC() { return getToken(MySqlParser.DETERMINISTIC, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public RoutineBehaviorContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineBehavior(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineBehavior(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineBehavior(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineLanguageContext extends RoutineOptionContext {
		public TerminalNode LANGUAGE() { return getToken(MySqlParser.LANGUAGE, 0); }
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public RoutineLanguageContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineLanguage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineLanguage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineLanguage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineCommentContext extends RoutineOptionContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public RoutineCommentContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineSecurityContext extends RoutineOptionContext {
		public Token context;
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public RoutineSecurityContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineSecurity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineSecurity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineSecurity(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineDataContext extends RoutineOptionContext {
		public TerminalNode CONTAINS() { return getToken(MySqlParser.CONTAINS, 0); }
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode READS() { return getToken(MySqlParser.READS, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode MODIFIES() { return getToken(MySqlParser.MODIFIES, 0); }
		public RoutineDataContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineData(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineData(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineData(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineOptionContext routineOption() throws RecognitionException {
		RoutineOptionContext _localctx = new RoutineOptionContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_routineOption);
		int _la;
		try {
			setState(1621);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
				_localctx = new RoutineCommentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1598);
				match(COMMENT);
				setState(1599);
				match(STRING_LITERAL);
				}
				break;
			case LANGUAGE:
				_localctx = new RoutineLanguageContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1600);
				match(LANGUAGE);
				setState(1601);
				match(SQL);
				}
				break;
			case DETERMINISTIC:
			case NOT:
				_localctx = new RoutineBehaviorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1603);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1602);
					match(NOT);
					}
				}

				setState(1605);
				match(DETERMINISTIC);
				}
				break;
			case MODIFIES:
			case READS:
			case CONTAINS:
			case NO:
				_localctx = new RoutineDataContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1616);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONTAINS:
					{
					setState(1606);
					match(CONTAINS);
					setState(1607);
					match(SQL);
					}
					break;
				case NO:
					{
					setState(1608);
					match(NO);
					setState(1609);
					match(SQL);
					}
					break;
				case READS:
					{
					setState(1610);
					match(READS);
					setState(1611);
					match(SQL);
					setState(1612);
					match(DATA);
					}
					break;
				case MODIFIES:
					{
					setState(1613);
					match(MODIFIES);
					setState(1614);
					match(SQL);
					setState(1615);
					match(DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SQL:
				_localctx = new RoutineSecurityContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1618);
				match(SQL);
				setState(1619);
				match(SECURITY);
				setState(1620);
				((RoutineSecurityContext)_localctx).context = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((RoutineSecurityContext)_localctx).context = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerOptionContext extends ParserRuleContext {
		public TerminalNode HOST() { return getToken(MySqlParser.HOST, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode SOCKET() { return getToken(MySqlParser.SOCKET, 0); }
		public TerminalNode OWNER() { return getToken(MySqlParser.OWNER, 0); }
		public TerminalNode PORT() { return getToken(MySqlParser.PORT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ServerOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterServerOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitServerOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitServerOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerOptionContext serverOption() throws RecognitionException {
		ServerOptionContext _localctx = new ServerOptionContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_serverOption);
		try {
			setState(1637);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HOST:
				enterOuterAlt(_localctx, 1);
				{
				setState(1623);
				match(HOST);
				setState(1624);
				match(STRING_LITERAL);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1625);
				match(DATABASE);
				setState(1626);
				match(STRING_LITERAL);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1627);
				match(USER);
				setState(1628);
				match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(1629);
				match(PASSWORD);
				setState(1630);
				match(STRING_LITERAL);
				}
				break;
			case SOCKET:
				enterOuterAlt(_localctx, 5);
				{
				setState(1631);
				match(SOCKET);
				setState(1632);
				match(STRING_LITERAL);
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 6);
				{
				setState(1633);
				match(OWNER);
				setState(1634);
				match(STRING_LITERAL);
				}
				break;
			case PORT:
				enterOuterAlt(_localctx, 7);
				{
				setState(1635);
				match(PORT);
				setState(1636);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<CreateDefinitionContext> createDefinition() {
			return getRuleContexts(CreateDefinitionContext.class);
		}
		public CreateDefinitionContext createDefinition(int i) {
			return getRuleContext(CreateDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CreateDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionsContext createDefinitions() throws RecognitionException {
		CreateDefinitionsContext _localctx = new CreateDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_createDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1639);
			match(LR_BRACKET);
			setState(1640);
			createDefinition();
			setState(1645);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1641);
				match(COMMA);
				setState(1642);
				createDefinition();
				}
				}
				setState(1647);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1648);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionContext extends ParserRuleContext {
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinition; }
	 
		public CreateDefinitionContext() { }
		public void copyFrom(CreateDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ColumnDeclarationContext extends CreateDefinitionContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public ColumnDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColumnDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstraintDeclarationContext extends CreateDefinitionContext {
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public ConstraintDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstraintDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstraintDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstraintDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IndexDeclarationContext extends CreateDefinitionContext {
		public IndexColumnDefinitionContext indexColumnDefinition() {
			return getRuleContext(IndexColumnDefinitionContext.class,0);
		}
		public IndexDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionContext createDefinition() throws RecognitionException {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_createDefinition);
		try {
			setState(1655);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BUCKETS:
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				_localctx = new ColumnDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1650);
				uid();
				setState(1651);
				columnDefinition();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				_localctx = new ConstraintDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1653);
				tableConstraint();
				}
				break;
			case FULLTEXT:
			case INDEX:
			case KEY:
			case SPATIAL:
				_localctx = new IndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1654);
				indexColumnDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_columnDefinition);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1657);
			dataType();
			setState(1661);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,162,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1658);
					columnConstraint();
					}
					} 
				}
				setState(1663);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,162,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
	 
		public ColumnConstraintContext() { }
		public void copyFrom(ColumnConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StorageColumnConstraintContext extends ColumnConstraintContext {
		public Token storageval;
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public StorageColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStorageColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStorageColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStorageColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class VisibilityColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public VisibilityColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterVisibilityColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitVisibilityColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitVisibilityColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public CurrentTimestampContext currentTimestamp() {
			return getRuleContext(CurrentTimestampContext.class,0);
		}
		public AutoIncrementColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAutoIncrementColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAutoIncrementColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAutoIncrementColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CommentColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public CommentColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCommentColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCommentColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCommentColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UniqueKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UniqueKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUniqueKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUniqueKeyColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUniqueKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SerialDefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public SerialDefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSerialDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSerialDefaultColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSerialDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GeneratedColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode GENERATED() { return getToken(MySqlParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(MySqlParser.ALWAYS, 0); }
		public TerminalNode VIRTUAL() { return getToken(MySqlParser.VIRTUAL, 0); }
		public TerminalNode STORED() { return getToken(MySqlParser.STORED, 0); }
		public GeneratedColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGeneratedColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGeneratedColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGeneratedColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FormatColumnConstraintContext extends ColumnConstraintContext {
		public Token colformat;
		public TerminalNode COLUMN_FORMAT() { return getToken(MySqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public FormatColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFormatColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFormatColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFormatColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollateColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollateColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollateColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollateColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public PrimaryKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrimaryKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrimaryKeyColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrimaryKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CheckColumnConstraintContext extends ColumnConstraintContext {
		public UidContext name;
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CheckColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCheckColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NullColumnConstraintContext extends ColumnConstraintContext {
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public NullColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNullColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNullColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNullColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public DefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ReferenceColumnConstraintContext extends ColumnConstraintContext {
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public ReferenceColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_columnConstraint);
		int _la;
		try {
			setState(1717);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1664);
				nullNotnull();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1665);
				match(DEFAULT);
				setState(1666);
				defaultValue();
				}
				break;
			case VISIBLE:
				_localctx = new VisibilityColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1667);
				match(VISIBLE);
				}
				break;
			case INVISIBLE:
				_localctx = new VisibilityColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1668);
				match(INVISIBLE);
				}
				break;
			case ON:
			case AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1673);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO_INCREMENT:
					{
					setState(1669);
					match(AUTO_INCREMENT);
					}
					break;
				case ON:
					{
					setState(1670);
					match(ON);
					setState(1671);
					match(UPDATE);
					setState(1672);
					currentTimestamp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1676);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(1675);
					match(PRIMARY);
					}
				}

				setState(1678);
				match(KEY);
				}
				break;
			case UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1679);
				match(UNIQUE);
				setState(1681);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
				case 1:
					{
					setState(1680);
					match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1683);
				match(COMMENT);
				setState(1684);
				match(STRING_LITERAL);
				}
				break;
			case COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1685);
				match(COLUMN_FORMAT);
				setState(1686);
				((FormatColumnConstraintContext)_localctx).colformat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
					((FormatColumnConstraintContext)_localctx).colformat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1687);
				match(STORAGE);
				setState(1688);
				((StorageColumnConstraintContext)_localctx).storageval = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((StorageColumnConstraintContext)_localctx).storageval = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case REFERENCES:
				_localctx = new ReferenceColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1689);
				referenceDefinition();
				}
				break;
			case COLLATE:
				_localctx = new CollateColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1690);
				match(COLLATE);
				setState(1691);
				collationName();
				}
				break;
			case AS:
			case GENERATED:
				_localctx = new GeneratedColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1694);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GENERATED) {
					{
					setState(1692);
					match(GENERATED);
					setState(1693);
					match(ALWAYS);
					}
				}

				setState(1696);
				match(AS);
				setState(1697);
				match(LR_BRACKET);
				setState(1698);
				expression(0);
				setState(1699);
				match(RR_BRACKET);
				setState(1701);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORED || _la==VIRTUAL) {
					{
					setState(1700);
					_la = _input.LA(1);
					if ( !(_la==STORED || _la==VIRTUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case SERIAL:
				_localctx = new SerialDefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1703);
				match(SERIAL);
				setState(1704);
				match(DEFAULT);
				setState(1705);
				match(VALUE);
				}
				break;
			case CHECK:
			case CONSTRAINT:
				_localctx = new CheckColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1710);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1706);
					match(CONSTRAINT);
					setState(1708);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
						{
						setState(1707);
						((CheckColumnConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1712);
				match(CHECK);
				setState(1713);
				match(LR_BRACKET);
				setState(1714);
				expression(0);
				setState(1715);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
	 
		public TableConstraintContext() { }
		public void copyFrom(TableConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UniqueKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext index;
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UniqueKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUniqueKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUniqueKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUniqueKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CheckTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CheckTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCheckTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public PrimaryKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrimaryKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrimaryKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrimaryKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ForeignKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ForeignKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterForeignKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitForeignKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitForeignKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_tableConstraint);
		int _la;
		try {
			setState(1788);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1723);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1719);
					match(CONSTRAINT);
					setState(1721);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
						{
						setState(1720);
						((PrimaryKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1725);
				match(PRIMARY);
				setState(1726);
				match(KEY);
				setState(1728);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
					{
					setState(1727);
					((PrimaryKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1731);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1730);
					indexType();
					}
				}

				setState(1733);
				indexColumnNames();
				setState(1737);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(1734);
					indexOption();
					}
					}
					setState(1739);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1744);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1740);
					match(CONSTRAINT);
					setState(1742);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
						{
						setState(1741);
						((UniqueKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1746);
				match(UNIQUE);
				setState(1748);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1747);
					((UniqueKeyTableConstraintContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((UniqueKeyTableConstraintContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1751);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
					{
					setState(1750);
					((UniqueKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1754);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1753);
					indexType();
					}
				}

				setState(1756);
				indexColumnNames();
				setState(1760);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(1757);
					indexOption();
					}
					}
					setState(1762);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1767);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1763);
					match(CONSTRAINT);
					setState(1765);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
						{
						setState(1764);
						((ForeignKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1769);
				match(FOREIGN);
				setState(1770);
				match(KEY);
				setState(1772);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
					{
					setState(1771);
					((ForeignKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1774);
				indexColumnNames();
				setState(1775);
				referenceDefinition();
				}
				break;
			case 4:
				_localctx = new CheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1781);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1777);
					match(CONSTRAINT);
					setState(1779);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
						{
						setState(1778);
						((CheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1783);
				match(CHECK);
				setState(1784);
				match(LR_BRACKET);
				setState(1785);
				expression(0);
				setState(1786);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceDefinitionContext extends ParserRuleContext {
		public Token matchType;
		public TerminalNode REFERENCES() { return getToken(MySqlParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(MySqlParser.MATCH, 0); }
		public ReferenceActionContext referenceAction() {
			return getRuleContext(ReferenceActionContext.class,0);
		}
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(MySqlParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(MySqlParser.SIMPLE, 0); }
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceDefinitionContext referenceDefinition() throws RecognitionException {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_referenceDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1790);
			match(REFERENCES);
			setState(1791);
			tableName();
			setState(1793);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				setState(1792);
				indexColumnNames();
				}
				break;
			}
			setState(1797);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATCH) {
				{
				setState(1795);
				match(MATCH);
				setState(1796);
				((ReferenceDefinitionContext)_localctx).matchType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
					((ReferenceDefinitionContext)_localctx).matchType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1800);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
			case 1:
				{
				setState(1799);
				referenceAction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceActionContext extends ParserRuleContext {
		public ReferenceControlTypeContext onDelete;
		public ReferenceControlTypeContext onUpdate;
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public List<ReferenceControlTypeContext> referenceControlType() {
			return getRuleContexts(ReferenceControlTypeContext.class);
		}
		public ReferenceControlTypeContext referenceControlType(int i) {
			return getRuleContext(ReferenceControlTypeContext.class,i);
		}
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public ReferenceActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceActionContext referenceAction() throws RecognitionException {
		ReferenceActionContext _localctx = new ReferenceActionContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_referenceAction);
		try {
			setState(1818);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1802);
				match(ON);
				setState(1803);
				match(DELETE);
				setState(1804);
				((ReferenceActionContext)_localctx).onDelete = referenceControlType();
				setState(1808);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,191,_ctx) ) {
				case 1:
					{
					setState(1805);
					match(ON);
					setState(1806);
					match(UPDATE);
					setState(1807);
					((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1810);
				match(ON);
				setState(1811);
				match(UPDATE);
				setState(1812);
				((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
				setState(1816);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
				case 1:
					{
					setState(1813);
					match(ON);
					setState(1814);
					match(DELETE);
					setState(1815);
					((ReferenceActionContext)_localctx).onDelete = referenceControlType();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceControlTypeContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(MySqlParser.ACTION, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceControlType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceControlType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceControlType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceControlType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceControlTypeContext referenceControlType() throws RecognitionException {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_referenceControlType);
		try {
			setState(1826);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1820);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1821);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(1822);
				match(SET);
				setState(1823);
				match(NULL_LITERAL);
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 4);
				{
				setState(1824);
				match(NO);
				setState(1825);
				match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnDefinitionContext extends ParserRuleContext {
		public IndexColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnDefinition; }
	 
		public IndexColumnDefinitionContext() { }
		public void copyFrom(IndexColumnDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecialIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public SpecialIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpecialIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpecialIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpecialIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public SimpleIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnDefinitionContext indexColumnDefinition() throws RecognitionException {
		IndexColumnDefinitionContext _localctx = new IndexColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_indexColumnDefinition);
		int _la;
		try {
			setState(1856);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX:
			case KEY:
				_localctx = new SimpleIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1828);
				((SimpleIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((SimpleIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1830);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
					{
					setState(1829);
					uid();
					}
				}

				setState(1833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1832);
					indexType();
					}
				}

				setState(1835);
				indexColumnNames();
				setState(1839);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(1836);
					indexOption();
					}
					}
					setState(1841);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				_localctx = new SpecialIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1842);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1844);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1843);
					((SpecialIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((SpecialIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1847);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
					{
					setState(1846);
					uid();
					}
				}

				setState(1849);
				indexColumnNames();
				setState(1853);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(1850);
					indexOption();
					}
					}
					setState(1855);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableOptionContext extends ParserRuleContext {
		public TableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOption; }
	 
		public TableOptionContext() { }
		public void copyFrom(TableOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableOptionEngineContext extends TableOptionContext {
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TableOptionEngineContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionMaxRowsContext extends TableOptionContext {
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMaxRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionMaxRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionMaxRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionMaxRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCollateContext extends TableOptionContext {
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCollateContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionCollate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPersistentContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_PERSISTENT() { return getToken(MySqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPersistentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionPersistent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionPersistent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionPersistent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionTablespaceContext extends TableOptionContext {
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TablespaceStorageContext tablespaceStorage() {
			return getRuleContext(TablespaceStorageContext.class,0);
		}
		public TableOptionTablespaceContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionAutoextendSizeContext extends TableOptionContext {
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAutoextendSizeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionAutoextendSize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionAutoextendSize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionAutoextendSize(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionStartTransactionContext extends TableOptionContext {
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public TableOptionStartTransactionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionStartTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionStartTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPackKeysContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode PACK_KEYS() { return getToken(MySqlParser.PACK_KEYS, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPackKeysContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionPackKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionPackKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionPackKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPasswordContext extends TableOptionContext {
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPasswordContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionPassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionPassword(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionUnionContext extends TableOptionContext {
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionUnionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionUnion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionUnion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionUnion(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionSamplePageContext extends TableOptionContext {
		public Token extValue;
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode DECIMAL_LITERAL() { return getToken(MySqlParser.DECIMAL_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionSamplePageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionSamplePage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionSamplePage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionSamplePage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCharsetContext extends TableOptionContext {
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCharsetContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionIndexDirectoryContext extends TableOptionContext {
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionIndexDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionIndexDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionIndexDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionIndexDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionTableTypeContext extends TableOptionContext {
		public TerminalNode TABLE_TYPE() { return getToken(MySqlParser.TABLE_TYPE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableTypeContext tableType() {
			return getRuleContext(TableTypeContext.class,0);
		}
		public TableOptionTableTypeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionTableType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionTableType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionTableType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionKeyBlockSizeContext extends TableOptionContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionKeyBlockSizeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionKeyBlockSize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionKeyBlockSize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionKeyBlockSize(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionEncryptionContext extends TableOptionContext {
		public TerminalNode ENCRYPTION() { return getToken(MySqlParser.ENCRYPTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionEncryptionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionEncryption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionEncryption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionEncryption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionDataDirectoryContext extends TableOptionContext {
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDataDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionDataDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionDataDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionDataDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionRecalculationContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRecalculationContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionRecalculation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionRecalculation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionRecalculation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionAutoIncrementContext extends TableOptionContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAutoIncrementContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionAutoIncrement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionAutoIncrement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionAutoIncrement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionChecksumContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(MySqlParser.PAGE_CHECKSUM, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionChecksumContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionChecksum(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionChecksum(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionChecksum(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionDelayContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDelayContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionDelay(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionDelay(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionDelay(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionConnectionContext extends TableOptionContext {
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionConnectionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionConnection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionConnection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionConnection(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionSecondaryEngineAttributeContext extends TableOptionContext {
		public TerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionSecondaryEngineAttributeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionSecondaryEngineAttribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionSecondaryEngineAttribute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionSecondaryEngineAttribute(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCommentContext extends TableOptionContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCommentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionAverageContext extends TableOptionContext {
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAverageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionAverage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionAverage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionAverage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionRowFormatContext extends TableOptionContext {
		public Token rowFormat;
		public TerminalNode ROW_FORMAT() { return getToken(MySqlParser.ROW_FORMAT, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySqlParser.COMPRESSED, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySqlParser.REDUNDANT, 0); }
		public TerminalNode COMPACT() { return getToken(MySqlParser.COMPACT, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRowFormatContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionRowFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionRowFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionRowFormat(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCompressionContext extends TableOptionContext {
		public TerminalNode COMPRESSION() { return getToken(MySqlParser.COMPRESSION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCompressionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionCompression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionCompression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionCompression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionInsertMethodContext extends TableOptionContext {
		public Token insertMethod;
		public TerminalNode INSERT_METHOD() { return getToken(MySqlParser.INSERT_METHOD, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionInsertMethodContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionInsertMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionInsertMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionInsertMethod(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionEngineAttributeContext extends TableOptionContext {
		public TerminalNode ENGINE_ATTRIBUTE() { return getToken(MySqlParser.ENGINE_ATTRIBUTE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionEngineAttributeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionEngineAttribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionEngineAttribute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionEngineAttribute(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionMinRowsContext extends TableOptionContext {
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMinRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionMinRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionMinRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionMinRows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOptionContext tableOption() throws RecognitionException {
		TableOptionContext _localctx = new TableOptionContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_tableOption);
		int _la;
		try {
			setState(2020);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
			case 1:
				_localctx = new TableOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1858);
				match(ENGINE);
				setState(1860);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1859);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1863);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONNECT || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (ARCHIVE - 767)) | (1L << (BLACKHOLE - 767)) | (1L << (CSV - 767)) | (1L << (FEDERATED - 767)) | (1L << (INNODB - 767)) | (1L << (MEMORY - 767)) | (1L << (MRG_MYISAM - 767)) | (1L << (MYISAM - 767)) | (1L << (NDB - 767)) | (1L << (NDBCLUSTER - 767)) | (1L << (PERFORMANCE_SCHEMA - 767)) | (1L << (TOKUDB - 767)))) != 0) || ((((_la - 1138)) & ~0x3f) == 0 && ((1L << (_la - 1138)) & ((1L << (STRING_LITERAL - 1138)) | (1L << (ID - 1138)) | (1L << (REVERSE_QUOTE_ID - 1138)))) != 0)) {
					{
					setState(1862);
					engineName();
					}
				}

				}
				break;
			case 2:
				_localctx = new TableOptionEngineAttributeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1865);
				match(ENGINE_ATTRIBUTE);
				setState(1867);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1866);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1869);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new TableOptionAutoextendSizeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1870);
				match(AUTOEXTEND_SIZE);
				setState(1872);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1871);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1874);
				decimalLiteral();
				}
				break;
			case 4:
				_localctx = new TableOptionAutoIncrementContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1875);
				match(AUTO_INCREMENT);
				setState(1877);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1876);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1879);
				decimalLiteral();
				}
				break;
			case 5:
				_localctx = new TableOptionAverageContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1880);
				match(AVG_ROW_LENGTH);
				setState(1882);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1881);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1884);
				decimalLiteral();
				}
				break;
			case 6:
				_localctx = new TableOptionCharsetContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1886);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1885);
					match(DEFAULT);
					}
				}

				setState(1888);
				charSet();
				setState(1890);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1889);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1894);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(1892);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(1893);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				_localctx = new TableOptionChecksumContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1896);
				_la = _input.LA(1);
				if ( !(_la==CHECKSUM || _la==PAGE_CHECKSUM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1898);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1897);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1900);
				((TableOptionChecksumContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionChecksumContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 8:
				_localctx = new TableOptionCollateContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1902);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1901);
					match(DEFAULT);
					}
				}

				setState(1904);
				match(COLLATE);
				setState(1906);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1905);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1908);
				collationName();
				}
				break;
			case 9:
				_localctx = new TableOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1909);
				match(COMMENT);
				setState(1911);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1910);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1913);
				match(STRING_LITERAL);
				}
				break;
			case 10:
				_localctx = new TableOptionCompressionContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1914);
				match(COMPRESSION);
				setState(1916);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1915);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1918);
				_la = _input.LA(1);
				if ( !(_la==STRING_LITERAL || _la==ID) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 11:
				_localctx = new TableOptionConnectionContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1919);
				match(CONNECTION);
				setState(1921);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1920);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1923);
				match(STRING_LITERAL);
				}
				break;
			case 12:
				_localctx = new TableOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1924);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==DATA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1925);
				match(DIRECTORY);
				setState(1927);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1926);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1929);
				match(STRING_LITERAL);
				}
				break;
			case 13:
				_localctx = new TableOptionDelayContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1930);
				match(DELAY_KEY_WRITE);
				setState(1932);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1931);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1934);
				((TableOptionDelayContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionDelayContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 14:
				_localctx = new TableOptionEncryptionContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1935);
				match(ENCRYPTION);
				setState(1937);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1936);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1939);
				match(STRING_LITERAL);
				}
				break;
			case 15:
				_localctx = new TableOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1940);
				match(INDEX);
				setState(1941);
				match(DIRECTORY);
				setState(1943);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1942);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1945);
				match(STRING_LITERAL);
				}
				break;
			case 16:
				_localctx = new TableOptionInsertMethodContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(1946);
				match(INSERT_METHOD);
				setState(1948);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1947);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1950);
				((TableOptionInsertMethodContext)_localctx).insertMethod = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NO) ) {
					((TableOptionInsertMethodContext)_localctx).insertMethod = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 17:
				_localctx = new TableOptionKeyBlockSizeContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(1951);
				match(KEY_BLOCK_SIZE);
				setState(1953);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1952);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1955);
				fileSizeLiteral();
				}
				break;
			case 18:
				_localctx = new TableOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(1956);
				match(MAX_ROWS);
				setState(1958);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1957);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1960);
				decimalLiteral();
				}
				break;
			case 19:
				_localctx = new TableOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(1961);
				match(MIN_ROWS);
				setState(1963);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1962);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1965);
				decimalLiteral();
				}
				break;
			case 20:
				_localctx = new TableOptionPackKeysContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(1966);
				match(PACK_KEYS);
				setState(1968);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1967);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1970);
				((TableOptionPackKeysContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPackKeysContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 21:
				_localctx = new TableOptionPasswordContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(1971);
				match(PASSWORD);
				setState(1973);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1972);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1975);
				match(STRING_LITERAL);
				}
				break;
			case 22:
				_localctx = new TableOptionRowFormatContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(1976);
				match(ROW_FORMAT);
				setState(1978);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1977);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1980);
				((TableOptionRowFormatContext)_localctx).rowFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || ((((_la - 361)) & ~0x3f) == 0 && ((1L << (_la - 361)) & ((1L << (COMPACT - 361)) | (1L << (COMPRESSED - 361)) | (1L << (DYNAMIC - 361)) | (1L << (FIXED - 361)))) != 0) || _la==REDUNDANT || _la==ID) ) {
					((TableOptionRowFormatContext)_localctx).rowFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 23:
				_localctx = new TableOptionStartTransactionContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(1981);
				match(START);
				setState(1982);
				match(TRANSACTION);
				}
				break;
			case 24:
				_localctx = new TableOptionSecondaryEngineAttributeContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(1983);
				match(SECONDARY_ENGINE_ATTRIBUTE);
				setState(1985);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1984);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1987);
				match(STRING_LITERAL);
				}
				break;
			case 25:
				_localctx = new TableOptionRecalculationContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(1988);
				match(STATS_AUTO_RECALC);
				setState(1990);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1989);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1992);
				((TableOptionRecalculationContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionRecalculationContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 26:
				_localctx = new TableOptionPersistentContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(1993);
				match(STATS_PERSISTENT);
				setState(1995);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1994);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1997);
				((TableOptionPersistentContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPersistentContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 27:
				_localctx = new TableOptionSamplePageContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(1998);
				match(STATS_SAMPLE_PAGES);
				setState(2000);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1999);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2002);
				((TableOptionSamplePageContext)_localctx).extValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DECIMAL_LITERAL) ) {
					((TableOptionSamplePageContext)_localctx).extValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 28:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(2003);
				match(TABLESPACE);
				setState(2004);
				uid();
				setState(2006);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
				case 1:
					{
					setState(2005);
					tablespaceStorage();
					}
					break;
				}
				}
				break;
			case 29:
				_localctx = new TableOptionTableTypeContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(2008);
				match(TABLE_TYPE);
				setState(2009);
				match(EQUAL_SYMBOL);
				setState(2010);
				tableType();
				}
				break;
			case 30:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(2011);
				tablespaceStorage();
				}
				break;
			case 31:
				_localctx = new TableOptionUnionContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(2012);
				match(UNION);
				setState(2014);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2013);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2016);
				match(LR_BRACKET);
				setState(2017);
				tables();
				setState(2018);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableTypeContext extends ParserRuleContext {
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public TerminalNode ODBC() { return getToken(MySqlParser.ODBC, 0); }
		public TableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableTypeContext tableType() throws RecognitionException {
		TableTypeContext _localctx = new TableTypeContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_tableType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2022);
			_la = _input.LA(1);
			if ( !(_la==MYSQL || _la==ODBC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceStorageContext extends ParserRuleContext {
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TablespaceStorageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceStorage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTablespaceStorage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTablespaceStorage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTablespaceStorage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceStorageContext tablespaceStorage() throws RecognitionException {
		TablespaceStorageContext _localctx = new TablespaceStorageContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_tablespaceStorage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2024);
			match(STORAGE);
			setState(2025);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionsContext extends ParserRuleContext {
		public DecimalLiteralContext count;
		public DecimalLiteralContext subCount;
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> BY() { return getTokens(MySqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(MySqlParser.BY, i);
		}
		public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
			return getRuleContext(PartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
			return getRuleContext(SubpartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode SUBPARTITIONS() { return getToken(MySqlParser.SUBPARTITIONS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionsContext partitionDefinitions() throws RecognitionException {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_partitionDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2027);
			match(PARTITION);
			setState(2028);
			match(BY);
			setState(2029);
			partitionFunctionDefinition();
			setState(2032);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITIONS) {
				{
				setState(2030);
				match(PARTITIONS);
				setState(2031);
				((PartitionDefinitionsContext)_localctx).count = decimalLiteral();
				}
			}

			setState(2041);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUBPARTITION) {
				{
				setState(2034);
				match(SUBPARTITION);
				setState(2035);
				match(BY);
				setState(2036);
				subpartitionFunctionDefinition();
				setState(2039);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITIONS) {
					{
					setState(2037);
					match(SUBPARTITIONS);
					setState(2038);
					((PartitionDefinitionsContext)_localctx).subCount = decimalLiteral();
					}
				}

				}
			}

			setState(2054);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,239,_ctx) ) {
			case 1:
				{
				setState(2043);
				match(LR_BRACKET);
				setState(2044);
				partitionDefinition();
				setState(2049);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2045);
					match(COMMA);
					setState(2046);
					partitionDefinition();
					}
					}
					setState(2051);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2052);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionFunctionDefinitionContext extends ParserRuleContext {
		public PartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionFunctionDefinition; }
	 
		public PartitionFunctionDefinitionContext() { }
		public void copyFrom(PartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionFunctionKeyContext extends PartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public PartitionFunctionKeyContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionFunctionKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionHashContext extends PartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public PartitionFunctionHashContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionHash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionFunctionHash(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionListContext extends PartitionFunctionDefinitionContext {
		public TerminalNode LIST() { return getToken(MySqlParser.LIST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionListContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionFunctionList(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionRangeContext extends PartitionFunctionDefinitionContext {
		public TerminalNode RANGE() { return getToken(MySqlParser.RANGE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionRangeContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionFunctionRange(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionFunctionDefinitionContext partitionFunctionDefinition() throws RecognitionException {
		PartitionFunctionDefinitionContext _localctx = new PartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_partitionFunctionDefinition);
		int _la;
		try {
			setState(2101);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
			case 1:
				_localctx = new PartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2057);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(2056);
					match(LINEAR);
					}
				}

				setState(2059);
				match(HASH);
				setState(2060);
				match(LR_BRACKET);
				setState(2061);
				expression(0);
				setState(2062);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new PartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2065);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(2064);
					match(LINEAR);
					}
				}

				setState(2067);
				match(KEY);
				setState(2071);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(2068);
					match(ALGORITHM);
					setState(2069);
					match(EQUAL_SYMBOL);
					setState(2070);
					((PartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((PartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2073);
				match(LR_BRACKET);
				setState(2074);
				uidList();
				setState(2075);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new PartitionFunctionRangeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2077);
				match(RANGE);
				setState(2087);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(2078);
					match(LR_BRACKET);
					setState(2079);
					expression(0);
					setState(2080);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(2082);
					match(COLUMNS);
					setState(2083);
					match(LR_BRACKET);
					setState(2084);
					uidList();
					setState(2085);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new PartitionFunctionListContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2089);
				match(LIST);
				setState(2099);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(2090);
					match(LR_BRACKET);
					setState(2091);
					expression(0);
					setState(2092);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(2094);
					match(COLUMNS);
					setState(2095);
					match(LR_BRACKET);
					setState(2096);
					uidList();
					setState(2097);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionFunctionDefinitionContext extends ParserRuleContext {
		public SubpartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionFunctionDefinition; }
	 
		public SubpartitionFunctionDefinitionContext() { }
		public void copyFrom(SubpartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubPartitionFunctionHashContext extends SubpartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubPartitionFunctionHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubPartitionFunctionHash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubPartitionFunctionHash(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubPartitionFunctionKeyContext extends SubpartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubPartitionFunctionKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubPartitionFunctionKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubPartitionFunctionKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() throws RecognitionException {
		SubpartitionFunctionDefinitionContext _localctx = new SubpartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_subpartitionFunctionDefinition);
		int _la;
		try {
			setState(2124);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
			case 1:
				_localctx = new SubPartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2104);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(2103);
					match(LINEAR);
					}
				}

				setState(2106);
				match(HASH);
				setState(2107);
				match(LR_BRACKET);
				setState(2108);
				expression(0);
				setState(2109);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new SubPartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2112);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(2111);
					match(LINEAR);
					}
				}

				setState(2114);
				match(KEY);
				setState(2118);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(2115);
					match(ALGORITHM);
					setState(2116);
					match(EQUAL_SYMBOL);
					setState(2117);
					((SubPartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((SubPartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2120);
				match(LR_BRACKET);
				setState(2121);
				uidList();
				setState(2122);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionContext extends ParserRuleContext {
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinition; }
	 
		public PartitionDefinitionContext() { }
		public void copyFrom(PartitionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionComparisonContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(MySqlParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(MySqlParser.THAN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionComparisonContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionComparison(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionComparison(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionComparison(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionListAtomContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListAtomContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionListAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionListAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionListAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionListVectorContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerVectorContext> partitionDefinerVector() {
			return getRuleContexts(PartitionDefinerVectorContext.class);
		}
		public PartitionDefinerVectorContext partitionDefinerVector(int i) {
			return getRuleContext(PartitionDefinerVectorContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListVectorContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionListVector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionListVector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionListVector(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionSimpleContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionSimpleContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionSimple(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionSimple(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionSimple(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionContext partitionDefinition() throws RecognitionException {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_partitionDefinition);
		int _la;
		try {
			setState(2272);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
			case 1:
				_localctx = new PartitionComparisonContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2126);
				match(PARTITION);
				setState(2127);
				uid();
				setState(2128);
				match(VALUES);
				setState(2129);
				match(LESS);
				setState(2130);
				match(THAN);
				setState(2131);
				match(LR_BRACKET);
				setState(2132);
				partitionDefinerAtom();
				setState(2137);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2133);
					match(COMMA);
					setState(2134);
					partitionDefinerAtom();
					}
					}
					setState(2139);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2140);
				match(RR_BRACKET);
				setState(2144);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (COMMENT - 359)) | (1L << (DATA - 359)) | (1L << (ENGINE - 359)))) != 0) || ((((_la - 487)) & ~0x3f) == 0 && ((1L << (_la - 487)) & ((1L << (MAX_ROWS - 487)) | (1L << (MIN_ROWS - 487)) | (1L << (NODEGROUP - 487)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2141);
					partitionOption();
					}
					}
					setState(2146);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2158);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2147);
					match(LR_BRACKET);
					setState(2148);
					subpartitionDefinition();
					setState(2153);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2149);
						match(COMMA);
						setState(2150);
						subpartitionDefinition();
						}
						}
						setState(2155);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2156);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				_localctx = new PartitionComparisonContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2160);
				match(PARTITION);
				setState(2161);
				uid();
				setState(2162);
				match(VALUES);
				setState(2163);
				match(LESS);
				setState(2164);
				match(THAN);
				setState(2165);
				partitionDefinerAtom();
				setState(2169);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (COMMENT - 359)) | (1L << (DATA - 359)) | (1L << (ENGINE - 359)))) != 0) || ((((_la - 487)) & ~0x3f) == 0 && ((1L << (_la - 487)) & ((1L << (MAX_ROWS - 487)) | (1L << (MIN_ROWS - 487)) | (1L << (NODEGROUP - 487)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2166);
					partitionOption();
					}
					}
					setState(2171);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2183);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2172);
					match(LR_BRACKET);
					setState(2173);
					subpartitionDefinition();
					setState(2178);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2174);
						match(COMMA);
						setState(2175);
						subpartitionDefinition();
						}
						}
						setState(2180);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2181);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 3:
				_localctx = new PartitionListAtomContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2185);
				match(PARTITION);
				setState(2186);
				uid();
				setState(2187);
				match(VALUES);
				setState(2188);
				match(IN);
				setState(2189);
				match(LR_BRACKET);
				setState(2190);
				partitionDefinerAtom();
				setState(2195);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2191);
					match(COMMA);
					setState(2192);
					partitionDefinerAtom();
					}
					}
					setState(2197);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2198);
				match(RR_BRACKET);
				setState(2202);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (COMMENT - 359)) | (1L << (DATA - 359)) | (1L << (ENGINE - 359)))) != 0) || ((((_la - 487)) & ~0x3f) == 0 && ((1L << (_la - 487)) & ((1L << (MAX_ROWS - 487)) | (1L << (MIN_ROWS - 487)) | (1L << (NODEGROUP - 487)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2199);
					partitionOption();
					}
					}
					setState(2204);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2216);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2205);
					match(LR_BRACKET);
					setState(2206);
					subpartitionDefinition();
					setState(2211);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2207);
						match(COMMA);
						setState(2208);
						subpartitionDefinition();
						}
						}
						setState(2213);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2214);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				_localctx = new PartitionListVectorContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2218);
				match(PARTITION);
				setState(2219);
				uid();
				setState(2220);
				match(VALUES);
				setState(2221);
				match(IN);
				setState(2222);
				match(LR_BRACKET);
				setState(2223);
				partitionDefinerVector();
				setState(2228);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2224);
					match(COMMA);
					setState(2225);
					partitionDefinerVector();
					}
					}
					setState(2230);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2231);
				match(RR_BRACKET);
				setState(2235);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (COMMENT - 359)) | (1L << (DATA - 359)) | (1L << (ENGINE - 359)))) != 0) || ((((_la - 487)) & ~0x3f) == 0 && ((1L << (_la - 487)) & ((1L << (MAX_ROWS - 487)) | (1L << (MIN_ROWS - 487)) | (1L << (NODEGROUP - 487)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2232);
					partitionOption();
					}
					}
					setState(2237);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2249);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2238);
					match(LR_BRACKET);
					setState(2239);
					subpartitionDefinition();
					setState(2244);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2240);
						match(COMMA);
						setState(2241);
						subpartitionDefinition();
						}
						}
						setState(2246);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2247);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 5:
				_localctx = new PartitionSimpleContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2251);
				match(PARTITION);
				setState(2252);
				uid();
				setState(2256);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (COMMENT - 359)) | (1L << (DATA - 359)) | (1L << (ENGINE - 359)))) != 0) || ((((_la - 487)) & ~0x3f) == 0 && ((1L << (_la - 487)) & ((1L << (MAX_ROWS - 487)) | (1L << (MIN_ROWS - 487)) | (1L << (NODEGROUP - 487)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2253);
					partitionOption();
					}
					}
					setState(2258);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2270);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2259);
					match(LR_BRACKET);
					setState(2260);
					subpartitionDefinition();
					setState(2265);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2261);
						match(COMMA);
						setState(2262);
						subpartitionDefinition();
						}
						}
						setState(2267);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2268);
					match(RR_BRACKET);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerAtomContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(MySqlParser.MAXVALUE, 0); }
		public PartitionDefinerAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionDefinerAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionDefinerAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionDefinerAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinerAtomContext partitionDefinerAtom() throws RecognitionException {
		PartitionDefinerAtomContext _localctx = new PartitionDefinerAtomContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_partitionDefinerAtom);
		try {
			setState(2277);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2274);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2275);
				expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2276);
				match(MAXVALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerVectorContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionDefinerVectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerVector; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionDefinerVector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionDefinerVector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionDefinerVector(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinerVectorContext partitionDefinerVector() throws RecognitionException {
		PartitionDefinerVectorContext _localctx = new PartitionDefinerVectorContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_partitionDefinerVector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2279);
			match(LR_BRACKET);
			setState(2280);
			partitionDefinerAtom();
			setState(2283); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2281);
				match(COMMA);
				setState(2282);
				partitionDefinerAtom();
				}
				}
				setState(2285); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COMMA );
			setState(2287);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubpartitionDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubpartitionDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubpartitionDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubpartitionDefinitionContext subpartitionDefinition() throws RecognitionException {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_subpartitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2289);
			match(SUBPARTITION);
			setState(2290);
			uid();
			setState(2294);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DEFAULT || _la==INDEX || ((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (COMMENT - 359)) | (1L << (DATA - 359)) | (1L << (ENGINE - 359)))) != 0) || ((((_la - 487)) & ~0x3f) == 0 && ((1L << (_la - 487)) & ((1L << (MAX_ROWS - 487)) | (1L << (MIN_ROWS - 487)) | (1L << (NODEGROUP - 487)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
				{
				{
				setState(2291);
				partitionOption();
				}
				}
				setState(2296);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionOptionContext extends ParserRuleContext {
		public PartitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionOption; }
	 
		public PartitionOptionContext() { }
		public void copyFrom(PartitionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionOptionCommentContext extends PartitionOptionContext {
		public Token comment;
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionCommentContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionNodeGroupContext extends PartitionOptionContext {
		public UidContext nodegroup;
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionNodeGroupContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionNodeGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionNodeGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionNodeGroup(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionIndexDirectoryContext extends PartitionOptionContext {
		public Token indexDirectory;
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionIndexDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionIndexDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionIndexDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionIndexDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionMaxRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext maxRows;
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMaxRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionMaxRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionMaxRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionMaxRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionTablespaceContext extends PartitionOptionContext {
		public UidContext tablespace;
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionTablespaceContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionEngineContext extends PartitionOptionContext {
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionEngineContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionMinRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext minRows;
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMinRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionMinRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionMinRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionMinRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionDataDirectoryContext extends PartitionOptionContext {
		public Token dataDirectory;
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionDataDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionDataDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionDataDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionDataDirectory(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionOptionContext partitionOption() throws RecognitionException {
		PartitionOptionContext _localctx = new PartitionOptionContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_partitionOption);
		int _la;
		try {
			setState(2345);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
			case ENGINE:
			case STORAGE:
				_localctx = new PartitionOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2298);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2297);
					match(DEFAULT);
					}
				}

				setState(2301);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(2300);
					match(STORAGE);
					}
				}

				setState(2303);
				match(ENGINE);
				setState(2305);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2304);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2307);
				engineName();
				}
				break;
			case COMMENT:
				_localctx = new PartitionOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2308);
				match(COMMENT);
				setState(2310);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2309);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2312);
				((PartitionOptionCommentContext)_localctx).comment = match(STRING_LITERAL);
				}
				break;
			case DATA:
				_localctx = new PartitionOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2313);
				match(DATA);
				setState(2314);
				match(DIRECTORY);
				setState(2316);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2315);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2318);
				((PartitionOptionDataDirectoryContext)_localctx).dataDirectory = match(STRING_LITERAL);
				}
				break;
			case INDEX:
				_localctx = new PartitionOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2319);
				match(INDEX);
				setState(2320);
				match(DIRECTORY);
				setState(2322);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2321);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2324);
				((PartitionOptionIndexDirectoryContext)_localctx).indexDirectory = match(STRING_LITERAL);
				}
				break;
			case MAX_ROWS:
				_localctx = new PartitionOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2325);
				match(MAX_ROWS);
				setState(2327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2326);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2329);
				((PartitionOptionMaxRowsContext)_localctx).maxRows = decimalLiteral();
				}
				break;
			case MIN_ROWS:
				_localctx = new PartitionOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2330);
				match(MIN_ROWS);
				setState(2332);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2331);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2334);
				((PartitionOptionMinRowsContext)_localctx).minRows = decimalLiteral();
				}
				break;
			case TABLESPACE:
				_localctx = new PartitionOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2335);
				match(TABLESPACE);
				setState(2337);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2336);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2339);
				((PartitionOptionTablespaceContext)_localctx).tablespace = uid();
				}
				break;
			case NODEGROUP:
				_localctx = new PartitionOptionNodeGroupContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2340);
				match(NODEGROUP);
				setState(2342);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2341);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2344);
				((PartitionOptionNodeGroupContext)_localctx).nodegroup = uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseContext extends ParserRuleContext {
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabase; }
	 
		public AlterDatabaseContext() { }
		public void copyFrom(AlterDatabaseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUpgradeNameContext extends AlterDatabaseContext {
		public Token dbFormat;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode NAME() { return getToken(MySqlParser.NAME, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public AlterUpgradeNameContext(AlterDatabaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterUpgradeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterUpgradeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterUpgradeName(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterSimpleDatabaseContext extends AlterDatabaseContext {
		public Token dbFormat;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public AlterSimpleDatabaseContext(AlterDatabaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterSimpleDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterSimpleDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterSimpleDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseContext alterDatabase() throws RecognitionException {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_alterDatabase);
		int _la;
		try {
			setState(2365);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
			case 1:
				_localctx = new AlterSimpleDatabaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2347);
				match(ALTER);
				setState(2348);
				((AlterSimpleDatabaseContext)_localctx).dbFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterSimpleDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2350);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
				case 1:
					{
					setState(2349);
					uid();
					}
					break;
				}
				setState(2353); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2352);
					createDatabaseOption();
					}
					}
					setState(2355); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==READ || _la==CHAR || _la==ENCRYPTION || _la==CHARSET );
				}
				break;
			case 2:
				_localctx = new AlterUpgradeNameContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2357);
				match(ALTER);
				setState(2358);
				((AlterUpgradeNameContext)_localctx).dbFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterUpgradeNameContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2359);
				uid();
				setState(2360);
				match(UPGRADE);
				setState(2361);
				match(DATA);
				setState(2362);
				match(DIRECTORY);
				setState(2363);
				match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return getRuleContext(ScheduleExpressionContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEventContext alterEvent() throws RecognitionException {
		AlterEventContext _localctx = new AlterEventContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_alterEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2367);
			match(ALTER);
			setState(2369);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2368);
				ownerStatement();
				}
			}

			setState(2371);
			match(EVENT);
			setState(2372);
			fullId();
			setState(2376);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
			case 1:
				{
				setState(2373);
				match(ON);
				setState(2374);
				match(SCHEDULE);
				setState(2375);
				scheduleExpression();
				}
				break;
			}
			setState(2384);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2378);
				match(ON);
				setState(2379);
				match(COMPLETION);
				setState(2381);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2380);
					match(NOT);
					}
				}

				setState(2383);
				match(PRESERVE);
				}
			}

			setState(2389);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
			case 1:
				{
				setState(2386);
				match(RENAME);
				setState(2387);
				match(TO);
				setState(2388);
				fullId();
				}
				break;
			}
			setState(2392);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(2391);
				enableType();
				}
			}

			setState(2396);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(2394);
				match(COMMENT);
				setState(2395);
				match(STRING_LITERAL);
				}
			}

			setState(2400);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
			case 1:
				{
				setState(2398);
				match(DO);
				setState(2399);
				routineBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionContext alterFunction() throws RecognitionException {
		AlterFunctionContext _localctx = new AlterFunctionContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_alterFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2402);
			match(ALTER);
			setState(2403);
			match(FUNCTION);
			setState(2404);
			fullId();
			setState(2408);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (MODIFIES - 108)) | (1L << (NOT - 108)) | (1L << (READS - 108)) | (1L << (SQL - 108)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(2405);
				routineOption();
				}
				}
				setState(2410);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterInstanceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode INSTANCE() { return getToken(MySqlParser.INSTANCE, 0); }
		public TerminalNode ROTATE() { return getToken(MySqlParser.ROTATE, 0); }
		public TerminalNode INNODB() { return getToken(MySqlParser.INNODB, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterInstanceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterInstance; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterInstance(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterInstance(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterInstance(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterInstanceContext alterInstance() throws RecognitionException {
		AlterInstanceContext _localctx = new AlterInstanceContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_alterInstance);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2411);
			match(ALTER);
			setState(2412);
			match(INSTANCE);
			setState(2413);
			match(ROTATE);
			setState(2414);
			match(INNODB);
			setState(2415);
			match(MASTER);
			setState(2416);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLogfileGroupContext alterLogfileGroup() throws RecognitionException {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_alterLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2418);
			match(ALTER);
			setState(2419);
			match(LOGFILE);
			setState(2420);
			match(GROUP);
			setState(2421);
			uid();
			setState(2422);
			match(ADD);
			setState(2423);
			match(UNDOFILE);
			setState(2424);
			match(STRING_LITERAL);
			setState(2430);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2425);
				match(INITIAL_SIZE);
				setState(2427);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2426);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2429);
				fileSizeLiteral();
				}
			}

			setState(2433);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2432);
				match(WAIT);
				}
			}

			setState(2435);
			match(ENGINE);
			setState(2437);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(2436);
				match(EQUAL_SYMBOL);
				}
			}

			setState(2439);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterProcedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureContext alterProcedure() throws RecognitionException {
		AlterProcedureContext _localctx = new AlterProcedureContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_alterProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2441);
			match(ALTER);
			setState(2442);
			match(PROCEDURE);
			setState(2443);
			fullId();
			setState(2447);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (MODIFIES - 108)) | (1L << (NOT - 108)) | (1L << (READS - 108)) | (1L << (SQL - 108)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(2444);
				routineOption();
				}
				}
				setState(2449);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterServerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterServerContext alterServer() throws RecognitionException {
		AlterServerContext _localctx = new AlterServerContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_alterServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2450);
			match(ALTER);
			setState(2451);
			match(SERVER);
			setState(2452);
			uid();
			setState(2453);
			match(OPTIONS);
			setState(2454);
			match(LR_BRACKET);
			setState(2455);
			serverOption();
			setState(2460);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2456);
				match(COMMA);
				setState(2457);
				serverOption();
				}
				}
				setState(2462);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2463);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableContext extends ParserRuleContext {
		public Token intimeAction;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public WaitNowaitClauseContext waitNowaitClause() {
			return getRuleContext(WaitNowaitClauseContext.class,0);
		}
		public List<AlterSpecificationContext> alterSpecification() {
			return getRuleContexts(AlterSpecificationContext.class);
		}
		public AlterSpecificationContext alterSpecification(int i) {
			return getRuleContext(AlterSpecificationContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableContext alterTable() throws RecognitionException {
		AlterTableContext _localctx = new AlterTableContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_alterTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2465);
			match(ALTER);
			setState(2467);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(2466);
				((AlterTableContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((AlterTableContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2470);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2469);
				match(IGNORE);
				}
			}

			setState(2472);
			match(TABLE);
			setState(2473);
			tableName();
			setState(2475);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(2474);
				waitNowaitClause();
				}
			}

			setState(2485);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
			case 1:
				{
				setState(2477);
				alterSpecification();
				setState(2482);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2478);
					match(COMMA);
					setState(2479);
					alterSpecification();
					}
					}
					setState(2484);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(2488);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2487);
				partitionDefinitions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceContext extends ParserRuleContext {
		public Token objectAction;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceContext alterTablespace() throws RecognitionException {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_alterTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2490);
			match(ALTER);
			setState(2491);
			match(TABLESPACE);
			setState(2492);
			uid();
			setState(2493);
			((AlterTablespaceContext)_localctx).objectAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
				((AlterTablespaceContext)_localctx).objectAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2494);
			match(DATAFILE);
			setState(2495);
			match(STRING_LITERAL);
			setState(2499);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2496);
				match(INITIAL_SIZE);
				setState(2497);
				match(EQUAL_SYMBOL);
				setState(2498);
				fileSizeLiteral();
				}
			}

			setState(2502);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2501);
				match(WAIT);
				}
			}

			setState(2504);
			match(ENGINE);
			setState(2506);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(2505);
				match(EQUAL_SYMBOL);
				}
			}

			setState(2508);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOpt;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public AlterViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewContext alterView() throws RecognitionException {
		AlterViewContext _localctx = new AlterViewContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_alterView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2510);
			match(ALTER);
			setState(2514);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(2511);
				match(ALGORITHM);
				setState(2512);
				match(EQUAL_SYMBOL);
				setState(2513);
				((AlterViewContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((AlterViewContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2517);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2516);
				ownerStatement();
				}
			}

			setState(2522);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(2519);
				match(SQL);
				setState(2520);
				match(SECURITY);
				setState(2521);
				((AlterViewContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((AlterViewContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2524);
			match(VIEW);
			setState(2525);
			fullId();
			setState(2530);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(2526);
				match(LR_BRACKET);
				setState(2527);
				uidList();
				setState(2528);
				match(RR_BRACKET);
				}
			}

			setState(2532);
			match(AS);
			setState(2533);
			selectStatement();
			setState(2540);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2534);
				match(WITH);
				setState(2536);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(2535);
					((AlterViewContext)_localctx).checkOpt = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((AlterViewContext)_localctx).checkOpt = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2538);
				match(CHECK);
				setState(2539);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSequenceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(MySqlParser.SEQUENCE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<SequenceSpecContext> sequenceSpec() {
			return getRuleContexts(SequenceSpecContext.class);
		}
		public SequenceSpecContext sequenceSpec(int i) {
			return getRuleContext(SequenceSpecContext.class,i);
		}
		public AlterSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterSequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterSequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSequenceContext alterSequence() throws RecognitionException {
		AlterSequenceContext _localctx = new AlterSequenceContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_alterSequence);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2542);
			match(ALTER);
			setState(2543);
			match(SEQUENCE);
			setState(2545);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2544);
				ifExists();
				}
			}

			setState(2547);
			fullId();
			setState(2549); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2548);
					sequenceSpec();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2551); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,317,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSpecificationContext extends ParserRuleContext {
		public AlterSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSpecification; }
	 
		public AlterSpecificationContext() { }
		public void copyFrom(AlterSpecificationContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterByDisableKeysContext extends AlterSpecificationContext {
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public AlterByDisableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDisableKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDisableKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDisableKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDefaultCharsetContext extends AlterSpecificationContext {
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public AlterByDefaultCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDefaultCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDefaultCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDefaultCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameColumnContext extends AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByRenameColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRenameColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRenameColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRenameColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByConvertCharsetContext extends AlterSpecificationContext {
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public AlterByConvertCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByConvertCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByConvertCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByConvertCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddPartitionContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByAddPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddForeignKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public UidContext indexName;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByAddForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddForeignKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddForeignKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddForeignKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByRenameIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRenameIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRenameIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRenameIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRemovePartitioningContext extends AlterSpecificationContext {
		public TerminalNode REMOVE() { return getToken(MySqlParser.REMOVE, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public AlterByRemovePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRemovePartitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRemovePartitioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRemovePartitioning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameContext extends AlterSpecificationContext {
		public Token renameFormat;
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public AlterByRenameContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRename(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByOptimizePartitionContext extends AlterSpecificationContext {
		public TerminalNode OPTIMIZE() { return getToken(MySqlParser.OPTIMIZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByOptimizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByOptimizePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByOptimizePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByOptimizePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByImportTablespaceContext extends AlterSpecificationContext {
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public AlterByImportTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByImportTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByImportTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByImportTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddDefinitionsContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<CreateDefinitionContext> createDefinition() {
			return getRuleContexts(CreateDefinitionContext.class);
		}
		public CreateDefinitionContext createDefinition(int i) {
			return getRuleContext(CreateDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByAddDefinitionsContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByCoalescePartitionContext extends AlterSpecificationContext {
		public TerminalNode COALESCE() { return getToken(MySqlParser.COALESCE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public AlterByCoalescePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByCoalescePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByCoalescePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByCoalescePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropConstraintCheckContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterByDropConstraintCheckContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropConstraintCheck(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropConstraintCheck(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropConstraintCheck(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddColumnsContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<ColumnDefinitionContext> columnDefinition() {
			return getRuleContexts(ColumnDefinitionContext.class);
		}
		public ColumnDefinitionContext columnDefinition(int i) {
			return getRuleContext(ColumnDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByAddColumnsContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddColumns(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAlterIndexVisibilityContext extends AlterSpecificationContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public AlterByAlterIndexVisibilityContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAlterIndexVisibility(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAlterIndexVisibility(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAlterIndexVisibility(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropForeignKeyContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterByDropForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropForeignKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropForeignKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropForeignKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddCheckTableConstraintContext extends AlterSpecificationContext {
		public UidContext name;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public AlterByAddCheckTableConstraintContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddCheckTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddCheckTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddCheckTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRebuildPartitionContext extends AlterSpecificationContext {
		public TerminalNode REBUILD() { return getToken(MySqlParser.REBUILD, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByRebuildPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRebuildPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRebuildPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRebuildPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByUpgradePartitioningContext extends AlterSpecificationContext {
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public AlterByUpgradePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByUpgradePartitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByUpgradePartitioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByUpgradePartitioning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRepairPartitionContext extends AlterSpecificationContext {
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByRepairPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRepairPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRepairPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRepairPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByExchangePartitionContext extends AlterSpecificationContext {
		public Token validationFormat;
		public TerminalNode EXCHANGE() { return getToken(MySqlParser.EXCHANGE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(MySqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(MySqlParser.WITH, i);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public AlterByExchangePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByExchangePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByExchangePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByExchangePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public AlterByAddIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropColumnContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public AlterByDropColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByImportPartitionContext extends AlterSpecificationContext {
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByImportPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByImportPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByImportPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByImportPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByChangeDefaultContext extends AlterSpecificationContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public AlterByChangeDefaultContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByChangeDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByChangeDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByChangeDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByForceContext extends AlterSpecificationContext {
		public TerminalNode FORCE() { return getToken(MySqlParser.FORCE, 0); }
		public AlterByForceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByForce(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByForce(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByForce(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropPartitionContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterByDropPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddSpecialIndexContext extends AlterSpecificationContext {
		public Token keyType;
		public Token indexFormat;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByAddSpecialIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddSpecialIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddSpecialIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddSpecialIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByModifyColumnContext extends AlterSpecificationContext {
		public TerminalNode MODIFY() { return getToken(MySqlParser.MODIFY, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public AlterByModifyColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByModifyColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByModifyColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByModifyColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByTableOptionContext extends AlterSpecificationContext {
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByTableOptionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByTableOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropPrimaryKeyContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByDropPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropPrimaryKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByLockContext extends AlterSpecificationContext {
		public Token lockType;
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode SHARED() { return getToken(MySqlParser.SHARED, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySqlParser.EXCLUSIVE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public AlterByLockContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByLock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByLock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByLock(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDiscardPartitionContext extends AlterSpecificationContext {
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByDiscardPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDiscardPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDiscardPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDiscardPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDiscardTablespaceContext extends AlterSpecificationContext {
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public AlterByDiscardTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDiscardTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDiscardTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDiscardTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByValidateContext extends AlterSpecificationContext {
		public Token validationFormat;
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public AlterByValidateContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByValidate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByValidate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByValidate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddPrimaryKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByAddPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddPrimaryKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByCheckPartitionContext extends AlterSpecificationContext {
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByCheckPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByCheckPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByCheckPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByCheckPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByEnableKeysContext extends AlterSpecificationContext {
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public AlterByEnableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByEnableKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByEnableKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByEnableKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByReorganizePartitionContext extends AlterSpecificationContext {
		public TerminalNode REORGANIZE() { return getToken(MySqlParser.REORGANIZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByReorganizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByReorganizePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByReorganizePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByReorganizePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterBySetAlgorithmContext extends AlterSpecificationContext {
		public Token algType;
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode INSTANT() { return getToken(MySqlParser.INSTANT, 0); }
		public TerminalNode INPLACE() { return getToken(MySqlParser.INPLACE, 0); }
		public TerminalNode COPY() { return getToken(MySqlParser.COPY, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public AlterBySetAlgorithmContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterBySetAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterBySetAlgorithm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterBySetAlgorithm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAnalyzePartitionContext extends AlterSpecificationContext {
		public TerminalNode ANALYZE() { return getToken(MySqlParser.ANALYZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByAnalyzePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAnalyzePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAnalyzePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAnalyzePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByChangeColumnContext extends AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public UidContext afterColumn;
		public TerminalNode CHANGE() { return getToken(MySqlParser.CHANGE, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public AlterByChangeColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByChangeColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByChangeColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByChangeColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddUniqueKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext indexName;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByAddUniqueKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddUniqueKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddUniqueKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddUniqueKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByTruncatePartitionContext extends AlterSpecificationContext {
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByTruncatePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByTruncatePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByTruncatePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByTruncatePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterByDropIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddColumnContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public AlterByAddColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByOrderContext extends AlterSpecificationContext {
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public AlterByOrderContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByOrder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByOrder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByOrder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSpecificationContext alterSpecification() throws RecognitionException {
		AlterSpecificationContext _localctx = new AlterSpecificationContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_alterSpecification);
		int _la;
		try {
			int _alt;
			setState(2973);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
			case 1:
				_localctx = new AlterByTableOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2553);
				tableOption();
				setState(2560);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,319,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2555);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2554);
							match(COMMA);
							}
						}

						setState(2557);
						tableOption();
						}
						} 
					}
					setState(2562);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,319,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new AlterByAddColumnContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2563);
				match(ADD);
				setState(2565);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2564);
					match(COLUMN);
					}
				}

				setState(2568);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2567);
					ifNotExists();
					}
				}

				setState(2570);
				uid();
				setState(2571);
				columnDefinition();
				setState(2575);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2572);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2573);
					match(AFTER);
					setState(2574);
					uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				_localctx = new AlterByAddColumnsContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2577);
				match(ADD);
				setState(2579);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2578);
					match(COLUMN);
					}
				}

				setState(2582);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2581);
					ifNotExists();
					}
				}

				setState(2584);
				match(LR_BRACKET);
				setState(2585);
				uid();
				setState(2586);
				columnDefinition();
				setState(2593);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2587);
					match(COMMA);
					setState(2588);
					uid();
					setState(2589);
					columnDefinition();
					}
					}
					setState(2595);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2596);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new AlterByAddIndexContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2598);
				match(ADD);
				setState(2599);
				((AlterByAddIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByAddIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2601);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2600);
					ifNotExists();
					}
				}

				setState(2604);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
					{
					setState(2603);
					uid();
					}
				}

				setState(2607);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2606);
					indexType();
					}
				}

				setState(2609);
				indexColumnNames();
				setState(2613);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(2610);
					indexOption();
					}
					}
					setState(2615);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 5:
				_localctx = new AlterByAddPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2616);
				match(ADD);
				setState(2621);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2617);
					match(CONSTRAINT);
					setState(2619);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
						{
						setState(2618);
						((AlterByAddPrimaryKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2623);
				match(PRIMARY);
				setState(2624);
				match(KEY);
				setState(2626);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
					{
					setState(2625);
					((AlterByAddPrimaryKeyContext)_localctx).index = uid();
					}
				}

				setState(2629);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2628);
					indexType();
					}
				}

				setState(2631);
				indexColumnNames();
				setState(2635);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(2632);
					indexOption();
					}
					}
					setState(2637);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 6:
				_localctx = new AlterByAddUniqueKeyContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2638);
				match(ADD);
				setState(2643);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2639);
					match(CONSTRAINT);
					setState(2641);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
						{
						setState(2640);
						((AlterByAddUniqueKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2645);
				match(UNIQUE);
				setState(2647);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2646);
					((AlterByAddUniqueKeyContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddUniqueKeyContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2650);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
					{
					setState(2649);
					((AlterByAddUniqueKeyContext)_localctx).indexName = uid();
					}
				}

				setState(2653);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2652);
					indexType();
					}
				}

				setState(2655);
				indexColumnNames();
				setState(2659);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(2656);
					indexOption();
					}
					}
					setState(2661);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				_localctx = new AlterByAddSpecialIndexContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2662);
				match(ADD);
				setState(2663);
				((AlterByAddSpecialIndexContext)_localctx).keyType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
					((AlterByAddSpecialIndexContext)_localctx).keyType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2665);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2664);
					((AlterByAddSpecialIndexContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddSpecialIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2668);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
					{
					setState(2667);
					uid();
					}
				}

				setState(2670);
				indexColumnNames();
				setState(2674);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(2671);
					indexOption();
					}
					}
					setState(2676);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new AlterByAddForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2677);
				match(ADD);
				setState(2682);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2678);
					match(CONSTRAINT);
					setState(2680);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
						{
						setState(2679);
						((AlterByAddForeignKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2684);
				match(FOREIGN);
				setState(2685);
				match(KEY);
				setState(2687);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2686);
					ifNotExists();
					}
				}

				setState(2690);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
					{
					setState(2689);
					((AlterByAddForeignKeyContext)_localctx).indexName = uid();
					}
				}

				setState(2692);
				indexColumnNames();
				setState(2693);
				referenceDefinition();
				}
				break;
			case 9:
				_localctx = new AlterByAddCheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2695);
				match(ADD);
				setState(2700);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2696);
					match(CONSTRAINT);
					setState(2698);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
						{
						setState(2697);
						((AlterByAddCheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2702);
				match(CHECK);
				setState(2703);
				match(LR_BRACKET);
				setState(2704);
				expression(0);
				setState(2705);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new AlterBySetAlgorithmContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2707);
				match(ALGORITHM);
				setState(2709);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2708);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2711);
				((AlterBySetAlgorithmContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE || _la==INSTANT) ) {
					((AlterBySetAlgorithmContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 11:
				_localctx = new AlterByChangeDefaultContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2712);
				match(ALTER);
				setState(2714);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2713);
					match(COLUMN);
					}
				}

				setState(2716);
				uid();
				setState(2722);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(2717);
					match(SET);
					setState(2718);
					match(DEFAULT);
					setState(2719);
					defaultValue();
					}
					break;
				case DROP:
					{
					setState(2720);
					match(DROP);
					setState(2721);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 12:
				_localctx = new AlterByChangeColumnContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2724);
				match(CHANGE);
				setState(2726);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2725);
					match(COLUMN);
					}
				}

				setState(2729);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2728);
					ifExists();
					}
				}

				setState(2731);
				((AlterByChangeColumnContext)_localctx).oldColumn = uid();
				setState(2732);
				((AlterByChangeColumnContext)_localctx).newColumn = uid();
				setState(2733);
				columnDefinition();
				setState(2737);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2734);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2735);
					match(AFTER);
					setState(2736);
					((AlterByChangeColumnContext)_localctx).afterColumn = uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 13:
				_localctx = new AlterByRenameColumnContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2739);
				match(RENAME);
				setState(2740);
				match(COLUMN);
				setState(2741);
				((AlterByRenameColumnContext)_localctx).oldColumn = uid();
				setState(2742);
				match(TO);
				setState(2743);
				((AlterByRenameColumnContext)_localctx).newColumn = uid();
				}
				break;
			case 14:
				_localctx = new AlterByLockContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2745);
				match(LOCK);
				setState(2747);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2746);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2749);
				((AlterByLockContext)_localctx).lockType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					((AlterByLockContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				_localctx = new AlterByModifyColumnContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(2750);
				match(MODIFY);
				setState(2752);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2751);
					match(COLUMN);
					}
				}

				setState(2755);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2754);
					ifExists();
					}
				}

				setState(2757);
				uid();
				setState(2758);
				columnDefinition();
				setState(2762);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2759);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2760);
					match(AFTER);
					setState(2761);
					uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 16:
				_localctx = new AlterByDropColumnContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(2764);
				match(DROP);
				setState(2766);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2765);
					match(COLUMN);
					}
				}

				setState(2769);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2768);
					ifExists();
					}
				}

				setState(2771);
				uid();
				setState(2773);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(2772);
					match(RESTRICT);
					}
				}

				}
				break;
			case 17:
				_localctx = new AlterByDropConstraintCheckContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(2775);
				match(DROP);
				setState(2776);
				_la = _input.LA(1);
				if ( !(_la==CHECK || _la==CONSTRAINT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2778);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2777);
					ifExists();
					}
				}

				setState(2780);
				uid();
				}
				break;
			case 18:
				_localctx = new AlterByDropPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(2781);
				match(DROP);
				setState(2782);
				match(PRIMARY);
				setState(2783);
				match(KEY);
				}
				break;
			case 19:
				_localctx = new AlterByRenameIndexContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(2784);
				match(RENAME);
				setState(2785);
				((AlterByRenameIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByRenameIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2786);
				uid();
				setState(2787);
				match(TO);
				setState(2788);
				uid();
				}
				break;
			case 20:
				_localctx = new AlterByAlterIndexVisibilityContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(2790);
				match(ALTER);
				setState(2791);
				match(INDEX);
				setState(2792);
				uid();
				setState(2793);
				_la = _input.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 21:
				_localctx = new AlterByDropIndexContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(2795);
				match(DROP);
				setState(2796);
				((AlterByDropIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByDropIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2798);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2797);
					ifExists();
					}
				}

				setState(2800);
				uid();
				}
				break;
			case 22:
				_localctx = new AlterByDropForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(2801);
				match(DROP);
				setState(2802);
				match(FOREIGN);
				setState(2803);
				match(KEY);
				setState(2805);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2804);
					ifExists();
					}
				}

				setState(2807);
				uid();
				}
				break;
			case 23:
				_localctx = new AlterByDisableKeysContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(2808);
				match(DISABLE);
				setState(2809);
				match(KEYS);
				}
				break;
			case 24:
				_localctx = new AlterByEnableKeysContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(2810);
				match(ENABLE);
				setState(2811);
				match(KEYS);
				}
				break;
			case 25:
				_localctx = new AlterByRenameContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(2812);
				match(RENAME);
				setState(2814);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS || _la==TO) {
					{
					setState(2813);
					((AlterByRenameContext)_localctx).renameFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==AS || _la==TO) ) {
						((AlterByRenameContext)_localctx).renameFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2818);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
				case 1:
					{
					setState(2816);
					uid();
					}
					break;
				case 2:
					{
					setState(2817);
					fullId();
					}
					break;
				}
				}
				break;
			case 26:
				_localctx = new AlterByOrderContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(2820);
				match(ORDER);
				setState(2821);
				match(BY);
				setState(2822);
				uidList();
				}
				break;
			case 27:
				_localctx = new AlterByConvertCharsetContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(2823);
				match(CONVERT);
				setState(2824);
				match(TO);
				setState(2825);
				match(CHARACTER);
				setState(2826);
				match(SET);
				setState(2827);
				charsetName();
				setState(2830);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2828);
					match(COLLATE);
					setState(2829);
					collationName();
					}
				}

				}
				break;
			case 28:
				_localctx = new AlterByDefaultCharsetContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(2833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2832);
					match(DEFAULT);
					}
				}

				setState(2835);
				match(CHARACTER);
				setState(2836);
				match(SET);
				setState(2837);
				match(EQUAL_SYMBOL);
				setState(2838);
				charsetName();
				setState(2842);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2839);
					match(COLLATE);
					setState(2840);
					match(EQUAL_SYMBOL);
					setState(2841);
					collationName();
					}
				}

				}
				break;
			case 29:
				_localctx = new AlterByDiscardTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(2844);
				match(DISCARD);
				setState(2845);
				match(TABLESPACE);
				}
				break;
			case 30:
				_localctx = new AlterByImportTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(2846);
				match(IMPORT);
				setState(2847);
				match(TABLESPACE);
				}
				break;
			case 31:
				_localctx = new AlterByForceContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(2848);
				match(FORCE);
				}
				break;
			case 32:
				_localctx = new AlterByValidateContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(2849);
				((AlterByValidateContext)_localctx).validationFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
					((AlterByValidateContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2850);
				match(VALIDATION);
				}
				break;
			case 33:
				_localctx = new AlterByAddPartitionContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(2851);
				match(ADD);
				setState(2852);
				match(PARTITION);
				setState(2854);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2853);
					ifNotExists();
					}
				}

				setState(2856);
				match(LR_BRACKET);
				setState(2857);
				partitionDefinition();
				setState(2862);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2858);
					match(COMMA);
					setState(2859);
					partitionDefinition();
					}
					}
					setState(2864);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2865);
				match(RR_BRACKET);
				}
				break;
			case 34:
				_localctx = new AlterByDropPartitionContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(2867);
				match(DROP);
				setState(2868);
				match(PARTITION);
				setState(2870);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2869);
					ifExists();
					}
				}

				setState(2872);
				uidList();
				}
				break;
			case 35:
				_localctx = new AlterByDiscardPartitionContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(2873);
				match(DISCARD);
				setState(2874);
				match(PARTITION);
				setState(2877);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BUCKETS:
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(2875);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2876);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2879);
				match(TABLESPACE);
				}
				break;
			case 36:
				_localctx = new AlterByImportPartitionContext(_localctx);
				enterOuterAlt(_localctx, 36);
				{
				setState(2880);
				match(IMPORT);
				setState(2881);
				match(PARTITION);
				setState(2884);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BUCKETS:
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(2882);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2883);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2886);
				match(TABLESPACE);
				}
				break;
			case 37:
				_localctx = new AlterByTruncatePartitionContext(_localctx);
				enterOuterAlt(_localctx, 37);
				{
				setState(2887);
				match(TRUNCATE);
				setState(2888);
				match(PARTITION);
				setState(2891);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BUCKETS:
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(2889);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2890);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 38:
				_localctx = new AlterByCoalescePartitionContext(_localctx);
				enterOuterAlt(_localctx, 38);
				{
				setState(2893);
				match(COALESCE);
				setState(2894);
				match(PARTITION);
				setState(2895);
				decimalLiteral();
				}
				break;
			case 39:
				_localctx = new AlterByReorganizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 39);
				{
				setState(2896);
				match(REORGANIZE);
				setState(2897);
				match(PARTITION);
				setState(2898);
				uidList();
				setState(2899);
				match(INTO);
				setState(2900);
				match(LR_BRACKET);
				setState(2901);
				partitionDefinition();
				setState(2906);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2902);
					match(COMMA);
					setState(2903);
					partitionDefinition();
					}
					}
					setState(2908);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2909);
				match(RR_BRACKET);
				}
				break;
			case 40:
				_localctx = new AlterByExchangePartitionContext(_localctx);
				enterOuterAlt(_localctx, 40);
				{
				setState(2911);
				match(EXCHANGE);
				setState(2912);
				match(PARTITION);
				setState(2913);
				uid();
				setState(2914);
				match(WITH);
				setState(2915);
				match(TABLE);
				setState(2916);
				tableName();
				setState(2919);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(2917);
					((AlterByExchangePartitionContext)_localctx).validationFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
						((AlterByExchangePartitionContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2918);
					match(VALIDATION);
					}
				}

				}
				break;
			case 41:
				_localctx = new AlterByAnalyzePartitionContext(_localctx);
				enterOuterAlt(_localctx, 41);
				{
				setState(2921);
				match(ANALYZE);
				setState(2922);
				match(PARTITION);
				setState(2925);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BUCKETS:
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(2923);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2924);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 42:
				_localctx = new AlterByCheckPartitionContext(_localctx);
				enterOuterAlt(_localctx, 42);
				{
				setState(2927);
				match(CHECK);
				setState(2928);
				match(PARTITION);
				setState(2931);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BUCKETS:
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(2929);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2930);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 43:
				_localctx = new AlterByOptimizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 43);
				{
				setState(2933);
				match(OPTIMIZE);
				setState(2934);
				match(PARTITION);
				setState(2937);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BUCKETS:
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(2935);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2936);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 44:
				_localctx = new AlterByRebuildPartitionContext(_localctx);
				enterOuterAlt(_localctx, 44);
				{
				setState(2939);
				match(REBUILD);
				setState(2940);
				match(PARTITION);
				setState(2943);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BUCKETS:
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(2941);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2942);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 45:
				_localctx = new AlterByRepairPartitionContext(_localctx);
				enterOuterAlt(_localctx, 45);
				{
				setState(2945);
				match(REPAIR);
				setState(2946);
				match(PARTITION);
				setState(2949);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BUCKETS:
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(2947);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2948);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 46:
				_localctx = new AlterByRemovePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 46);
				{
				setState(2951);
				match(REMOVE);
				setState(2952);
				match(PARTITIONING);
				}
				break;
			case 47:
				_localctx = new AlterByUpgradePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 47);
				{
				setState(2953);
				match(UPGRADE);
				setState(2954);
				match(PARTITIONING);
				}
				break;
			case 48:
				_localctx = new AlterByAddDefinitionsContext(_localctx);
				enterOuterAlt(_localctx, 48);
				{
				setState(2955);
				match(ADD);
				setState(2957);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2956);
					match(COLUMN);
					}
				}

				setState(2960);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2959);
					ifNotExists();
					}
				}

				setState(2962);
				match(LR_BRACKET);
				setState(2963);
				createDefinition();
				setState(2968);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2964);
					match(COMMA);
					setState(2965);
					createDefinition();
					}
					}
					setState(2970);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2971);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_dropDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2975);
			match(DROP);
			setState(2976);
			((DropDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((DropDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2978);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2977);
				ifExists();
				}
			}

			setState(2980);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropEventContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropEventContext dropEvent() throws RecognitionException {
		DropEventContext _localctx = new DropEventContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_dropEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2982);
			match(DROP);
			setState(2983);
			match(EVENT);
			setState(2985);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2984);
				ifExists();
				}
			}

			setState(2987);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token algType;
		public Token lockType;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(MySqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(MySqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(MySqlParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(MySqlParser.LOCK, i);
		}
		public WaitNowaitClauseContext waitNowaitClause() {
			return getRuleContext(WaitNowaitClauseContext.class,0);
		}
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(MySqlParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(MySqlParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(MySqlParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(MySqlParser.COPY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(MySqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(MySqlParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(MySqlParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(MySqlParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(MySqlParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(MySqlParser.EXCLUSIVE, i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexContext dropIndex() throws RecognitionException {
		DropIndexContext _localctx = new DropIndexContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_dropIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2989);
			match(DROP);
			setState(2990);
			match(INDEX);
			setState(2992);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
			case 1:
				{
				setState(2991);
				((DropIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((DropIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2994);
			uid();
			setState(2995);
			match(ON);
			setState(2996);
			tableName();
			setState(3009);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,394,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(3007);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALGORITHM:
						{
						setState(2997);
						match(ALGORITHM);
						setState(2999);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(2998);
							match(EQUAL_SYMBOL);
							}
						}

						setState(3001);
						((DropIndexContext)_localctx).algType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							((DropIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LOCK:
						{
						setState(3002);
						match(LOCK);
						setState(3004);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(3003);
							match(EQUAL_SYMBOL);
							}
						}

						setState(3006);
						((DropIndexContext)_localctx).lockType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							((DropIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(3011);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,394,_ctx);
			}
			setState(3013);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(3012);
				waitNowaitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLogfileGroupContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropLogfileGroupContext dropLogfileGroup() throws RecognitionException {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_dropLogfileGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3015);
			match(DROP);
			setState(3016);
			match(LOGFILE);
			setState(3017);
			match(GROUP);
			setState(3018);
			uid();
			setState(3019);
			match(ENGINE);
			setState(3020);
			match(EQUAL_SYMBOL);
			setState(3021);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropProcedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropProcedureContext dropProcedure() throws RecognitionException {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_dropProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3023);
			match(DROP);
			setState(3024);
			match(PROCEDURE);
			setState(3026);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3025);
				ifExists();
				}
			}

			setState(3028);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFunctionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFunctionContext dropFunction() throws RecognitionException {
		DropFunctionContext _localctx = new DropFunctionContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_dropFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3030);
			match(DROP);
			setState(3031);
			match(FUNCTION);
			setState(3033);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3032);
				ifExists();
				}
			}

			setState(3035);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropServerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropServerContext dropServer() throws RecognitionException {
		DropServerContext _localctx = new DropServerContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_dropServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3037);
			match(DROP);
			setState(3038);
			match(SERVER);
			setState(3040);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3039);
				ifExists();
				}
			}

			setState(3042);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public WaitNowaitClauseContext waitNowaitClause() {
			return getRuleContext(WaitNowaitClauseContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3044);
			match(DROP);
			setState(3046);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(3045);
				match(TEMPORARY);
				}
			}

			setState(3048);
			match(TABLE);
			setState(3050);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3049);
				ifExists();
				}
			}

			setState(3052);
			tables();
			setState(3054);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(3053);
				waitNowaitClause();
				}
			}

			setState(3057);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3056);
				((DropTableContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropTableContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTablespaceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public DropTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTablespaceContext dropTablespace() throws RecognitionException {
		DropTablespaceContext _localctx = new DropTablespaceContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_dropTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3059);
			match(DROP);
			setState(3060);
			match(TABLESPACE);
			setState(3061);
			uid();
			setState(3067);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(3062);
				match(ENGINE);
				setState(3064);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(3063);
					match(EQUAL_SYMBOL);
					}
				}

				setState(3066);
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTriggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTriggerContext dropTrigger() throws RecognitionException {
		DropTriggerContext _localctx = new DropTriggerContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_dropTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3069);
			match(DROP);
			setState(3070);
			match(TRIGGER);
			setState(3072);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3071);
				ifExists();
				}
			}

			setState(3074);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropViewContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropViewContext dropView() throws RecognitionException {
		DropViewContext _localctx = new DropViewContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_dropView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3076);
			match(DROP);
			setState(3077);
			match(VIEW);
			setState(3079);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3078);
				ifExists();
				}
			}

			setState(3081);
			fullId();
			setState(3086);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3082);
				match(COMMA);
				setState(3083);
				fullId();
				}
				}
				setState(3088);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3090);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3089);
				((DropViewContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropViewContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRoleContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public List<RoleNameContext> roleName() {
			return getRuleContexts(RoleNameContext.class);
		}
		public RoleNameContext roleName(int i) {
			return getRuleContext(RoleNameContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DropRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRoleContext dropRole() throws RecognitionException {
		DropRoleContext _localctx = new DropRoleContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_dropRole);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3092);
			match(DROP);
			setState(3093);
			match(ROLE);
			setState(3095);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3094);
				ifExists();
				}
			}

			setState(3097);
			roleName();
			setState(3102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3098);
				match(COMMA);
				setState(3099);
				roleName();
				}
				}
				setState(3104);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetRoleContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public List<RoleNameContext> roleName() {
			return getRuleContexts(RoleNameContext.class);
		}
		public RoleNameContext roleName(int i) {
			return getRuleContext(RoleNameContext.class,i);
		}
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RoleOptionContext roleOption() {
			return getRuleContext(RoleOptionContext.class,0);
		}
		public SetRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetRoleContext setRole() throws RecognitionException {
		SetRoleContext _localctx = new SetRoleContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_setRole);
		int _la;
		try {
			setState(3138);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3105);
				match(SET);
				setState(3106);
				match(DEFAULT);
				setState(3107);
				match(ROLE);
				setState(3118);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
				case 1:
					{
					setState(3108);
					match(NONE);
					}
					break;
				case 2:
					{
					setState(3109);
					match(ALL);
					}
					break;
				case 3:
					{
					setState(3110);
					roleName();
					setState(3115);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3111);
						match(COMMA);
						setState(3112);
						roleName();
						}
						}
						setState(3117);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(3120);
				match(TO);
				setState(3123);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
				case 1:
					{
					setState(3121);
					userName();
					}
					break;
				case 2:
					{
					setState(3122);
					uid();
					}
					break;
				}
				setState(3132);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3125);
					match(COMMA);
					setState(3128);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
					case 1:
						{
						setState(3126);
						userName();
						}
						break;
					case 2:
						{
						setState(3127);
						uid();
						}
						break;
					}
					}
					}
					setState(3134);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3135);
				match(SET);
				setState(3136);
				match(ROLE);
				setState(3137);
				roleOption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropSequenceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(MySqlParser.SEQUENCE, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode COMMENT_INPUT() { return getToken(MySqlParser.COMMENT_INPUT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DropSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropSequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropSequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropSequenceContext dropSequence() throws RecognitionException {
		DropSequenceContext _localctx = new DropSequenceContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_dropSequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3140);
			match(DROP);
			setState(3142);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(3141);
				match(TEMPORARY);
				}
			}

			setState(3144);
			match(SEQUENCE);
			setState(3146);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3145);
				ifExists();
				}
			}

			setState(3149);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT_INPUT) {
				{
				setState(3148);
				match(COMMENT_INPUT);
				}
			}

			setState(3151);
			fullId();
			setState(3156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3152);
				match(COMMA);
				setState(3153);
				fullId();
				}
				}
				setState(3158);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public List<RenameTableClauseContext> renameTableClause() {
			return getRuleContexts(RenameTableClauseContext.class);
		}
		public RenameTableClauseContext renameTableClause(int i) {
			return getRuleContext(RenameTableClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RenameTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRenameTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableContext renameTable() throws RecognitionException {
		RenameTableContext _localctx = new RenameTableContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_renameTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3159);
			match(RENAME);
			setState(3160);
			match(TABLE);
			setState(3161);
			renameTableClause();
			setState(3166);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3162);
				match(COMMA);
				setState(3163);
				renameTableClause();
				}
				}
				setState(3168);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableClauseContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public WaitNowaitClauseContext waitNowaitClause() {
			return getRuleContext(WaitNowaitClauseContext.class,0);
		}
		public RenameTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameTableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameTableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRenameTableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableClauseContext renameTableClause() throws RecognitionException {
		RenameTableClauseContext _localctx = new RenameTableClauseContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_renameTableClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3169);
			tableName();
			setState(3171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(3170);
				waitNowaitClause();
				}
			}

			setState(3173);
			match(TO);
			setState(3174);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncateTableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public WaitNowaitClauseContext waitNowaitClause() {
			return getRuleContext(WaitNowaitClauseContext.class,0);
		}
		public TruncateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTruncateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTruncateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTruncateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateTableContext truncateTable() throws RecognitionException {
		TruncateTableContext _localctx = new TruncateTableContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_truncateTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3176);
			match(TRUNCATE);
			setState(3178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(3177);
				match(TABLE);
				}
			}

			setState(3180);
			tableName();
			setState(3182);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(3181);
				waitNowaitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallStatementContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(MySqlParser.CALL, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCallStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCallStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCallStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallStatementContext callStatement() throws RecognitionException {
		CallStatementContext _localctx = new CallStatementContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_callStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3184);
			match(CALL);
			setState(3185);
			fullId();
			setState(3192);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
			case 1:
				{
				setState(3186);
				match(LR_BRACKET);
				setState(3189);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
				case 1:
					{
					setState(3187);
					constants();
					}
					break;
				case 2:
					{
					setState(3188);
					expressions();
					}
					break;
				}
				setState(3191);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementContext extends ParserRuleContext {
		public SingleDeleteStatementContext singleDeleteStatement() {
			return getRuleContext(SingleDeleteStatementContext.class,0);
		}
		public MultipleDeleteStatementContext multipleDeleteStatement() {
			return getRuleContext(MultipleDeleteStatementContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_deleteStatement);
		try {
			setState(3196);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3194);
				singleDeleteStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3195);
				multipleDeleteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDoStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDoStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_doStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3198);
			match(DO);
			setState(3199);
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerStatementContext extends ParserRuleContext {
		public HandlerOpenStatementContext handlerOpenStatement() {
			return getRuleContext(HandlerOpenStatementContext.class,0);
		}
		public HandlerReadIndexStatementContext handlerReadIndexStatement() {
			return getRuleContext(HandlerReadIndexStatementContext.class,0);
		}
		public HandlerReadStatementContext handlerReadStatement() {
			return getRuleContext(HandlerReadStatementContext.class,0);
		}
		public HandlerCloseStatementContext handlerCloseStatement() {
			return getRuleContext(HandlerCloseStatementContext.class,0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerStatementContext handlerStatement() throws RecognitionException {
		HandlerStatementContext _localctx = new HandlerStatementContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_handlerStatement);
		try {
			setState(3205);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3201);
				handlerOpenStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3202);
				handlerReadIndexStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3203);
				handlerReadStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3204);
				handlerCloseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public UpdatedElementContext duplicatedFirst;
		public List<UpdatedElementContext> duplicatedElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySqlParser.DUPLICATE, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(MySqlParser.DELAYED, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(MySqlParser.HIGH_PRIORITY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInsertStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInsertStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInsertStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3207);
			match(INSERT);
			setState(3209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (DELAYED - 41)) | (1L << (HIGH_PRIORITY - 41)) | (1L << (LOW_PRIORITY - 41)))) != 0)) {
				{
				setState(3208);
				((InsertStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (DELAYED - 41)) | (1L << (HIGH_PRIORITY - 41)) | (1L << (LOW_PRIORITY - 41)))) != 0)) ) {
					((InsertStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3211);
				match(IGNORE);
				}
			}

			setState(3215);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(3214);
				match(INTO);
				}
			}

			setState(3217);
			tableName();
			setState(3224);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3218);
				match(PARTITION);
				setState(3219);
				match(LR_BRACKET);
				setState(3221);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
					{
					setState(3220);
					((InsertStatementContext)_localctx).partitions = uidList();
					}
				}

				setState(3223);
				match(RR_BRACKET);
				}
			}

			setState(3242);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(3230);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
				case 1:
					{
					setState(3226);
					match(LR_BRACKET);
					setState(3227);
					((InsertStatementContext)_localctx).columns = uidList();
					setState(3228);
					match(RR_BRACKET);
					}
					break;
				}
				setState(3232);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(3233);
				match(SET);
				setState(3234);
				((InsertStatementContext)_localctx).setFirst = updatedElement();
				setState(3239);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3235);
					match(COMMA);
					setState(3236);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).setElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(3241);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3256);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3244);
				match(ON);
				setState(3245);
				match(DUPLICATE);
				setState(3246);
				match(KEY);
				setState(3247);
				match(UPDATE);
				setState(3248);
				((InsertStatementContext)_localctx).duplicatedFirst = updatedElement();
				setState(3253);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3249);
					match(COMMA);
					setState(3250);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).duplicatedElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(3255);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode INFILE() { return getToken(MySqlParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public List<TerminalNode> LINES() { return getTokens(MySqlParser.LINES); }
		public TerminalNode LINES(int i) {
			return getToken(MySqlParser.LINES, i);
		}
		public List<TerminalNode> IGNORE() { return getTokens(MySqlParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(MySqlParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LoadDataStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoadDataStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoadDataStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLoadDataStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadDataStatementContext loadDataStatement() throws RecognitionException {
		LoadDataStatementContext _localctx = new LoadDataStatementContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_loadDataStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3258);
			match(LOAD);
			setState(3259);
			match(DATA);
			setState(3261);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(3260);
				((LoadDataStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadDataStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3264);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(3263);
				match(LOCAL);
				}
			}

			setState(3266);
			match(INFILE);
			setState(3267);
			((LoadDataStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(3269);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(3268);
				((LoadDataStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadDataStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3271);
			match(INTO);
			setState(3272);
			match(TABLE);
			setState(3273);
			tableName();
			setState(3279);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3274);
				match(PARTITION);
				setState(3275);
				match(LR_BRACKET);
				setState(3276);
				uidList();
				setState(3277);
				match(RR_BRACKET);
				}
			}

			setState(3284);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(3281);
				match(CHARACTER);
				setState(3282);
				match(SET);
				setState(3283);
				((LoadDataStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(3292);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS || _la==FIELDS) {
				{
				setState(3286);
				((LoadDataStatementContext)_localctx).fieldsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((LoadDataStatementContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3288); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3287);
					selectFieldsInto();
					}
					}
					setState(3290); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
				}
			}

			setState(3300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINES) {
				{
				setState(3294);
				match(LINES);
				setState(3296); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3295);
					selectLinesInto();
					}
					}
					setState(3298); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STARTING || _la==TERMINATED );
				}
			}

			setState(3306);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3302);
				match(IGNORE);
				setState(3303);
				decimalLiteral();
				setState(3304);
				((LoadDataStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadDataStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3319);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
			case 1:
				{
				setState(3308);
				match(LR_BRACKET);
				setState(3309);
				assignmentField();
				setState(3314);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3310);
					match(COMMA);
					setState(3311);
					assignmentField();
					}
					}
					setState(3316);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3317);
				match(RR_BRACKET);
				}
				break;
			}
			setState(3330);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
			case 1:
				{
				setState(3321);
				match(SET);
				setState(3322);
				updatedElement();
				setState(3327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3323);
					match(COMMA);
					setState(3324);
					updatedElement();
					}
					}
					setState(3329);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadXmlStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token tag;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode XML() { return getToken(MySqlParser.XML, 0); }
		public TerminalNode INFILE() { return getToken(MySqlParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public List<TerminalNode> ROWS() { return getTokens(MySqlParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(MySqlParser.ROWS, i);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySqlParser.LESS_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(MySqlParser.GREATER_SYMBOL, 0); }
		public List<TerminalNode> IGNORE() { return getTokens(MySqlParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(MySqlParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode LINES() { return getToken(MySqlParser.LINES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LoadXmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadXmlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoadXmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoadXmlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLoadXmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadXmlStatementContext loadXmlStatement() throws RecognitionException {
		LoadXmlStatementContext _localctx = new LoadXmlStatementContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_loadXmlStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3332);
			match(LOAD);
			setState(3333);
			match(XML);
			setState(3335);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(3334);
				((LoadXmlStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadXmlStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3338);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(3337);
				match(LOCAL);
				}
			}

			setState(3340);
			match(INFILE);
			setState(3341);
			((LoadXmlStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(3343);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(3342);
				((LoadXmlStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadXmlStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3345);
			match(INTO);
			setState(3346);
			match(TABLE);
			setState(3347);
			tableName();
			setState(3351);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(3348);
				match(CHARACTER);
				setState(3349);
				match(SET);
				setState(3350);
				((LoadXmlStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(3359);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS) {
				{
				setState(3353);
				match(ROWS);
				setState(3354);
				match(IDENTIFIED);
				setState(3355);
				match(BY);
				setState(3356);
				match(LESS_SYMBOL);
				setState(3357);
				((LoadXmlStatementContext)_localctx).tag = match(STRING_LITERAL);
				setState(3358);
				match(GREATER_SYMBOL);
				}
			}

			setState(3365);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3361);
				match(IGNORE);
				setState(3362);
				decimalLiteral();
				setState(3363);
				((LoadXmlStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadXmlStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3378);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,460,_ctx) ) {
			case 1:
				{
				setState(3367);
				match(LR_BRACKET);
				setState(3368);
				assignmentField();
				setState(3373);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3369);
					match(COMMA);
					setState(3370);
					assignmentField();
					}
					}
					setState(3375);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3376);
				match(RR_BRACKET);
				}
				break;
			}
			setState(3389);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
			case 1:
				{
				setState(3380);
				match(SET);
				setState(3381);
				updatedElement();
				setState(3386);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3382);
					match(COMMA);
					setState(3383);
					updatedElement();
					}
					}
					setState(3388);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(MySqlParser.DELAYED, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReplaceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReplaceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReplaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceStatementContext replaceStatement() throws RecognitionException {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_replaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3391);
			match(REPLACE);
			setState(3393);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DELAYED || _la==LOW_PRIORITY) {
				{
				setState(3392);
				((ReplaceStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DELAYED || _la==LOW_PRIORITY) ) {
					((ReplaceStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3396);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(3395);
				match(INTO);
				}
			}

			setState(3398);
			tableName();
			setState(3404);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3399);
				match(PARTITION);
				setState(3400);
				match(LR_BRACKET);
				setState(3401);
				((ReplaceStatementContext)_localctx).partitions = uidList();
				setState(3402);
				match(RR_BRACKET);
				}
			}

			setState(3422);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(3410);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
				case 1:
					{
					setState(3406);
					match(LR_BRACKET);
					setState(3407);
					((ReplaceStatementContext)_localctx).columns = uidList();
					setState(3408);
					match(RR_BRACKET);
					}
					break;
				}
				setState(3412);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(3413);
				match(SET);
				setState(3414);
				((ReplaceStatementContext)_localctx).setFirst = updatedElement();
				setState(3419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3415);
					match(COMMA);
					setState(3416);
					((ReplaceStatementContext)_localctx).updatedElement = updatedElement();
					((ReplaceStatementContext)_localctx).setElements.add(((ReplaceStatementContext)_localctx).updatedElement);
					}
					}
					setState(3421);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
	 
		public SelectStatementContext() { }
		public void copyFrom(SelectStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnionSelectContext extends SelectStatementContext {
		public Token unionType;
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public List<UnionStatementContext> unionStatement() {
			return getRuleContexts(UnionStatementContext.class);
		}
		public UnionStatementContext unionStatement(int i) {
			return getRuleContext(UnionStatementContext.class,i);
		}
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnionParenthesisSelectContext extends SelectStatementContext {
		public Token unionType;
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public List<UnionParenthesisContext> unionParenthesis() {
			return getRuleContexts(UnionParenthesisContext.class);
		}
		public UnionParenthesisContext unionParenthesis(int i) {
			return getRuleContext(UnionParenthesisContext.class,i);
		}
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionParenthesisSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleSelectContext extends SelectStatementContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public SimpleSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ParenthesisSelectContext extends SelectStatementContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public ParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitParenthesisSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_selectStatement);
		int _la;
		try {
			int _alt;
			setState(3479);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3424);
				querySpecification();
				setState(3426);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
				case 1:
					{
					setState(3425);
					lockClause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3428);
				queryExpression();
				setState(3430);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
				case 1:
					{
					setState(3429);
					lockClause();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new UnionSelectContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3432);
				querySpecificationNointo();
				setState(3434); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3433);
						unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3436); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,471,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(3446);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(3438);
					match(UNION);
					setState(3440);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(3439);
						((UnionSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(3444);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SELECT:
						{
						setState(3442);
						querySpecification();
						}
						break;
					case LR_BRACKET:
						{
						setState(3443);
						queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(3449);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,475,_ctx) ) {
				case 1:
					{
					setState(3448);
					orderByClause();
					}
					break;
				}
				setState(3452);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(3451);
					limitClause();
					}
				}

				setState(3455);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
				case 1:
					{
					setState(3454);
					lockClause();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3457);
				queryExpressionNointo();
				setState(3459); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3458);
						unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3461); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,478,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(3468);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(3463);
					match(UNION);
					setState(3465);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(3464);
						((UnionParenthesisSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionParenthesisSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(3467);
					queryExpression();
					}
				}

				setState(3471);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
				case 1:
					{
					setState(3470);
					orderByClause();
					}
					break;
				}
				setState(3474);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(3473);
					limitClause();
					}
				}

				setState(3477);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
				case 1:
					{
					setState(3476);
					lockClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStatementContext extends ParserRuleContext {
		public SingleUpdateStatementContext singleUpdateStatement() {
			return getRuleContext(SingleUpdateStatementContext.class,0);
		}
		public MultipleUpdateStatementContext multipleUpdateStatement() {
			return getRuleContext(MultipleUpdateStatementContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_updateStatement);
		try {
			setState(3483);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3481);
				singleUpdateStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3482);
				multipleUpdateStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementValueContext extends ParserRuleContext {
		public Token insertFormat;
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public List<ExpressionsWithDefaultsContext> expressionsWithDefaults() {
			return getRuleContexts(ExpressionsWithDefaultsContext.class);
		}
		public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
			return getRuleContext(ExpressionsWithDefaultsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public InsertStatementValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatementValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInsertStatementValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInsertStatementValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInsertStatementValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementValueContext insertStatementValue() throws RecognitionException {
		InsertStatementValueContext _localctx = new InsertStatementValueContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_insertStatementValue);
		int _la;
		try {
			setState(3503);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(3485);
				selectStatement();
				}
				break;
			case VALUES:
			case VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3486);
				((InsertStatementValueContext)_localctx).insertFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==VALUES || _la==VALUE) ) {
					((InsertStatementValueContext)_localctx).insertFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3487);
				match(LR_BRACKET);
				setState(3489);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
				case 1:
					{
					setState(3488);
					expressionsWithDefaults();
					}
					break;
				}
				setState(3491);
				match(RR_BRACKET);
				setState(3500);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3492);
					match(COMMA);
					setState(3493);
					match(LR_BRACKET);
					setState(3495);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
					case 1:
						{
						setState(3494);
						expressionsWithDefaults();
						}
						break;
					}
					setState(3497);
					match(RR_BRACKET);
					}
					}
					setState(3502);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdatedElementContext extends ParserRuleContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public UpdatedElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updatedElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUpdatedElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUpdatedElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUpdatedElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdatedElementContext updatedElement() throws RecognitionException {
		UpdatedElementContext _localctx = new UpdatedElementContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_updatedElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3505);
			fullColumnName();
			setState(3506);
			match(EQUAL_SYMBOL);
			setState(3509);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
			case 1:
				{
				setState(3507);
				expression(0);
				}
				break;
			case 2:
				{
				setState(3508);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentFieldContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public AssignmentFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAssignmentField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAssignmentField(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAssignmentField(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentFieldContext assignmentField() throws RecognitionException {
		AssignmentFieldContext _localctx = new AssignmentFieldContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_assignmentField);
		try {
			setState(3513);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BUCKETS:
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3511);
				uid();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3512);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode SHARE() { return getToken(MySqlParser.SHARE, 0); }
		public TerminalNode MODE() { return getToken(MySqlParser.MODE, 0); }
		public LockOptionContext lockOption() {
			return getRuleContext(LockOptionContext.class,0);
		}
		public LockClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLockClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLockClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLockClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockClauseContext lockClause() throws RecognitionException {
		LockClauseContext _localctx = new LockClauseContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_lockClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3521);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(3515);
				match(FOR);
				setState(3516);
				match(UPDATE);
				}
				break;
			case LOCK:
				{
				setState(3517);
				match(LOCK);
				setState(3518);
				match(IN);
				setState(3519);
				match(SHARE);
				setState(3520);
				match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3524);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
			case 1:
				{
				setState(3523);
				lockOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public SingleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSingleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSingleDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSingleDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleDeleteStatementContext singleDeleteStatement() throws RecognitionException {
		SingleDeleteStatementContext _localctx = new SingleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_singleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3526);
			match(DELETE);
			setState(3528);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3527);
				((SingleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3531);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(3530);
				match(QUICK);
				}
			}

			setState(3534);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3533);
				match(IGNORE);
				}
			}

			setState(3536);
			match(FROM);
			setState(3537);
			tableName();
			setState(3543);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3538);
				match(PARTITION);
				setState(3539);
				match(LR_BRACKET);
				setState(3540);
				uidList();
				setState(3541);
				match(RR_BRACKET);
				}
			}

			setState(3547);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3545);
				match(WHERE);
				setState(3546);
				expression(0);
				}
			}

			setState(3550);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3549);
				orderByClause();
				}
			}

			setState(3554);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3552);
				match(LIMIT);
				setState(3553);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public List<TerminalNode> DOT() { return getTokens(MySqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MySqlParser.DOT, i);
		}
		public List<TerminalNode> STAR() { return getTokens(MySqlParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(MySqlParser.STAR, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public MultipleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMultipleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMultipleDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMultipleDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleDeleteStatementContext multipleDeleteStatement() throws RecognitionException {
		MultipleDeleteStatementContext _localctx = new MultipleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_multipleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3556);
			match(DELETE);
			setState(3558);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3557);
				((MultipleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3561);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
			case 1:
				{
				setState(3560);
				match(QUICK);
				}
				break;
			}
			setState(3564);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3563);
				match(IGNORE);
				}
			}

			setState(3605);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BUCKETS:
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				{
				setState(3566);
				tableName();
				setState(3569);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(3567);
					match(DOT);
					setState(3568);
					match(STAR);
					}
				}

				setState(3579);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3571);
					match(COMMA);
					setState(3572);
					tableName();
					setState(3575);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(3573);
						match(DOT);
						setState(3574);
						match(STAR);
						}
					}

					}
					}
					setState(3581);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3582);
				match(FROM);
				setState(3583);
				tableSources();
				}
				break;
			case FROM:
				{
				setState(3585);
				match(FROM);
				setState(3586);
				tableName();
				setState(3589);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(3587);
					match(DOT);
					setState(3588);
					match(STAR);
					}
				}

				setState(3599);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3591);
					match(COMMA);
					setState(3592);
					tableName();
					setState(3595);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(3593);
						match(DOT);
						setState(3594);
						match(STAR);
						}
					}

					}
					}
					setState(3601);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3602);
				match(USING);
				setState(3603);
				tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3609);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3607);
				match(WHERE);
				setState(3608);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerOpenStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerOpenStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerOpenStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerOpenStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerOpenStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerOpenStatementContext handlerOpenStatement() throws RecognitionException {
		HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_handlerOpenStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3611);
			match(HANDLER);
			setState(3612);
			tableName();
			setState(3613);
			match(OPEN);
			setState(3618);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
			case 1:
				{
				setState(3615);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3614);
					match(AS);
					}
				}

				setState(3617);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadIndexStatementContext extends ParserRuleContext {
		public UidContext index;
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode PREV() { return getToken(MySqlParser.PREV, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public HandlerReadIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerReadIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerReadIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerReadIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadIndexStatementContext handlerReadIndexStatement() throws RecognitionException {
		HandlerReadIndexStatementContext _localctx = new HandlerReadIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_handlerReadIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3620);
			match(HANDLER);
			setState(3621);
			tableName();
			setState(3622);
			match(READ);
			setState(3623);
			((HandlerReadIndexStatementContext)_localctx).index = uid();
			setState(3630);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL_SYMBOL:
			case GREATER_SYMBOL:
			case LESS_SYMBOL:
			case EXCLAMATION_SYMBOL:
				{
				setState(3624);
				comparisonOperator();
				setState(3625);
				match(LR_BRACKET);
				setState(3626);
				constants();
				setState(3627);
				match(RR_BRACKET);
				}
				break;
			case FIRST:
			case LAST:
			case NEXT:
			case PREV:
				{
				setState(3629);
				((HandlerReadIndexStatementContext)_localctx).moveOrder = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NEXT || _la==PREV) ) {
					((HandlerReadIndexStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3634);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3632);
				match(WHERE);
				setState(3633);
				expression(0);
				}
			}

			setState(3638);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3636);
				match(LIMIT);
				setState(3637);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadStatementContext extends ParserRuleContext {
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public HandlerReadStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerReadStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerReadStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerReadStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadStatementContext handlerReadStatement() throws RecognitionException {
		HandlerReadStatementContext _localctx = new HandlerReadStatementContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_handlerReadStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3640);
			match(HANDLER);
			setState(3641);
			tableName();
			setState(3642);
			match(READ);
			setState(3643);
			((HandlerReadStatementContext)_localctx).moveOrder = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
				((HandlerReadStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3646);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3644);
				match(WHERE);
				setState(3645);
				expression(0);
				}
			}

			setState(3650);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3648);
				match(LIMIT);
				setState(3649);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerCloseStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerCloseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerCloseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerCloseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerCloseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerCloseStatementContext handlerCloseStatement() throws RecognitionException {
		HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_handlerCloseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3652);
			match(HANDLER);
			setState(3653);
			tableName();
			setState(3654);
			match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SingleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSingleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSingleUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSingleUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleUpdateStatementContext singleUpdateStatement() throws RecognitionException {
		SingleUpdateStatementContext _localctx = new SingleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_singleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3656);
			match(UPDATE);
			setState(3658);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3657);
				((SingleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3661);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3660);
				match(IGNORE);
				}
			}

			setState(3663);
			tableName();
			setState(3668);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
				{
				setState(3665);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3664);
					match(AS);
					}
				}

				setState(3667);
				uid();
				}
			}

			setState(3670);
			match(SET);
			setState(3671);
			updatedElement();
			setState(3676);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3672);
				match(COMMA);
				setState(3673);
				updatedElement();
				}
				}
				setState(3678);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3681);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3679);
				match(WHERE);
				setState(3680);
				expression(0);
				}
			}

			setState(3684);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3683);
				orderByClause();
				}
			}

			setState(3687);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3686);
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public MultipleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMultipleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMultipleUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMultipleUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleUpdateStatementContext multipleUpdateStatement() throws RecognitionException {
		MultipleUpdateStatementContext _localctx = new MultipleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_multipleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3689);
			match(UPDATE);
			setState(3691);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3690);
				((MultipleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3694);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3693);
				match(IGNORE);
				}
			}

			setState(3696);
			tableSources();
			setState(3697);
			match(SET);
			setState(3698);
			updatedElement();
			setState(3703);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3699);
				match(COMMA);
				setState(3700);
				updatedElement();
				}
				}
				setState(3705);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3708);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3706);
				match(WHERE);
				setState(3707);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOrderByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_orderByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3710);
			match(ORDER);
			setState(3711);
			match(BY);
			setState(3712);
			orderByExpression();
			setState(3717);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3713);
				match(COMMA);
				setState(3714);
				orderByExpression();
				}
				}
				setState(3719);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByExpressionContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOrderByExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOrderByExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOrderByExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByExpressionContext orderByExpression() throws RecognitionException {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_orderByExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3720);
			expression(0);
			setState(3722);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
			case 1:
				{
				setState(3721);
				((OrderByExpressionContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((OrderByExpressionContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourcesContext extends ParserRuleContext {
		public List<TableSourceContext> tableSource() {
			return getRuleContexts(TableSourceContext.class);
		}
		public TableSourceContext tableSource(int i) {
			return getRuleContext(TableSourceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TableSourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSources; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSources(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSources(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSources(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourcesContext tableSources() throws RecognitionException {
		TableSourcesContext _localctx = new TableSourcesContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_tableSources);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3724);
			tableSource();
			setState(3729);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3725);
				match(COMMA);
				setState(3726);
				tableSource();
				}
				}
				setState(3731);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceContext extends ParserRuleContext {
		public TableSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSource; }
	 
		public TableSourceContext() { }
		public void copyFrom(TableSourceContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableSourceNestedContext extends TableSourceContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceNestedContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourceNested(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourceNested(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSourceNested(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourceBaseContext extends TableSourceContext {
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceBaseContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourceBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourceBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSourceBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceContext tableSource() throws RecognitionException {
		TableSourceContext _localctx = new TableSourceContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_tableSource);
		int _la;
		try {
			int _alt;
			setState(3749);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,536,_ctx) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3732);
				tableSourceItem();
				setState(3736);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,534,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3733);
						joinPart();
						}
						} 
					}
					setState(3738);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,534,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3739);
				match(LR_BRACKET);
				setState(3740);
				tableSourceItem();
				setState(3744);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CROSS - 33)) | (1L << (INNER - 33)) | (1L << (JOIN - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & ((1L << (NATURAL - 109)) | (1L << (RIGHT - 109)) | (1L << (STRAIGHT_JOIN - 109)))) != 0)) {
					{
					{
					setState(3741);
					joinPart();
					}
					}
					setState(3746);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3747);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceItemContext extends ParserRuleContext {
		public TableSourceItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSourceItem; }
	 
		public TableSourceItemContext() { }
		public void copyFrom(TableSourceItemContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubqueryTableItemContext extends TableSourceItemContext {
		public SelectStatementContext parenthesisSubquery;
		public UidContext alias;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SubqueryTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubqueryTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AtomTableItemContext extends TableSourceItemContext {
		public UidContext alias;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<IndexHintContext> indexHint() {
			return getRuleContexts(IndexHintContext.class);
		}
		public IndexHintContext indexHint(int i) {
			return getRuleContext(IndexHintContext.class,i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AtomTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAtomTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAtomTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAtomTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourcesItemContext extends TableSourceItemContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TableSourcesItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourcesItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourcesItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSourcesItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceItemContext tableSourceItem() throws RecognitionException {
		TableSourceItemContext _localctx = new TableSourceItemContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_tableSourceItem);
		int _la;
		try {
			int _alt;
			setState(3791);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3751);
				tableName();
				setState(3757);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(3752);
					match(PARTITION);
					setState(3753);
					match(LR_BRACKET);
					setState(3754);
					uidList();
					setState(3755);
					match(RR_BRACKET);
					}
				}

				setState(3763);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
				case 1:
					{
					setState(3760);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3759);
						match(AS);
						}
					}

					setState(3762);
					((AtomTableItemContext)_localctx).alias = uid();
					}
					break;
				}
				setState(3773);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
				case 1:
					{
					setState(3765);
					indexHint();
					setState(3770);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,540,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3766);
							match(COMMA);
							setState(3767);
							indexHint();
							}
							} 
						}
						setState(3772);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,540,_ctx);
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3780);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
				case 1:
					{
					setState(3775);
					selectStatement();
					}
					break;
				case 2:
					{
					setState(3776);
					match(LR_BRACKET);
					setState(3777);
					((SubqueryTableItemContext)_localctx).parenthesisSubquery = selectStatement();
					setState(3778);
					match(RR_BRACKET);
					}
					break;
				}
				setState(3783);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3782);
					match(AS);
					}
				}

				setState(3785);
				((SubqueryTableItemContext)_localctx).alias = uid();
				}
				break;
			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3787);
				match(LR_BRACKET);
				setState(3788);
				tableSources();
				setState(3789);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintContext extends ParserRuleContext {
		public Token indexHintAction;
		public Token keyFormat;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode FORCE() { return getToken(MySqlParser.FORCE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public IndexHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintContext indexHint() throws RecognitionException {
		IndexHintContext _localctx = new IndexHintContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_indexHint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3793);
			((IndexHintContext)_localctx).indexHintAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
				((IndexHintContext)_localctx).indexHintAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3794);
			((IndexHintContext)_localctx).keyFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
				((IndexHintContext)_localctx).keyFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3797);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3795);
				match(FOR);
				setState(3796);
				indexHintType();
				}
			}

			setState(3799);
			match(LR_BRACKET);
			setState(3800);
			uidList();
			setState(3801);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintTypeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexHintType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexHintType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexHintType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintTypeContext indexHintType() throws RecognitionException {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_indexHintType);
		try {
			setState(3808);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3803);
				match(JOIN);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3804);
				match(ORDER);
				setState(3805);
				match(BY);
				}
				break;
			case GROUP:
				enterOuterAlt(_localctx, 3);
				{
				setState(3806);
				match(GROUP);
				setState(3807);
				match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinPartContext extends ParserRuleContext {
		public JoinPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinPart; }
	 
		public JoinPartContext() { }
		public void copyFrom(JoinPartContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class InnerJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode INNER() { return getToken(MySqlParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(MySqlParser.CROSS, 0); }
		public InnerJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInnerJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInnerJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInnerJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NaturalJoinContext extends JoinPartContext {
		public TerminalNode NATURAL() { return getToken(MySqlParser.NATURAL, 0); }
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(MySqlParser.OUTER, 0); }
		public NaturalJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNaturalJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNaturalJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNaturalJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OuterJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode OUTER() { return getToken(MySqlParser.OUTER, 0); }
		public OuterJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOuterJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOuterJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOuterJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StraightJoinContext extends JoinPartContext {
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySqlParser.STRAIGHT_JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public StraightJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStraightJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStraightJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStraightJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinPartContext joinPart() throws RecognitionException {
		JoinPartContext _localctx = new JoinPartContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_joinPart);
		int _la;
		try {
			setState(3854);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS:
			case INNER:
			case JOIN:
				_localctx = new InnerJoinContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3811);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CROSS || _la==INNER) {
					{
					setState(3810);
					_la = _input.LA(1);
					if ( !(_la==CROSS || _la==INNER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3813);
				match(JOIN);
				setState(3814);
				tableSourceItem();
				setState(3822);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
				case 1:
					{
					setState(3815);
					match(ON);
					setState(3816);
					expression(0);
					}
					break;
				case 2:
					{
					setState(3817);
					match(USING);
					setState(3818);
					match(LR_BRACKET);
					setState(3819);
					uidList();
					setState(3820);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3824);
				match(STRAIGHT_JOIN);
				setState(3825);
				tableSourceItem();
				setState(3828);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,549,_ctx) ) {
				case 1:
					{
					setState(3826);
					match(ON);
					setState(3827);
					expression(0);
					}
					break;
				}
				}
				break;
			case LEFT:
			case RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3830);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3832);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3831);
					match(OUTER);
					}
				}

				setState(3834);
				match(JOIN);
				setState(3835);
				tableSourceItem();
				setState(3843);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(3836);
					match(ON);
					setState(3837);
					expression(0);
					}
					break;
				case USING:
					{
					setState(3838);
					match(USING);
					setState(3839);
					match(LR_BRACKET);
					setState(3840);
					uidList();
					setState(3841);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3845);
				match(NATURAL);
				setState(3850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					setState(3846);
					_la = _input.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3848);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(3847);
						match(OUTER);
						}
					}

					}
				}

				setState(3852);
				match(JOIN);
				setState(3853);
				tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionContext queryExpression() throws RecognitionException {
		QueryExpressionContext _localctx = new QueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_queryExpression);
		try {
			setState(3864);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3856);
				match(LR_BRACKET);
				setState(3857);
				querySpecification();
				setState(3858);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3860);
				match(LR_BRACKET);
				setState(3861);
				queryExpression();
				setState(3862);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionNointoContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public QueryExpressionNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQueryExpressionNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQueryExpressionNointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQueryExpressionNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionNointoContext queryExpressionNointo() throws RecognitionException {
		QueryExpressionNointoContext _localctx = new QueryExpressionNointoContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_queryExpressionNointo);
		try {
			setState(3874);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3866);
				match(LR_BRACKET);
				setState(3867);
				querySpecificationNointo();
				setState(3868);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3870);
				match(LR_BRACKET);
				setState(3871);
				queryExpressionNointo();
				setState(3872);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public SelectIntoExpressionContext selectIntoExpression() {
			return getRuleContext(SelectIntoExpressionContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQuerySpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQuerySpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_querySpecification);
		int _la;
		try {
			int _alt;
			setState(3934);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,573,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3876);
				match(SELECT);
				setState(3880);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,557,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3877);
						selectSpec();
						}
						} 
					}
					setState(3882);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,557,_ctx);
				}
				setState(3883);
				selectElements();
				setState(3885);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(3884);
					selectIntoExpression();
					}
				}

				setState(3888);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
				case 1:
					{
					setState(3887);
					fromClause();
					}
					break;
				}
				setState(3891);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
				case 1:
					{
					setState(3890);
					groupByClause();
					}
					break;
				}
				setState(3894);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HAVING) {
					{
					setState(3893);
					havingClause();
					}
				}

				setState(3897);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WINDOW) {
					{
					setState(3896);
					windowClause();
					}
				}

				setState(3900);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
				case 1:
					{
					setState(3899);
					orderByClause();
					}
					break;
				}
				setState(3903);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,564,_ctx) ) {
				case 1:
					{
					setState(3902);
					limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3905);
				match(SELECT);
				setState(3909);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,565,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3906);
						selectSpec();
						}
						} 
					}
					setState(3911);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,565,_ctx);
				}
				setState(3912);
				selectElements();
				setState(3914);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,566,_ctx) ) {
				case 1:
					{
					setState(3913);
					fromClause();
					}
					break;
				}
				setState(3917);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,567,_ctx) ) {
				case 1:
					{
					setState(3916);
					groupByClause();
					}
					break;
				}
				setState(3920);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HAVING) {
					{
					setState(3919);
					havingClause();
					}
				}

				setState(3923);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WINDOW) {
					{
					setState(3922);
					windowClause();
					}
				}

				setState(3926);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,570,_ctx) ) {
				case 1:
					{
					setState(3925);
					orderByClause();
					}
					break;
				}
				setState(3929);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
				case 1:
					{
					setState(3928);
					limitClause();
					}
					break;
				}
				setState(3932);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(3931);
					selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationNointoContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecificationNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQuerySpecificationNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQuerySpecificationNointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQuerySpecificationNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationNointoContext querySpecificationNointo() throws RecognitionException {
		QuerySpecificationNointoContext _localctx = new QuerySpecificationNointoContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_querySpecificationNointo);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3936);
			match(SELECT);
			setState(3940);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,574,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3937);
					selectSpec();
					}
					} 
				}
				setState(3942);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,574,_ctx);
			}
			setState(3943);
			selectElements();
			setState(3945);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,575,_ctx) ) {
			case 1:
				{
				setState(3944);
				fromClause();
				}
				break;
			}
			setState(3948);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,576,_ctx) ) {
			case 1:
				{
				setState(3947);
				groupByClause();
				}
				break;
			}
			setState(3951);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(3950);
				havingClause();
				}
			}

			setState(3954);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WINDOW) {
				{
				setState(3953);
				windowClause();
				}
			}

			setState(3957);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,579,_ctx) ) {
			case 1:
				{
				setState(3956);
				orderByClause();
				}
				break;
			}
			setState(3960);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,580,_ctx) ) {
			case 1:
				{
				setState(3959);
				limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionParenthesisContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionParenthesis; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionParenthesis(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionParenthesis(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionParenthesis(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionParenthesisContext unionParenthesis() throws RecognitionException {
		UnionParenthesisContext _localctx = new UnionParenthesisContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_unionParenthesis);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3962);
			match(UNION);
			setState(3964);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3963);
				((UnionParenthesisContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionParenthesisContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3966);
			queryExpressionNointo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionStatementContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionStatementContext unionStatement() throws RecognitionException {
		UnionStatementContext _localctx = new UnionStatementContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_unionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3968);
			match(UNION);
			setState(3970);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3969);
				((UnionStatementContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionStatementContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3974);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(3972);
				querySpecificationNointo();
				}
				break;
			case LR_BRACKET:
				{
				setState(3973);
				queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectSpecContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode DISTINCTROW() { return getToken(MySqlParser.DISTINCTROW, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(MySqlParser.HIGH_PRIORITY, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySqlParser.STRAIGHT_JOIN, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(MySqlParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(MySqlParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS() { return getToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0); }
		public SelectSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectSpecContext selectSpec() throws RecognitionException {
		SelectSpecContext _localctx = new SelectSpecContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_selectSpec);
		int _la;
		try {
			setState(3984);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case DISTINCT:
			case DISTINCTROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(3976);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case HIGH_PRIORITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3977);
				match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3978);
				match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3979);
				match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				enterOuterAlt(_localctx, 5);
				{
				setState(3980);
				match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(3981);
				match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				enterOuterAlt(_localctx, 7);
				{
				setState(3982);
				_la = _input.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				enterOuterAlt(_localctx, 8);
				{
				setState(3983);
				match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementsContext extends ParserRuleContext {
		public Token star;
		public List<SelectElementContext> selectElement() {
			return getRuleContexts(SelectElementContext.class);
		}
		public SelectElementContext selectElement(int i) {
			return getRuleContext(SelectElementContext.class,i);
		}
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SelectElementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectElements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectElements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectElements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementsContext selectElements() throws RecognitionException {
		SelectElementsContext _localctx = new SelectElementsContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_selectElements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3988);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,585,_ctx) ) {
			case 1:
				{
				setState(3986);
				((SelectElementsContext)_localctx).star = match(STAR);
				}
				break;
			case 2:
				{
				setState(3987);
				selectElement();
				}
				break;
			}
			setState(3994);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3990);
				match(COMMA);
				setState(3991);
				selectElement();
				}
				}
				setState(3996);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementContext extends ParserRuleContext {
		public SelectElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElement; }
	 
		public SelectElementContext() { }
		public void copyFrom(SelectElementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectExpressionElementContext extends SelectElementContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(MySqlParser.VAR_ASSIGN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectExpressionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectExpressionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectExpressionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectExpressionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectFunctionElementContext extends SelectElementContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectFunctionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectFunctionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectFunctionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectFunctionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectStarElementContext extends SelectElementContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public SelectStarElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectStarElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectStarElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectStarElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectColumnElementContext extends SelectElementContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectColumnElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectColumnElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectColumnElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectColumnElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementContext selectElement() throws RecognitionException {
		SelectElementContext _localctx = new SelectElementContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_selectElement);
		int _la;
		try {
			setState(4026);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3997);
				fullId();
				setState(3998);
				match(DOT);
				setState(3999);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4001);
				fullColumnName();
				setState(4006);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
				case 1:
					{
					setState(4003);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(4002);
						match(AS);
						}
					}

					setState(4005);
					uid();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4008);
				functionCall();
				setState(4013);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
				case 1:
					{
					setState(4010);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(4009);
						match(AS);
						}
					}

					setState(4012);
					uid();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4017);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,591,_ctx) ) {
				case 1:
					{
					setState(4015);
					match(LOCAL_ID);
					setState(4016);
					match(VAR_ASSIGN);
					}
					break;
				}
				setState(4019);
				expression(0);
				setState(4024);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
				case 1:
					{
					setState(4021);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(4020);
						match(AS);
						}
					}

					setState(4023);
					uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectIntoExpressionContext extends ParserRuleContext {
		public SelectIntoExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectIntoExpression; }
	 
		public SelectIntoExpressionContext() { }
		public void copyFrom(SelectIntoExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectIntoVariablesContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SelectIntoVariablesContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoVariables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectIntoVariables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoTextFileContext extends SelectIntoExpressionContext {
		public Token filename;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode OUTFILE() { return getToken(MySqlParser.OUTFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode LINES() { return getToken(MySqlParser.LINES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public SelectIntoTextFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoTextFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoTextFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectIntoTextFile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoDumpFileContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySqlParser.DUMPFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public SelectIntoDumpFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoDumpFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoDumpFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectIntoDumpFile(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectIntoExpressionContext selectIntoExpression() throws RecognitionException {
		SelectIntoExpressionContext _localctx = new SelectIntoExpressionContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_selectIntoExpression);
		int _la;
		try {
			setState(4064);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,601,_ctx) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4028);
				match(INTO);
				setState(4029);
				assignmentField();
				setState(4034);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4030);
					match(COMMA);
					setState(4031);
					assignmentField();
					}
					}
					setState(4036);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4037);
				match(INTO);
				setState(4038);
				match(DUMPFILE);
				setState(4039);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(4040);
				match(INTO);
				setState(4041);
				match(OUTFILE);
				setState(4042);
				((SelectIntoTextFileContext)_localctx).filename = match(STRING_LITERAL);
				setState(4046);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(4043);
					match(CHARACTER);
					setState(4044);
					match(SET);
					setState(4045);
					((SelectIntoTextFileContext)_localctx).charset = charsetName();
					}
				}

				setState(4054);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,598,_ctx) ) {
				case 1:
					{
					setState(4048);
					((SelectIntoTextFileContext)_localctx).fieldsFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
						((SelectIntoTextFileContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4050); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4049);
						selectFieldsInto();
						}
						}
						setState(4052); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
					}
					break;
				}
				setState(4062);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(4056);
					match(LINES);
					setState(4058); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4057);
						selectLinesInto();
						}
						}
						setState(4060); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==STARTING || _la==TERMINATED );
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectFieldsIntoContext extends ParserRuleContext {
		public Token terminationField;
		public Token enclosion;
		public Token escaping;
		public TerminalNode TERMINATED() { return getToken(MySqlParser.TERMINATED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENCLOSED() { return getToken(MySqlParser.ENCLOSED, 0); }
		public TerminalNode OPTIONALLY() { return getToken(MySqlParser.OPTIONALLY, 0); }
		public TerminalNode ESCAPED() { return getToken(MySqlParser.ESCAPED, 0); }
		public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFieldsInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectFieldsInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectFieldsInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectFieldsInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectFieldsIntoContext selectFieldsInto() throws RecognitionException {
		SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_selectFieldsInto);
		int _la;
		try {
			setState(4078);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED:
				enterOuterAlt(_localctx, 1);
				{
				setState(4066);
				match(TERMINATED);
				setState(4067);
				match(BY);
				setState(4068);
				((SelectFieldsIntoContext)_localctx).terminationField = match(STRING_LITERAL);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(4070);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY) {
					{
					setState(4069);
					match(OPTIONALLY);
					}
				}

				setState(4072);
				match(ENCLOSED);
				setState(4073);
				match(BY);
				setState(4074);
				((SelectFieldsIntoContext)_localctx).enclosion = match(STRING_LITERAL);
				}
				break;
			case ESCAPED:
				enterOuterAlt(_localctx, 3);
				{
				setState(4075);
				match(ESCAPED);
				setState(4076);
				match(BY);
				setState(4077);
				((SelectFieldsIntoContext)_localctx).escaping = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLinesIntoContext extends ParserRuleContext {
		public Token starting;
		public Token terminationLine;
		public TerminalNode STARTING() { return getToken(MySqlParser.STARTING, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode TERMINATED() { return getToken(MySqlParser.TERMINATED, 0); }
		public SelectLinesIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLinesInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectLinesInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectLinesInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectLinesInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLinesIntoContext selectLinesInto() throws RecognitionException {
		SelectLinesIntoContext _localctx = new SelectLinesIntoContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_selectLinesInto);
		try {
			setState(4086);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STARTING:
				enterOuterAlt(_localctx, 1);
				{
				setState(4080);
				match(STARTING);
				setState(4081);
				match(BY);
				setState(4082);
				((SelectLinesIntoContext)_localctx).starting = match(STRING_LITERAL);
				}
				break;
			case TERMINATED:
				enterOuterAlt(_localctx, 2);
				{
				setState(4083);
				match(TERMINATED);
				setState(4084);
				match(BY);
				setState(4085);
				((SelectLinesIntoContext)_localctx).terminationLine = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public ExpressionContext whereExpr;
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_fromClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4090);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(4088);
				match(FROM);
				setState(4089);
				tableSources();
				}
			}

			setState(4094);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(4092);
				match(WHERE);
				setState(4093);
				((FromClauseContext)_localctx).whereExpr = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(MySqlParser.ROLLUP, 0); }
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGroupByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGroupByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_groupByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4096);
			match(GROUP);
			setState(4097);
			match(BY);
			setState(4098);
			groupByItem();
			setState(4103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4099);
				match(COMMA);
				setState(4100);
				groupByItem();
				}
				}
				setState(4105);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4108);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
			case 1:
				{
				setState(4106);
				match(WITH);
				setState(4107);
				match(ROLLUP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public ExpressionContext havingExpr;
		public TerminalNode HAVING() { return getToken(MySqlParser.HAVING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4110);
			match(HAVING);
			setState(4111);
			((HavingClauseContext)_localctx).havingExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowClauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(MySqlParser.WINDOW, 0); }
		public List<WindowNameContext> windowName() {
			return getRuleContexts(WindowNameContext.class);
		}
		public WindowNameContext windowName(int i) {
			return getRuleContext(WindowNameContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(MySqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(MySqlParser.AS, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<WindowSpecContext> windowSpec() {
			return getRuleContexts(WindowSpecContext.class);
		}
		public WindowSpecContext windowSpec(int i) {
			return getRuleContext(WindowSpecContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWindowClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWindowClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWindowClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowClauseContext windowClause() throws RecognitionException {
		WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_windowClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4113);
			match(WINDOW);
			setState(4114);
			windowName();
			setState(4115);
			match(AS);
			setState(4116);
			match(LR_BRACKET);
			setState(4117);
			windowSpec();
			setState(4118);
			match(RR_BRACKET);
			setState(4128);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4119);
				match(COMMA);
				setState(4120);
				windowName();
				setState(4121);
				match(AS);
				setState(4122);
				match(LR_BRACKET);
				setState(4123);
				windowSpec();
				setState(4124);
				match(RR_BRACKET);
				}
				}
				setState(4130);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByItemContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public GroupByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGroupByItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGroupByItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGroupByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByItemContext groupByItem() throws RecognitionException {
		GroupByItemContext _localctx = new GroupByItemContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_groupByItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4131);
			expression(0);
			setState(4133);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,610,_ctx) ) {
			case 1:
				{
				setState(4132);
				((GroupByItemContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((GroupByItemContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public LimitClauseAtomContext offset;
		public LimitClauseAtomContext limit;
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public TerminalNode OFFSET() { return getToken(MySqlParser.OFFSET, 0); }
		public List<LimitClauseAtomContext> limitClauseAtom() {
			return getRuleContexts(LimitClauseAtomContext.class);
		}
		public LimitClauseAtomContext limitClauseAtom(int i) {
			return getRuleContext(LimitClauseAtomContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4135);
			match(LIMIT);
			setState(4146);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,612,_ctx) ) {
			case 1:
				{
				setState(4139);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,611,_ctx) ) {
				case 1:
					{
					setState(4136);
					((LimitClauseContext)_localctx).offset = limitClauseAtom();
					setState(4137);
					match(COMMA);
					}
					break;
				}
				setState(4141);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				}
				break;
			case 2:
				{
				setState(4142);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				setState(4143);
				match(OFFSET);
				setState(4144);
				((LimitClauseContext)_localctx).offset = limitClauseAtom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseAtomContext extends ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public LimitClauseAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClauseAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLimitClauseAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLimitClauseAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLimitClauseAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseAtomContext limitClauseAtom() throws RecognitionException {
		LimitClauseAtomContext _localctx = new LimitClauseAtomContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_limitClauseAtom);
		try {
			setState(4151);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4148);
				decimalLiteral();
				}
				break;
			case LOCAL_ID:
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(4149);
				mysqlVariable();
				}
				break;
			case BUCKETS:
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(4150);
				simpleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartTransactionContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public List<TransactionModeContext> transactionMode() {
			return getRuleContexts(TransactionModeContext.class);
		}
		public TransactionModeContext transactionMode(int i) {
			return getRuleContext(TransactionModeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public StartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStartTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStartTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartTransactionContext startTransaction() throws RecognitionException {
		StartTransactionContext _localctx = new StartTransactionContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_startTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4153);
			match(START);
			setState(4154);
			match(TRANSACTION);
			setState(4163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READ || _la==WITH) {
				{
				setState(4155);
				transactionMode();
				setState(4160);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4156);
					match(COMMA);
					setState(4157);
					transactionMode();
					}
					}
					setState(4162);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginWorkContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBeginWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBeginWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBeginWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginWorkContext beginWork() throws RecognitionException {
		BeginWorkContext _localctx = new BeginWorkContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_beginWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4165);
			match(BEGIN);
			setState(4167);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(4166);
				match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommitWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(MySqlParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(MySqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(MySqlParser.NO, i);
		}
		public CommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCommitWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCommitWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCommitWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitWorkContext commitWork() throws RecognitionException {
		CommitWorkContext _localctx = new CommitWorkContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_commitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4169);
			match(COMMIT);
			setState(4171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(4170);
				match(WORK);
				}
			}

			setState(4178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(4173);
				match(AND);
				setState(4175);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4174);
					((CommitWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(4177);
				match(CHAIN);
				}
			}

			setState(4184);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
			case 1:
				{
				setState(4181);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4180);
					((CommitWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(4183);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(MySqlParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(MySqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(MySqlParser.NO, i);
		}
		public RollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRollbackWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRollbackWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRollbackWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackWorkContext rollbackWork() throws RecognitionException {
		RollbackWorkContext _localctx = new RollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_rollbackWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4186);
			match(ROLLBACK);
			setState(4188);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(4187);
				match(WORK);
				}
			}

			setState(4195);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(4190);
				match(AND);
				setState(4192);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4191);
					((RollbackWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(4194);
				match(CHAIN);
				}
			}

			setState(4201);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,626,_ctx) ) {
			case 1:
				{
				setState(4198);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4197);
					((RollbackWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(4200);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SavepointStatementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepointStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSavepointStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSavepointStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSavepointStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SavepointStatementContext savepointStatement() throws RecognitionException {
		SavepointStatementContext _localctx = new SavepointStatementContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_savepointStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4203);
			match(SAVEPOINT);
			setState(4204);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackStatementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public RollbackStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRollbackStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRollbackStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRollbackStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackStatementContext rollbackStatement() throws RecognitionException {
		RollbackStatementContext _localctx = new RollbackStatementContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_rollbackStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4206);
			match(ROLLBACK);
			setState(4208);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(4207);
				match(WORK);
				}
			}

			setState(4210);
			match(TO);
			setState(4212);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,628,_ctx) ) {
			case 1:
				{
				setState(4211);
				match(SAVEPOINT);
				}
				break;
			}
			setState(4214);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReleaseStatementContext extends ParserRuleContext {
		public TerminalNode RELEASE() { return getToken(MySqlParser.RELEASE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ReleaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_releaseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReleaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReleaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReleaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReleaseStatementContext releaseStatement() throws RecognitionException {
		ReleaseStatementContext _localctx = new ReleaseStatementContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_releaseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4216);
			match(RELEASE);
			setState(4217);
			match(SAVEPOINT);
			setState(4218);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTablesContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public List<LockTableElementContext> lockTableElement() {
			return getRuleContexts(LockTableElementContext.class);
		}
		public LockTableElementContext lockTableElement(int i) {
			return getRuleContext(LockTableElementContext.class,i);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public WaitNowaitClauseContext waitNowaitClause() {
			return getRuleContext(WaitNowaitClauseContext.class,0);
		}
		public LockTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLockTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLockTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLockTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTablesContext lockTables() throws RecognitionException {
		LockTablesContext _localctx = new LockTablesContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_lockTables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4220);
			match(LOCK);
			setState(4221);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4222);
			lockTableElement();
			setState(4227);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4223);
				match(COMMA);
				setState(4224);
				lockTableElement();
				}
				}
				setState(4229);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4231);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(4230);
				waitNowaitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlockTablesContext extends ParserRuleContext {
		public TerminalNode UNLOCK() { return getToken(MySqlParser.UNLOCK, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public UnlockTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlockTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnlockTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnlockTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnlockTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlockTablesContext unlockTables() throws RecognitionException {
		UnlockTablesContext _localctx = new UnlockTablesContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_unlockTables);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4233);
			match(UNLOCK);
			setState(4234);
			match(TABLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetAutocommitStatementContext extends ParserRuleContext {
		public Token autocommitValue;
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(MySqlParser.AUTOCOMMIT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public SetAutocommitStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setAutocommitStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetAutocommitStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetAutocommitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetAutocommitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetAutocommitStatementContext setAutocommitStatement() throws RecognitionException {
		SetAutocommitStatementContext _localctx = new SetAutocommitStatementContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_setAutocommitStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4236);
			match(SET);
			setState(4237);
			match(AUTOCOMMIT);
			setState(4238);
			match(EQUAL_SYMBOL);
			setState(4239);
			((SetAutocommitStatementContext)_localctx).autocommitValue = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				((SetAutocommitStatementContext)_localctx).autocommitValue = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetTransactionStatementContext extends ParserRuleContext {
		public Token transactionContext;
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public List<TransactionOptionContext> transactionOption() {
			return getRuleContexts(TransactionOptionContext.class);
		}
		public TransactionOptionContext transactionOption(int i) {
			return getRuleContext(TransactionOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public SetTransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTransactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetTransactionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetTransactionStatementContext setTransactionStatement() throws RecognitionException {
		SetTransactionStatementContext _localctx = new SetTransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_setTransactionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4241);
			match(SET);
			setState(4243);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==SESSION) {
				{
				setState(4242);
				((SetTransactionStatementContext)_localctx).transactionContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==SESSION) ) {
					((SetTransactionStatementContext)_localctx).transactionContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4245);
			match(TRANSACTION);
			setState(4246);
			transactionOption();
			setState(4251);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4247);
				match(COMMA);
				setState(4248);
				transactionOption();
				}
				}
				setState(4253);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode CONSISTENT() { return getToken(MySqlParser.CONSISTENT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MySqlParser.SNAPSHOT, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(MySqlParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TransactionModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionMode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTransactionMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeContext transactionMode() throws RecognitionException {
		TransactionModeContext _localctx = new TransactionModeContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_transactionMode);
		try {
			setState(4261);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,633,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4254);
				match(WITH);
				setState(4255);
				match(CONSISTENT);
				setState(4256);
				match(SNAPSHOT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4257);
				match(READ);
				setState(4258);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4259);
				match(READ);
				setState(4260);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTableElementContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public LockActionContext lockAction() {
			return getRuleContext(LockActionContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public LockTableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLockTableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLockTableElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLockTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTableElementContext lockTableElement() throws RecognitionException {
		LockTableElementContext _localctx = new LockTableElementContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_lockTableElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4263);
			tableName();
			setState(4268);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
				{
				setState(4265);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4264);
					match(AS);
					}
				}

				setState(4267);
				uid();
				}
			}

			setState(4270);
			lockAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockActionContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode WRITE() { return getToken(MySqlParser.WRITE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public LockActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLockAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLockAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLockAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockActionContext lockAction() throws RecognitionException {
		LockActionContext _localctx = new LockActionContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_lockAction);
		int _la;
		try {
			setState(4280);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(4272);
				match(READ);
				setState(4274);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(4273);
					match(LOCAL);
					}
				}

				}
				break;
			case LOW_PRIORITY:
			case WRITE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4277);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOW_PRIORITY) {
					{
					setState(4276);
					match(LOW_PRIORITY);
					}
				}

				setState(4279);
				match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionOptionContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(MySqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TransactionLevelContext transactionLevel() {
			return getRuleContext(TransactionLevelContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(MySqlParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TransactionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTransactionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionOptionContext transactionOption() throws RecognitionException {
		TransactionOptionContext _localctx = new TransactionOptionContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_transactionOption);
		try {
			setState(4289);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,639,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4282);
				match(ISOLATION);
				setState(4283);
				match(LEVEL);
				setState(4284);
				transactionLevel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4285);
				match(READ);
				setState(4286);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4287);
				match(READ);
				setState(4288);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(MySqlParser.REPEATABLE, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode COMMITTED() { return getToken(MySqlParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(MySqlParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MySqlParser.SERIALIZABLE, 0); }
		public TransactionLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTransactionLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelContext transactionLevel() throws RecognitionException {
		TransactionLevelContext _localctx = new TransactionLevelContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_transactionLevel);
		try {
			setState(4298);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,640,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4291);
				match(REPEATABLE);
				setState(4292);
				match(READ);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4293);
				match(READ);
				setState(4294);
				match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4295);
				match(READ);
				setState(4296);
				match(UNCOMMITTED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4297);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeMasterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(MySqlParser.CHANGE, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<MasterOptionContext> masterOption() {
			return getRuleContexts(MasterOptionContext.class);
		}
		public MasterOptionContext masterOption(int i) {
			return getRuleContext(MasterOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeMaster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChangeMaster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChangeMaster(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitChangeMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeMasterContext changeMaster() throws RecognitionException {
		ChangeMasterContext _localctx = new ChangeMasterContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_changeMaster);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4300);
			match(CHANGE);
			setState(4301);
			match(MASTER);
			setState(4302);
			match(TO);
			setState(4303);
			masterOption();
			setState(4308);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4304);
				match(COMMA);
				setState(4305);
				masterOption();
				}
				}
				setState(4310);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4312);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4311);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeReplicationFilterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(MySqlParser.CHANGE, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode FILTER() { return getToken(MySqlParser.FILTER, 0); }
		public List<ReplicationFilterContext> replicationFilter() {
			return getRuleContexts(ReplicationFilterContext.class);
		}
		public ReplicationFilterContext replicationFilter(int i) {
			return getRuleContext(ReplicationFilterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ChangeReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationFilter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChangeReplicationFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChangeReplicationFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitChangeReplicationFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeReplicationFilterContext changeReplicationFilter() throws RecognitionException {
		ChangeReplicationFilterContext _localctx = new ChangeReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_changeReplicationFilter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4314);
			match(CHANGE);
			setState(4315);
			match(REPLICATION);
			setState(4316);
			match(FILTER);
			setState(4317);
			replicationFilter();
			setState(4322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4318);
				match(COMMA);
				setState(4319);
				replicationFilter();
				}
				}
				setState(4324);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PurgeBinaryLogsContext extends ParserRuleContext {
		public Token purgeFormat;
		public Token fileName;
		public Token timeValue;
		public TerminalNode PURGE() { return getToken(MySqlParser.PURGE, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode BEFORE() { return getToken(MySqlParser.BEFORE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public PurgeBinaryLogsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_purgeBinaryLogs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPurgeBinaryLogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPurgeBinaryLogs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPurgeBinaryLogs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PurgeBinaryLogsContext purgeBinaryLogs() throws RecognitionException {
		PurgeBinaryLogsContext _localctx = new PurgeBinaryLogsContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_purgeBinaryLogs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4325);
			match(PURGE);
			setState(4326);
			((PurgeBinaryLogsContext)_localctx).purgeFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BINARY || _la==MASTER) ) {
				((PurgeBinaryLogsContext)_localctx).purgeFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4327);
			match(LOGS);
			setState(4332);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(4328);
				match(TO);
				setState(4329);
				((PurgeBinaryLogsContext)_localctx).fileName = match(STRING_LITERAL);
				}
				break;
			case BEFORE:
				{
				setState(4330);
				match(BEFORE);
				setState(4331);
				((PurgeBinaryLogsContext)_localctx).timeValue = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetMasterContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public ResetMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetMaster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterResetMaster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitResetMaster(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitResetMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetMasterContext resetMaster() throws RecognitionException {
		ResetMasterContext _localctx = new ResetMasterContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_resetMaster);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4334);
			match(RESET);
			setState(4335);
			match(MASTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetSlaveContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ResetSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterResetSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitResetSlave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitResetSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetSlaveContext resetSlave() throws RecognitionException {
		ResetSlaveContext _localctx = new ResetSlaveContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_resetSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4337);
			match(RESET);
			setState(4338);
			match(SLAVE);
			setState(4340);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(4339);
				match(ALL);
				}
			}

			setState(4343);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4342);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartSlaveContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public UntilOptionContext untilOption() {
			return getRuleContext(UntilOptionContext.class,0);
		}
		public List<ConnectionOptionContext> connectionOption() {
			return getRuleContexts(ConnectionOptionContext.class);
		}
		public ConnectionOptionContext connectionOption(int i) {
			return getRuleContext(ConnectionOptionContext.class,i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public StartSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStartSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStartSlave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStartSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartSlaveContext startSlave() throws RecognitionException {
		StartSlaveContext _localctx = new StartSlaveContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_startSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4345);
			match(START);
			setState(4346);
			match(SLAVE);
			setState(4355);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(4347);
				threadType();
				setState(4352);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4348);
					match(COMMA);
					setState(4349);
					threadType();
					}
					}
					setState(4354);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4359);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(4357);
				match(UNTIL);
				setState(4358);
				untilOption();
				}
			}

			setState(4364);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DEFAULT_AUTH || _la==PASSWORD || _la==PLUGIN_DIR || _la==USER) {
				{
				{
				setState(4361);
				connectionOption();
				}
				}
				setState(4366);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4368);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4367);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopSlaveContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(MySqlParser.STOP, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public StopSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStopSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStopSlave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStopSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StopSlaveContext stopSlave() throws RecognitionException {
		StopSlaveContext _localctx = new StopSlaveContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_stopSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4370);
			match(STOP);
			setState(4371);
			match(SLAVE);
			setState(4380);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(4372);
				threadType();
				setState(4377);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4373);
					match(COMMA);
					setState(4374);
					threadType();
					}
					}
					setState(4379);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartGroupReplicationContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public StartGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startGroupReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStartGroupReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStartGroupReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStartGroupReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartGroupReplicationContext startGroupReplication() throws RecognitionException {
		StartGroupReplicationContext _localctx = new StartGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_startGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4382);
			match(START);
			setState(4383);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopGroupReplicationContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(MySqlParser.STOP, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public StopGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopGroupReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStopGroupReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStopGroupReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStopGroupReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StopGroupReplicationContext stopGroupReplication() throws RecognitionException {
		StopGroupReplicationContext _localctx = new StopGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_stopGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4385);
			match(STOP);
			setState(4386);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterOptionContext extends ParserRuleContext {
		public MasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterOption; }
	 
		public MasterOptionContext() { }
		public void copyFrom(MasterOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class MasterStringOptionContext extends MasterOptionContext {
		public StringMasterOptionContext stringMasterOption() {
			return getRuleContext(StringMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public MasterStringOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterStringOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterStringOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMasterStringOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterRealOptionContext extends MasterOptionContext {
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public MasterRealOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterRealOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterRealOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMasterRealOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterBoolOptionContext extends MasterOptionContext {
		public Token boolVal;
		public BoolMasterOptionContext boolMasterOption() {
			return getRuleContext(BoolMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public MasterBoolOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterBoolOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterBoolOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMasterBoolOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterUidListOptionContext extends MasterOptionContext {
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public MasterUidListOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterUidListOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterUidListOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMasterUidListOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterDecimalOptionContext extends MasterOptionContext {
		public DecimalMasterOptionContext decimalMasterOption() {
			return getRuleContext(DecimalMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MasterDecimalOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterDecimalOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterDecimalOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMasterDecimalOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MasterOptionContext masterOption() throws RecognitionException {
		MasterOptionContext _localctx = new MasterOptionContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_masterOption);
		int _la;
		try {
			setState(4417);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER_BIND:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_PASSWORD:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case RELAY_LOG_FILE:
				_localctx = new MasterStringOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4388);
				stringMasterOption();
				setState(4389);
				match(EQUAL_SYMBOL);
				setState(4390);
				match(STRING_LITERAL);
				}
				break;
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_LOG_POS:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case RELAY_LOG_POS:
				_localctx = new MasterDecimalOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4392);
				decimalMasterOption();
				setState(4393);
				match(EQUAL_SYMBOL);
				setState(4394);
				decimalLiteral();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT:
			case MASTER_AUTO_POSITION:
			case MASTER_SSL:
				_localctx = new MasterBoolOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4396);
				boolMasterOption();
				setState(4397);
				match(EQUAL_SYMBOL);
				setState(4398);
				((MasterBoolOptionContext)_localctx).boolVal = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((MasterBoolOptionContext)_localctx).boolVal = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case MASTER_HEARTBEAT_PERIOD:
				_localctx = new MasterRealOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4400);
				match(MASTER_HEARTBEAT_PERIOD);
				setState(4401);
				match(EQUAL_SYMBOL);
				setState(4402);
				match(REAL_LITERAL);
				}
				break;
			case IGNORE_SERVER_IDS:
				_localctx = new MasterUidListOptionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4403);
				match(IGNORE_SERVER_IDS);
				setState(4404);
				match(EQUAL_SYMBOL);
				setState(4405);
				match(LR_BRACKET);
				setState(4414);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
					{
					setState(4406);
					uid();
					setState(4411);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4407);
						match(COMMA);
						setState(4408);
						uid();
						}
						}
						setState(4413);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(4416);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_BIND() { return getToken(MySqlParser.MASTER_BIND, 0); }
		public TerminalNode MASTER_HOST() { return getToken(MySqlParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_USER() { return getToken(MySqlParser.MASTER_USER, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(MySqlParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(MySqlParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(MySqlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(MySqlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(MySqlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		public StringMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringMasterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStringMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringMasterOptionContext stringMasterOption() throws RecognitionException {
		StringMasterOptionContext _localctx = new StringMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_stringMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4419);
			_la = _input.LA(1);
			if ( !(_la==MASTER_BIND || ((((_la - 469)) & ~0x3f) == 0 && ((1L << (_la - 469)) & ((1L << (MASTER_HOST - 469)) | (1L << (MASTER_LOG_FILE - 469)) | (1L << (MASTER_PASSWORD - 469)) | (1L << (MASTER_SSL_CA - 469)) | (1L << (MASTER_SSL_CAPATH - 469)) | (1L << (MASTER_SSL_CERT - 469)) | (1L << (MASTER_SSL_CIPHER - 469)) | (1L << (MASTER_SSL_CRL - 469)) | (1L << (MASTER_SSL_CRLPATH - 469)) | (1L << (MASTER_SSL_KEY - 469)) | (1L << (MASTER_TLS_VERSION - 469)) | (1L << (MASTER_USER - 469)))) != 0) || _la==RELAY_LOG_FILE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_PORT() { return getToken(MySqlParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(MySqlParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public DecimalMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDecimalMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDecimalMasterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDecimalMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalMasterOptionContext decimalMasterOption() throws RecognitionException {
		DecimalMasterOptionContext _localctx = new DecimalMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_decimalMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4421);
			_la = _input.LA(1);
			if ( !(((((_la - 466)) & ~0x3f) == 0 && ((1L << (_la - 466)) & ((1L << (MASTER_CONNECT_RETRY - 466)) | (1L << (MASTER_DELAY - 466)) | (1L << (MASTER_LOG_POS - 466)) | (1L << (MASTER_PORT - 466)) | (1L << (MASTER_RETRY_COUNT - 466)))) != 0) || _la==RELAY_LOG_POS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoolMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_SSL() { return getToken(MySqlParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_VERIFY_SERVER_CERT() { return getToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
		public BoolMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBoolMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBoolMasterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBoolMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BoolMasterOptionContext boolMasterOption() throws RecognitionException {
		BoolMasterOptionContext _localctx = new BoolMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_boolMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4423);
			_la = _input.LA(1);
			if ( !(_la==MASTER_SSL_VERIFY_SERVER_CERT || _la==MASTER_AUTO_POSITION || _la==MASTER_SSL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChannelOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public ChannelOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_channelOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChannelOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChannelOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitChannelOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChannelOptionContext channelOption() throws RecognitionException {
		ChannelOptionContext _localctx = new ChannelOptionContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_channelOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4425);
			match(FOR);
			setState(4426);
			match(CHANNEL);
			setState(4427);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationFilterContext extends ParserRuleContext {
		public ReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationFilter; }
	 
		public ReplicationFilterContext() { }
		public void copyFrom(ReplicationFilterContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class WildIgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public WildIgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWildIgnoreTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWildIgnoreTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWildIgnoreTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public DoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDoTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDoTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDoTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public IgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIgnoreTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIgnoreTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIgnoreTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RewriteDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<TablePairContext> tablePair() {
			return getRuleContexts(TablePairContext.class);
		}
		public TablePairContext tablePair(int i) {
			return getRuleContext(TablePairContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RewriteDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRewriteDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRewriteDbReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRewriteDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_DB() { return getToken(MySqlParser.REPLICATE_DO_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public DoDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDoDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDoDbReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDoDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public IgnoreDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIgnoreDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIgnoreDbReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIgnoreDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WildDoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public WildDoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWildDoTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWildDoTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWildDoTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationFilterContext replicationFilter() throws RecognitionException {
		ReplicationFilterContext _localctx = new ReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_replicationFilter);
		int _la;
		try {
			setState(4478);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPLICATE_DO_DB:
				_localctx = new DoDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4429);
				match(REPLICATE_DO_DB);
				setState(4430);
				match(EQUAL_SYMBOL);
				setState(4431);
				match(LR_BRACKET);
				setState(4432);
				uidList();
				setState(4433);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_DB:
				_localctx = new IgnoreDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4435);
				match(REPLICATE_IGNORE_DB);
				setState(4436);
				match(EQUAL_SYMBOL);
				setState(4437);
				match(LR_BRACKET);
				setState(4438);
				uidList();
				setState(4439);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_DO_TABLE:
				_localctx = new DoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4441);
				match(REPLICATE_DO_TABLE);
				setState(4442);
				match(EQUAL_SYMBOL);
				setState(4443);
				match(LR_BRACKET);
				setState(4444);
				tables();
				setState(4445);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_TABLE:
				_localctx = new IgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4447);
				match(REPLICATE_IGNORE_TABLE);
				setState(4448);
				match(EQUAL_SYMBOL);
				setState(4449);
				match(LR_BRACKET);
				setState(4450);
				tables();
				setState(4451);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_DO_TABLE:
				_localctx = new WildDoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4453);
				match(REPLICATE_WILD_DO_TABLE);
				setState(4454);
				match(EQUAL_SYMBOL);
				setState(4455);
				match(LR_BRACKET);
				setState(4456);
				simpleStrings();
				setState(4457);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE:
				_localctx = new WildIgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4459);
				match(REPLICATE_WILD_IGNORE_TABLE);
				setState(4460);
				match(EQUAL_SYMBOL);
				setState(4461);
				match(LR_BRACKET);
				setState(4462);
				simpleStrings();
				setState(4463);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_REWRITE_DB:
				_localctx = new RewriteDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4465);
				match(REPLICATE_REWRITE_DB);
				setState(4466);
				match(EQUAL_SYMBOL);
				setState(4467);
				match(LR_BRACKET);
				setState(4468);
				tablePair();
				setState(4473);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4469);
					match(COMMA);
					setState(4470);
					tablePair();
					}
					}
					setState(4475);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4476);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablePairContext extends ParserRuleContext {
		public TableNameContext firstTable;
		public TableNameContext secondTable;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TablePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablePair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTablePair(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTablePair(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTablePair(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablePairContext tablePair() throws RecognitionException {
		TablePairContext _localctx = new TablePairContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_tablePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4480);
			match(LR_BRACKET);
			setState(4481);
			((TablePairContext)_localctx).firstTable = tableName();
			setState(4482);
			match(COMMA);
			setState(4483);
			((TablePairContext)_localctx).secondTable = tableName();
			setState(4484);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThreadTypeContext extends ParserRuleContext {
		public TerminalNode IO_THREAD() { return getToken(MySqlParser.IO_THREAD, 0); }
		public TerminalNode SQL_THREAD() { return getToken(MySqlParser.SQL_THREAD, 0); }
		public ThreadTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_threadType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterThreadType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitThreadType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitThreadType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ThreadTypeContext threadType() throws RecognitionException {
		ThreadTypeContext _localctx = new ThreadTypeContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_threadType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4486);
			_la = _input.LA(1);
			if ( !(_la==IO_THREAD || _la==SQL_THREAD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UntilOptionContext extends ParserRuleContext {
		public UntilOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_untilOption; }
	 
		public UntilOptionContext() { }
		public void copyFrom(UntilOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class GtidsUntilOptionContext extends UntilOptionContext {
		public Token gtids;
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public GtuidSetContext gtuidSet() {
			return getRuleContext(GtuidSetContext.class,0);
		}
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		public GtidsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGtidsUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGtidsUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGtidsUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SqlGapsUntilOptionContext extends UntilOptionContext {
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public SqlGapsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSqlGapsUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSqlGapsUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSqlGapsUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MasterLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterLogUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterLogUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMasterLogUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RelayLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public RelayLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRelayLogUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRelayLogUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRelayLogUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UntilOptionContext untilOption() throws RecognitionException {
		UntilOptionContext _localctx = new UntilOptionContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_untilOption);
		int _la;
		try {
			setState(4506);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQL_AFTER_GTIDS:
			case SQL_BEFORE_GTIDS:
				_localctx = new GtidsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4488);
				((GtidsUntilOptionContext)_localctx).gtids = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS || _la==SQL_BEFORE_GTIDS) ) {
					((GtidsUntilOptionContext)_localctx).gtids = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4489);
				match(EQUAL_SYMBOL);
				setState(4490);
				gtuidSet();
				}
				break;
			case MASTER_LOG_FILE:
				_localctx = new MasterLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4491);
				match(MASTER_LOG_FILE);
				setState(4492);
				match(EQUAL_SYMBOL);
				setState(4493);
				match(STRING_LITERAL);
				setState(4494);
				match(COMMA);
				setState(4495);
				match(MASTER_LOG_POS);
				setState(4496);
				match(EQUAL_SYMBOL);
				setState(4497);
				decimalLiteral();
				}
				break;
			case RELAY_LOG_FILE:
				_localctx = new RelayLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4498);
				match(RELAY_LOG_FILE);
				setState(4499);
				match(EQUAL_SYMBOL);
				setState(4500);
				match(STRING_LITERAL);
				setState(4501);
				match(COMMA);
				setState(4502);
				match(RELAY_LOG_POS);
				setState(4503);
				match(EQUAL_SYMBOL);
				setState(4504);
				decimalLiteral();
				}
				break;
			case SQL_AFTER_MTS_GAPS:
				_localctx = new SqlGapsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4505);
				match(SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectionOptionContext extends ParserRuleContext {
		public ConnectionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectionOption; }
	 
		public ConnectionOptionContext() { }
		public void copyFrom(ConnectionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PluginDirConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptPluginDir;
		public TerminalNode PLUGIN_DIR() { return getToken(MySqlParser.PLUGIN_DIR, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public PluginDirConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPluginDirConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPluginDirConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPluginDirConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UserConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptUser;
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public UserConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUserConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefaultAuthConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptDefAuth;
		public TerminalNode DEFAULT_AUTH() { return getToken(MySqlParser.DEFAULT_AUTH, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public DefaultAuthConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultAuthConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultAuthConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefaultAuthConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptPassword;
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public PasswordConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPasswordConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConnectionOptionContext connectionOption() throws RecognitionException {
		ConnectionOptionContext _localctx = new ConnectionOptionContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_connectionOption);
		try {
			setState(4520);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER:
				_localctx = new UserConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4508);
				match(USER);
				setState(4509);
				match(EQUAL_SYMBOL);
				setState(4510);
				((UserConnectionOptionContext)_localctx).conOptUser = match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				_localctx = new PasswordConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4511);
				match(PASSWORD);
				setState(4512);
				match(EQUAL_SYMBOL);
				setState(4513);
				((PasswordConnectionOptionContext)_localctx).conOptPassword = match(STRING_LITERAL);
				}
				break;
			case DEFAULT_AUTH:
				_localctx = new DefaultAuthConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4514);
				match(DEFAULT_AUTH);
				setState(4515);
				match(EQUAL_SYMBOL);
				setState(4516);
				((DefaultAuthConnectionOptionContext)_localctx).conOptDefAuth = match(STRING_LITERAL);
				}
				break;
			case PLUGIN_DIR:
				_localctx = new PluginDirConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4517);
				match(PLUGIN_DIR);
				setState(4518);
				match(EQUAL_SYMBOL);
				setState(4519);
				((PluginDirConnectionOptionContext)_localctx).conOptPluginDir = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GtuidSetContext extends ParserRuleContext {
		public List<UuidSetContext> uuidSet() {
			return getRuleContexts(UuidSetContext.class);
		}
		public UuidSetContext uuidSet(int i) {
			return getRuleContext(UuidSetContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public GtuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gtuidSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGtuidSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGtuidSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGtuidSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GtuidSetContext gtuidSet() throws RecognitionException {
		GtuidSetContext _localctx = new GtuidSetContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_gtuidSet);
		int _la;
		try {
			setState(4531);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4522);
				uuidSet();
				setState(4527);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4523);
					match(COMMA);
					setState(4524);
					uuidSet();
					}
					}
					setState(4529);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4530);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaStartTransactionContext extends ParserRuleContext {
		public Token xaStart;
		public Token xaAction;
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TerminalNode RESUME() { return getToken(MySqlParser.RESUME, 0); }
		public XaStartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaStartTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaStartTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaStartTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXaStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaStartTransactionContext xaStartTransaction() throws RecognitionException {
		XaStartTransactionContext _localctx = new XaStartTransactionContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_xaStartTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4533);
			match(XA);
			setState(4534);
			((XaStartTransactionContext)_localctx).xaStart = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEGIN || _la==START) ) {
				((XaStartTransactionContext)_localctx).xaStart = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4535);
			xid();
			setState(4537);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==JOIN || _la==RESUME) {
				{
				setState(4536);
				((XaStartTransactionContext)_localctx).xaAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JOIN || _la==RESUME) ) {
					((XaStartTransactionContext)_localctx).xaAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaEndTransactionContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode SUSPEND() { return getToken(MySqlParser.SUSPEND, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode MIGRATE() { return getToken(MySqlParser.MIGRATE, 0); }
		public XaEndTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaEndTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaEndTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaEndTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXaEndTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaEndTransactionContext xaEndTransaction() throws RecognitionException {
		XaEndTransactionContext _localctx = new XaEndTransactionContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_xaEndTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4539);
			match(XA);
			setState(4540);
			match(END);
			setState(4541);
			xid();
			setState(4547);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUSPEND) {
				{
				setState(4542);
				match(SUSPEND);
				setState(4545);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4543);
					match(FOR);
					setState(4544);
					match(MIGRATE);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaPrepareStatementContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaPrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaPrepareStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaPrepareStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaPrepareStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXaPrepareStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaPrepareStatementContext xaPrepareStatement() throws RecognitionException {
		XaPrepareStatementContext _localctx = new XaPrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_xaPrepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4549);
			match(XA);
			setState(4550);
			match(PREPARE);
			setState(4551);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaCommitWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode ONE() { return getToken(MySqlParser.ONE, 0); }
		public TerminalNode PHASE() { return getToken(MySqlParser.PHASE, 0); }
		public XaCommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaCommitWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaCommitWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaCommitWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXaCommitWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaCommitWorkContext xaCommitWork() throws RecognitionException {
		XaCommitWorkContext _localctx = new XaCommitWorkContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_xaCommitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4553);
			match(XA);
			setState(4554);
			match(COMMIT);
			setState(4555);
			xid();
			setState(4558);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONE) {
				{
				setState(4556);
				match(ONE);
				setState(4557);
				match(PHASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRollbackWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRollbackWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaRollbackWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaRollbackWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXaRollbackWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaRollbackWorkContext xaRollbackWork() throws RecognitionException {
		XaRollbackWorkContext _localctx = new XaRollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_xaRollbackWork);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4560);
			match(XA);
			setState(4561);
			match(ROLLBACK);
			setState(4562);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRecoverWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode RECOVER() { return getToken(MySqlParser.RECOVER, 0); }
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRecoverWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRecoverWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaRecoverWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaRecoverWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXaRecoverWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaRecoverWorkContext xaRecoverWork() throws RecognitionException {
		XaRecoverWorkContext _localctx = new XaRecoverWorkContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_xaRecoverWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4564);
			match(XA);
			setState(4565);
			match(RECOVER);
			setState(4568);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONVERT) {
				{
				setState(4566);
				match(CONVERT);
				setState(4567);
				xid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrepareStatementContext extends ParserRuleContext {
		public Token query;
		public Token variable;
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public PrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepareStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrepareStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrepareStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrepareStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepareStatementContext prepareStatement() throws RecognitionException {
		PrepareStatementContext _localctx = new PrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_prepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4570);
			match(PREPARE);
			setState(4571);
			uid();
			setState(4572);
			match(FROM);
			setState(4575);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				{
				setState(4573);
				((PrepareStatementContext)_localctx).query = match(STRING_LITERAL);
				}
				break;
			case LOCAL_ID:
				{
				setState(4574);
				((PrepareStatementContext)_localctx).variable = match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStatementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public UserVariablesContext userVariables() {
			return getRuleContext(UserVariablesContext.class,0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExecuteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExecuteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExecuteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteStatementContext executeStatement() throws RecognitionException {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_executeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4577);
			match(EXECUTE);
			setState(4578);
			uid();
			setState(4581);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4579);
				match(USING);
				setState(4580);
				userVariables();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeallocatePrepareContext extends ParserRuleContext {
		public Token dropFormat;
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DEALLOCATE() { return getToken(MySqlParser.DEALLOCATE, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public DeallocatePrepareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocatePrepare; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeallocatePrepare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeallocatePrepare(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeallocatePrepare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeallocatePrepareContext deallocatePrepare() throws RecognitionException {
		DeallocatePrepareContext _localctx = new DeallocatePrepareContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_deallocatePrepare);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4583);
			((DeallocatePrepareContext)_localctx).dropFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DROP || _la==DEALLOCATE) ) {
				((DeallocatePrepareContext)_localctx).dropFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4584);
			match(PREPARE);
			setState(4585);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineBodyContext extends ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public RoutineBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineBodyContext routineBody() throws RecognitionException {
		RoutineBodyContext _localctx = new RoutineBodyContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_routineBody);
		try {
			setState(4589);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,670,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4587);
				blockStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4588);
				sqlStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockStatementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<DeclareVariableContext> declareVariable() {
			return getRuleContexts(DeclareVariableContext.class);
		}
		public DeclareVariableContext declareVariable(int i) {
			return getRuleContext(DeclareVariableContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(MySqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(MySqlParser.SEMI, i);
		}
		public List<DeclareConditionContext> declareCondition() {
			return getRuleContexts(DeclareConditionContext.class);
		}
		public DeclareConditionContext declareCondition(int i) {
			return getRuleContext(DeclareConditionContext.class,i);
		}
		public List<DeclareCursorContext> declareCursor() {
			return getRuleContexts(DeclareCursorContext.class);
		}
		public DeclareCursorContext declareCursor(int i) {
			return getRuleContext(DeclareCursorContext.class,i);
		}
		public List<DeclareHandlerContext> declareHandler() {
			return getRuleContexts(DeclareHandlerContext.class);
		}
		public DeclareHandlerContext declareHandler(int i) {
			return getRuleContext(DeclareHandlerContext.class,i);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_blockStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBlockStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBlockStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBlockStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BlockStatementContext blockStatement() throws RecognitionException {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_blockStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
			case 1:
				{
				setState(4591);
				uid();
				setState(4592);
				match(COLON_SYMB);
				}
				break;
			}
			setState(4596);
			match(BEGIN);
			setState(4635);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
			case 1:
				{
				setState(4602);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,672,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4597);
						declareVariable();
						setState(4598);
						match(SEMI);
						}
						} 
					}
					setState(4604);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,672,_ctx);
				}
				setState(4610);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,673,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4605);
						declareCondition();
						setState(4606);
						match(SEMI);
						}
						} 
					}
					setState(4612);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,673,_ctx);
				}
				setState(4618);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,674,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4613);
						declareCursor();
						setState(4614);
						match(SEMI);
						}
						} 
					}
					setState(4620);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,674,_ctx);
				}
				setState(4626);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DECLARE) {
					{
					{
					setState(4621);
					declareHandler();
					setState(4622);
					match(SEMI);
					}
					}
					setState(4628);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4632);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,676,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4629);
						procedureSqlStatement();
						}
						} 
					}
					setState(4634);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,676,_ctx);
				}
				}
				break;
			}
			setState(4637);
			match(END);
			setState(4639);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,678,_ctx) ) {
			case 1:
				{
				setState(4638);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseStatementContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(MySqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(MySqlParser.CASE, i);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<CaseAlternativeContext> caseAlternative() {
			return getRuleContexts(CaseAlternativeContext.class);
		}
		public CaseAlternativeContext caseAlternative(int i) {
			return getRuleContext(CaseAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseStatementContext caseStatement() throws RecognitionException {
		CaseStatementContext _localctx = new CaseStatementContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4641);
			match(CASE);
			setState(4644);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,679,_ctx) ) {
			case 1:
				{
				setState(4642);
				uid();
				}
				break;
			case 2:
				{
				setState(4643);
				expression(0);
				}
				break;
			}
			setState(4647); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4646);
				caseAlternative();
				}
				}
				setState(4649); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4657);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4651);
				match(ELSE);
				setState(4653); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4652);
						procedureSqlStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4655); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,681,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(4659);
			match(END);
			setState(4660);
			match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfStatementContext extends ParserRuleContext {
		public ProcedureSqlStatementContext procedureSqlStatement;
		public List<ProcedureSqlStatementContext> thenStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<ProcedureSqlStatementContext> elseStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<TerminalNode> IF() { return getTokens(MySqlParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(MySqlParser.IF, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<ElifAlternativeContext> elifAlternative() {
			return getRuleContexts(ElifAlternativeContext.class);
		}
		public ElifAlternativeContext elifAlternative(int i) {
			return getRuleContext(ElifAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIfStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfStatementContext ifStatement() throws RecognitionException {
		IfStatementContext _localctx = new IfStatementContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4662);
			match(IF);
			setState(4663);
			expression(0);
			setState(4664);
			match(THEN);
			setState(4666); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4665);
					((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
					((IfStatementContext)_localctx).thenStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4668); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,683,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4673);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSEIF) {
				{
				{
				setState(4670);
				elifAlternative();
				}
				}
				setState(4675);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4682);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4676);
				match(ELSE);
				setState(4678); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4677);
						((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
						((IfStatementContext)_localctx).elseStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4680); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,685,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(4684);
			match(END);
			setState(4685);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IterateStatementContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(MySqlParser.ITERATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iterateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIterateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIterateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIterateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IterateStatementContext iterateStatement() throws RecognitionException {
		IterateStatementContext _localctx = new IterateStatementContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_iterateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4687);
			match(ITERATE);
			setState(4688);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeaveStatementContext extends ParserRuleContext {
		public TerminalNode LEAVE() { return getToken(MySqlParser.LEAVE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leaveStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLeaveStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLeaveStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLeaveStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LeaveStatementContext leaveStatement() throws RecognitionException {
		LeaveStatementContext _localctx = new LeaveStatementContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_leaveStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4690);
			match(LEAVE);
			setState(4691);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoopStatementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(MySqlParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(MySqlParser.LOOP, i);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loopStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoopStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoopStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLoopStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoopStatementContext loopStatement() throws RecognitionException {
		LoopStatementContext _localctx = new LoopStatementContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_loopStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4696);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
				{
				setState(4693);
				uid();
				setState(4694);
				match(COLON_SYMB);
				}
			}

			setState(4698);
			match(LOOP);
			setState(4700); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4699);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4702); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,688,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4704);
			match(END);
			setState(4705);
			match(LOOP);
			setState(4707);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
				{
				setState(4706);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepeatStatementContext extends ParserRuleContext {
		public List<TerminalNode> REPEAT() { return getTokens(MySqlParser.REPEAT); }
		public TerminalNode REPEAT(int i) {
			return getToken(MySqlParser.REPEAT, i);
		}
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRepeatStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRepeatStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRepeatStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepeatStatementContext repeatStatement() throws RecognitionException {
		RepeatStatementContext _localctx = new RepeatStatementContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_repeatStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4712);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
				{
				setState(4709);
				uid();
				setState(4710);
				match(COLON_SYMB);
				}
			}

			setState(4714);
			match(REPEAT);
			setState(4716); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4715);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4718); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,691,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4720);
			match(UNTIL);
			setState(4721);
			expression(0);
			setState(4722);
			match(END);
			setState(4723);
			match(REPEAT);
			setState(4725);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
				{
				setState(4724);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnStatementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(MySqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReturnStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReturnStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReturnStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturnStatementContext returnStatement() throws RecognitionException {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_returnStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4727);
			match(RETURN);
			setState(4728);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhileStatementContext extends ParserRuleContext {
		public List<TerminalNode> WHILE() { return getTokens(MySqlParser.WHILE); }
		public TerminalNode WHILE(int i) {
			return getToken(MySqlParser.WHILE, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWhileStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWhileStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWhileStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhileStatementContext whileStatement() throws RecognitionException {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_whileStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
				{
				setState(4730);
				uid();
				setState(4731);
				match(COLON_SYMB);
				}
			}

			setState(4735);
			match(WHILE);
			setState(4736);
			expression(0);
			setState(4737);
			match(DO);
			setState(4739); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4738);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4741); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,694,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4743);
			match(END);
			setState(4744);
			match(WHILE);
			setState(4746);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
				{
				setState(4745);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorStatementContext extends ParserRuleContext {
		public CursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorStatement; }
	 
		public CursorStatementContext() { }
		public void copyFrom(CursorStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CloseCursorContext extends CursorStatementContext {
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CloseCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCloseCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCloseCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCloseCursor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OpenCursorContext extends CursorStatementContext {
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public OpenCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOpenCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOpenCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOpenCursor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FetchCursorContext extends CursorStatementContext {
		public TerminalNode FETCH() { return getToken(MySqlParser.FETCH, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public FetchCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFetchCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFetchCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFetchCursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorStatementContext cursorStatement() throws RecognitionException {
		CursorStatementContext _localctx = new CursorStatementContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_cursorStatement);
		int _la;
		try {
			setState(4763);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE:
				_localctx = new CloseCursorContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4748);
				match(CLOSE);
				setState(4749);
				uid();
				}
				break;
			case FETCH:
				_localctx = new FetchCursorContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4750);
				match(FETCH);
				setState(4755);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
				case 1:
					{
					setState(4752);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NEXT) {
						{
						setState(4751);
						match(NEXT);
						}
					}

					setState(4754);
					match(FROM);
					}
					break;
				}
				setState(4757);
				uid();
				setState(4758);
				match(INTO);
				setState(4759);
				uidList();
				}
				break;
			case OPEN:
				_localctx = new OpenCursorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4761);
				match(OPEN);
				setState(4762);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareVariableContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeclareVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareVariableContext declareVariable() throws RecognitionException {
		DeclareVariableContext _localctx = new DeclareVariableContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_declareVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4765);
			match(DECLARE);
			setState(4766);
			uidList();
			setState(4767);
			dataType();
			setState(4770);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4768);
				match(DEFAULT);
				setState(4769);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareConditionContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CONDITION() { return getToken(MySqlParser.CONDITION, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public DeclareConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeclareCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareConditionContext declareCondition() throws RecognitionException {
		DeclareConditionContext _localctx = new DeclareConditionContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_declareCondition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4772);
			match(DECLARE);
			setState(4773);
			uid();
			setState(4774);
			match(CONDITION);
			setState(4775);
			match(FOR);
			setState(4782);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				{
				setState(4776);
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				{
				setState(4777);
				match(SQLSTATE);
				setState(4779);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4778);
					match(VALUE);
					}
				}

				setState(4781);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareCursorContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(MySqlParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeclareCursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeclareCursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareCursorContext declareCursor() throws RecognitionException {
		DeclareCursorContext _localctx = new DeclareCursorContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_declareCursor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4784);
			match(DECLARE);
			setState(4785);
			uid();
			setState(4786);
			match(CURSOR);
			setState(4787);
			match(FOR);
			setState(4788);
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareHandlerContext extends ParserRuleContext {
		public Token handlerAction;
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public List<HandlerConditionValueContext> handlerConditionValue() {
			return getRuleContexts(HandlerConditionValueContext.class);
		}
		public HandlerConditionValueContext handlerConditionValue(int i) {
			return getRuleContext(HandlerConditionValueContext.class,i);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode CONTINUE() { return getToken(MySqlParser.CONTINUE, 0); }
		public TerminalNode EXIT() { return getToken(MySqlParser.EXIT, 0); }
		public TerminalNode UNDO() { return getToken(MySqlParser.UNDO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DeclareHandlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareHandler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareHandler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareHandler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeclareHandler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareHandlerContext declareHandler() throws RecognitionException {
		DeclareHandlerContext _localctx = new DeclareHandlerContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_declareHandler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4790);
			match(DECLARE);
			setState(4791);
			((DeclareHandlerContext)_localctx).handlerAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT || _la==UNDO) ) {
				((DeclareHandlerContext)_localctx).handlerAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4792);
			match(HANDLER);
			setState(4793);
			match(FOR);
			setState(4794);
			handlerConditionValue();
			setState(4799);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4795);
				match(COMMA);
				setState(4796);
				handlerConditionValue();
				}
				}
				setState(4801);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4802);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerConditionValueContext extends ParserRuleContext {
		public HandlerConditionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerConditionValue; }
	 
		public HandlerConditionValueContext() { }
		public void copyFrom(HandlerConditionValueContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class HandlerConditionWarningContext extends HandlerConditionValueContext {
		public TerminalNode SQLWARNING() { return getToken(MySqlParser.SQLWARNING, 0); }
		public HandlerConditionWarningContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionWarning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionWarning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionWarning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionCodeContext extends HandlerConditionValueContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public HandlerConditionCodeContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionCode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionCode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionCode(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionNotfoundContext extends HandlerConditionValueContext {
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode FOUND() { return getToken(MySqlParser.FOUND, 0); }
		public HandlerConditionNotfoundContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionNotfound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionNotfound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionNotfound(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionStateContext extends HandlerConditionValueContext {
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public HandlerConditionStateContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionState(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionState(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionState(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionExceptionContext extends HandlerConditionValueContext {
		public TerminalNode SQLEXCEPTION() { return getToken(MySqlParser.SQLEXCEPTION, 0); }
		public HandlerConditionExceptionContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionException(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionException(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionException(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionNameContext extends HandlerConditionValueContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public HandlerConditionNameContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerConditionValueContext handlerConditionValue() throws RecognitionException {
		HandlerConditionValueContext _localctx = new HandlerConditionValueContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_handlerConditionValue);
		int _la;
		try {
			setState(4815);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				_localctx = new HandlerConditionCodeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4804);
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				_localctx = new HandlerConditionStateContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4805);
				match(SQLSTATE);
				setState(4807);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4806);
					match(VALUE);
					}
				}

				setState(4809);
				match(STRING_LITERAL);
				}
				break;
			case BUCKETS:
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				_localctx = new HandlerConditionNameContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4810);
				uid();
				}
				break;
			case SQLWARNING:
				_localctx = new HandlerConditionWarningContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4811);
				match(SQLWARNING);
				}
				break;
			case NOT:
				_localctx = new HandlerConditionNotfoundContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4812);
				match(NOT);
				setState(4813);
				match(FOUND);
				}
				break;
			case SQLEXCEPTION:
				_localctx = new HandlerConditionExceptionContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4814);
				match(SQLEXCEPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureSqlStatementContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(MySqlParser.SEMI, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public ProcedureSqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureSqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterProcedureSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitProcedureSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitProcedureSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureSqlStatementContext procedureSqlStatement() throws RecognitionException {
		ProcedureSqlStatementContext _localctx = new ProcedureSqlStatementContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_procedureSqlStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4819);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,705,_ctx) ) {
			case 1:
				{
				setState(4817);
				compoundStatement();
				}
				break;
			case 2:
				{
				setState(4818);
				sqlStatement();
				}
				break;
			}
			setState(4821);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseAlternativeContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(MySqlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public CaseAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseAlternativeContext caseAlternative() throws RecognitionException {
		CaseAlternativeContext _localctx = new CaseAlternativeContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_caseAlternative);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4823);
			match(WHEN);
			setState(4826);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,706,_ctx) ) {
			case 1:
				{
				setState(4824);
				constant();
				}
				break;
			case 2:
				{
				setState(4825);
				expression(0);
				}
				break;
			}
			setState(4828);
			match(THEN);
			setState(4830); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4829);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4832); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,707,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElifAlternativeContext extends ParserRuleContext {
		public TerminalNode ELSEIF() { return getToken(MySqlParser.ELSEIF, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public ElifAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elifAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterElifAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitElifAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitElifAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElifAlternativeContext elifAlternative() throws RecognitionException {
		ElifAlternativeContext _localctx = new ElifAlternativeContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_elifAlternative);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4834);
			match(ELSEIF);
			setState(4835);
			expression(0);
			setState(4836);
			match(THEN);
			setState(4838); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4837);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4840); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,708,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserContext extends ParserRuleContext {
		public AlterUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUser; }
	 
		public AlterUserContext() { }
		public void copyFrom(AlterUserContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUserMysqlV56Context extends AlterUserContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserSpecificationContext> userSpecification() {
			return getRuleContexts(UserSpecificationContext.class);
		}
		public UserSpecificationContext userSpecification(int i) {
			return getRuleContext(UserSpecificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterUserMysqlV56Context(AlterUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterUserMysqlV56(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterUserMysqlV56(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterUserMysqlV56(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterUserMysqlV57Context extends AlterUserContext {
		public Token tlsNone;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(MySqlParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MySqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MySqlParser.AND, i);
		}
		public AlterUserMysqlV57Context(AlterUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterUserMysqlV57(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterUserMysqlV57(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterUserMysqlV57(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserContext alterUser() throws RecognitionException {
		AlterUserContext _localctx = new AlterUserContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_alterUser);
		int _la;
		try {
			setState(4896);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,720,_ctx) ) {
			case 1:
				_localctx = new AlterUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4842);
				match(ALTER);
				setState(4843);
				match(USER);
				setState(4844);
				userSpecification();
				setState(4849);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4845);
					match(COMMA);
					setState(4846);
					userSpecification();
					}
					}
					setState(4851);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new AlterUserMysqlV57Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4852);
				match(ALTER);
				setState(4853);
				match(USER);
				setState(4855);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4854);
					ifExists();
					}
				}

				setState(4857);
				userAuthOption();
				setState(4862);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4858);
					match(COMMA);
					setState(4859);
					userAuthOption();
					}
					}
					setState(4864);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4879);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4865);
					match(REQUIRE);
					setState(4877);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4866);
						((AlterUserMysqlV57Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4867);
						tlsOption();
						setState(4874);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4869);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4868);
								match(AND);
								}
							}

							setState(4871);
							tlsOption();
							}
							}
							setState(4876);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4887);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4881);
					match(WITH);
					setState(4883); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4882);
						userResourceOption();
						}
						}
						setState(4885); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 485)) | (1L << (MAX_QUERIES_PER_HOUR - 485)) | (1L << (MAX_UPDATES_PER_HOUR - 485)) | (1L << (MAX_USER_CONNECTIONS - 485)))) != 0) );
					}
				}

				setState(4893);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					setState(4891);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PASSWORD:
						{
						setState(4889);
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(4890);
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4895);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserContext extends ParserRuleContext {
		public CreateUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUser; }
	 
		public CreateUserContext() { }
		public void copyFrom(CreateUserContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CreateUserMysqlV57Context extends CreateUserContext {
		public Token tlsNone;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(MySqlParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MySqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MySqlParser.AND, i);
		}
		public CreateUserMysqlV57Context(CreateUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateUserMysqlV57(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateUserMysqlV57(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateUserMysqlV57(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateUserMysqlV56Context extends CreateUserContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CreateUserMysqlV56Context(CreateUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateUserMysqlV56(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateUserMysqlV56(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateUserMysqlV56(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserContext createUser() throws RecognitionException {
		CreateUserContext _localctx = new CreateUserContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_createUser);
		int _la;
		try {
			setState(4952);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,732,_ctx) ) {
			case 1:
				_localctx = new CreateUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4898);
				match(CREATE);
				setState(4899);
				match(USER);
				setState(4900);
				userAuthOption();
				setState(4905);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4901);
					match(COMMA);
					setState(4902);
					userAuthOption();
					}
					}
					setState(4907);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new CreateUserMysqlV57Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4908);
				match(CREATE);
				setState(4909);
				match(USER);
				setState(4911);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4910);
					ifNotExists();
					}
				}

				setState(4913);
				userAuthOption();
				setState(4918);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4914);
					match(COMMA);
					setState(4915);
					userAuthOption();
					}
					}
					setState(4920);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4935);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4921);
					match(REQUIRE);
					setState(4933);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4922);
						((CreateUserMysqlV57Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4923);
						tlsOption();
						setState(4930);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4925);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4924);
								match(AND);
								}
							}

							setState(4927);
							tlsOption();
							}
							}
							setState(4932);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4943);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4937);
					match(WITH);
					setState(4939); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4938);
						userResourceOption();
						}
						}
						setState(4941); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 485)) | (1L << (MAX_QUERIES_PER_HOUR - 485)) | (1L << (MAX_UPDATES_PER_HOUR - 485)) | (1L << (MAX_USER_CONNECTIONS - 485)))) != 0) );
					}
				}

				setState(4949);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					setState(4947);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PASSWORD:
						{
						setState(4945);
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(4946);
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4951);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserContext dropUser() throws RecognitionException {
		DropUserContext _localctx = new DropUserContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_dropUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4954);
			match(DROP);
			setState(4955);
			match(USER);
			setState(4957);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(4956);
				ifExists();
				}
			}

			setState(4959);
			userName();
			setState(4964);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4960);
				match(COMMA);
				setState(4961);
				userName();
				}
				}
				setState(4966);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantStatementContext extends ParserRuleContext {
		public Token privilegeObject;
		public Token tlsNone;
		public List<TerminalNode> GRANT() { return getTokens(MySqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(MySqlParser.GRANT, i);
		}
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(MySqlParser.REQUIRE, 0); }
		public List<TerminalNode> WITH() { return getTokens(MySqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(MySqlParser.WITH, i);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public RoleOptionContext roleOption() {
			return getRuleContext(RoleOptionContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public List<TerminalNode> OPTION() { return getTokens(MySqlParser.OPTION); }
		public TerminalNode OPTION(int i) {
			return getToken(MySqlParser.OPTION, i);
		}
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MySqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MySqlParser.AND, i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADMIN() { return getToken(MySqlParser.ADMIN, 0); }
		public GrantStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGrantStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGrantStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGrantStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantStatementContext grantStatement() throws RecognitionException {
		GrantStatementContext _localctx = new GrantStatementContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_grantStatement);
		int _la;
		try {
			int _alt;
			setState(5060);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,753,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4967);
				match(GRANT);
				setState(4968);
				privelegeClause();
				setState(4973);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4969);
					match(COMMA);
					setState(4970);
					privelegeClause();
					}
					}
					setState(4975);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4976);
				match(ON);
				setState(4978);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,736,_ctx) ) {
				case 1:
					{
					setState(4977);
					((GrantStatementContext)_localctx).privilegeObject = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((GrantStatementContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4980);
				privilegeLevel();
				setState(4981);
				match(TO);
				setState(4982);
				userAuthOption();
				setState(4987);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4983);
					match(COMMA);
					setState(4984);
					userAuthOption();
					}
					}
					setState(4989);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5004);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4990);
					match(REQUIRE);
					setState(5002);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4991);
						((GrantStatementContext)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4992);
						tlsOption();
						setState(4999);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4994);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4993);
								match(AND);
								}
							}

							setState(4996);
							tlsOption();
							}
							}
							setState(5001);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(5015);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5006);
					match(WITH);
					setState(5012);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,743,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							setState(5010);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case GRANT:
								{
								setState(5007);
								match(GRANT);
								setState(5008);
								match(OPTION);
								}
								break;
							case MAX_CONNECTIONS_PER_HOUR:
							case MAX_QUERIES_PER_HOUR:
							case MAX_UPDATES_PER_HOUR:
							case MAX_USER_CONNECTIONS:
								{
								setState(5009);
								userResourceOption();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							} 
						}
						setState(5014);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,743,_ctx);
					}
					}
				}

				setState(5023);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5017);
					match(AS);
					setState(5018);
					userName();
					setState(5019);
					match(WITH);
					setState(5020);
					match(ROLE);
					setState(5021);
					roleOption();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5025);
				match(GRANT);
				setState(5028);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,746,_ctx) ) {
				case 1:
					{
					setState(5026);
					userName();
					}
					break;
				case 2:
					{
					setState(5027);
					uid();
					}
					break;
				}
				setState(5037);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5030);
					match(COMMA);
					setState(5033);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,747,_ctx) ) {
					case 1:
						{
						setState(5031);
						userName();
						}
						break;
					case 2:
						{
						setState(5032);
						uid();
						}
						break;
					}
					}
					}
					setState(5039);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5040);
				match(TO);
				setState(5043);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,749,_ctx) ) {
				case 1:
					{
					setState(5041);
					userName();
					}
					break;
				case 2:
					{
					setState(5042);
					uid();
					}
					break;
				}
				setState(5052);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5045);
					match(COMMA);
					setState(5048);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,750,_ctx) ) {
					case 1:
						{
						setState(5046);
						userName();
						}
						break;
					case 2:
						{
						setState(5047);
						uid();
						}
						break;
					}
					}
					}
					setState(5054);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5058);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5055);
					match(WITH);
					setState(5056);
					match(ADMIN);
					setState(5057);
					match(OPTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleOptionContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode EXCEPT() { return getToken(MySqlParser.EXCEPT, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RoleOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoleOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoleOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoleOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleOptionContext roleOption() throws RecognitionException {
		RoleOptionContext _localctx = new RoleOptionContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_roleOption);
		int _la;
		try {
			setState(5084);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,757,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5062);
				match(DEFAULT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5063);
				match(NONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5064);
				match(ALL);
				setState(5074);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPT) {
					{
					setState(5065);
					match(EXCEPT);
					setState(5066);
					userName();
					setState(5071);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5067);
						match(COMMA);
						setState(5068);
						userName();
						}
						}
						setState(5073);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5076);
				userName();
				setState(5081);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5077);
					match(COMMA);
					setState(5078);
					userName();
					}
					}
					setState(5083);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantProxyContext extends ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public UserNameContext userName;
		public List<UserNameContext> toOther = new ArrayList<UserNameContext>();
		public List<TerminalNode> GRANT() { return getTokens(MySqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(MySqlParser.GRANT, i);
		}
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public GrantProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantProxy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGrantProxy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGrantProxy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGrantProxy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantProxyContext grantProxy() throws RecognitionException {
		GrantProxyContext _localctx = new GrantProxyContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_grantProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5086);
			match(GRANT);
			setState(5087);
			match(PROXY);
			setState(5088);
			match(ON);
			setState(5089);
			((GrantProxyContext)_localctx).fromFirst = userName();
			setState(5090);
			match(TO);
			setState(5091);
			((GrantProxyContext)_localctx).toFirst = userName();
			setState(5096);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5092);
				match(COMMA);
				setState(5093);
				((GrantProxyContext)_localctx).userName = userName();
				((GrantProxyContext)_localctx).toOther.add(((GrantProxyContext)_localctx).userName);
				}
				}
				setState(5098);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5099);
				match(WITH);
				setState(5100);
				match(GRANT);
				setState(5101);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<RenameUserClauseContext> renameUserClause() {
			return getRuleContexts(RenameUserClauseContext.class);
		}
		public RenameUserClauseContext renameUserClause(int i) {
			return getRuleContext(RenameUserClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRenameUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameUserContext renameUser() throws RecognitionException {
		RenameUserContext _localctx = new RenameUserContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_renameUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5104);
			match(RENAME);
			setState(5105);
			match(USER);
			setState(5106);
			renameUserClause();
			setState(5111);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5107);
				match(COMMA);
				setState(5108);
				renameUserClause();
				}
				}
				setState(5113);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeStatementContext extends ParserRuleContext {
		public RevokeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeStatement; }
	 
		public RevokeStatementContext() { }
		public void copyFrom(RevokeStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DetailRevokeContext extends RevokeStatementContext {
		public Token privilegeObject;
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public DetailRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDetailRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDetailRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDetailRevoke(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoleRevokeContext extends RevokeStatementContext {
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RoleRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoleRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoleRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoleRevoke(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShortRevokeContext extends RevokeStatementContext {
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode GRANT() { return getToken(MySqlParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public ShortRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShortRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShortRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShortRevoke(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeStatementContext revokeStatement() throws RecognitionException {
		RevokeStatementContext _localctx = new RevokeStatementContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_revokeStatement);
		int _la;
		try {
			setState(5178);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,770,_ctx) ) {
			case 1:
				_localctx = new DetailRevokeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5114);
				match(REVOKE);
				setState(5115);
				privelegeClause();
				setState(5120);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5116);
					match(COMMA);
					setState(5117);
					privelegeClause();
					}
					}
					setState(5122);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5123);
				match(ON);
				setState(5125);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,762,_ctx) ) {
				case 1:
					{
					setState(5124);
					((DetailRevokeContext)_localctx).privilegeObject = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((DetailRevokeContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5127);
				privilegeLevel();
				setState(5128);
				match(FROM);
				setState(5129);
				userName();
				setState(5134);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5130);
					match(COMMA);
					setState(5131);
					userName();
					}
					}
					setState(5136);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new ShortRevokeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5137);
				match(REVOKE);
				setState(5138);
				match(ALL);
				setState(5140);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(5139);
					match(PRIVILEGES);
					}
				}

				setState(5142);
				match(COMMA);
				setState(5143);
				match(GRANT);
				setState(5144);
				match(OPTION);
				setState(5145);
				match(FROM);
				setState(5146);
				userName();
				setState(5151);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5147);
					match(COMMA);
					setState(5148);
					userName();
					}
					}
					setState(5153);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new RoleRevokeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5154);
				match(REVOKE);
				setState(5155);
				uid();
				setState(5160);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5156);
					match(COMMA);
					setState(5157);
					uid();
					}
					}
					setState(5162);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5163);
				match(FROM);
				setState(5166);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,767,_ctx) ) {
				case 1:
					{
					setState(5164);
					userName();
					}
					break;
				case 2:
					{
					setState(5165);
					uid();
					}
					break;
				}
				setState(5175);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5168);
					match(COMMA);
					setState(5171);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,768,_ctx) ) {
					case 1:
						{
						setState(5169);
						userName();
						}
						break;
					case 2:
						{
						setState(5170);
						uid();
						}
						break;
					}
					}
					}
					setState(5177);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeProxyContext extends ParserRuleContext {
		public UserNameContext onUser;
		public UserNameContext fromFirst;
		public UserNameContext userName;
		public List<UserNameContext> fromOther = new ArrayList<UserNameContext>();
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RevokeProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeProxy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRevokeProxy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRevokeProxy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRevokeProxy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeProxyContext revokeProxy() throws RecognitionException {
		RevokeProxyContext _localctx = new RevokeProxyContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_revokeProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5180);
			match(REVOKE);
			setState(5181);
			match(PROXY);
			setState(5182);
			match(ON);
			setState(5183);
			((RevokeProxyContext)_localctx).onUser = userName();
			setState(5184);
			match(FROM);
			setState(5185);
			((RevokeProxyContext)_localctx).fromFirst = userName();
			setState(5190);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5186);
				match(COMMA);
				setState(5187);
				((RevokeProxyContext)_localctx).userName = userName();
				((RevokeProxyContext)_localctx).fromOther.add(((RevokeProxyContext)_localctx).userName);
				}
				}
				setState(5192);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetPasswordStatementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public SetPasswordStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setPasswordStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetPasswordStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetPasswordStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetPasswordStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetPasswordStatementContext setPasswordStatement() throws RecognitionException {
		SetPasswordStatementContext _localctx = new SetPasswordStatementContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_setPasswordStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5193);
			match(SET);
			setState(5194);
			match(PASSWORD);
			setState(5197);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5195);
				match(FOR);
				setState(5196);
				userName();
				}
			}

			setState(5199);
			match(EQUAL_SYMBOL);
			setState(5202);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OLD_PASSWORD:
			case PASSWORD:
				{
				setState(5200);
				passwordFunctionClause();
				}
				break;
			case STRING_LITERAL:
				{
				setState(5201);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserSpecificationContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public UserPasswordOptionContext userPasswordOption() {
			return getRuleContext(UserPasswordOptionContext.class,0);
		}
		public UserSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUserSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserSpecificationContext userSpecification() throws RecognitionException {
		UserSpecificationContext _localctx = new UserSpecificationContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_userSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5204);
			userName();
			setState(5205);
			userPasswordOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserAuthOptionContext extends ParserRuleContext {
		public UserAuthOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userAuthOption; }
	 
		public UserAuthOptionContext() { }
		public void copyFrom(UserAuthOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SimpleAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public SimpleAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordAuthOptionContext extends UserAuthOptionContext {
		public Token hashed;
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public PasswordAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPasswordAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public TerminalNode RETAIN() { return getToken(MySqlParser.RETAIN, 0); }
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public StringAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStringAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HashAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public HashAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHashAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHashAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHashAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserAuthOptionContext userAuthOption() throws RecognitionException {
		UserAuthOptionContext _localctx = new UserAuthOptionContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_userAuthOption);
		int _la;
		try {
			setState(5235);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,777,_ctx) ) {
			case 1:
				_localctx = new PasswordAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5207);
				userName();
				setState(5208);
				match(IDENTIFIED);
				setState(5209);
				match(BY);
				setState(5210);
				match(PASSWORD);
				setState(5211);
				((PasswordAuthOptionContext)_localctx).hashed = match(STRING_LITERAL);
				}
				break;
			case 2:
				_localctx = new StringAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5213);
				userName();
				setState(5214);
				match(IDENTIFIED);
				setState(5217);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5215);
					match(WITH);
					setState(5216);
					authPlugin();
					}
				}

				setState(5219);
				match(BY);
				setState(5220);
				match(STRING_LITERAL);
				setState(5224);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETAIN) {
					{
					setState(5221);
					match(RETAIN);
					setState(5222);
					match(CURRENT);
					setState(5223);
					match(PASSWORD);
					}
				}

				}
				break;
			case 3:
				_localctx = new HashAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5226);
				userName();
				setState(5227);
				match(IDENTIFIED);
				setState(5228);
				match(WITH);
				setState(5229);
				authPlugin();
				setState(5232);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,776,_ctx) ) {
				case 1:
					{
					setState(5230);
					match(AS);
					setState(5231);
					match(STRING_LITERAL);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SimpleAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5234);
				userName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TlsOptionContext extends ParserRuleContext {
		public TerminalNode SSL() { return getToken(MySqlParser.SSL, 0); }
		public TerminalNode X509() { return getToken(MySqlParser.X509, 0); }
		public TerminalNode CIPHER() { return getToken(MySqlParser.CIPHER, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ISSUER() { return getToken(MySqlParser.ISSUER, 0); }
		public TerminalNode SUBJECT() { return getToken(MySqlParser.SUBJECT, 0); }
		public TlsOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tlsOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTlsOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTlsOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTlsOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TlsOptionContext tlsOption() throws RecognitionException {
		TlsOptionContext _localctx = new TlsOptionContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_tlsOption);
		try {
			setState(5245);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SSL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5237);
				match(SSL);
				}
				break;
			case X509:
				enterOuterAlt(_localctx, 2);
				{
				setState(5238);
				match(X509);
				}
				break;
			case CIPHER:
				enterOuterAlt(_localctx, 3);
				{
				setState(5239);
				match(CIPHER);
				setState(5240);
				match(STRING_LITERAL);
				}
				break;
			case ISSUER:
				enterOuterAlt(_localctx, 4);
				{
				setState(5241);
				match(ISSUER);
				setState(5242);
				match(STRING_LITERAL);
				}
				break;
			case SUBJECT:
				enterOuterAlt(_localctx, 5);
				{
				setState(5243);
				match(SUBJECT);
				setState(5244);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserResourceOptionContext extends ParserRuleContext {
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public UserResourceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userResourceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserResourceOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserResourceOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUserResourceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserResourceOptionContext userResourceOption() throws RecognitionException {
		UserResourceOptionContext _localctx = new UserResourceOptionContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_userResourceOption);
		try {
			setState(5255);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAX_QUERIES_PER_HOUR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5247);
				match(MAX_QUERIES_PER_HOUR);
				setState(5248);
				decimalLiteral();
				}
				break;
			case MAX_UPDATES_PER_HOUR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5249);
				match(MAX_UPDATES_PER_HOUR);
				setState(5250);
				decimalLiteral();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR:
				enterOuterAlt(_localctx, 3);
				{
				setState(5251);
				match(MAX_CONNECTIONS_PER_HOUR);
				setState(5252);
				decimalLiteral();
				}
				break;
			case MAX_USER_CONNECTIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5253);
				match(MAX_USER_CONNECTIONS);
				setState(5254);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserPasswordOptionContext extends ParserRuleContext {
		public Token expireType;
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode EXPIRE() { return getToken(MySqlParser.EXPIRE, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode NEVER() { return getToken(MySqlParser.NEVER, 0); }
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public UserPasswordOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userPasswordOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserPasswordOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserPasswordOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUserPasswordOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserPasswordOptionContext userPasswordOption() throws RecognitionException {
		UserPasswordOptionContext _localctx = new UserPasswordOptionContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_userPasswordOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5257);
			match(PASSWORD);
			setState(5258);
			match(EXPIRE);
			setState(5265);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				{
				setState(5259);
				((UserPasswordOptionContext)_localctx).expireType = match(DEFAULT);
				}
				break;
			case NEVER:
				{
				setState(5260);
				((UserPasswordOptionContext)_localctx).expireType = match(NEVER);
				}
				break;
			case INTERVAL:
				{
				setState(5261);
				((UserPasswordOptionContext)_localctx).expireType = match(INTERVAL);
				setState(5262);
				decimalLiteral();
				setState(5263);
				match(DAY);
				}
				break;
			case EOF:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case ACCOUNT:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PASSWORD:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUS:
			case LR_BRACKET:
			case COMMA:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserLockOptionContext extends ParserRuleContext {
		public Token lockType;
		public TerminalNode ACCOUNT() { return getToken(MySqlParser.ACCOUNT, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode UNLOCK() { return getToken(MySqlParser.UNLOCK, 0); }
		public UserLockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userLockOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserLockOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserLockOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUserLockOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserLockOptionContext userLockOption() throws RecognitionException {
		UserLockOptionContext _localctx = new UserLockOptionContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_userLockOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5267);
			match(ACCOUNT);
			setState(5268);
			((UserLockOptionContext)_localctx).lockType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
				((UserLockOptionContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivelegeClauseContext extends ParserRuleContext {
		public PrivilegeContext privilege() {
			return getRuleContext(PrivilegeContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public PrivelegeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privelegeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrivelegeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrivelegeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrivelegeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivelegeClauseContext privelegeClause() throws RecognitionException {
		PrivelegeClauseContext _localctx = new PrivelegeClauseContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_privelegeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5270);
			privilege();
			setState(5275);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(5271);
				match(LR_BRACKET);
				setState(5272);
				uidList();
				setState(5273);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode ROUTINE() { return getToken(MySqlParser.ROUTINE, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(MySqlParser.FILE, 0); }
		public TerminalNode GRANT() { return getToken(MySqlParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode PROCESS() { return getToken(MySqlParser.PROCESS, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode REFERENCES() { return getToken(MySqlParser.REFERENCES, 0); }
		public TerminalNode RELOAD() { return getToken(MySqlParser.RELOAD, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode CLIENT() { return getToken(MySqlParser.CLIENT, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode REPLICA() { return getToken(MySqlParser.REPLICA, 0); }
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode DATABASES() { return getToken(MySqlParser.DATABASES, 0); }
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(MySqlParser.SUPER, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode USAGE() { return getToken(MySqlParser.USAGE, 0); }
		public TerminalNode APPLICATION_PASSWORD_ADMIN() { return getToken(MySqlParser.APPLICATION_PASSWORD_ADMIN, 0); }
		public TerminalNode AUDIT_ADMIN() { return getToken(MySqlParser.AUDIT_ADMIN, 0); }
		public TerminalNode BACKUP_ADMIN() { return getToken(MySqlParser.BACKUP_ADMIN, 0); }
		public TerminalNode BINLOG_ADMIN() { return getToken(MySqlParser.BINLOG_ADMIN, 0); }
		public TerminalNode BINLOG_ENCRYPTION_ADMIN() { return getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		public TerminalNode CLONE_ADMIN() { return getToken(MySqlParser.CLONE_ADMIN, 0); }
		public TerminalNode CONNECTION_ADMIN() { return getToken(MySqlParser.CONNECTION_ADMIN, 0); }
		public TerminalNode ENCRYPTION_KEY_ADMIN() { return getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0); }
		public TerminalNode FIREWALL_ADMIN() { return getToken(MySqlParser.FIREWALL_ADMIN, 0); }
		public TerminalNode FIREWALL_USER() { return getToken(MySqlParser.FIREWALL_USER, 0); }
		public TerminalNode FLUSH_OPTIMIZER_COSTS() { return getToken(MySqlParser.FLUSH_OPTIMIZER_COSTS, 0); }
		public TerminalNode FLUSH_STATUS() { return getToken(MySqlParser.FLUSH_STATUS, 0); }
		public TerminalNode FLUSH_TABLES() { return getToken(MySqlParser.FLUSH_TABLES, 0); }
		public TerminalNode FLUSH_USER_RESOURCES() { return getToken(MySqlParser.FLUSH_USER_RESOURCES, 0); }
		public TerminalNode GROUP_REPLICATION_ADMIN() { return getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0); }
		public TerminalNode INNODB_REDO_LOG_ARCHIVE() { return getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		public TerminalNode INNODB_REDO_LOG_ENABLE() { return getToken(MySqlParser.INNODB_REDO_LOG_ENABLE, 0); }
		public TerminalNode NDB_STORED_USER() { return getToken(MySqlParser.NDB_STORED_USER, 0); }
		public TerminalNode PASSWORDLESS_USER_ADMIN() { return getToken(MySqlParser.PASSWORDLESS_USER_ADMIN, 0); }
		public TerminalNode PERSIST_RO_VARIABLES_ADMIN() { return getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		public TerminalNode REPLICATION_APPLIER() { return getToken(MySqlParser.REPLICATION_APPLIER, 0); }
		public TerminalNode REPLICATION_SLAVE_ADMIN() { return getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_ADMIN() { return getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_USER() { return getToken(MySqlParser.RESOURCE_GROUP_USER, 0); }
		public TerminalNode ROLE_ADMIN() { return getToken(MySqlParser.ROLE_ADMIN, 0); }
		public TerminalNode SERVICE_CONNECTION_ADMIN() { return getToken(MySqlParser.SERVICE_CONNECTION_ADMIN, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SET_USER_ID() { return getToken(MySqlParser.SET_USER_ID, 0); }
		public TerminalNode SHOW_ROUTINE() { return getToken(MySqlParser.SHOW_ROUTINE, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(MySqlParser.SYSTEM_USER, 0); }
		public TerminalNode SYSTEM_VARIABLES_ADMIN() { return getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		public TerminalNode TABLE_ENCRYPTION_ADMIN() { return getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		public TerminalNode VERSION_TOKEN_ADMIN() { return getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0); }
		public TerminalNode XA_RECOVER_ADMIN() { return getToken(MySqlParser.XA_RECOVER_ADMIN, 0); }
		public TerminalNode BINLOG_MONITOR() { return getToken(MySqlParser.BINLOG_MONITOR, 0); }
		public TerminalNode BINLOG_REPLAY() { return getToken(MySqlParser.BINLOG_REPLAY, 0); }
		public TerminalNode FEDERATED_ADMIN() { return getToken(MySqlParser.FEDERATED_ADMIN, 0); }
		public TerminalNode READ_ONLY_ADMIN() { return getToken(MySqlParser.READ_ONLY_ADMIN, 0); }
		public TerminalNode REPLICATION_MASTER_ADMIN() { return getToken(MySqlParser.REPLICATION_MASTER_ADMIN, 0); }
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode S3() { return getToken(MySqlParser.S3, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode INVOKE() { return getToken(MySqlParser.INVOKE, 0); }
		public TerminalNode LAMBDA() { return getToken(MySqlParser.LAMBDA, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrivilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_privilege);
		int _la;
		try {
			setState(5370);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,786,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5277);
				match(ALL);
				setState(5279);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(5278);
					match(PRIVILEGES);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5281);
				match(ALTER);
				setState(5283);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROUTINE) {
					{
					setState(5282);
					match(ROUTINE);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5285);
				match(CREATE);
				setState(5293);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TEMPORARY:
					{
					setState(5286);
					match(TEMPORARY);
					setState(5287);
					match(TABLES);
					}
					break;
				case ROUTINE:
					{
					setState(5288);
					match(ROUTINE);
					}
					break;
				case VIEW:
					{
					setState(5289);
					match(VIEW);
					}
					break;
				case USER:
					{
					setState(5290);
					match(USER);
					}
					break;
				case TABLESPACE:
					{
					setState(5291);
					match(TABLESPACE);
					}
					break;
				case ROLE:
					{
					setState(5292);
					match(ROLE);
					}
					break;
				case ON:
				case LR_BRACKET:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5295);
				match(DELETE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5296);
				match(DROP);
				setState(5298);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROLE) {
					{
					setState(5297);
					match(ROLE);
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5300);
				match(EVENT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5301);
				match(EXECUTE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5302);
				match(FILE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5303);
				match(GRANT);
				setState(5304);
				match(OPTION);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5305);
				match(INDEX);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5306);
				match(INSERT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5307);
				match(LOCK);
				setState(5308);
				match(TABLES);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5309);
				match(PROCESS);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5310);
				match(PROXY);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5311);
				match(REFERENCES);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5312);
				match(RELOAD);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5313);
				match(REPLICATION);
				setState(5314);
				_la = _input.LA(1);
				if ( !(_la==CLIENT || _la==SLAVE || _la==REPLICA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5315);
				match(SELECT);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5316);
				match(SHOW);
				setState(5317);
				_la = _input.LA(1);
				if ( !(_la==DATABASES || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(5318);
				match(SHUTDOWN);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(5319);
				match(SUPER);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(5320);
				match(TRIGGER);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(5321);
				match(UPDATE);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(5322);
				match(USAGE);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(5323);
				match(APPLICATION_PASSWORD_ADMIN);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(5324);
				match(AUDIT_ADMIN);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(5325);
				match(BACKUP_ADMIN);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(5326);
				match(BINLOG_ADMIN);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(5327);
				match(BINLOG_ENCRYPTION_ADMIN);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(5328);
				match(CLONE_ADMIN);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(5329);
				match(CONNECTION_ADMIN);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(5330);
				match(ENCRYPTION_KEY_ADMIN);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(5331);
				match(FIREWALL_ADMIN);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(5332);
				match(FIREWALL_USER);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(5333);
				match(FLUSH_OPTIMIZER_COSTS);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(5334);
				match(FLUSH_STATUS);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(5335);
				match(FLUSH_TABLES);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(5336);
				match(FLUSH_USER_RESOURCES);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(5337);
				match(GROUP_REPLICATION_ADMIN);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(5338);
				match(INNODB_REDO_LOG_ARCHIVE);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(5339);
				match(INNODB_REDO_LOG_ENABLE);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(5340);
				match(NDB_STORED_USER);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(5341);
				match(PASSWORDLESS_USER_ADMIN);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(5342);
				match(PERSIST_RO_VARIABLES_ADMIN);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(5343);
				match(REPLICATION_APPLIER);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(5344);
				match(REPLICATION_SLAVE_ADMIN);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(5345);
				match(RESOURCE_GROUP_ADMIN);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(5346);
				match(RESOURCE_GROUP_USER);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(5347);
				match(ROLE_ADMIN);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(5348);
				match(SERVICE_CONNECTION_ADMIN);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(5349);
				match(SESSION_VARIABLES_ADMIN);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(5350);
				match(SET_USER_ID);
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(5351);
				match(SHOW_ROUTINE);
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(5352);
				match(SYSTEM_USER);
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(5353);
				match(SYSTEM_VARIABLES_ADMIN);
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(5354);
				match(TABLE_ENCRYPTION_ADMIN);
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(5355);
				match(VERSION_TOKEN_ADMIN);
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(5356);
				match(XA_RECOVER_ADMIN);
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(5357);
				match(BINLOG_MONITOR);
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(5358);
				match(BINLOG_REPLAY);
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(5359);
				match(FEDERATED_ADMIN);
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(5360);
				match(READ_ONLY_ADMIN);
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(5361);
				match(REPLICATION_MASTER_ADMIN);
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(5362);
				match(LOAD);
				setState(5363);
				match(FROM);
				setState(5364);
				match(S3);
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(5365);
				match(SELECT);
				setState(5366);
				match(INTO);
				setState(5367);
				match(S3);
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(5368);
				match(INVOKE);
				setState(5369);
				match(LAMBDA);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeLevelContext extends ParserRuleContext {
		public PrivilegeLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeLevel; }
	 
		public PrivilegeLevelContext() { }
		public void copyFrom(PrivilegeLevelContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DefiniteSchemaPrivLevelContext extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public DefiniteSchemaPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefiniteSchemaPrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefiniteSchemaPrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefiniteSchemaPrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteFullTablePrivLevel2Context extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext dottedId() {
			return getRuleContext(DottedIdContext.class,0);
		}
		public DefiniteFullTablePrivLevel2Context(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefiniteFullTablePrivLevel2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefiniteFullTablePrivLevel2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefiniteFullTablePrivLevel2(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteFullTablePrivLevelContext extends PrivilegeLevelContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public DefiniteFullTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefiniteFullTablePrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefiniteFullTablePrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefiniteFullTablePrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GlobalPrivLevelContext extends PrivilegeLevelContext {
		public List<TerminalNode> STAR() { return getTokens(MySqlParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(MySqlParser.STAR, i);
		}
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public GlobalPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGlobalPrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGlobalPrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGlobalPrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteTablePrivLevelContext extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DefiniteTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefiniteTablePrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefiniteTablePrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefiniteTablePrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CurrentSchemaPriviLevelContext extends PrivilegeLevelContext {
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public CurrentSchemaPriviLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCurrentSchemaPriviLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCurrentSchemaPriviLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCurrentSchemaPriviLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeLevelContext privilegeLevel() throws RecognitionException {
		PrivilegeLevelContext _localctx = new PrivilegeLevelContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_privilegeLevel);
		try {
			setState(5388);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,787,_ctx) ) {
			case 1:
				_localctx = new CurrentSchemaPriviLevelContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5372);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new GlobalPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5373);
				match(STAR);
				setState(5374);
				match(DOT);
				setState(5375);
				match(STAR);
				}
				break;
			case 3:
				_localctx = new DefiniteSchemaPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5376);
				uid();
				setState(5377);
				match(DOT);
				setState(5378);
				match(STAR);
				}
				break;
			case 4:
				_localctx = new DefiniteFullTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5380);
				uid();
				setState(5381);
				match(DOT);
				setState(5382);
				uid();
				}
				break;
			case 5:
				_localctx = new DefiniteFullTablePrivLevel2Context(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5384);
				uid();
				setState(5385);
				dottedId();
				}
				break;
			case 6:
				_localctx = new DefiniteTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5387);
				uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserClauseContext extends ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public RenameUserClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUserClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameUserClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameUserClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRenameUserClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameUserClauseContext renameUserClause() throws RecognitionException {
		RenameUserClauseContext _localctx = new RenameUserClauseContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_renameUserClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5390);
			((RenameUserClauseContext)_localctx).fromFirst = userName();
			setState(5391);
			match(TO);
			setState(5392);
			((RenameUserClauseContext)_localctx).toFirst = userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode ANALYZE() { return getToken(MySqlParser.ANALYZE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public List<TerminalNode> HISTOGRAM() { return getTokens(MySqlParser.HISTOGRAM); }
		public TerminalNode HISTOGRAM(int i) {
			return getToken(MySqlParser.HISTOGRAM, i);
		}
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode BUCKETS() { return getToken(MySqlParser.BUCKETS, 0); }
		public AnalyzeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAnalyzeTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAnalyzeTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAnalyzeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzeTableContext analyzeTable() throws RecognitionException {
		AnalyzeTableContext _localctx = new AnalyzeTableContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_analyzeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5394);
			match(ANALYZE);
			setState(5396);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5395);
				((AnalyzeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((AnalyzeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5398);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5399);
			tables();
			setState(5417);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,791,_ctx) ) {
			case 1:
				{
				setState(5400);
				match(UPDATE);
				setState(5401);
				match(HISTOGRAM);
				setState(5402);
				match(ON);
				setState(5403);
				fullColumnName();
				setState(5408);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5404);
					match(COMMA);
					setState(5405);
					fullColumnName();
					}
					}
					setState(5410);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5415);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5411);
					match(WITH);
					setState(5412);
					decimalLiteral();
					setState(5413);
					match(BUCKETS);
					}
				}

				}
				break;
			}
			setState(5430);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,793,_ctx) ) {
			case 1:
				{
				setState(5419);
				match(DROP);
				setState(5420);
				match(HISTOGRAM);
				setState(5421);
				match(ON);
				setState(5422);
				fullColumnName();
				setState(5427);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5423);
					match(COMMA);
					setState(5424);
					fullColumnName();
					}
					}
					setState(5429);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public List<CheckTableOptionContext> checkTableOption() {
			return getRuleContexts(CheckTableOptionContext.class);
		}
		public CheckTableOptionContext checkTableOption(int i) {
			return getRuleContext(CheckTableOptionContext.class,i);
		}
		public CheckTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCheckTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableContext checkTable() throws RecognitionException {
		CheckTableContext _localctx = new CheckTableContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_checkTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5432);
			match(CHECK);
			setState(5433);
			match(TABLE);
			setState(5434);
			tables();
			setState(5438);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==CHANGED || _la==EXTENDED || _la==FAST || _la==MEDIUM || _la==QUICK) {
				{
				{
				setState(5435);
				checkTableOption();
				}
				}
				setState(5440);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChecksumTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public ChecksumTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checksumTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChecksumTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChecksumTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitChecksumTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChecksumTableContext checksumTable() throws RecognitionException {
		ChecksumTableContext _localctx = new ChecksumTableContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_checksumTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5441);
			match(CHECKSUM);
			setState(5442);
			match(TABLE);
			setState(5443);
			tables();
			setState(5445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==QUICK) {
				{
				setState(5444);
				((ChecksumTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==QUICK) ) {
					((ChecksumTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptimizeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode OPTIMIZE() { return getToken(MySqlParser.OPTIMIZE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public WaitNowaitClauseContext waitNowaitClause() {
			return getRuleContext(WaitNowaitClauseContext.class,0);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public OptimizeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimizeTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOptimizeTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOptimizeTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOptimizeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptimizeTableContext optimizeTable() throws RecognitionException {
		OptimizeTableContext _localctx = new OptimizeTableContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_optimizeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5447);
			match(OPTIMIZE);
			setState(5449);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5448);
				((OptimizeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((OptimizeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5451);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5452);
			tables();
			setState(5454);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(5453);
				waitNowaitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepairTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode USE_FRM() { return getToken(MySqlParser.USE_FRM, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public RepairTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repairTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRepairTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRepairTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRepairTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepairTableContext repairTable() throws RecognitionException {
		RepairTableContext _localctx = new RepairTableContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_repairTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5456);
			match(REPAIR);
			setState(5458);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5457);
				((RepairTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((RepairTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5460);
			match(TABLE);
			setState(5461);
			tables();
			setState(5463);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(5462);
				match(QUICK);
				}
			}

			setState(5466);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED) {
				{
				setState(5465);
				match(EXTENDED);
				}
			}

			setState(5469);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USE_FRM) {
				{
				setState(5468);
				match(USE_FRM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode FAST() { return getToken(MySqlParser.FAST, 0); }
		public TerminalNode MEDIUM() { return getToken(MySqlParser.MEDIUM, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode CHANGED() { return getToken(MySqlParser.CHANGED, 0); }
		public CheckTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCheckTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableOptionContext checkTableOption() throws RecognitionException {
		CheckTableOptionContext _localctx = new CheckTableOptionContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_checkTableOption);
		try {
			setState(5478);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5471);
				match(FOR);
				setState(5472);
				match(UPGRADE);
				}
				break;
			case QUICK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5473);
				match(QUICK);
				}
				break;
			case FAST:
				enterOuterAlt(_localctx, 3);
				{
				setState(5474);
				match(FAST);
				}
				break;
			case MEDIUM:
				enterOuterAlt(_localctx, 4);
				{
				setState(5475);
				match(MEDIUM);
				}
				break;
			case EXTENDED:
				enterOuterAlt(_localctx, 5);
				{
				setState(5476);
				match(EXTENDED);
				}
				break;
			case CHANGED:
				enterOuterAlt(_localctx, 6);
				{
				setState(5477);
				match(CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUdfunctionContext extends ParserRuleContext {
		public Token returnType;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public TerminalNode SONAME() { return getToken(MySqlParser.SONAME, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode STRING() { return getToken(MySqlParser.STRING, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public TerminalNode REAL() { return getToken(MySqlParser.REAL, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode AGGREGATE() { return getToken(MySqlParser.AGGREGATE, 0); }
		public CreateUdfunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUdfunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateUdfunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateUdfunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateUdfunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUdfunctionContext createUdfunction() throws RecognitionException {
		CreateUdfunctionContext _localctx = new CreateUdfunctionContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_createUdfunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5480);
			match(CREATE);
			setState(5482);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGGREGATE) {
				{
				setState(5481);
				match(AGGREGATE);
				}
			}

			setState(5484);
			match(FUNCTION);
			setState(5485);
			uid();
			setState(5486);
			match(RETURNS);
			setState(5487);
			((CreateUdfunctionContext)_localctx).returnType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (INTEGER - 200)) | (1L << (REAL - 200)) | (1L << (DECIMAL - 200)))) != 0) || _la==STRING) ) {
				((CreateUdfunctionContext)_localctx).returnType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5488);
			match(SONAME);
			setState(5489);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstallPluginContext extends ParserRuleContext {
		public TerminalNode INSTALL() { return getToken(MySqlParser.INSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(MySqlParser.PLUGIN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SONAME() { return getToken(MySqlParser.SONAME, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public InstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInstallPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInstallPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InstallPluginContext installPlugin() throws RecognitionException {
		InstallPluginContext _localctx = new InstallPluginContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_installPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5491);
			match(INSTALL);
			setState(5492);
			match(PLUGIN);
			setState(5493);
			uid();
			setState(5494);
			match(SONAME);
			setState(5495);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UninstallPluginContext extends ParserRuleContext {
		public TerminalNode UNINSTALL() { return getToken(MySqlParser.UNINSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(MySqlParser.PLUGIN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public UninstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uninstallPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUninstallPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUninstallPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUninstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UninstallPluginContext uninstallPlugin() throws RecognitionException {
		UninstallPluginContext _localctx = new UninstallPluginContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_uninstallPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5497);
			match(UNINSTALL);
			setState(5498);
			match(PLUGIN);
			setState(5499);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetStatementContext extends ParserRuleContext {
		public SetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatement; }
	 
		public SetStatementContext() { }
		public void copyFrom(SetStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SetTransactionContext extends SetStatementContext {
		public SetTransactionStatementContext setTransactionStatement() {
			return getRuleContext(SetTransactionStatementContext.class,0);
		}
		public SetTransactionContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetTransaction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetCharsetContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public SetCharsetContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetNamesContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode NAMES() { return getToken(MySqlParser.NAMES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public SetNamesContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetNames(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetPasswordContext extends SetStatementContext {
		public SetPasswordStatementContext setPasswordStatement() {
			return getRuleContext(SetPasswordStatementContext.class,0);
		}
		public SetPasswordContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetPassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetPassword(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetAutocommitContext extends SetStatementContext {
		public SetAutocommitStatementContext setAutocommitStatement() {
			return getRuleContext(SetAutocommitStatementContext.class,0);
		}
		public SetAutocommitContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetAutocommit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetAutocommit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetAutocommit(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetNewValueInsideTriggerContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public List<TerminalNode> VAR_ASSIGN() { return getTokens(MySqlParser.VAR_ASSIGN); }
		public TerminalNode VAR_ASSIGN(int i) {
			return getToken(MySqlParser.VAR_ASSIGN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SetNewValueInsideTriggerContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetNewValueInsideTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetNewValueInsideTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetNewValueInsideTrigger(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetVariableContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<VariableClauseContext> variableClause() {
			return getRuleContexts(VariableClauseContext.class);
		}
		public VariableClauseContext variableClause(int i) {
			return getRuleContext(VariableClauseContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public List<TerminalNode> VAR_ASSIGN() { return getTokens(MySqlParser.VAR_ASSIGN); }
		public TerminalNode VAR_ASSIGN(int i) {
			return getToken(MySqlParser.VAR_ASSIGN, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SetVariableContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetStatementContext setStatement() throws RecognitionException {
		SetStatementContext _localctx = new SetStatementContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_setStatement);
		int _la;
		try {
			setState(5553);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,811,_ctx) ) {
			case 1:
				_localctx = new SetVariableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5501);
				match(SET);
				setState(5502);
				variableClause();
				setState(5503);
				_la = _input.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5506);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,804,_ctx) ) {
				case 1:
					{
					setState(5504);
					expression(0);
					}
					break;
				case 2:
					{
					setState(5505);
					match(ON);
					}
					break;
				}
				setState(5517);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5508);
					match(COMMA);
					setState(5509);
					variableClause();
					setState(5510);
					_la = _input.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5513);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
					case 1:
						{
						setState(5511);
						expression(0);
						}
						break;
					case 2:
						{
						setState(5512);
						match(ON);
						}
						break;
					}
					}
					}
					setState(5519);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SetCharsetContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5520);
				match(SET);
				setState(5521);
				charSet();
				setState(5524);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(5522);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(5523);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new SetNamesContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5526);
				match(SET);
				setState(5527);
				match(NAMES);
				setState(5534);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(5528);
					charsetName();
					setState(5531);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COLLATE) {
						{
						setState(5529);
						match(COLLATE);
						setState(5530);
						collationName();
						}
					}

					}
					break;
				case DEFAULT:
					{
					setState(5533);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new SetPasswordContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5536);
				setPasswordStatement();
				}
				break;
			case 5:
				_localctx = new SetTransactionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5537);
				setTransactionStatement();
				}
				break;
			case 6:
				_localctx = new SetAutocommitContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5538);
				setAutocommitStatement();
				}
				break;
			case 7:
				_localctx = new SetNewValueInsideTriggerContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5539);
				match(SET);
				setState(5540);
				fullId();
				setState(5541);
				_la = _input.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5542);
				expression(0);
				setState(5550);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5543);
					match(COMMA);
					setState(5544);
					fullId();
					setState(5545);
					_la = _input.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5546);
					expression(0);
					}
					}
					setState(5552);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowStatementContext extends ParserRuleContext {
		public ShowStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatement; }
	 
		public ShowStatementContext() { }
		public void copyFrom(ShowStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ShowOpenTablesContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public ShowOpenTablesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowOpenTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowOpenTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowOpenTables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowGlobalInfoContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public ShowGlobalInfoClauseContext showGlobalInfoClause() {
			return getRuleContext(ShowGlobalInfoClauseContext.class,0);
		}
		public ShowGlobalInfoContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowGlobalInfo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowGlobalInfo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowGlobalInfo(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateFullIdObjectContext extends ShowStatementContext {
		public Token namedEntity;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public ShowCreateFullIdObjectContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCreateFullIdObject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCreateFullIdObject(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCreateFullIdObject(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateUserContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowCreateUserContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCreateUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCreateUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCreateUser(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public ShowErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowErrors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowErrors(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowErrors(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCountErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public ShowCountErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCountErrors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCountErrors(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCountErrors(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowObjectFilterContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public ShowCommonEntityContext showCommonEntity() {
			return getRuleContext(ShowCommonEntityContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowObjectFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowObjectFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowObjectFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowObjectFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateDbContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public ShowCreateDbContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCreateDb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCreateDb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCreateDb(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowEngineContext extends ShowStatementContext {
		public Token engineOption;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode MUTEX() { return getToken(MySqlParser.MUTEX, 0); }
		public ShowEngineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowSchemaFilterContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public ShowSchemaEntityContext showSchemaEntity() {
			return getRuleContext(ShowSchemaEntityContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public ShowSchemaFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowSchemaFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowSchemaFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowSchemaFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowIndexesContext extends ShowStatementContext {
		public Token indexFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(MySqlParser.INDEXES, 0); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public List<TerminalNode> FROM() { return getTokens(MySqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(MySqlParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(MySqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(MySqlParser.IN, i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowIndexesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowIndexes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowIndexes(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowLogEventsContext extends ShowStatementContext {
		public Token logFormat;
		public Token filename;
		public DecimalLiteralContext fromPosition;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode RELAYLOG() { return getToken(MySqlParser.RELAYLOG, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public ShowLogEventsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowLogEvents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowLogEvents(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowLogEvents(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowMasterLogsContext extends ShowStatementContext {
		public Token logFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public ShowMasterLogsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowMasterLogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowMasterLogs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowMasterLogs(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowGrantsContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode GRANTS() { return getToken(MySqlParser.GRANTS, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowGrantsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowGrants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowGrants(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowGrants(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowSlaveStatusContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public ShowSlaveStatusContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowSlaveStatus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowSlaveStatus(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowSlaveStatus(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowRoutineContext extends ShowStatementContext {
		public Token routine;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CODE() { return getToken(MySqlParser.CODE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public ShowRoutineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowRoutine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowRoutine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowRoutine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowProfileContext extends ShowStatementContext {
		public DecimalLiteralContext queryCount;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode PROFILE() { return getToken(MySqlParser.PROFILE, 0); }
		public List<ShowProfileTypeContext> showProfileType() {
			return getRuleContexts(ShowProfileTypeContext.class);
		}
		public ShowProfileTypeContext showProfileType(int i) {
			return getRuleContext(ShowProfileTypeContext.class,i);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public ShowProfileContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowProfile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowProfile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowProfile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowColumnsContext extends ShowStatementContext {
		public Token columnsFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public List<TerminalNode> FROM() { return getTokens(MySqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(MySqlParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(MySqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(MySqlParser.IN, i);
		}
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowColumnsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowStatementContext showStatement() throws RecognitionException {
		ShowStatementContext _localctx = new ShowStatementContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_showStatement);
		int _la;
		try {
			setState(5708);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,834,_ctx) ) {
			case 1:
				_localctx = new ShowMasterLogsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5555);
				match(SHOW);
				setState(5556);
				((ShowMasterLogsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==MASTER) ) {
					((ShowMasterLogsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5557);
				match(LOGS);
				}
				break;
			case 2:
				_localctx = new ShowLogEventsContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5558);
				match(SHOW);
				setState(5559);
				((ShowLogEventsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINLOG || _la==RELAYLOG) ) {
					((ShowLogEventsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5560);
				match(EVENTS);
				setState(5563);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(5561);
					match(IN);
					setState(5562);
					((ShowLogEventsContext)_localctx).filename = match(STRING_LITERAL);
					}
				}

				setState(5567);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(5565);
					match(FROM);
					setState(5566);
					((ShowLogEventsContext)_localctx).fromPosition = decimalLiteral();
					}
				}

				setState(5576);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(5569);
					match(LIMIT);
					setState(5573);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,814,_ctx) ) {
					case 1:
						{
						setState(5570);
						((ShowLogEventsContext)_localctx).offset = decimalLiteral();
						setState(5571);
						match(COMMA);
						}
						break;
					}
					setState(5575);
					((ShowLogEventsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 3:
				_localctx = new ShowObjectFilterContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5578);
				match(SHOW);
				setState(5579);
				showCommonEntity();
				setState(5581);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5580);
					showFilter();
					}
				}

				}
				break;
			case 4:
				_localctx = new ShowColumnsContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5583);
				match(SHOW);
				setState(5585);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5584);
					match(FULL);
					}
				}

				setState(5587);
				((ShowColumnsContext)_localctx).columnsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((ShowColumnsContext)_localctx).columnsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5588);
				((ShowColumnsContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowColumnsContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5589);
				tableName();
				setState(5592);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5590);
					((ShowColumnsContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowColumnsContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5591);
					uid();
					}
				}

				setState(5595);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5594);
					showFilter();
					}
				}

				}
				break;
			case 5:
				_localctx = new ShowCreateDbContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5597);
				match(SHOW);
				setState(5598);
				match(CREATE);
				setState(5599);
				((ShowCreateDbContext)_localctx).schemaFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((ShowCreateDbContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5601);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(5600);
					ifNotExists();
					}
				}

				setState(5603);
				uid();
				}
				break;
			case 6:
				_localctx = new ShowCreateFullIdObjectContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5604);
				match(SHOW);
				setState(5605);
				match(CREATE);
				setState(5606);
				((ShowCreateFullIdObjectContext)_localctx).namedEntity = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (PROCEDURE - 127)) | (1L << (TABLE - 127)) | (1L << (TRIGGER - 127)))) != 0) || _la==EVENT || _la==FUNCTION || _la==VIEW) ) {
					((ShowCreateFullIdObjectContext)_localctx).namedEntity = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5607);
				fullId();
				}
				break;
			case 7:
				_localctx = new ShowCreateUserContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5608);
				match(SHOW);
				setState(5609);
				match(CREATE);
				setState(5610);
				match(USER);
				setState(5611);
				userName();
				}
				break;
			case 8:
				_localctx = new ShowEngineContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5612);
				match(SHOW);
				setState(5613);
				match(ENGINE);
				setState(5614);
				engineName();
				setState(5615);
				((ShowEngineContext)_localctx).engineOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MUTEX || _la==STATUS) ) {
					((ShowEngineContext)_localctx).engineOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				_localctx = new ShowGlobalInfoContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(5617);
				match(SHOW);
				setState(5618);
				showGlobalInfoClause();
				}
				break;
			case 10:
				_localctx = new ShowErrorsContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(5619);
				match(SHOW);
				setState(5620);
				((ShowErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5628);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(5621);
					match(LIMIT);
					setState(5625);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,821,_ctx) ) {
					case 1:
						{
						setState(5622);
						((ShowErrorsContext)_localctx).offset = decimalLiteral();
						setState(5623);
						match(COMMA);
						}
						break;
					}
					setState(5627);
					((ShowErrorsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 11:
				_localctx = new ShowCountErrorsContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(5630);
				match(SHOW);
				setState(5631);
				match(COUNT);
				setState(5632);
				match(LR_BRACKET);
				setState(5633);
				match(STAR);
				setState(5634);
				match(RR_BRACKET);
				setState(5635);
				((ShowCountErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowCountErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new ShowSchemaFilterContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5636);
				match(SHOW);
				setState(5637);
				showSchemaEntity();
				setState(5640);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5638);
					((ShowSchemaFilterContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowSchemaFilterContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5639);
					uid();
					}
				}

				setState(5643);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5642);
					showFilter();
					}
				}

				}
				break;
			case 13:
				_localctx = new ShowRoutineContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(5645);
				match(SHOW);
				setState(5646);
				((ShowRoutineContext)_localctx).routine = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==FUNCTION) ) {
					((ShowRoutineContext)_localctx).routine = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5647);
				match(CODE);
				setState(5648);
				fullId();
				}
				break;
			case 14:
				_localctx = new ShowGrantsContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(5649);
				match(SHOW);
				setState(5650);
				match(GRANTS);
				setState(5653);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5651);
					match(FOR);
					setState(5652);
					userName();
					}
				}

				}
				break;
			case 15:
				_localctx = new ShowIndexesContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(5655);
				match(SHOW);
				setState(5656);
				((ShowIndexesContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEYS || _la==INDEXES) ) {
					((ShowIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5657);
				((ShowIndexesContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5658);
				tableName();
				setState(5661);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5659);
					((ShowIndexesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5660);
					uid();
					}
				}

				setState(5665);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(5663);
					match(WHERE);
					setState(5664);
					expression(0);
					}
				}

				}
				break;
			case 16:
				_localctx = new ShowOpenTablesContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(5667);
				match(SHOW);
				setState(5668);
				match(OPEN);
				setState(5669);
				match(TABLES);
				setState(5672);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5670);
					((ShowOpenTablesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowOpenTablesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5671);
					uid();
					}
				}

				setState(5675);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5674);
					showFilter();
					}
				}

				}
				break;
			case 17:
				_localctx = new ShowProfileContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(5677);
				match(SHOW);
				setState(5678);
				match(PROFILE);
				setState(5679);
				showProfileType();
				setState(5684);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5680);
					match(COMMA);
					setState(5681);
					showProfileType();
					}
					}
					setState(5686);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5690);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5687);
					match(FOR);
					setState(5688);
					match(QUERY);
					setState(5689);
					((ShowProfileContext)_localctx).queryCount = decimalLiteral();
					}
				}

				{
				setState(5692);
				match(LIMIT);
				setState(5696);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,832,_ctx) ) {
				case 1:
					{
					setState(5693);
					((ShowProfileContext)_localctx).offset = decimalLiteral();
					setState(5694);
					match(COMMA);
					}
					break;
				}
				setState(5698);
				((ShowProfileContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;
			case 18:
				_localctx = new ShowSlaveStatusContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(5700);
				match(SHOW);
				setState(5701);
				match(SLAVE);
				setState(5702);
				match(STATUS);
				setState(5706);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5703);
					match(FOR);
					setState(5704);
					match(CHANNEL);
					setState(5705);
					match(STRING_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableClauseContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(MySqlParser.GLOBAL_ID, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public List<TerminalNode> AT_SIGN() { return getTokens(MySqlParser.AT_SIGN); }
		public TerminalNode AT_SIGN(int i) {
			return getToken(MySqlParser.AT_SIGN, i);
		}
		public VariableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterVariableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitVariableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitVariableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableClauseContext variableClause() throws RecognitionException {
		VariableClauseContext _localctx = new VariableClauseContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_variableClause);
		int _la;
		try {
			setState(5720);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5710);
				match(LOCAL_ID);
				}
				break;
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5711);
				match(GLOBAL_ID);
				}
				break;
			case BUCKETS:
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(5717);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,836,_ctx) ) {
				case 1:
					{
					setState(5714);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AT_SIGN) {
						{
						setState(5712);
						match(AT_SIGN);
						setState(5713);
						match(AT_SIGN);
						}
					}

					setState(5716);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5719);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCommonEntityContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode COLLATION() { return getToken(MySqlParser.COLLATION, 0); }
		public TerminalNode DATABASES() { return getToken(MySqlParser.DATABASES, 0); }
		public TerminalNode SCHEMAS() { return getToken(MySqlParser.SCHEMAS, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public TerminalNode VARIABLES() { return getToken(MySqlParser.VARIABLES, 0); }
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public ShowCommonEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCommonEntity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCommonEntity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCommonEntity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCommonEntity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCommonEntityContext showCommonEntity() throws RecognitionException {
		ShowCommonEntityContext _localctx = new ShowCommonEntityContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_showCommonEntity);
		int _la;
		try {
			setState(5735);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARACTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5722);
				match(CHARACTER);
				setState(5723);
				match(SET);
				}
				break;
			case COLLATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(5724);
				match(COLLATION);
				}
				break;
			case DATABASES:
				enterOuterAlt(_localctx, 3);
				{
				setState(5725);
				match(DATABASES);
				}
				break;
			case SCHEMAS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5726);
				match(SCHEMAS);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 5);
				{
				setState(5727);
				match(FUNCTION);
				setState(5728);
				match(STATUS);
				}
				break;
			case PROCEDURE:
				enterOuterAlt(_localctx, 6);
				{
				setState(5729);
				match(PROCEDURE);
				setState(5730);
				match(STATUS);
				}
				break;
			case GLOBAL:
			case SESSION:
			case STATUS:
			case VARIABLES:
				enterOuterAlt(_localctx, 7);
				{
				setState(5732);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==SESSION) {
					{
					setState(5731);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5734);
				_la = _input.LA(1);
				if ( !(_la==STATUS || _la==VARIABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowFilterContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showFilter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowFilterContext showFilter() throws RecognitionException {
		ShowFilterContext _localctx = new ShowFilterContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_showFilter);
		try {
			setState(5741);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5737);
				match(LIKE);
				setState(5738);
				match(STRING_LITERAL);
				}
				break;
			case WHERE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5739);
				match(WHERE);
				setState(5740);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowGlobalInfoClauseContext extends ParserRuleContext {
		public TerminalNode ENGINES() { return getToken(MySqlParser.ENGINES, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode PLUGINS() { return getToken(MySqlParser.PLUGINS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode PROCESSLIST() { return getToken(MySqlParser.PROCESSLIST, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode PROFILES() { return getToken(MySqlParser.PROFILES, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode AUTHORS() { return getToken(MySqlParser.AUTHORS, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(MySqlParser.CONTRIBUTORS, 0); }
		public ShowGlobalInfoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showGlobalInfoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowGlobalInfoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowGlobalInfoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowGlobalInfoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowGlobalInfoClauseContext showGlobalInfoClause() throws RecognitionException {
		ShowGlobalInfoClauseContext _localctx = new ShowGlobalInfoClauseContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_showGlobalInfoClause);
		int _la;
		try {
			setState(5760);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENGINES:
			case STORAGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5744);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(5743);
					match(STORAGE);
					}
				}

				setState(5746);
				match(ENGINES);
				}
				break;
			case MASTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5747);
				match(MASTER);
				setState(5748);
				match(STATUS);
				}
				break;
			case PLUGINS:
				enterOuterAlt(_localctx, 3);
				{
				setState(5749);
				match(PLUGINS);
				}
				break;
			case PRIVILEGES:
				enterOuterAlt(_localctx, 4);
				{
				setState(5750);
				match(PRIVILEGES);
				}
				break;
			case FULL:
			case PROCESSLIST:
				enterOuterAlt(_localctx, 5);
				{
				setState(5752);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5751);
					match(FULL);
					}
				}

				setState(5754);
				match(PROCESSLIST);
				}
				break;
			case PROFILES:
				enterOuterAlt(_localctx, 6);
				{
				setState(5755);
				match(PROFILES);
				}
				break;
			case SLAVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5756);
				match(SLAVE);
				setState(5757);
				match(HOSTS);
				}
				break;
			case AUTHORS:
				enterOuterAlt(_localctx, 8);
				{
				setState(5758);
				match(AUTHORS);
				}
				break;
			case CONTRIBUTORS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5759);
				match(CONTRIBUTORS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowSchemaEntityContext extends ParserRuleContext {
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode TRIGGERS() { return getToken(MySqlParser.TRIGGERS, 0); }
		public ShowSchemaEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showSchemaEntity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowSchemaEntity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowSchemaEntity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowSchemaEntity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowSchemaEntityContext showSchemaEntity() throws RecognitionException {
		ShowSchemaEntityContext _localctx = new ShowSchemaEntityContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_showSchemaEntity);
		int _la;
		try {
			setState(5770);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EVENTS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5762);
				match(EVENTS);
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5763);
				match(TABLE);
				setState(5764);
				match(STATUS);
				}
				break;
			case FULL:
			case TABLES:
				enterOuterAlt(_localctx, 3);
				{
				setState(5766);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5765);
					match(FULL);
					}
				}

				setState(5768);
				match(TABLES);
				}
				break;
			case TRIGGERS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5769);
				match(TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProfileTypeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode BLOCK() { return getToken(MySqlParser.BLOCK, 0); }
		public TerminalNode IO() { return getToken(MySqlParser.IO, 0); }
		public TerminalNode CONTEXT() { return getToken(MySqlParser.CONTEXT, 0); }
		public TerminalNode SWITCHES() { return getToken(MySqlParser.SWITCHES, 0); }
		public TerminalNode CPU() { return getToken(MySqlParser.CPU, 0); }
		public TerminalNode IPC() { return getToken(MySqlParser.IPC, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode PAGE() { return getToken(MySqlParser.PAGE, 0); }
		public TerminalNode FAULTS() { return getToken(MySqlParser.FAULTS, 0); }
		public TerminalNode SOURCE() { return getToken(MySqlParser.SOURCE, 0); }
		public TerminalNode SWAPS() { return getToken(MySqlParser.SWAPS, 0); }
		public ShowProfileTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProfileType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowProfileType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowProfileType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowProfileType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowProfileTypeContext showProfileType() throws RecognitionException {
		ShowProfileTypeContext _localctx = new ShowProfileTypeContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_showProfileType);
		try {
			setState(5784);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5772);
				match(ALL);
				}
				break;
			case BLOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5773);
				match(BLOCK);
				setState(5774);
				match(IO);
				}
				break;
			case CONTEXT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5775);
				match(CONTEXT);
				setState(5776);
				match(SWITCHES);
				}
				break;
			case CPU:
				enterOuterAlt(_localctx, 4);
				{
				setState(5777);
				match(CPU);
				}
				break;
			case IPC:
				enterOuterAlt(_localctx, 5);
				{
				setState(5778);
				match(IPC);
				}
				break;
			case MEMORY:
				enterOuterAlt(_localctx, 6);
				{
				setState(5779);
				match(MEMORY);
				}
				break;
			case PAGE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5780);
				match(PAGE);
				setState(5781);
				match(FAULTS);
				}
				break;
			case SOURCE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5782);
				match(SOURCE);
				}
				break;
			case SWAPS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5783);
				match(SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BinlogStatementContext extends ParserRuleContext {
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public BinlogStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binlogStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBinlogStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBinlogStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBinlogStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BinlogStatementContext binlogStatement() throws RecognitionException {
		BinlogStatementContext _localctx = new BinlogStatementContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_binlogStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5786);
			match(BINLOG);
			setState(5787);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CacheIndexStatementContext extends ParserRuleContext {
		public UidContext schema;
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public List<TableIndexesContext> tableIndexes() {
			return getRuleContexts(TableIndexesContext.class);
		}
		public TableIndexesContext tableIndexes(int i) {
			return getRuleContext(TableIndexesContext.class,i);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public CacheIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cacheIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCacheIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCacheIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCacheIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CacheIndexStatementContext cacheIndexStatement() throws RecognitionException {
		CacheIndexStatementContext _localctx = new CacheIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_cacheIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5789);
			match(CACHE);
			setState(5790);
			match(INDEX);
			setState(5791);
			tableIndexes();
			setState(5796);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5792);
				match(COMMA);
				setState(5793);
				tableIndexes();
				}
				}
				setState(5798);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5806);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5799);
				match(PARTITION);
				setState(5800);
				match(LR_BRACKET);
				setState(5803);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BUCKETS:
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(5801);
					uidList();
					}
					break;
				case ALL:
					{
					setState(5802);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5805);
				match(RR_BRACKET);
				}
			}

			setState(5808);
			match(IN);
			setState(5809);
			((CacheIndexStatementContext)_localctx).schema = uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushStatementContext extends ParserRuleContext {
		public Token flushFormat;
		public TerminalNode FLUSH() { return getToken(MySqlParser.FLUSH, 0); }
		public List<FlushOptionContext> flushOption() {
			return getRuleContexts(FlushOptionContext.class);
		}
		public FlushOptionContext flushOption(int i) {
			return getRuleContext(FlushOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public FlushStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFlushStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFlushStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFlushStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushStatementContext flushStatement() throws RecognitionException {
		FlushStatementContext _localctx = new FlushStatementContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_flushStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5811);
			match(FLUSH);
			setState(5813);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5812);
				((FlushStatementContext)_localctx).flushFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((FlushStatementContext)_localctx).flushFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5815);
			flushOption();
			setState(5820);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5816);
				match(COMMA);
				setState(5817);
				flushOption();
				}
				}
				setState(5822);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KillStatementContext extends ParserRuleContext {
		public Token connectionFormat;
		public TerminalNode KILL() { return getToken(MySqlParser.KILL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public KillStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_killStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterKillStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitKillStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitKillStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KillStatementContext killStatement() throws RecognitionException {
		KillStatementContext _localctx = new KillStatementContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_killStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5823);
			match(KILL);
			setState(5825);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,852,_ctx) ) {
			case 1:
				{
				setState(5824);
				((KillStatementContext)_localctx).connectionFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CONNECTION || _la==QUERY) ) {
					((KillStatementContext)_localctx).connectionFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(5827);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadIndexIntoCacheContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public List<LoadedTableIndexesContext> loadedTableIndexes() {
			return getRuleContexts(LoadedTableIndexesContext.class);
		}
		public LoadedTableIndexesContext loadedTableIndexes(int i) {
			return getRuleContext(LoadedTableIndexesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LoadIndexIntoCacheContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadIndexIntoCache; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoadIndexIntoCache(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoadIndexIntoCache(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLoadIndexIntoCache(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadIndexIntoCacheContext loadIndexIntoCache() throws RecognitionException {
		LoadIndexIntoCacheContext _localctx = new LoadIndexIntoCacheContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_loadIndexIntoCache);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5829);
			match(LOAD);
			setState(5830);
			match(INDEX);
			setState(5831);
			match(INTO);
			setState(5832);
			match(CACHE);
			setState(5833);
			loadedTableIndexes();
			setState(5838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5834);
				match(COMMA);
				setState(5835);
				loadedTableIndexes();
				}
				}
				setState(5840);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetStatementContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public ResetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterResetStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitResetStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitResetStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetStatementContext resetStatement() throws RecognitionException {
		ResetStatementContext _localctx = new ResetStatementContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_resetStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5841);
			match(RESET);
			setState(5842);
			match(QUERY);
			setState(5843);
			match(CACHE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShutdownStatementContext extends ParserRuleContext {
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public ShutdownStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shutdownStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShutdownStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShutdownStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShutdownStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShutdownStatementContext shutdownStatement() throws RecognitionException {
		ShutdownStatementContext _localctx = new ShutdownStatementContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_shutdownStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5845);
			match(SHUTDOWN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableIndexesContext extends ParserRuleContext {
		public Token indexFormat;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableIndexes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableIndexes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableIndexes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableIndexesContext tableIndexes() throws RecognitionException {
		TableIndexesContext _localctx = new TableIndexesContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_tableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5847);
			tableName();
			setState(5855);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX || _la==KEY || _la==LR_BRACKET) {
				{
				setState(5849);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(5848);
					((TableIndexesContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((TableIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5851);
				match(LR_BRACKET);
				setState(5852);
				uidList();
				setState(5853);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushOptionContext extends ParserRuleContext {
		public FlushOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushOption; }
	 
		public FlushOptionContext() { }
		public void copyFrom(FlushOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableFlushOptionContext extends FlushOptionContext {
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public FlushTableOptionContext flushTableOption() {
			return getRuleContext(FlushTableOptionContext.class,0);
		}
		public TableFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableFlushOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ChannelFlushOptionContext extends FlushOptionContext {
		public TerminalNode RELAY() { return getToken(MySqlParser.RELAY, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChannelFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChannelFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChannelFlushOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitChannelFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleFlushOptionContext extends FlushOptionContext {
		public TerminalNode DES_KEY_FILE() { return getToken(MySqlParser.DES_KEY_FILE, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(MySqlParser.USER_RESOURCES, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode ERROR() { return getToken(MySqlParser.ERROR, 0); }
		public TerminalNode GENERAL() { return getToken(MySqlParser.GENERAL, 0); }
		public TerminalNode RELAY() { return getToken(MySqlParser.RELAY, 0); }
		public TerminalNode SLOW() { return getToken(MySqlParser.SLOW, 0); }
		public SimpleFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleFlushOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushOptionContext flushOption() throws RecognitionException {
		FlushOptionContext _localctx = new FlushOptionContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_flushOption);
		int _la;
		try {
			setState(5889);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,862,_ctx) ) {
			case 1:
				_localctx = new SimpleFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5875);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DES_KEY_FILE:
					{
					setState(5857);
					match(DES_KEY_FILE);
					}
					break;
				case HOSTS:
					{
					setState(5858);
					match(HOSTS);
					}
					break;
				case BINARY:
				case ENGINE:
				case ERROR:
				case GENERAL:
				case LOGS:
				case RELAY:
				case SLOW:
					{
					setState(5860);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BINARY || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (ENGINE - 398)) | (1L << (ERROR - 398)) | (1L << (GENERAL - 398)))) != 0) || _la==RELAY || _la==SLOW) {
						{
						setState(5859);
						_la = _input.LA(1);
						if ( !(_la==BINARY || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (ENGINE - 398)) | (1L << (ERROR - 398)) | (1L << (GENERAL - 398)))) != 0) || _la==RELAY || _la==SLOW) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(5862);
					match(LOGS);
					}
					break;
				case OPTIMIZER_COSTS:
					{
					setState(5863);
					match(OPTIMIZER_COSTS);
					}
					break;
				case PRIVILEGES:
					{
					setState(5864);
					match(PRIVILEGES);
					}
					break;
				case QUERY:
					{
					setState(5865);
					match(QUERY);
					setState(5866);
					match(CACHE);
					}
					break;
				case STATUS:
					{
					setState(5867);
					match(STATUS);
					}
					break;
				case USER_RESOURCES:
					{
					setState(5868);
					match(USER_RESOURCES);
					}
					break;
				case TABLES:
					{
					setState(5869);
					match(TABLES);
					setState(5873);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(5870);
						match(WITH);
						setState(5871);
						match(READ);
						setState(5872);
						match(LOCK);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new ChannelFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5877);
				match(RELAY);
				setState(5878);
				match(LOGS);
				setState(5880);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5879);
					channelOption();
					}
				}

				}
				break;
			case 3:
				_localctx = new TableFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5882);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==TABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5884);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,860,_ctx) ) {
				case 1:
					{
					setState(5883);
					tables();
					}
					break;
				}
				setState(5887);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==WITH) {
					{
					setState(5886);
					flushTableOption();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushTableOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode EXPORT() { return getToken(MySqlParser.EXPORT, 0); }
		public FlushTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushTableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFlushTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFlushTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFlushTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushTableOptionContext flushTableOption() throws RecognitionException {
		FlushTableOptionContext _localctx = new FlushTableOptionContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_flushTableOption);
		try {
			setState(5896);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(5891);
				match(WITH);
				setState(5892);
				match(READ);
				setState(5893);
				match(LOCK);
				}
				break;
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5894);
				match(FOR);
				setState(5895);
				match(EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadedTableIndexesContext extends ParserRuleContext {
		public UidListContext partitionList;
		public Token indexFormat;
		public UidListContext indexList;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode LEAVES() { return getToken(MySqlParser.LEAVES, 0); }
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public LoadedTableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadedTableIndexes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoadedTableIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoadedTableIndexes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLoadedTableIndexes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadedTableIndexesContext loadedTableIndexes() throws RecognitionException {
		LoadedTableIndexesContext _localctx = new LoadedTableIndexesContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_loadedTableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5898);
			tableName();
			setState(5906);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5899);
				match(PARTITION);
				setState(5900);
				match(LR_BRACKET);
				setState(5903);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BUCKETS:
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(5901);
					((LoadedTableIndexesContext)_localctx).partitionList = uidList();
					}
					break;
				case ALL:
					{
					setState(5902);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5905);
				match(RR_BRACKET);
				}
			}

			setState(5915);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,867,_ctx) ) {
			case 1:
				{
				setState(5909);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(5908);
					((LoadedTableIndexesContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((LoadedTableIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5911);
				match(LR_BRACKET);
				setState(5912);
				((LoadedTableIndexesContext)_localctx).indexList = uidList();
				setState(5913);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5919);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(5917);
				match(IGNORE);
				setState(5918);
				match(LEAVES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public UidContext column;
		public Token pattern;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(MySqlParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(MySqlParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public SimpleDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleDescribeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleDescribeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleDescribeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleDescribeStatementContext simpleDescribeStatement() throws RecognitionException {
		SimpleDescribeStatementContext _localctx = new SimpleDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_simpleDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5921);
			((SimpleDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((SimpleDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5922);
			tableName();
			setState(5925);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,869,_ctx) ) {
			case 1:
				{
				setState(5923);
				((SimpleDescribeStatementContext)_localctx).column = uid();
				}
				break;
			case 2:
				{
				setState(5924);
				((SimpleDescribeStatementContext)_localctx).pattern = match(STRING_LITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public Token formatType;
		public Token formatValue;
		public DescribeObjectClauseContext describeObjectClause() {
			return getRuleContext(DescribeObjectClauseContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(MySqlParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(MySqlParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode FORMAT() { return getToken(MySqlParser.FORMAT, 0); }
		public TerminalNode TRADITIONAL() { return getToken(MySqlParser.TRADITIONAL, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public FullDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullDescribeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullDescribeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullDescribeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFullDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullDescribeStatementContext fullDescribeStatement() throws RecognitionException {
		FullDescribeStatementContext _localctx = new FullDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_fullDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5927);
			((FullDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((FullDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5931);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) {
				{
				setState(5928);
				((FullDescribeStatementContext)_localctx).formatType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) ) {
					((FullDescribeStatementContext)_localctx).formatType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5929);
				match(EQUAL_SYMBOL);
				setState(5930);
				((FullDescribeStatementContext)_localctx).formatValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || _la==TRADITIONAL) ) {
					((FullDescribeStatementContext)_localctx).formatValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5933);
			describeObjectClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HelpStatementContext extends ParserRuleContext {
		public TerminalNode HELP() { return getToken(MySqlParser.HELP, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public HelpStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_helpStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHelpStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHelpStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHelpStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HelpStatementContext helpStatement() throws RecognitionException {
		HelpStatementContext _localctx = new HelpStatementContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_helpStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5935);
			match(HELP);
			setState(5936);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseStatementContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public UseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UseStatementContext useStatement() throws RecognitionException {
		UseStatementContext _localctx = new UseStatementContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_useStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5938);
			match(USE);
			setState(5939);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalStatementContext extends ParserRuleContext {
		public TerminalNode SIGNAL() { return getToken(MySqlParser.SIGNAL, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<SignalConditionInformationContext> signalConditionInformation() {
			return getRuleContexts(SignalConditionInformationContext.class);
		}
		public SignalConditionInformationContext signalConditionInformation(int i) {
			return getRuleContext(SignalConditionInformationContext.class,i);
		}
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public SignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSignalStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalStatementContext signalStatement() throws RecognitionException {
		SignalStatementContext _localctx = new SignalStatementContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_signalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5941);
			match(SIGNAL);
			setState(5949);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLSTATE:
				{
				{
				setState(5942);
				match(SQLSTATE);
				setState(5944);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(5943);
					match(VALUE);
					}
				}

				setState(5946);
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				setState(5947);
				match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				setState(5948);
				match(REVERSE_QUOTE_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5960);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,874,_ctx) ) {
			case 1:
				{
				setState(5951);
				match(SET);
				setState(5952);
				signalConditionInformation();
				setState(5957);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5953);
					match(COMMA);
					setState(5954);
					signalConditionInformation();
					}
					}
					setState(5959);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResignalStatementContext extends ParserRuleContext {
		public TerminalNode RESIGNAL() { return getToken(MySqlParser.RESIGNAL, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<SignalConditionInformationContext> signalConditionInformation() {
			return getRuleContexts(SignalConditionInformationContext.class);
		}
		public SignalConditionInformationContext signalConditionInformation(int i) {
			return getRuleContext(SignalConditionInformationContext.class,i);
		}
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public ResignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resignalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterResignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitResignalStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitResignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResignalStatementContext resignalStatement() throws RecognitionException {
		ResignalStatementContext _localctx = new ResignalStatementContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_resignalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5962);
			match(RESIGNAL);
			setState(5970);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLSTATE:
				{
				{
				setState(5963);
				match(SQLSTATE);
				setState(5965);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(5964);
					match(VALUE);
					}
				}

				setState(5967);
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				setState(5968);
				match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				setState(5969);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case EOF:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUS:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			setState(5981);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,878,_ctx) ) {
			case 1:
				{
				setState(5972);
				match(SET);
				setState(5973);
				signalConditionInformation();
				setState(5978);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5974);
					match(COMMA);
					setState(5975);
					signalConditionInformation();
					}
					}
					setState(5980);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalConditionInformationContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(MySqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(MySqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(MySqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(MySqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(MySqlParser.CATALOG_NAME, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(MySqlParser.SCHEMA_NAME, 0); }
		public TerminalNode TABLE_NAME() { return getToken(MySqlParser.TABLE_NAME, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(MySqlParser.COLUMN_NAME, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(MySqlParser.CURSOR_NAME, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode DECIMAL_LITERAL() { return getToken(MySqlParser.DECIMAL_LITERAL, 0); }
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public SignalConditionInformationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalConditionInformation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSignalConditionInformation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSignalConditionInformation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSignalConditionInformation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalConditionInformationContext signalConditionInformation() throws RecognitionException {
		SignalConditionInformationContext _localctx = new SignalConditionInformationContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_signalConditionInformation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5983);
			_la = _input.LA(1);
			if ( !(((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (CLASS_ORIGIN - 350)) | (1L << (COLUMN_NAME - 350)) | (1L << (CONSTRAINT_CATALOG - 350)) | (1L << (CONSTRAINT_SCHEMA - 350)) | (1L << (CONSTRAINT_NAME - 350)) | (1L << (CURSOR_NAME - 350)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || _la==SUBCLASS_ORIGIN || _la==TABLE_NAME || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5984);
			match(EQUAL_SYMBOL);
			setState(5989);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,879,_ctx) ) {
			case 1:
				{
				setState(5985);
				stringLiteral();
				}
				break;
			case 2:
				{
				setState(5986);
				match(DECIMAL_LITERAL);
				}
				break;
			case 3:
				{
				setState(5987);
				mysqlVariable();
				}
				break;
			case 4:
				{
				setState(5988);
				simpleId();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiagnosticsStatementContext extends ParserRuleContext {
		public TerminalNode GET() { return getToken(MySqlParser.GET, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(MySqlParser.DIAGNOSTICS, 0); }
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode STACKED() { return getToken(MySqlParser.STACKED, 0); }
		public List<VariableClauseContext> variableClause() {
			return getRuleContexts(VariableClauseContext.class);
		}
		public VariableClauseContext variableClause(int i) {
			return getRuleContext(VariableClauseContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode CONDITION() { return getToken(MySqlParser.CONDITION, 0); }
		public List<DiagnosticsConditionInformationNameContext> diagnosticsConditionInformationName() {
			return getRuleContexts(DiagnosticsConditionInformationNameContext.class);
		}
		public DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName(int i) {
			return getRuleContext(DiagnosticsConditionInformationNameContext.class,i);
		}
		public List<TerminalNode> NUMBER() { return getTokens(MySqlParser.NUMBER); }
		public TerminalNode NUMBER(int i) {
			return getToken(MySqlParser.NUMBER, i);
		}
		public List<TerminalNode> ROW_COUNT() { return getTokens(MySqlParser.ROW_COUNT); }
		public TerminalNode ROW_COUNT(int i) {
			return getToken(MySqlParser.ROW_COUNT, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DiagnosticsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnosticsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDiagnosticsStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDiagnosticsStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDiagnosticsStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiagnosticsStatementContext diagnosticsStatement() throws RecognitionException {
		DiagnosticsStatementContext _localctx = new DiagnosticsStatementContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_diagnosticsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5991);
			match(GET);
			setState(5993);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CURRENT || _la==STACKED) {
				{
				setState(5992);
				_la = _input.LA(1);
				if ( !(_la==CURRENT || _la==STACKED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5995);
			match(DIAGNOSTICS);
			setState(6027);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BUCKETS:
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				{
				{
				setState(5996);
				variableClause();
				setState(5997);
				match(EQUAL_SYMBOL);
				setState(5998);
				_la = _input.LA(1);
				if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6006);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5999);
					match(COMMA);
					setState(6000);
					variableClause();
					setState(6001);
					match(EQUAL_SYMBOL);
					setState(6002);
					_la = _input.LA(1);
					if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(6008);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case CONDITION:
				{
				{
				setState(6009);
				match(CONDITION);
				setState(6012);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					setState(6010);
					decimalLiteral();
					}
					break;
				case BUCKETS:
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case AT_SIGN:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case LOCAL_ID:
				case GLOBAL_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(6011);
					variableClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6014);
				variableClause();
				setState(6015);
				match(EQUAL_SYMBOL);
				setState(6016);
				diagnosticsConditionInformationName();
				setState(6024);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6017);
					match(COMMA);
					setState(6018);
					variableClause();
					setState(6019);
					match(EQUAL_SYMBOL);
					setState(6020);
					diagnosticsConditionInformationName();
					}
					}
					setState(6026);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiagnosticsConditionInformationNameContext extends ParserRuleContext {
		public TerminalNode CLASS_ORIGIN() { return getToken(MySqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(MySqlParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(MySqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(MySqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(MySqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(MySqlParser.CATALOG_NAME, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(MySqlParser.SCHEMA_NAME, 0); }
		public TerminalNode TABLE_NAME() { return getToken(MySqlParser.TABLE_NAME, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(MySqlParser.COLUMN_NAME, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(MySqlParser.CURSOR_NAME, 0); }
		public DiagnosticsConditionInformationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnosticsConditionInformationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDiagnosticsConditionInformationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDiagnosticsConditionInformationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDiagnosticsConditionInformationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName() throws RecognitionException {
		DiagnosticsConditionInformationNameContext _localctx = new DiagnosticsConditionInformationNameContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_diagnosticsConditionInformationName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6029);
			_la = _input.LA(1);
			if ( !(((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (CLASS_ORIGIN - 350)) | (1L << (COLUMN_NAME - 350)) | (1L << (CONSTRAINT_CATALOG - 350)) | (1L << (CONSTRAINT_SCHEMA - 350)) | (1L << (CONSTRAINT_NAME - 350)) | (1L << (CURSOR_NAME - 350)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (RETURNED_SQLSTATE - 576)) | (1L << (SUBCLASS_ORIGIN - 576)) | (1L << (TABLE_NAME - 576)))) != 0) || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeObjectClauseContext extends ParserRuleContext {
		public DescribeObjectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeObjectClause; }
	 
		public DescribeObjectClauseContext() { }
		public void copyFrom(DescribeObjectClauseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DescribeStatementsContext extends DescribeObjectClauseContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DescribeStatementsContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDescribeStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDescribeStatements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDescribeStatements(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DescribeConnectionContext extends DescribeObjectClauseContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DescribeConnectionContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDescribeConnection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDescribeConnection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDescribeConnection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeObjectClauseContext describeObjectClause() throws RecognitionException {
		DescribeObjectClauseContext _localctx = new DescribeObjectClauseContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_describeObjectClause);
		try {
			setState(6041);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case LR_BRACKET:
				_localctx = new DescribeStatementsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6036);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT:
				case LR_BRACKET:
					{
					setState(6031);
					selectStatement();
					}
					break;
				case DELETE:
					{
					setState(6032);
					deleteStatement();
					}
					break;
				case INSERT:
					{
					setState(6033);
					insertStatement();
					}
					break;
				case REPLACE:
					{
					setState(6034);
					replaceStatement();
					}
					break;
				case UPDATE:
					{
					setState(6035);
					updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6038);
				match(FOR);
				setState(6039);
				match(CONNECTION);
				setState(6040);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullIdContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT_ID() { return getToken(MySqlParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public FullIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFullId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullIdContext fullId() throws RecognitionException {
		FullIdContext _localctx = new FullIdContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_fullId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6043);
			uid();
			setState(6047);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,887,_ctx) ) {
			case 1:
				{
				setState(6044);
				match(DOT_ID);
				}
				break;
			case 2:
				{
				setState(6045);
				match(DOT);
				setState(6046);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6049);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleNameContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public RoleNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoleName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoleName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoleName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleNameContext roleName() throws RecognitionException {
		RoleNameContext _localctx = new RoleNameContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_roleName);
		try {
			setState(6053);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,888,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6051);
				userName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6052);
				uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullColumnNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<DottedIdContext> dottedId() {
			return getRuleContexts(DottedIdContext.class);
		}
		public DottedIdContext dottedId(int i) {
			return getRuleContext(DottedIdContext.class,i);
		}
		public FullColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFullColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullColumnNameContext fullColumnName() throws RecognitionException {
		FullColumnNameContext _localctx = new FullColumnNameContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_fullColumnName);
		try {
			setState(6067);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,892,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6055);
				uid();
				setState(6060);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,890,_ctx) ) {
				case 1:
					{
					setState(6056);
					dottedId();
					setState(6058);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,889,_ctx) ) {
					case 1:
						{
						setState(6057);
						dottedId();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6062);
				matchWildcard();
				setState(6063);
				dottedId();
				setState(6065);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,891,_ctx) ) {
				case 1:
					{
					setState(6064);
					dottedId();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNameContext extends ParserRuleContext {
		public Token sortType;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public IndexColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNameContext indexColumnName() throws RecognitionException {
		IndexColumnNameContext _localctx = new IndexColumnNameContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_indexColumnName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6080);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,895,_ctx) ) {
			case 1:
				{
				setState(6071);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,893,_ctx) ) {
				case 1:
					{
					setState(6069);
					uid();
					}
					break;
				case 2:
					{
					setState(6070);
					match(STRING_LITERAL);
					}
					break;
				}
				setState(6077);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(6073);
					match(LR_BRACKET);
					setState(6074);
					decimalLiteral();
					setState(6075);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				{
				setState(6079);
				expression(0);
				}
				break;
			}
			setState(6083);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(6082);
				((IndexColumnNameContext)_localctx).sortType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((IndexColumnNameContext)_localctx).sortType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserNameContext extends ParserRuleContext {
		public TerminalNode STRING_USER_NAME() { return getToken(MySqlParser.STRING_USER_NAME, 0); }
		public TerminalNode STRING_USER_NAME_MARIADB() { return getToken(MySqlParser.STRING_USER_NAME_MARIADB, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ADMIN() { return getToken(MySqlParser.ADMIN, 0); }
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return getRuleContext(KeywordsCanBeIdContext.class,0);
		}
		public UserNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUserName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserNameContext userName() throws RecognitionException {
		UserNameContext _localctx = new UserNameContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_userName);
		try {
			setState(6091);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,897,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6085);
				match(STRING_USER_NAME);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6086);
				match(STRING_USER_NAME_MARIADB);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6087);
				match(ID);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6088);
				match(STRING_LITERAL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6089);
				match(ADMIN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6090);
				keywordsCanBeId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MysqlVariableContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(MySqlParser.GLOBAL_ID, 0); }
		public MysqlVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mysqlVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMysqlVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMysqlVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMysqlVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MysqlVariableContext mysqlVariable() throws RecognitionException {
		MysqlVariableContext _localctx = new MysqlVariableContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_mysqlVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6093);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==GLOBAL_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharsetName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharsetName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharsetName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameContext charsetName() throws RecognitionException {
		CharsetNameContext _localctx = new CharsetNameContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_charsetName);
		try {
			setState(6099);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,898,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6095);
				match(BINARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6096);
				charsetNameBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6097);
				match(STRING_LITERAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6098);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_collationName);
		try {
			setState(6103);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,899,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6101);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6102);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineNameContext extends ParserRuleContext {
		public TerminalNode ARCHIVE() { return getToken(MySqlParser.ARCHIVE, 0); }
		public TerminalNode BLACKHOLE() { return getToken(MySqlParser.BLACKHOLE, 0); }
		public TerminalNode CSV() { return getToken(MySqlParser.CSV, 0); }
		public TerminalNode FEDERATED() { return getToken(MySqlParser.FEDERATED, 0); }
		public TerminalNode INNODB() { return getToken(MySqlParser.INNODB, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode MRG_MYISAM() { return getToken(MySqlParser.MRG_MYISAM, 0); }
		public TerminalNode MYISAM() { return getToken(MySqlParser.MYISAM, 0); }
		public TerminalNode NDB() { return getToken(MySqlParser.NDB, 0); }
		public TerminalNode NDBCLUSTER() { return getToken(MySqlParser.NDBCLUSTER, 0); }
		public TerminalNode PERFORMANCE_SCHEMA() { return getToken(MySqlParser.PERFORMANCE_SCHEMA, 0); }
		public TerminalNode TOKUDB() { return getToken(MySqlParser.TOKUDB, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CONNECT() { return getToken(MySqlParser.CONNECT, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEngineName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEngineName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitEngineName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EngineNameContext engineName() throws RecognitionException {
		EngineNameContext _localctx = new EngineNameContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_engineName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6105);
			_la = _input.LA(1);
			if ( !(_la==CONNECT || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (ARCHIVE - 767)) | (1L << (BLACKHOLE - 767)) | (1L << (CSV - 767)) | (1L << (FEDERATED - 767)) | (1L << (INNODB - 767)) | (1L << (MEMORY - 767)) | (1L << (MRG_MYISAM - 767)) | (1L << (MYISAM - 767)) | (1L << (NDB - 767)) | (1L << (NDBCLUSTER - 767)) | (1L << (PERFORMANCE_SCHEMA - 767)) | (1L << (TOKUDB - 767)))) != 0) || ((((_la - 1138)) & ~0x3f) == 0 && ((1L << (_la - 1138)) & ((1L << (STRING_LITERAL - 1138)) | (1L << (ID - 1138)) | (1L << (REVERSE_QUOTE_ID - 1138)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UuidSetContext extends ParserRuleContext {
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public List<TerminalNode> MINUS() { return getTokens(MySqlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(MySqlParser.MINUS, i);
		}
		public List<TerminalNode> COLON_SYMB() { return getTokens(MySqlParser.COLON_SYMB); }
		public TerminalNode COLON_SYMB(int i) {
			return getToken(MySqlParser.COLON_SYMB, i);
		}
		public UuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uuidSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUuidSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUuidSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUuidSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UuidSetContext uuidSet() throws RecognitionException {
		UuidSetContext _localctx = new UuidSetContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_uuidSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6107);
			decimalLiteral();
			setState(6108);
			match(MINUS);
			setState(6109);
			decimalLiteral();
			setState(6110);
			match(MINUS);
			setState(6111);
			decimalLiteral();
			setState(6112);
			match(MINUS);
			setState(6113);
			decimalLiteral();
			setState(6114);
			match(MINUS);
			setState(6115);
			decimalLiteral();
			setState(6121); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6116);
				match(COLON_SYMB);
				setState(6117);
				decimalLiteral();
				setState(6118);
				match(MINUS);
				setState(6119);
				decimalLiteral();
				}
				}
				setState(6123); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COLON_SYMB );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XidContext extends ParserRuleContext {
		public XuidStringIdContext globalTableUid;
		public XuidStringIdContext qualifier;
		public DecimalLiteralContext idFormat;
		public List<XuidStringIdContext> xuidStringId() {
			return getRuleContexts(XuidStringIdContext.class);
		}
		public XuidStringIdContext xuidStringId(int i) {
			return getRuleContext(XuidStringIdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public XidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XidContext xid() throws RecognitionException {
		XidContext _localctx = new XidContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_xid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6125);
			((XidContext)_localctx).globalTableUid = xuidStringId();
			setState(6132);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6126);
				match(COMMA);
				setState(6127);
				((XidContext)_localctx).qualifier = xuidStringId();
				setState(6130);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6128);
					match(COMMA);
					setState(6129);
					((XidContext)_localctx).idFormat = decimalLiteral();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XuidStringIdContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(MySqlParser.BIT_STRING, 0); }
		public List<TerminalNode> HEXADECIMAL_LITERAL() { return getTokens(MySqlParser.HEXADECIMAL_LITERAL); }
		public TerminalNode HEXADECIMAL_LITERAL(int i) {
			return getToken(MySqlParser.HEXADECIMAL_LITERAL, i);
		}
		public XuidStringIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xuidStringId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXuidStringId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXuidStringId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXuidStringId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XuidStringIdContext xuidStringId() throws RecognitionException {
		XuidStringIdContext _localctx = new XuidStringIdContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_xuidStringId);
		int _la;
		try {
			setState(6141);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6134);
				match(STRING_LITERAL);
				}
				break;
			case BIT_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(6135);
				match(BIT_STRING);
				}
				break;
			case HEXADECIMAL_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(6137); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6136);
					match(HEXADECIMAL_LITERAL);
					}
					}
					setState(6139); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==HEXADECIMAL_LITERAL );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthPluginContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public AuthPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAuthPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAuthPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAuthPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthPluginContext authPlugin() throws RecognitionException {
		AuthPluginContext _localctx = new AuthPluginContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_authPlugin);
		try {
			setState(6145);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,905,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6143);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6144);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidContext extends ParserRuleContext {
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public UidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidContext uid() throws RecognitionException {
		UidContext _localctx = new UidContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_uid);
		try {
			setState(6150);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,906,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6147);
				simpleId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6148);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6149);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleIdContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TransactionLevelBaseContext transactionLevelBase() {
			return getRuleContext(TransactionLevelBaseContext.class,0);
		}
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public PrivilegesBaseContext privilegesBase() {
			return getRuleContext(PrivilegesBaseContext.class,0);
		}
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public DataTypeBaseContext dataTypeBase() {
			return getRuleContext(DataTypeBaseContext.class,0);
		}
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return getRuleContext(KeywordsCanBeIdContext.class,0);
		}
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public SimpleIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleIdContext simpleId() throws RecognitionException {
		SimpleIdContext _localctx = new SimpleIdContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_simpleId);
		try {
			setState(6161);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,907,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6152);
				match(ID);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6153);
				charsetNameBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6154);
				transactionLevelBase();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6155);
				engineName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6156);
				privilegesBase();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6157);
				intervalTypeBase();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6158);
				dataTypeBase();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6159);
				keywordsCanBeId();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6160);
				functionNameBase();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DottedIdContext extends ParserRuleContext {
		public TerminalNode DOT_ID() { return getToken(MySqlParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dottedId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDottedId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDottedId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDottedId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DottedIdContext dottedId() throws RecognitionException {
		DottedIdContext _localctx = new DottedIdContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_dottedId);
		try {
			setState(6166);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(6163);
				match(DOT_ID);
				}
				break;
			case DOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6164);
				match(DOT);
				setState(6165);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalLiteralContext extends ParserRuleContext {
		public TerminalNode DECIMAL_LITERAL() { return getToken(MySqlParser.DECIMAL_LITERAL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalLiteralContext decimalLiteral() throws RecognitionException {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_decimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6168);
			_la = _input.LA(1);
			if ( !(((((_la - 1128)) & ~0x3f) == 0 && ((1L << (_la - 1128)) & ((1L << (ZERO_DECIMAL - 1128)) | (1L << (ONE_DECIMAL - 1128)) | (1L << (TWO_DECIMAL - 1128)) | (1L << (DECIMAL_LITERAL - 1128)) | (1L << (REAL_LITERAL - 1128)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FileSizeLiteralContext extends ParserRuleContext {
		public TerminalNode FILESIZE_LITERAL() { return getToken(MySqlParser.FILESIZE_LITERAL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public FileSizeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileSizeLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFileSizeLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFileSizeLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFileSizeLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileSizeLiteralContext fileSizeLiteral() throws RecognitionException {
		FileSizeLiteralContext _localctx = new FileSizeLiteralContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_fileSizeLiteral);
		try {
			setState(6172);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESIZE_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6170);
				match(FILESIZE_LITERAL);
				}
				break;
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6171);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringLiteralContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode START_NATIONAL_STRING_LITERAL() { return getToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringLiteralContext stringLiteral() throws RecognitionException {
		StringLiteralContext _localctx = new StringLiteralContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_stringLiteral);
		int _la;
		try {
			int _alt;
			setState(6197);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,916,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6179);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(6175);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(6174);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(6177);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(6178);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6182); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(6181);
						match(STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6184); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,912,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6191);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(6187);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(6186);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(6189);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(6190);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6195);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,915,_ctx) ) {
				case 1:
					{
					setState(6193);
					match(COLLATE);
					setState(6194);
					collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanLiteralContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(MySqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySqlParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBooleanLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBooleanLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBooleanLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanLiteralContext booleanLiteral() throws RecognitionException {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_booleanLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6199);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HexadecimalLiteralContext extends ParserRuleContext {
		public TerminalNode HEXADECIMAL_LITERAL() { return getToken(MySqlParser.HEXADECIMAL_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hexadecimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHexadecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHexadecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHexadecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HexadecimalLiteralContext hexadecimalLiteral() throws RecognitionException {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_hexadecimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6202);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				setState(6201);
				match(STRING_CHARSET_NAME);
				}
			}

			setState(6204);
			match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullNotnullContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public NullNotnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullNotnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNullNotnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNullNotnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNullNotnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullNotnullContext nullNotnull() throws RecognitionException {
		NullNotnullContext _localctx = new NullNotnullContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_nullNotnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6207);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(6206);
				match(NOT);
				}
			}

			setState(6209);
			_la = _input.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token nullLiteral;
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public HexadecimalLiteralContext hexadecimalLiteral() {
			return getRuleContext(HexadecimalLiteralContext.class,0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return getRuleContext(BooleanLiteralContext.class,0);
		}
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(MySqlParser.BIT_STRING, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_constant);
		int _la;
		try {
			setState(6223);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,920,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6211);
				stringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6212);
				decimalLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6213);
				match(MINUS);
				setState(6214);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6215);
				hexadecimalLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6216);
				booleanLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6217);
				match(REAL_LITERAL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6218);
				match(BIT_STRING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6220);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(6219);
					match(NOT);
					}
				}

				setState(6222);
				((ConstantContext)_localctx).nullLiteral = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
					((ConstantContext)_localctx).nullLiteral = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
	 
		public DataTypeContext() { }
		public void copyFrom(DataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpatialDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMCOLLECTION() { return getToken(MySqlParser.GEOMCOLLECTION, 0); }
		public TerminalNode LINESTRING() { return getToken(MySqlParser.LINESTRING, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(MySqlParser.MULTIPOLYGON, 0); }
		public TerminalNode POINT() { return getToken(MySqlParser.POINT, 0); }
		public TerminalNode POLYGON() { return getToken(MySqlParser.POLYGON, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode GEOMETRY() { return getToken(MySqlParser.GEOMETRY, 0); }
		public SpatialDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpatialDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpatialDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpatialDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LongVarbinaryDataTypeContext extends DataTypeContext {
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARBINARY() { return getToken(MySqlParser.VARBINARY, 0); }
		public LongVarbinaryDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLongVarbinaryDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLongVarbinaryDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLongVarbinaryDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollectionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public CollectionOptionsContext collectionOptions() {
			return getRuleContext(CollectionOptionsContext.class,0);
		}
		public TerminalNode ENUM() { return getToken(MySqlParser.ENUM, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CollectionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollectionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollectionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollectionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalVaryingStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(MySqlParser.NATIONAL, 0); }
		public TerminalNode VARYING() { return getToken(MySqlParser.VARYING, 0); }
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public NationalVaryingStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNationalVaryingStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNationalVaryingStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNationalVaryingStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DimensionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode TINYINT() { return getToken(MySqlParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(MySqlParser.SMALLINT, 0); }
		public TerminalNode MEDIUMINT() { return getToken(MySqlParser.MEDIUMINT, 0); }
		public TerminalNode INT() { return getToken(MySqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(MySqlParser.BIGINT, 0); }
		public TerminalNode MIDDLEINT() { return getToken(MySqlParser.MIDDLEINT, 0); }
		public TerminalNode INT1() { return getToken(MySqlParser.INT1, 0); }
		public TerminalNode INT2() { return getToken(MySqlParser.INT2, 0); }
		public TerminalNode INT3() { return getToken(MySqlParser.INT3, 0); }
		public TerminalNode INT4() { return getToken(MySqlParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(MySqlParser.INT8, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public List<TerminalNode> SIGNED() { return getTokens(MySqlParser.SIGNED); }
		public TerminalNode SIGNED(int i) {
			return getToken(MySqlParser.SIGNED, i);
		}
		public List<TerminalNode> UNSIGNED() { return getTokens(MySqlParser.UNSIGNED); }
		public TerminalNode UNSIGNED(int i) {
			return getToken(MySqlParser.UNSIGNED, i);
		}
		public List<TerminalNode> ZEROFILL() { return getTokens(MySqlParser.ZEROFILL); }
		public TerminalNode ZEROFILL(int i) {
			return getToken(MySqlParser.ZEROFILL, i);
		}
		public TerminalNode REAL() { return getToken(MySqlParser.REAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode DOUBLE() { return getToken(MySqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(MySqlParser.PRECISION, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(MySqlParser.DEC, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode NUMERIC() { return getToken(MySqlParser.NUMERIC, 0); }
		public TerminalNode FLOAT() { return getToken(MySqlParser.FLOAT, 0); }
		public TerminalNode FLOAT4() { return getToken(MySqlParser.FLOAT4, 0); }
		public TerminalNode FLOAT8() { return getToken(MySqlParser.FLOAT8, 0); }
		public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return getRuleContext(LengthTwoOptionalDimensionContext.class,0);
		}
		public TerminalNode BIT() { return getToken(MySqlParser.BIT, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode VARBINARY() { return getToken(MySqlParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(MySqlParser.BLOB, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public DimensionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDimensionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDimensionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDimensionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode TINYTEXT() { return getToken(MySqlParser.TINYTEXT, 0); }
		public TerminalNode TEXT() { return getToken(MySqlParser.TEXT, 0); }
		public TerminalNode MEDIUMTEXT() { return getToken(MySqlParser.MEDIUMTEXT, 0); }
		public TerminalNode LONGTEXT() { return getToken(MySqlParser.LONGTEXT, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode NVARCHAR() { return getToken(MySqlParser.NVARCHAR, 0); }
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARYING() { return getToken(MySqlParser.VARYING, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public List<TerminalNode> BINARY() { return getTokens(MySqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(MySqlParser.BINARY, i);
		}
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public StringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LongVarcharDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public LongVarcharDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLongVarcharDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLongVarcharDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLongVarcharDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(MySqlParser.NATIONAL, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public NationalStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNationalStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNationalStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNationalStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TINYBLOB() { return getToken(MySqlParser.TINYBLOB, 0); }
		public TerminalNode MEDIUMBLOB() { return getToken(MySqlParser.MEDIUMBLOB, 0); }
		public TerminalNode LONGBLOB() { return getToken(MySqlParser.LONGBLOB, 0); }
		public TerminalNode BOOL() { return getToken(MySqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySqlParser.BOOLEAN, 0); }
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public SimpleDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_dataType);
		int _la;
		try {
			int _alt;
			setState(6347);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,948,_ctx) ) {
			case 1:
				_localctx = new StringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6225);
				((StringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (CHAR - 216)) | (1L << (VARCHAR - 216)) | (1L << (NVARCHAR - 216)) | (1L << (LONG - 216)) | (1L << (TINYTEXT - 216)) | (1L << (TEXT - 216)) | (1L << (MEDIUMTEXT - 216)) | (1L << (LONGTEXT - 216)))) != 0) || _la==NCHAR) ) {
					((StringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6227);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARYING) {
					{
					setState(6226);
					match(VARYING);
					}
				}

				setState(6230);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,922,_ctx) ) {
				case 1:
					{
					setState(6229);
					lengthOneDimension();
					}
					break;
				}
				setState(6233);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,923,_ctx) ) {
				case 1:
					{
					setState(6232);
					match(BINARY);
					}
					break;
				}
				setState(6238);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,924,_ctx) ) {
				case 1:
					{
					setState(6235);
					charSet();
					setState(6236);
					charsetName();
					}
					break;
				}
				setState(6243);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,925,_ctx) ) {
				case 1:
					{
					setState(6240);
					match(COLLATE);
					setState(6241);
					collationName();
					}
					break;
				case 2:
					{
					setState(6242);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6245);
				match(NATIONAL);
				setState(6246);
				((NationalStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==VARCHAR) ) {
					((NationalStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6248);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,926,_ctx) ) {
				case 1:
					{
					setState(6247);
					lengthOneDimension();
					}
					break;
				}
				setState(6251);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,927,_ctx) ) {
				case 1:
					{
					setState(6250);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6253);
				match(NCHAR);
				setState(6254);
				((NationalStringDataTypeContext)_localctx).typeName = match(VARCHAR);
				setState(6256);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,928,_ctx) ) {
				case 1:
					{
					setState(6255);
					lengthOneDimension();
					}
					break;
				}
				setState(6259);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,929,_ctx) ) {
				case 1:
					{
					setState(6258);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new NationalVaryingStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6261);
				match(NATIONAL);
				setState(6262);
				((NationalVaryingStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==CHAR) ) {
					((NationalVaryingStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6263);
				match(VARYING);
				setState(6265);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,930,_ctx) ) {
				case 1:
					{
					setState(6264);
					lengthOneDimension();
					}
					break;
				}
				setState(6268);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,931,_ctx) ) {
				case 1:
					{
					setState(6267);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6270);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (TINYINT - 190)) | (1L << (SMALLINT - 190)) | (1L << (MEDIUMINT - 190)) | (1L << (MIDDLEINT - 190)) | (1L << (INT - 190)) | (1L << (INT1 - 190)) | (1L << (INT2 - 190)) | (1L << (INT3 - 190)) | (1L << (INT4 - 190)) | (1L << (INT8 - 190)) | (1L << (INTEGER - 190)) | (1L << (BIGINT - 190)))) != 0)) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6272);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,932,_ctx) ) {
				case 1:
					{
					setState(6271);
					lengthOneDimension();
					}
					break;
				}
				setState(6277);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,933,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6274);
						_la = _input.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						} 
					}
					setState(6279);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,933,_ctx);
				}
				}
				break;
			case 6:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(6280);
				((DimensionDataTypeContext)_localctx).typeName = match(REAL);
				setState(6282);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,934,_ctx) ) {
				case 1:
					{
					setState(6281);
					lengthTwoDimension();
					}
					break;
				}
				setState(6287);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,935,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6284);
						_la = _input.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						} 
					}
					setState(6289);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,935,_ctx);
				}
				}
				break;
			case 7:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(6290);
				((DimensionDataTypeContext)_localctx).typeName = match(DOUBLE);
				setState(6292);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(6291);
					match(PRECISION);
					}
				}

				setState(6295);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,937,_ctx) ) {
				case 1:
					{
					setState(6294);
					lengthTwoDimension();
					}
					break;
				}
				setState(6300);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,938,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6297);
						_la = _input.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						} 
					}
					setState(6302);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,938,_ctx);
				}
				}
				break;
			case 8:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(6303);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 205)) & ~0x3f) == 0 && ((1L << (_la - 205)) & ((1L << (FLOAT - 205)) | (1L << (FLOAT4 - 205)) | (1L << (FLOAT8 - 205)) | (1L << (DECIMAL - 205)) | (1L << (DEC - 205)) | (1L << (NUMERIC - 205)))) != 0) || _la==FIXED) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6305);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,939,_ctx) ) {
				case 1:
					{
					setState(6304);
					lengthTwoOptionalDimension();
					}
					break;
				}
				setState(6310);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,940,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6307);
						_la = _input.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						} 
					}
					setState(6312);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,940,_ctx);
				}
				}
				break;
			case 9:
				_localctx = new SimpleDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(6313);
				((SimpleDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TINYBLOB - 211)) | (1L << (MEDIUMBLOB - 211)) | (1L << (LONGBLOB - 211)) | (1L << (SERIAL - 211)))) != 0) || _la==BOOL || _la==BOOLEAN) ) {
					((SimpleDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 10:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(6314);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 212)) & ~0x3f) == 0 && ((1L << (_la - 212)) & ((1L << (TIME - 212)) | (1L << (TIMESTAMP - 212)) | (1L << (DATETIME - 212)) | (1L << (YEAR - 212)) | (1L << (BINARY - 212)) | (1L << (VARBINARY - 212)) | (1L << (BLOB - 212)))) != 0) || _la==BIT) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6316);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,941,_ctx) ) {
				case 1:
					{
					setState(6315);
					lengthOneDimension();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new CollectionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(6318);
				((CollectionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SET || _la==ENUM) ) {
					((CollectionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6319);
				collectionOptions();
				setState(6321);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,942,_ctx) ) {
				case 1:
					{
					setState(6320);
					match(BINARY);
					}
					break;
				}
				setState(6326);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,943,_ctx) ) {
				case 1:
					{
					setState(6323);
					charSet();
					setState(6324);
					charsetName();
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new SpatialDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(6328);
				((SpatialDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (GEOMETRYCOLLECTION - 783)) | (1L << (GEOMCOLLECTION - 783)) | (1L << (GEOMETRY - 783)) | (1L << (LINESTRING - 783)) | (1L << (MULTILINESTRING - 783)) | (1L << (MULTIPOINT - 783)) | (1L << (MULTIPOLYGON - 783)) | (1L << (POINT - 783)) | (1L << (POLYGON - 783)))) != 0)) ) {
					((SpatialDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 13:
				_localctx = new LongVarcharDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(6329);
				((LongVarcharDataTypeContext)_localctx).typeName = match(LONG);
				setState(6331);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARCHAR) {
					{
					setState(6330);
					match(VARCHAR);
					}
				}

				setState(6334);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,945,_ctx) ) {
				case 1:
					{
					setState(6333);
					match(BINARY);
					}
					break;
				}
				setState(6339);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,946,_ctx) ) {
				case 1:
					{
					setState(6336);
					charSet();
					setState(6337);
					charsetName();
					}
					break;
				}
				setState(6343);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,947,_ctx) ) {
				case 1:
					{
					setState(6341);
					match(COLLATE);
					setState(6342);
					collationName();
					}
					break;
				}
				}
				break;
			case 14:
				_localctx = new LongVarbinaryDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(6345);
				match(LONG);
				setState(6346);
				match(VARBINARY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionOptionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CollectionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollectionOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollectionOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollectionOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionOptionsContext collectionOptions() throws RecognitionException {
		CollectionOptionsContext _localctx = new CollectionOptionsContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_collectionOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6349);
			match(LR_BRACKET);
			setState(6350);
			match(STRING_LITERAL);
			setState(6355);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6351);
				match(COMMA);
				setState(6352);
				match(STRING_LITERAL);
				}
				}
				setState(6357);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6358);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConvertedDataTypeContext extends ParserRuleContext {
		public Token typeName;
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySqlParser.UNSIGNED, 0); }
		public TerminalNode ARRAY() { return getToken(MySqlParser.ARRAY, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode INT() { return getToken(MySqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return getRuleContext(LengthTwoOptionalDimensionContext.class,0);
		}
		public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convertedDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConvertedDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConvertedDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConvertedDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConvertedDataTypeContext convertedDataType() throws RecognitionException {
		ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_convertedDataType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6382);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
			case NCHAR:
				{
				setState(6360);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6362);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(6361);
					lengthOneDimension();
					}
				}

				}
				break;
			case CHAR:
				{
				setState(6364);
				((ConvertedDataTypeContext)_localctx).typeName = match(CHAR);
				setState(6366);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(6365);
					lengthOneDimension();
					}
				}

				setState(6371);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==CHAR || _la==CHARSET) {
					{
					setState(6368);
					charSet();
					setState(6369);
					charsetName();
					}
				}

				}
				break;
			case INT:
			case INTEGER:
			case DATE:
			case TIME:
			case DATETIME:
			case JSON:
				{
				setState(6373);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INT - 194)) | (1L << (INTEGER - 194)) | (1L << (DATE - 194)) | (1L << (TIME - 194)) | (1L << (DATETIME - 194)))) != 0) || _la==JSON) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DECIMAL:
				{
				setState(6374);
				((ConvertedDataTypeContext)_localctx).typeName = match(DECIMAL);
				setState(6376);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(6375);
					lengthTwoOptionalDimension();
					}
				}

				}
				break;
			case UNSIGNED:
			case SIGNED:
				{
				setState(6378);
				_la = _input.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6380);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTEGER) {
					{
					setState(6379);
					match(INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6385);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ARRAY) {
				{
				setState(6384);
				match(ARRAY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthOneDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthOneDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthOneDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthOneDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLengthOneDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthOneDimensionContext lengthOneDimension() throws RecognitionException {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_lengthOneDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6387);
			match(LR_BRACKET);
			setState(6388);
			decimalLiteral();
			setState(6389);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthTwoDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthTwoDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLengthTwoDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoDimensionContext lengthTwoDimension() throws RecognitionException {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_lengthTwoDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6391);
			match(LR_BRACKET);
			setState(6392);
			decimalLiteral();
			setState(6393);
			match(COMMA);
			setState(6394);
			decimalLiteral();
			setState(6395);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoOptionalDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoOptionalDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthTwoOptionalDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthTwoOptionalDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLengthTwoOptionalDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() throws RecognitionException {
		LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_lengthTwoOptionalDimension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6397);
			match(LR_BRACKET);
			setState(6398);
			decimalLiteral();
			setState(6401);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6399);
				match(COMMA);
				setState(6400);
				decimalLiteral();
				}
			}

			setState(6403);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidListContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public UidListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uidList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUidList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUidList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUidList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidListContext uidList() throws RecognitionException {
		UidListContext _localctx = new UidListContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_uidList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6405);
			uid();
			setState(6410);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,958,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6406);
					match(COMMA);
					setState(6407);
					uid();
					}
					} 
				}
				setState(6412);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,958,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablesContext tables() throws RecognitionException {
		TablesContext _localctx = new TablesContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_tables);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6413);
			tableName();
			setState(6418);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,959,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6414);
					match(COMMA);
					setState(6415);
					tableName();
					}
					} 
				}
				setState(6420);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,959,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNamesContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<IndexColumnNameContext> indexColumnName() {
			return getRuleContexts(IndexColumnNameContext.class);
		}
		public IndexColumnNameContext indexColumnName(int i) {
			return getRuleContext(IndexColumnNameContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public IndexColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexColumnNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexColumnNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexColumnNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNamesContext indexColumnNames() throws RecognitionException {
		IndexColumnNamesContext _localctx = new IndexColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_indexColumnNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6421);
			match(LR_BRACKET);
			setState(6422);
			indexColumnName();
			setState(6427);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6423);
				match(COMMA);
				setState(6424);
				indexColumnName();
				}
				}
				setState(6429);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6430);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_expressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6432);
			expression(0);
			setState(6437);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6433);
				match(COMMA);
				setState(6434);
				expression(0);
				}
				}
				setState(6439);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsWithDefaultsContext extends ParserRuleContext {
		public List<ExpressionOrDefaultContext> expressionOrDefault() {
			return getRuleContexts(ExpressionOrDefaultContext.class);
		}
		public ExpressionOrDefaultContext expressionOrDefault(int i) {
			return getRuleContext(ExpressionOrDefaultContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ExpressionsWithDefaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionsWithDefaults; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionsWithDefaults(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionsWithDefaults(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressionsWithDefaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsWithDefaultsContext expressionsWithDefaults() throws RecognitionException {
		ExpressionsWithDefaultsContext _localctx = new ExpressionsWithDefaultsContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_expressionsWithDefaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6440);
			expressionOrDefault();
			setState(6445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6441);
				match(COMMA);
				setState(6442);
				expressionOrDefault();
				}
				}
				setState(6447);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ConstantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constants; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstants(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstants(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantsContext constants() throws RecognitionException {
		ConstantsContext _localctx = new ConstantsContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_constants);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6448);
			constant();
			setState(6453);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6449);
				match(COMMA);
				setState(6450);
				constant();
				}
				}
				setState(6455);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleStringsContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SimpleStringsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleStrings; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleStrings(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleStrings(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleStrings(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleStringsContext simpleStrings() throws RecognitionException {
		SimpleStringsContext _localctx = new SimpleStringsContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_simpleStrings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6456);
			match(STRING_LITERAL);
			setState(6461);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6457);
				match(COMMA);
				setState(6458);
				match(STRING_LITERAL);
				}
				}
				setState(6463);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserVariablesContext extends ParserRuleContext {
		public List<TerminalNode> LOCAL_ID() { return getTokens(MySqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(MySqlParser.LOCAL_ID, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public UserVariablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userVariables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserVariables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUserVariables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserVariablesContext userVariables() throws RecognitionException {
		UserVariablesContext _localctx = new UserVariablesContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_userVariables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6464);
			match(LOCAL_ID);
			setState(6469);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6465);
				match(COMMA);
				setState(6466);
				match(LOCAL_ID);
				}
				}
				setState(6471);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultValueContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode CAST() { return getToken(MySqlParser.CAST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public List<CurrentTimestampContext> currentTimestamp() {
			return getRuleContexts(CurrentTimestampContext.class);
		}
		public CurrentTimestampContext currentTimestamp(int i) {
			return getRuleContext(CurrentTimestampContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LASTVAL() { return getToken(MySqlParser.LASTVAL, 0); }
		public TerminalNode NEXTVAL() { return getToken(MySqlParser.NEXTVAL, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode PREVIOUS() { return getToken(MySqlParser.PREVIOUS, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public DefaultValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefaultValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultValueContext defaultValue() throws RecognitionException {
		DefaultValueContext _localctx = new DefaultValueContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_defaultValue);
		int _la;
		try {
			setState(6507);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,968,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6472);
				match(NULL_LITERAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6473);
				match(CAST);
				setState(6474);
				match(LR_BRACKET);
				setState(6475);
				expression(0);
				setState(6476);
				match(AS);
				setState(6477);
				convertedDataType();
				setState(6478);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6481);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,966,_ctx) ) {
				case 1:
					{
					setState(6480);
					unaryOperator();
					}
					break;
				}
				setState(6483);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6484);
				currentTimestamp();
				setState(6488);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,967,_ctx) ) {
				case 1:
					{
					setState(6485);
					match(ON);
					setState(6486);
					match(UPDATE);
					setState(6487);
					currentTimestamp();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6490);
				match(LR_BRACKET);
				setState(6491);
				expression(0);
				setState(6492);
				match(RR_BRACKET);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6494);
				_la = _input.LA(1);
				if ( !(_la==LASTVAL || _la==NEXTVAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6495);
				match(LR_BRACKET);
				setState(6496);
				fullId();
				setState(6497);
				match(RR_BRACKET);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6499);
				match(LR_BRACKET);
				setState(6500);
				_la = _input.LA(1);
				if ( !(_la==NEXT || _la==PREVIOUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6501);
				match(VALUE);
				setState(6502);
				match(FOR);
				setState(6503);
				fullId();
				setState(6504);
				match(RR_BRACKET);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6506);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CurrentTimestampContext extends ParserRuleContext {
		public TerminalNode NOW() { return getToken(MySqlParser.NOW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(MySqlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode CURDATE() { return getToken(MySqlParser.CURDATE, 0); }
		public TerminalNode CURTIME() { return getToken(MySqlParser.CURTIME, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public CurrentTimestampContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentTimestamp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCurrentTimestamp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCurrentTimestamp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCurrentTimestamp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CurrentTimestampContext currentTimestamp() throws RecognitionException {
		CurrentTimestampContext _localctx = new CurrentTimestampContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_currentTimestamp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6523);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case LOCALTIMESTAMP:
				{
				setState(6509);
				_la = _input.LA(1);
				if ( !(((((_la - 306)) & ~0x3f) == 0 && ((1L << (_la - 306)) & ((1L << (CURRENT_TIMESTAMP - 306)) | (1L << (LOCALTIME - 306)) | (1L << (CURDATE - 306)) | (1L << (CURTIME - 306)) | (1L << (LOCALTIMESTAMP - 306)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6515);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,970,_ctx) ) {
				case 1:
					{
					setState(6510);
					match(LR_BRACKET);
					setState(6512);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 1128)) & ~0x3f) == 0 && ((1L << (_la - 1128)) & ((1L << (ZERO_DECIMAL - 1128)) | (1L << (ONE_DECIMAL - 1128)) | (1L << (TWO_DECIMAL - 1128)) | (1L << (DECIMAL_LITERAL - 1128)) | (1L << (REAL_LITERAL - 1128)))) != 0)) {
						{
						setState(6511);
						decimalLiteral();
						}
					}

					setState(6514);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case NOW:
				{
				setState(6517);
				match(NOW);
				setState(6518);
				match(LR_BRACKET);
				setState(6520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 1128)) & ~0x3f) == 0 && ((1L << (_la - 1128)) & ((1L << (ZERO_DECIMAL - 1128)) | (1L << (ONE_DECIMAL - 1128)) | (1L << (TWO_DECIMAL - 1128)) | (1L << (DECIMAL_LITERAL - 1128)) | (1L << (REAL_LITERAL - 1128)))) != 0)) {
					{
					setState(6519);
					decimalLiteral();
					}
				}

				setState(6522);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionOrDefaultContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionOrDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionOrDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionOrDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressionOrDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionOrDefaultContext expressionOrDefault() throws RecognitionException {
		ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_expressionOrDefault);
		try {
			setState(6527);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,973,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6525);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6526);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIfExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6529);
			match(IF);
			setState(6530);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfNotExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfNotExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIfNotExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6532);
			match(IF);
			setState(6533);
			match(NOT);
			setState(6534);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WaitNowaitClauseContext extends ParserRuleContext {
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(MySqlParser.NOWAIT, 0); }
		public WaitNowaitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_waitNowaitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWaitNowaitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWaitNowaitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWaitNowaitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WaitNowaitClauseContext waitNowaitClause() throws RecognitionException {
		WaitNowaitClauseContext _localctx = new WaitNowaitClauseContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_waitNowaitClause);
		try {
			setState(6539);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6536);
				match(WAIT);
				setState(6537);
				decimalLiteral();
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6538);
				match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockOptionContext extends ParserRuleContext {
		public WaitNowaitClauseContext waitNowaitClause() {
			return getRuleContext(WaitNowaitClauseContext.class,0);
		}
		public TerminalNode SKIP_() { return getToken(MySqlParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(MySqlParser.LOCKED, 0); }
		public LockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLockOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLockOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLockOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockOptionContext lockOption() throws RecognitionException {
		LockOptionContext _localctx = new LockOptionContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_lockOption);
		try {
			setState(6544);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOWAIT:
			case WAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6541);
				waitNowaitClause();
				}
				break;
			case SKIP_:
				enterOuterAlt(_localctx, 2);
				{
				setState(6542);
				match(SKIP_);
				setState(6543);
				match(LOCKED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
	 
		public FunctionCallContext() { }
		public void copyFrom(FunctionCallContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecificFunctionCallContext extends FunctionCallContext {
		public SpecificFunctionContext specificFunction() {
			return getRuleContext(SpecificFunctionContext.class,0);
		}
		public SpecificFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpecificFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpecificFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpecificFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordFunctionCallContext extends FunctionCallContext {
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public PasswordFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPasswordFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UdfFunctionCallContext extends FunctionCallContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public UdfFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUdfFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUdfFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUdfFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NonAggregateFunctionCallContext extends FunctionCallContext {
		public NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() {
			return getRuleContext(NonAggregateWindowedFunctionContext.class,0);
		}
		public NonAggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNonAggregateFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNonAggregateFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNonAggregateFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AggregateFunctionCallContext extends FunctionCallContext {
		public AggregateWindowedFunctionContext aggregateWindowedFunction() {
			return getRuleContext(AggregateWindowedFunctionContext.class,0);
		}
		public AggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAggregateFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAggregateFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAggregateFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ScalarFunctionCallContext extends FunctionCallContext {
		public ScalarFunctionNameContext scalarFunctionName() {
			return getRuleContext(ScalarFunctionNameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public ScalarFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterScalarFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitScalarFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitScalarFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_functionCall);
		try {
			setState(6564);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,978,_ctx) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6546);
				specificFunction();
				}
				break;
			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6547);
				aggregateWindowedFunction();
				}
				break;
			case 3:
				_localctx = new NonAggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6548);
				nonAggregateWindowedFunction();
				}
				break;
			case 4:
				_localctx = new ScalarFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6549);
				scalarFunctionName();
				setState(6550);
				match(LR_BRACKET);
				setState(6552);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,976,_ctx) ) {
				case 1:
					{
					setState(6551);
					functionArgs();
					}
					break;
				}
				setState(6554);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new UdfFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6556);
				fullId();
				setState(6557);
				match(LR_BRACKET);
				setState(6559);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,977,_ctx) ) {
				case 1:
					{
					setState(6558);
					functionArgs();
					}
					break;
				}
				setState(6561);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new PasswordFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(6563);
				passwordFunctionClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificFunctionContext extends ParserRuleContext {
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificFunction; }
	 
		public SpecificFunctionContext() { }
		public void copyFrom(SpecificFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PositionFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext positionString;
		public ExpressionContext positionExpression;
		public StringLiteralContext inString;
		public ExpressionContext inExpression;
		public TerminalNode POSITION() { return getToken(MySqlParser.POSITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public PositionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPositionFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPositionFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPositionFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TrimFunctionCallContext extends SpecificFunctionContext {
		public Token positioinForm;
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public StringLiteralContext fromString;
		public ExpressionContext fromExpression;
		public TerminalNode TRIM() { return getToken(MySqlParser.TRIM, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode BOTH() { return getToken(MySqlParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(MySqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(MySqlParser.TRAILING, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TrimFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTrimFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTrimFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTrimFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonValueFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode JSON_VALUE() { return getToken(MySqlParser.JSON_VALUE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode RETURNING() { return getToken(MySqlParser.RETURNING, 0); }
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode EMPTY() { return getToken(MySqlParser.EMPTY, 0); }
		public List<TerminalNode> ERROR() { return getTokens(MySqlParser.ERROR); }
		public TerminalNode ERROR(int i) {
			return getToken(MySqlParser.ERROR, i);
		}
		public List<TerminalNode> NULL_LITERAL() { return getTokens(MySqlParser.NULL_LITERAL); }
		public TerminalNode NULL_LITERAL(int i) {
			return getToken(MySqlParser.NULL_LITERAL, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public List<DefaultValueContext> defaultValue() {
			return getRuleContexts(DefaultValueContext.class);
		}
		public DefaultValueContext defaultValue(int i) {
			return getRuleContext(DefaultValueContext.class,i);
		}
		public JsonValueFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonValueFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonValueFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonValueFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CaseFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(MySqlParser.CASE, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExtractFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public TerminalNode EXTRACT() { return getToken(MySqlParser.EXTRACT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ExtractFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExtractFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExtractFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExtractFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DataTypeFunctionCallContext extends SpecificFunctionContext {
		public Token separator;
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CAST() { return getToken(MySqlParser.CAST, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public DataTypeFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDataTypeFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDataTypeFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDataTypeFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ValuesFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ValuesFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterValuesFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitValuesFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitValuesFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CaseExpressionFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(MySqlParser.CASE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseExpressionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseExpressionFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseExpressionFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseExpressionFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CURRENT_DATE() { return getToken(MySqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(MySqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(MySqlParser.CURRENT_USER, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public SimpleFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CharFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CharFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WeightFunctionCallContext extends SpecificFunctionContext {
		public Token stringFormat;
		public TerminalNode WEIGHT_STRING() { return getToken(MySqlParser.WEIGHT_STRING, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public LevelsInWeightStringContext levelsInWeightString() {
			return getRuleContext(LevelsInWeightStringContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public WeightFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWeightFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWeightFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWeightFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GetFormatFunctionCallContext extends SpecificFunctionContext {
		public Token datetimeFormat;
		public TerminalNode GET_FORMAT() { return getToken(MySqlParser.GET_FORMAT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public GetFormatFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGetFormatFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGetFormatFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGetFormatFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubstrFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public DecimalLiteralContext fromDecimal;
		public ExpressionContext fromExpression;
		public DecimalLiteralContext forDecimal;
		public ExpressionContext forExpression;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode SUBSTR() { return getToken(MySqlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(MySqlParser.SUBSTRING, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public SubstrFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubstrFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubstrFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubstrFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificFunctionContext specificFunction() throws RecognitionException {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_specificFunction);
		int _la;
		try {
			setState(6758);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1004,_ctx) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6566);
				_la = _input.LA(1);
				if ( !(_la==CURRENT_USER || ((((_la - 304)) & ~0x3f) == 0 && ((1L << (_la - 304)) & ((1L << (CURRENT_DATE - 304)) | (1L << (CURRENT_TIME - 304)) | (1L << (CURRENT_TIMESTAMP - 304)) | (1L << (LOCALTIME - 304)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6569);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,979,_ctx) ) {
				case 1:
					{
					setState(6567);
					match(LR_BRACKET);
					setState(6568);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6571);
				match(CONVERT);
				setState(6572);
				match(LR_BRACKET);
				setState(6573);
				expression(0);
				setState(6574);
				((DataTypeFunctionCallContext)_localctx).separator = match(COMMA);
				setState(6575);
				convertedDataType();
				setState(6576);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6578);
				match(CONVERT);
				setState(6579);
				match(LR_BRACKET);
				setState(6580);
				expression(0);
				setState(6581);
				match(USING);
				setState(6582);
				charsetName();
				setState(6583);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6585);
				match(CAST);
				setState(6586);
				match(LR_BRACKET);
				setState(6587);
				expression(0);
				setState(6588);
				match(AS);
				setState(6589);
				convertedDataType();
				setState(6590);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6592);
				match(VALUES);
				setState(6593);
				match(LR_BRACKET);
				setState(6594);
				fullColumnName();
				setState(6595);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CaseExpressionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(6597);
				match(CASE);
				setState(6598);
				expression(0);
				setState(6600); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6599);
					caseFuncAlternative();
					}
					}
					setState(6602); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(6606);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(6604);
					match(ELSE);
					setState(6605);
					((CaseExpressionFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(6608);
				match(END);
				}
				break;
			case 7:
				_localctx = new CaseFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(6610);
				match(CASE);
				setState(6612); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6611);
					caseFuncAlternative();
					}
					}
					setState(6614); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(6618);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(6616);
					match(ELSE);
					setState(6617);
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(6620);
				match(END);
				}
				break;
			case 8:
				_localctx = new CharFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(6622);
				match(CHAR);
				setState(6623);
				match(LR_BRACKET);
				setState(6624);
				functionArgs();
				setState(6627);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(6625);
					match(USING);
					setState(6626);
					charsetName();
					}
				}

				setState(6629);
				match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new PositionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(6631);
				match(POSITION);
				setState(6632);
				match(LR_BRACKET);
				setState(6635);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,985,_ctx) ) {
				case 1:
					{
					setState(6633);
					((PositionFunctionCallContext)_localctx).positionString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6634);
					((PositionFunctionCallContext)_localctx).positionExpression = expression(0);
					}
					break;
				}
				setState(6637);
				match(IN);
				setState(6640);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,986,_ctx) ) {
				case 1:
					{
					setState(6638);
					((PositionFunctionCallContext)_localctx).inString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6639);
					((PositionFunctionCallContext)_localctx).inExpression = expression(0);
					}
					break;
				}
				setState(6642);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new SubstrFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(6644);
				_la = _input.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6645);
				match(LR_BRACKET);
				setState(6648);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,987,_ctx) ) {
				case 1:
					{
					setState(6646);
					((SubstrFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6647);
					((SubstrFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6650);
				match(FROM);
				setState(6653);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,988,_ctx) ) {
				case 1:
					{
					setState(6651);
					((SubstrFunctionCallContext)_localctx).fromDecimal = decimalLiteral();
					}
					break;
				case 2:
					{
					setState(6652);
					((SubstrFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(6660);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(6655);
					match(FOR);
					setState(6658);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,989,_ctx) ) {
					case 1:
						{
						setState(6656);
						((SubstrFunctionCallContext)_localctx).forDecimal = decimalLiteral();
						}
						break;
					case 2:
						{
						setState(6657);
						((SubstrFunctionCallContext)_localctx).forExpression = expression(0);
						}
						break;
					}
					}
				}

				setState(6662);
				match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(6664);
				match(TRIM);
				setState(6665);
				match(LR_BRACKET);
				setState(6666);
				((TrimFunctionCallContext)_localctx).positioinForm = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					((TrimFunctionCallContext)_localctx).positioinForm = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6669);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,991,_ctx) ) {
				case 1:
					{
					setState(6667);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6668);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6671);
				match(FROM);
				setState(6674);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,992,_ctx) ) {
				case 1:
					{
					setState(6672);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6673);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(6676);
				match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(6678);
				match(TRIM);
				setState(6679);
				match(LR_BRACKET);
				setState(6682);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,993,_ctx) ) {
				case 1:
					{
					setState(6680);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6681);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6684);
				match(FROM);
				setState(6687);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,994,_ctx) ) {
				case 1:
					{
					setState(6685);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6686);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(6689);
				match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new WeightFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(6691);
				match(WEIGHT_STRING);
				setState(6692);
				match(LR_BRACKET);
				setState(6695);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,995,_ctx) ) {
				case 1:
					{
					setState(6693);
					stringLiteral();
					}
					break;
				case 2:
					{
					setState(6694);
					expression(0);
					}
					break;
				}
				setState(6703);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(6697);
					match(AS);
					setState(6698);
					((WeightFunctionCallContext)_localctx).stringFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
						((WeightFunctionCallContext)_localctx).stringFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6699);
					match(LR_BRACKET);
					setState(6700);
					decimalLiteral();
					setState(6701);
					match(RR_BRACKET);
					}
				}

				setState(6706);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEVEL) {
					{
					setState(6705);
					levelsInWeightString();
					}
				}

				setState(6708);
				match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new ExtractFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(6710);
				match(EXTRACT);
				setState(6711);
				match(LR_BRACKET);
				setState(6712);
				intervalType();
				setState(6713);
				match(FROM);
				setState(6716);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,998,_ctx) ) {
				case 1:
					{
					setState(6714);
					((ExtractFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6715);
					((ExtractFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6718);
				match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(6720);
				match(GET_FORMAT);
				setState(6721);
				match(LR_BRACKET);
				setState(6722);
				((GetFormatFunctionCallContext)_localctx).datetimeFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (DATETIME - 211)))) != 0)) ) {
					((GetFormatFunctionCallContext)_localctx).datetimeFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6723);
				match(COMMA);
				setState(6724);
				stringLiteral();
				setState(6725);
				match(RR_BRACKET);
				}
				break;
			case 16:
				_localctx = new JsonValueFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(6727);
				match(JSON_VALUE);
				setState(6728);
				match(LR_BRACKET);
				setState(6729);
				expression(0);
				setState(6730);
				match(COMMA);
				setState(6731);
				expression(0);
				setState(6734);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURNING) {
					{
					setState(6732);
					match(RETURNING);
					setState(6733);
					convertedDataType();
					}
				}

				setState(6744);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1001,_ctx) ) {
				case 1:
					{
					setState(6740);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NULL_LITERAL:
						{
						setState(6736);
						match(NULL_LITERAL);
						}
						break;
					case ERROR:
						{
						setState(6737);
						match(ERROR);
						}
						break;
					case DEFAULT:
						{
						{
						setState(6738);
						match(DEFAULT);
						setState(6739);
						defaultValue();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6742);
					match(ON);
					setState(6743);
					match(EMPTY);
					}
					break;
				}
				setState(6754);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==NULL_LITERAL || _la==ERROR) {
					{
					setState(6750);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NULL_LITERAL:
						{
						setState(6746);
						match(NULL_LITERAL);
						}
						break;
					case ERROR:
						{
						setState(6747);
						match(ERROR);
						}
						break;
					case DEFAULT:
						{
						{
						setState(6748);
						match(DEFAULT);
						setState(6749);
						defaultValue();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6752);
					match(ON);
					setState(6753);
					match(ERROR);
					}
				}

				setState(6756);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseFuncAlternativeContext extends ParserRuleContext {
		public FunctionArgContext condition;
		public FunctionArgContext consequent;
		public TerminalNode WHEN() { return getToken(MySqlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public List<FunctionArgContext> functionArg() {
			return getRuleContexts(FunctionArgContext.class);
		}
		public FunctionArgContext functionArg(int i) {
			return getRuleContext(FunctionArgContext.class,i);
		}
		public CaseFuncAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseFuncAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseFuncAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseFuncAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseFuncAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseFuncAlternativeContext caseFuncAlternative() throws RecognitionException {
		CaseFuncAlternativeContext _localctx = new CaseFuncAlternativeContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_caseFuncAlternative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6760);
			match(WHEN);
			setState(6761);
			((CaseFuncAlternativeContext)_localctx).condition = functionArg();
			setState(6762);
			match(THEN);
			setState(6763);
			((CaseFuncAlternativeContext)_localctx).consequent = functionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelsInWeightStringContext extends ParserRuleContext {
		public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelsInWeightString; }
	 
		public LevelsInWeightStringContext() { }
		public void copyFrom(LevelsInWeightStringContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LevelWeightRangeContext extends LevelsInWeightStringContext {
		public DecimalLiteralContext firstLevel;
		public DecimalLiteralContext lastLevel;
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public LevelWeightRangeContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelWeightRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelWeightRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLevelWeightRange(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LevelWeightListContext extends LevelsInWeightStringContext {
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public List<LevelInWeightListElementContext> levelInWeightListElement() {
			return getRuleContexts(LevelInWeightListElementContext.class);
		}
		public LevelInWeightListElementContext levelInWeightListElement(int i) {
			return getRuleContext(LevelInWeightListElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LevelWeightListContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelWeightList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelWeightList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLevelWeightList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelsInWeightStringContext levelsInWeightString() throws RecognitionException {
		LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_levelsInWeightString);
		int _la;
		try {
			setState(6779);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1006,_ctx) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6765);
				match(LEVEL);
				setState(6766);
				levelInWeightListElement();
				setState(6771);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6767);
					match(COMMA);
					setState(6768);
					levelInWeightListElement();
					}
					}
					setState(6773);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6774);
				match(LEVEL);
				setState(6775);
				((LevelWeightRangeContext)_localctx).firstLevel = decimalLiteral();
				setState(6776);
				match(MINUS);
				setState(6777);
				((LevelWeightRangeContext)_localctx).lastLevel = decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelInWeightListElementContext extends ParserRuleContext {
		public Token orderType;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public TerminalNode REVERSE() { return getToken(MySqlParser.REVERSE, 0); }
		public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelInWeightListElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelInWeightListElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelInWeightListElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLevelInWeightListElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelInWeightListElementContext levelInWeightListElement() throws RecognitionException {
		LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_levelInWeightListElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6781);
			decimalLiteral();
			setState(6783);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC || _la==REVERSE) {
				{
				setState(6782);
				((LevelInWeightListElementContext)_localctx).orderType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
					((LevelInWeightListElementContext)_localctx).orderType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateWindowedFunctionContext extends ParserRuleContext {
		public Token aggregator;
		public Token starArg;
		public Token separator;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode AVG() { return getToken(MySqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(MySqlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(MySqlParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(MySqlParser.SUM, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public TerminalNode BIT_AND() { return getToken(MySqlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(MySqlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(MySqlParser.BIT_XOR, 0); }
		public TerminalNode STD() { return getToken(MySqlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(MySqlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(MySqlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(MySqlParser.STDDEV_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(MySqlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(MySqlParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE() { return getToken(MySqlParser.VARIANCE, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(MySqlParser.GROUP_CONCAT, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public TerminalNode SEPARATOR() { return getToken(MySqlParser.SEPARATOR, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWindowedFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAggregateWindowedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAggregateWindowedFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAggregateWindowedFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateWindowedFunctionContext aggregateWindowedFunction() throws RecognitionException {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_aggregateWindowedFunction);
		int _la;
		try {
			setState(6844);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case SUM:
				enterOuterAlt(_localctx, 1);
				{
				setState(6785);
				_la = _input.LA(1);
				if ( !(((((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & ((1L << (AVG - 277)) | (1L << (MAX - 277)) | (1L << (MIN - 277)) | (1L << (SUM - 277)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6786);
				match(LR_BRACKET);
				setState(6788);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1008,_ctx) ) {
				case 1:
					{
					setState(6787);
					((AggregateWindowedFunctionContext)_localctx).aggregator = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						((AggregateWindowedFunctionContext)_localctx).aggregator = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(6790);
				functionArg();
				setState(6791);
				match(RR_BRACKET);
				setState(6793);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1009,_ctx) ) {
				case 1:
					{
					setState(6792);
					overClause();
					}
					break;
				}
				}
				break;
			case COUNT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6795);
				match(COUNT);
				setState(6796);
				match(LR_BRACKET);
				setState(6804);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1011,_ctx) ) {
				case 1:
					{
					setState(6797);
					((AggregateWindowedFunctionContext)_localctx).starArg = match(STAR);
					}
					break;
				case 2:
					{
					setState(6799);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1010,_ctx) ) {
					case 1:
						{
						setState(6798);
						((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
						}
						break;
					}
					setState(6801);
					functionArg();
					}
					break;
				case 3:
					{
					setState(6802);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					setState(6803);
					functionArgs();
					}
					break;
				}
				setState(6806);
				match(RR_BRACKET);
				setState(6808);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1012,_ctx) ) {
				case 1:
					{
					setState(6807);
					overClause();
					}
					break;
				}
				}
				break;
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6810);
				_la = _input.LA(1);
				if ( !(((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (BIT_AND - 278)) | (1L << (BIT_OR - 278)) | (1L << (BIT_XOR - 278)) | (1L << (STD - 278)) | (1L << (STDDEV - 278)) | (1L << (STDDEV_POP - 278)) | (1L << (STDDEV_SAMP - 278)) | (1L << (VAR_POP - 278)) | (1L << (VAR_SAMP - 278)) | (1L << (VARIANCE - 278)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6811);
				match(LR_BRACKET);
				setState(6813);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1013,_ctx) ) {
				case 1:
					{
					setState(6812);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
					}
					break;
				}
				setState(6815);
				functionArg();
				setState(6816);
				match(RR_BRACKET);
				setState(6818);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1014,_ctx) ) {
				case 1:
					{
					setState(6817);
					overClause();
					}
					break;
				}
				}
				break;
			case GROUP_CONCAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(6820);
				match(GROUP_CONCAT);
				setState(6821);
				match(LR_BRACKET);
				setState(6823);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1015,_ctx) ) {
				case 1:
					{
					setState(6822);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					}
					break;
				}
				setState(6825);
				functionArgs();
				setState(6836);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6826);
					match(ORDER);
					setState(6827);
					match(BY);
					setState(6828);
					orderByExpression();
					setState(6833);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6829);
						match(COMMA);
						setState(6830);
						orderByExpression();
						}
						}
						setState(6835);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(6840);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR) {
					{
					setState(6838);
					match(SEPARATOR);
					setState(6839);
					((AggregateWindowedFunctionContext)_localctx).separator = match(STRING_LITERAL);
					}
				}

				setState(6842);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonAggregateWindowedFunctionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public TerminalNode LAG() { return getToken(MySqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(MySqlParser.LEAD, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FIRST_VALUE() { return getToken(MySqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(MySqlParser.LAST_VALUE, 0); }
		public TerminalNode CUME_DIST() { return getToken(MySqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(MySqlParser.DENSE_RANK, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(MySqlParser.PERCENT_RANK, 0); }
		public TerminalNode RANK() { return getToken(MySqlParser.RANK, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(MySqlParser.ROW_NUMBER, 0); }
		public TerminalNode NTH_VALUE() { return getToken(MySqlParser.NTH_VALUE, 0); }
		public TerminalNode NTILE() { return getToken(MySqlParser.NTILE, 0); }
		public NonAggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonAggregateWindowedFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNonAggregateWindowedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNonAggregateWindowedFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNonAggregateWindowedFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() throws RecognitionException {
		NonAggregateWindowedFunctionContext _localctx = new NonAggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_nonAggregateWindowedFunction);
		int _la;
		try {
			setState(6884);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LAG:
			case LEAD:
				enterOuterAlt(_localctx, 1);
				{
				setState(6846);
				_la = _input.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6847);
				match(LR_BRACKET);
				setState(6848);
				expression(0);
				setState(6851);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1020,_ctx) ) {
				case 1:
					{
					setState(6849);
					match(COMMA);
					setState(6850);
					decimalLiteral();
					}
					break;
				}
				setState(6855);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6853);
					match(COMMA);
					setState(6854);
					decimalLiteral();
					}
				}

				setState(6857);
				match(RR_BRACKET);
				setState(6858);
				overClause();
				}
				break;
			case FIRST_VALUE:
			case LAST_VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6860);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6861);
				match(LR_BRACKET);
				setState(6862);
				expression(0);
				setState(6863);
				match(RR_BRACKET);
				setState(6864);
				overClause();
				}
				break;
			case CUME_DIST:
			case DENSE_RANK:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
				enterOuterAlt(_localctx, 3);
				{
				setState(6866);
				_la = _input.LA(1);
				if ( !(((((_la - 282)) & ~0x3f) == 0 && ((1L << (_la - 282)) & ((1L << (CUME_DIST - 282)) | (1L << (DENSE_RANK - 282)) | (1L << (PERCENT_RANK - 282)) | (1L << (RANK - 282)) | (1L << (ROW_NUMBER - 282)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6867);
				match(LR_BRACKET);
				setState(6868);
				match(RR_BRACKET);
				setState(6869);
				overClause();
				}
				break;
			case NTH_VALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(6870);
				match(NTH_VALUE);
				setState(6871);
				match(LR_BRACKET);
				setState(6872);
				expression(0);
				setState(6873);
				match(COMMA);
				setState(6874);
				decimalLiteral();
				setState(6875);
				match(RR_BRACKET);
				setState(6876);
				overClause();
				}
				break;
			case NTILE:
				enterOuterAlt(_localctx, 5);
				{
				setState(6878);
				match(NTILE);
				setState(6879);
				match(LR_BRACKET);
				setState(6880);
				decimalLiteral();
				setState(6881);
				match(RR_BRACKET);
				setState(6882);
				overClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverClauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(MySqlParser.OVER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public OverClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOverClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOverClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOverClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverClauseContext overClause() throws RecognitionException {
		OverClauseContext _localctx = new OverClauseContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_overClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6886);
			match(OVER);
			setState(6893);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LR_BRACKET:
				{
				setState(6887);
				match(LR_BRACKET);
				setState(6889);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1023,_ctx) ) {
				case 1:
					{
					setState(6888);
					windowSpec();
					}
					break;
				}
				setState(6891);
				match(RR_BRACKET);
				}
				break;
			case BUCKETS:
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				{
				setState(6892);
				windowName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecContext extends ParserRuleContext {
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public FrameClauseContext frameClause() {
			return getRuleContext(FrameClauseContext.class,0);
		}
		public WindowSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWindowSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWindowSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWindowSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowSpecContext windowSpec() throws RecognitionException {
		WindowSpecContext _localctx = new WindowSpecContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_windowSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6896);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1025,_ctx) ) {
			case 1:
				{
				setState(6895);
				windowName();
				}
				break;
			}
			setState(6899);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(6898);
				partitionClause();
				}
			}

			setState(6902);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(6901);
				orderByClause();
				}
			}

			setState(6905);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				setState(6904);
				frameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWindowName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWindowName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWindowName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowNameContext windowName() throws RecognitionException {
		WindowNameContext _localctx = new WindowNameContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_windowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6907);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameClauseContext extends ParserRuleContext {
		public FrameUnitsContext frameUnits() {
			return getRuleContext(FrameUnitsContext.class,0);
		}
		public FrameExtentContext frameExtent() {
			return getRuleContext(FrameExtentContext.class,0);
		}
		public FrameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameClauseContext frameClause() throws RecognitionException {
		FrameClauseContext _localctx = new FrameClauseContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_frameClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6909);
			frameUnits();
			setState(6910);
			frameExtent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameUnitsContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(MySqlParser.RANGE, 0); }
		public FrameUnitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameUnits; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameUnits(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameUnits(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameUnits(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameUnitsContext frameUnits() throws RecognitionException {
		FrameUnitsContext _localctx = new FrameUnitsContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_frameUnits);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6912);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameExtentContext extends ParserRuleContext {
		public FrameRangeContext frameRange() {
			return getRuleContext(FrameRangeContext.class,0);
		}
		public FrameBetweenContext frameBetween() {
			return getRuleContext(FrameBetweenContext.class,0);
		}
		public FrameExtentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameExtent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameExtent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameExtent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameExtent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameExtentContext frameExtent() throws RecognitionException {
		FrameExtentContext _localctx = new FrameExtentContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_frameExtent);
		try {
			setState(6916);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1029,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6914);
				frameRange();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6915);
				frameBetween();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameBetweenContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(MySqlParser.BETWEEN, 0); }
		public List<FrameRangeContext> frameRange() {
			return getRuleContexts(FrameRangeContext.class);
		}
		public FrameRangeContext frameRange(int i) {
			return getRuleContext(FrameRangeContext.class,i);
		}
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public FrameBetweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameBetween; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameBetween(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameBetween(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameBetween(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameBetweenContext frameBetween() throws RecognitionException {
		FrameBetweenContext _localctx = new FrameBetweenContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_frameBetween);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6918);
			match(BETWEEN);
			setState(6919);
			frameRange();
			setState(6920);
			match(AND);
			setState(6921);
			frameRange();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameRangeContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode UNBOUNDED() { return getToken(MySqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(MySqlParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(MySqlParser.FOLLOWING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FrameRangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameRange; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameRange(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameRangeContext frameRange() throws RecognitionException {
		FrameRangeContext _localctx = new FrameRangeContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_frameRange);
		int _la;
		try {
			setState(6930);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1030,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6923);
				match(CURRENT);
				setState(6924);
				match(ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6925);
				match(UNBOUNDED);
				setState(6926);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6927);
				expression(0);
				setState(6928);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_partitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6932);
			match(PARTITION);
			setState(6933);
			match(BY);
			setState(6934);
			expression(0);
			setState(6939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6935);
				match(COMMA);
				setState(6936);
				expression(0);
				}
				}
				setState(6941);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFunctionNameContext extends ParserRuleContext {
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public TerminalNode ASCII() { return getToken(MySqlParser.ASCII, 0); }
		public TerminalNode CURDATE() { return getToken(MySqlParser.CURDATE, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(MySqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(MySqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURTIME() { return getToken(MySqlParser.CURTIME, 0); }
		public TerminalNode DATE_ADD() { return getToken(MySqlParser.DATE_ADD, 0); }
		public TerminalNode DATE_SUB() { return getToken(MySqlParser.DATE_SUB, 0); }
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(MySqlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode MID() { return getToken(MySqlParser.MID, 0); }
		public TerminalNode NOW() { return getToken(MySqlParser.NOW, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode SUBSTR() { return getToken(MySqlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(MySqlParser.SUBSTRING, 0); }
		public TerminalNode SYSDATE() { return getToken(MySqlParser.SYSDATE, 0); }
		public TerminalNode TRIM() { return getToken(MySqlParser.TRIM, 0); }
		public TerminalNode UTC_DATE() { return getToken(MySqlParser.UTC_DATE, 0); }
		public TerminalNode UTC_TIME() { return getToken(MySqlParser.UTC_TIME, 0); }
		public TerminalNode UTC_TIMESTAMP() { return getToken(MySqlParser.UTC_TIMESTAMP, 0); }
		public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterScalarFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitScalarFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitScalarFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFunctionNameContext scalarFunctionName() throws RecognitionException {
		ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_scalarFunctionName);
		try {
			setState(6965);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case SCHEMA:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case POSITION:
			case INVISIBLE:
			case VISIBLE:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case SESSION_VARIABLES_ADMIN:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case MOD:
				enterOuterAlt(_localctx, 1);
				{
				setState(6942);
				functionNameBase();
				}
				break;
			case ASCII:
				enterOuterAlt(_localctx, 2);
				{
				setState(6943);
				match(ASCII);
				}
				break;
			case CURDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6944);
				match(CURDATE);
				}
				break;
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(6945);
				match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 5);
				{
				setState(6946);
				match(CURRENT_TIME);
				}
				break;
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 6);
				{
				setState(6947);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case CURTIME:
				enterOuterAlt(_localctx, 7);
				{
				setState(6948);
				match(CURTIME);
				}
				break;
			case DATE_ADD:
				enterOuterAlt(_localctx, 8);
				{
				setState(6949);
				match(DATE_ADD);
				}
				break;
			case DATE_SUB:
				enterOuterAlt(_localctx, 9);
				{
				setState(6950);
				match(DATE_SUB);
				}
				break;
			case IF:
				enterOuterAlt(_localctx, 10);
				{
				setState(6951);
				match(IF);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(6952);
				match(INSERT);
				}
				break;
			case LOCALTIME:
				enterOuterAlt(_localctx, 12);
				{
				setState(6953);
				match(LOCALTIME);
				}
				break;
			case LOCALTIMESTAMP:
				enterOuterAlt(_localctx, 13);
				{
				setState(6954);
				match(LOCALTIMESTAMP);
				}
				break;
			case MID:
				enterOuterAlt(_localctx, 14);
				{
				setState(6955);
				match(MID);
				}
				break;
			case NOW:
				enterOuterAlt(_localctx, 15);
				{
				setState(6956);
				match(NOW);
				}
				break;
			case REPLACE:
				enterOuterAlt(_localctx, 16);
				{
				setState(6957);
				match(REPLACE);
				}
				break;
			case SUBSTR:
				enterOuterAlt(_localctx, 17);
				{
				setState(6958);
				match(SUBSTR);
				}
				break;
			case SUBSTRING:
				enterOuterAlt(_localctx, 18);
				{
				setState(6959);
				match(SUBSTRING);
				}
				break;
			case SYSDATE:
				enterOuterAlt(_localctx, 19);
				{
				setState(6960);
				match(SYSDATE);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 20);
				{
				setState(6961);
				match(TRIM);
				}
				break;
			case UTC_DATE:
				enterOuterAlt(_localctx, 21);
				{
				setState(6962);
				match(UTC_DATE);
				}
				break;
			case UTC_TIME:
				enterOuterAlt(_localctx, 22);
				{
				setState(6963);
				match(UTC_TIME);
				}
				break;
			case UTC_TIMESTAMP:
				enterOuterAlt(_localctx, 23);
				{
				setState(6964);
				match(UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PasswordFunctionClauseContext extends ParserRuleContext {
		public Token functionName;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MySqlParser.OLD_PASSWORD, 0); }
		public PasswordFunctionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_passwordFunctionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordFunctionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordFunctionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPasswordFunctionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PasswordFunctionClauseContext passwordFunctionClause() throws RecognitionException {
		PasswordFunctionClauseContext _localctx = new PasswordFunctionClauseContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_passwordFunctionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6967);
			((PasswordFunctionClauseContext)_localctx).functionName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==OLD_PASSWORD || _la==PASSWORD) ) {
				((PasswordFunctionClauseContext)_localctx).functionName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6968);
			match(LR_BRACKET);
			setState(6969);
			functionArg();
			setState(6970);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public List<FunctionCallContext> functionCall() {
			return getRuleContexts(FunctionCallContext.class);
		}
		public FunctionCallContext functionCall(int i) {
			return getRuleContext(FunctionCallContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgsContext functionArgs() throws RecognitionException {
		FunctionArgsContext _localctx = new FunctionArgsContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_functionArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6976);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1033,_ctx) ) {
			case 1:
				{
				setState(6972);
				constant();
				}
				break;
			case 2:
				{
				setState(6973);
				fullColumnName();
				}
				break;
			case 3:
				{
				setState(6974);
				functionCall();
				}
				break;
			case 4:
				{
				setState(6975);
				expression(0);
				}
				break;
			}
			setState(6987);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6978);
				match(COMMA);
				setState(6983);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1034,_ctx) ) {
				case 1:
					{
					setState(6979);
					constant();
					}
					break;
				case 2:
					{
					setState(6980);
					fullColumnName();
					}
					break;
				case 3:
					{
					setState(6981);
					functionCall();
					}
					break;
				case 4:
					{
					setState(6982);
					expression(0);
					}
					break;
				}
				}
				}
				setState(6989);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgContext functionArg() throws RecognitionException {
		FunctionArgContext _localctx = new FunctionArgContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_functionArg);
		try {
			setState(6994);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1036,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6990);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6991);
				fullColumnName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6992);
				functionCall();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6993);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	 
		public ExpressionContext() { }
		public void copyFrom(ExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IsExpressionContext extends ExpressionContext {
		public Token testValue;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(MySqlParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(MySqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySqlParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySqlParser.UNKNOWN, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public IsExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIsExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIsExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIsExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NotExpressionContext extends ExpressionContext {
		public Token notOperator;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public NotExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNotExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNotExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNotExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LogicalExpressionContext extends ExpressionContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public LogicalOperatorContext logicalOperator() {
			return getRuleContext(LogicalOperatorContext.class,0);
		}
		public LogicalExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLogicalExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLogicalExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLogicalExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PredicateExpressionContext extends ExpressionContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicateExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPredicateExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPredicateExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPredicateExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 660;
		enterRecursionRule(_localctx, 660, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7007);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1038,_ctx) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(6997);
				((NotExpressionContext)_localctx).notOperator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((NotExpressionContext)_localctx).notOperator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6998);
				expression(4);
				}
				break;
			case 2:
				{
				_localctx = new IsExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6999);
				predicate(0);
				setState(7000);
				match(IS);
				setState(7002);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(7001);
					match(NOT);
					}
				}

				setState(7004);
				((IsExpressionContext)_localctx).testValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((IsExpressionContext)_localctx).testValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7006);
				predicate(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(7015);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1039,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_expression);
					setState(7009);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(7010);
					logicalOperator();
					setState(7011);
					expression(4);
					}
					} 
				}
				setState(7017);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1039,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
	 
		public PredicateContext() { }
		public void copyFrom(PredicateContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SoundsLikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode SOUNDS() { return getToken(MySqlParser.SOUNDS, 0); }
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public SoundsLikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSoundsLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSoundsLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSoundsLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExpressionAtomPredicateContext extends PredicateContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(MySqlParser.VAR_ASSIGN, 0); }
		public ExpressionAtomPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionAtomPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionAtomPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressionAtomPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryComparisonPredicateContext extends PredicateContext {
		public Token quantifier;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(MySqlParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(MySqlParser.SOME, 0); }
		public SubqueryComparisonPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryComparisonPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryComparisonPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubqueryComparisonPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonMemberOfPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode MEMBER() { return getToken(MySqlParser.MEMBER, 0); }
		public TerminalNode OF() { return getToken(MySqlParser.OF, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public JsonMemberOfPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonMemberOfPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonMemberOfPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonMemberOfPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryComparisonPredicateContext extends PredicateContext {
		public PredicateContext left;
		public PredicateContext right;
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public BinaryComparisonPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBinaryComparisonPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBinaryComparisonPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBinaryComparisonPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public InPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BetweenPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(MySqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public BetweenPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBetweenPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBetweenPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBetweenPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IsNullPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(MySqlParser.IS, 0); }
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public IsNullPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIsNullPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIsNullPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIsNullPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(MySqlParser.ESCAPE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public LikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RegexpPredicateContext extends PredicateContext {
		public Token regex;
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode REGEXP() { return getToken(MySqlParser.REGEXP, 0); }
		public TerminalNode RLIKE() { return getToken(MySqlParser.RLIKE, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public RegexpPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRegexpPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRegexpPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRegexpPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PredicateContext _localctx = new PredicateContext(_ctx, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 662;
		enterRecursionRule(_localctx, 662, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(7021);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1040,_ctx) ) {
			case 1:
				{
				setState(7019);
				match(LOCAL_ID);
				setState(7020);
				match(VAR_ASSIGN);
				}
				break;
			}
			setState(7023);
			expressionAtom(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(7089);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1048,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7087);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1047,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						((BinaryComparisonPredicateContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7025);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(7026);
						comparisonOperator();
						setState(7027);
						((BinaryComparisonPredicateContext)_localctx).right = predicate(9);
						}
						break;
					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7029);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(7031);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(7030);
							match(NOT);
							}
						}

						setState(7033);
						match(BETWEEN);
						setState(7034);
						predicate(0);
						setState(7035);
						match(AND);
						setState(7036);
						predicate(7);
						}
						break;
					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7038);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(7039);
						match(SOUNDS);
						setState(7040);
						match(LIKE);
						setState(7041);
						predicate(6);
						}
						break;
					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7042);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(7044);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(7043);
							match(NOT);
							}
						}

						setState(7046);
						((RegexpPredicateContext)_localctx).regex = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==REGEXP || _la==RLIKE) ) {
							((RegexpPredicateContext)_localctx).regex = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(7047);
						predicate(4);
						}
						break;
					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7048);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(7050);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(7049);
							match(NOT);
							}
						}

						setState(7052);
						match(IN);
						setState(7053);
						match(LR_BRACKET);
						setState(7056);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1044,_ctx) ) {
						case 1:
							{
							setState(7054);
							selectStatement();
							}
							break;
						case 2:
							{
							setState(7055);
							expressions();
							}
							break;
						}
						setState(7058);
						match(RR_BRACKET);
						}
						break;
					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7060);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(7061);
						match(IS);
						setState(7062);
						nullNotnull();
						}
						break;
					case 7:
						{
						_localctx = new SubqueryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7063);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(7064);
						comparisonOperator();
						setState(7065);
						((SubqueryComparisonPredicateContext)_localctx).quantifier = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
							((SubqueryComparisonPredicateContext)_localctx).quantifier = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(7066);
						match(LR_BRACKET);
						setState(7067);
						selectStatement();
						setState(7068);
						match(RR_BRACKET);
						}
						break;
					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7070);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(7072);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(7071);
							match(NOT);
							}
						}

						setState(7074);
						match(LIKE);
						setState(7075);
						predicate(0);
						setState(7078);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1046,_ctx) ) {
						case 1:
							{
							setState(7076);
							match(ESCAPE);
							setState(7077);
							match(STRING_LITERAL);
							}
							break;
						}
						}
						break;
					case 9:
						{
						_localctx = new JsonMemberOfPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7080);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(7081);
						match(MEMBER);
						setState(7082);
						match(OF);
						setState(7083);
						match(LR_BRACKET);
						setState(7084);
						predicate(0);
						setState(7085);
						match(RR_BRACKET);
						}
						break;
					}
					} 
				}
				setState(7091);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1048,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExpressionAtomContext extends ParserRuleContext {
		public ExpressionAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionAtom; }
	 
		public ExpressionAtomContext() { }
		public void copyFrom(ExpressionAtomContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnaryExpressionAtomContext extends ExpressionAtomContext {
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public UnaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnaryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollateExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollateExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollateExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollateExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public MysqlVariableExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMysqlVariableExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMysqlVariableExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMysqlVariableExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NestedExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public NestedExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNestedExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNestedExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNestedExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NestedRowExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public NestedRowExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNestedRowExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNestedRowExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNestedRowExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MathExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public MathExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMathExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMathExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMathExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExistsExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ExistsExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExistsExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExistsExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExistsExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public IntervalExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public JsonOperatorContext jsonOperator() {
			return getRuleContext(JsonOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public JsonExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public SubqueryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubqueryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstantExpressionAtomContext extends ExpressionAtomContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ConstantExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstantExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstantExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstantExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FunctionCallExpressionAtomContext extends ExpressionAtomContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public FunctionCallExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionCallExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionCallExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionCallExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public BinaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBinaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBinaryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBinaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FullColumnNameExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullColumnNameExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullColumnNameExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFullColumnNameExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BitExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public BitOperatorContext bitOperator() {
			return getRuleContext(BitOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public BitExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBitExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBitExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBitExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionAtomContext expressionAtom() throws RecognitionException {
		return expressionAtom(0);
	}

	private ExpressionAtomContext expressionAtom(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionAtomContext _localctx = new ExpressionAtomContext(_ctx, _parentState);
		ExpressionAtomContext _prevctx = _localctx;
		int _startState = 664;
		enterRecursionRule(_localctx, 664, RULE_expressionAtom, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7137);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1051,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(7093);
				constant();
				}
				break;
			case 2:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7094);
				fullColumnName();
				}
				break;
			case 3:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7095);
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7096);
				mysqlVariable();
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7097);
				unaryOperator();
				setState(7098);
				expressionAtom(10);
				}
				break;
			case 6:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7100);
				match(BINARY);
				setState(7101);
				expressionAtom(9);
				}
				break;
			case 7:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7102);
				match(LR_BRACKET);
				setState(7103);
				expression(0);
				setState(7108);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7104);
					match(COMMA);
					setState(7105);
					expression(0);
					}
					}
					setState(7110);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7111);
				match(RR_BRACKET);
				}
				break;
			case 8:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7113);
				match(ROW);
				setState(7114);
				match(LR_BRACKET);
				setState(7115);
				expression(0);
				setState(7118); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(7116);
					match(COMMA);
					setState(7117);
					expression(0);
					}
					}
					setState(7120); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(7122);
				match(RR_BRACKET);
				}
				break;
			case 9:
				{
				_localctx = new ExistsExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7124);
				match(EXISTS);
				setState(7125);
				match(LR_BRACKET);
				setState(7126);
				selectStatement();
				setState(7127);
				match(RR_BRACKET);
				}
				break;
			case 10:
				{
				_localctx = new SubqueryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7129);
				match(LR_BRACKET);
				setState(7130);
				selectStatement();
				setState(7131);
				match(RR_BRACKET);
				}
				break;
			case 11:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7133);
				match(INTERVAL);
				setState(7134);
				expression(0);
				setState(7135);
				intervalType();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(7156);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1053,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7154);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1052,_ctx) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((BitExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(7139);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(7140);
						bitOperator();
						setState(7141);
						((BitExpressionAtomContext)_localctx).right = expressionAtom(4);
						}
						break;
					case 2:
						{
						_localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((MathExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(7143);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7144);
						mathOperator();
						setState(7145);
						((MathExpressionAtomContext)_localctx).right = expressionAtom(3);
						}
						break;
					case 3:
						{
						_localctx = new JsonExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((JsonExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(7147);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(7148);
						jsonOperator();
						setState(7149);
						((JsonExpressionAtomContext)_localctx).right = expressionAtom(2);
						}
						break;
					case 4:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(7151);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(7152);
						match(COLLATE);
						setState(7153);
						collationName();
						}
						break;
					}
					} 
				}
				setState(7158);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1053,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class UnaryOperatorContext extends ParserRuleContext {
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public TerminalNode BIT_NOT_OP() { return getToken(MySqlParser.BIT_NOT_OP, 0); }
		public TerminalNode PLUS() { return getToken(MySqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnaryOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnaryOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnaryOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnaryOperatorContext unaryOperator() throws RecognitionException {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_unaryOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7159);
			_la = _input.LA(1);
			if ( !(_la==NOT || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (PLUS - 1110)) | (1L << (MINUS - 1110)) | (1L << (EXCLAMATION_SYMBOL - 1110)) | (1L << (BIT_NOT_OP - 1110)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(MySqlParser.GREATER_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySqlParser.LESS_SYMBOL, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_comparisonOperator);
		try {
			setState(7175);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1054,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7161);
				match(EQUAL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7162);
				match(GREATER_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7163);
				match(LESS_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7164);
				match(LESS_SYMBOL);
				setState(7165);
				match(EQUAL_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7166);
				match(GREATER_SYMBOL);
				setState(7167);
				match(EQUAL_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7168);
				match(LESS_SYMBOL);
				setState(7169);
				match(GREATER_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7170);
				match(EXCLAMATION_SYMBOL);
				setState(7171);
				match(EQUAL_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7172);
				match(LESS_SYMBOL);
				setState(7173);
				match(EQUAL_SYMBOL);
				setState(7174);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public List<TerminalNode> BIT_AND_OP() { return getTokens(MySqlParser.BIT_AND_OP); }
		public TerminalNode BIT_AND_OP(int i) {
			return getToken(MySqlParser.BIT_AND_OP, i);
		}
		public TerminalNode XOR() { return getToken(MySqlParser.XOR, 0); }
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public List<TerminalNode> BIT_OR_OP() { return getTokens(MySqlParser.BIT_OR_OP); }
		public TerminalNode BIT_OR_OP(int i) {
			return getToken(MySqlParser.BIT_OR_OP, i);
		}
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLogicalOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLogicalOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLogicalOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_logicalOperator);
		try {
			setState(7184);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(7177);
				match(AND);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(7178);
				match(BIT_AND_OP);
				setState(7179);
				match(BIT_AND_OP);
				}
				break;
			case XOR:
				enterOuterAlt(_localctx, 3);
				{
				setState(7180);
				match(XOR);
				}
				break;
			case OR:
				enterOuterAlt(_localctx, 4);
				{
				setState(7181);
				match(OR);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(7182);
				match(BIT_OR_OP);
				setState(7183);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitOperatorContext extends ParserRuleContext {
		public List<TerminalNode> LESS_SYMBOL() { return getTokens(MySqlParser.LESS_SYMBOL); }
		public TerminalNode LESS_SYMBOL(int i) {
			return getToken(MySqlParser.LESS_SYMBOL, i);
		}
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(MySqlParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(MySqlParser.GREATER_SYMBOL, i);
		}
		public TerminalNode BIT_AND_OP() { return getToken(MySqlParser.BIT_AND_OP, 0); }
		public TerminalNode BIT_XOR_OP() { return getToken(MySqlParser.BIT_XOR_OP, 0); }
		public TerminalNode BIT_OR_OP() { return getToken(MySqlParser.BIT_OR_OP, 0); }
		public BitOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBitOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBitOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBitOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitOperatorContext bitOperator() throws RecognitionException {
		BitOperatorContext _localctx = new BitOperatorContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_bitOperator);
		try {
			setState(7193);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7186);
				match(LESS_SYMBOL);
				setState(7187);
				match(LESS_SYMBOL);
				}
				break;
			case GREATER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7188);
				match(GREATER_SYMBOL);
				setState(7189);
				match(GREATER_SYMBOL);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 3);
				{
				setState(7190);
				match(BIT_AND_OP);
				}
				break;
			case BIT_XOR_OP:
				enterOuterAlt(_localctx, 4);
				{
				setState(7191);
				match(BIT_XOR_OP);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(7192);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOperatorContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public TerminalNode DIVIDE() { return getToken(MySqlParser.DIVIDE, 0); }
		public TerminalNode MODULE() { return getToken(MySqlParser.MODULE, 0); }
		public TerminalNode DIV() { return getToken(MySqlParser.DIV, 0); }
		public TerminalNode MOD() { return getToken(MySqlParser.MOD, 0); }
		public TerminalNode PLUS() { return getToken(MySqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMathOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMathOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMathOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathOperatorContext mathOperator() throws RecognitionException {
		MathOperatorContext _localctx = new MathOperatorContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_mathOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7195);
			_la = _input.LA(1);
			if ( !(((((_la - 1107)) & ~0x3f) == 0 && ((1L << (_la - 1107)) & ((1L << (STAR - 1107)) | (1L << (DIVIDE - 1107)) | (1L << (MODULE - 1107)) | (1L << (PLUS - 1107)) | (1L << (MINUS - 1107)) | (1L << (DIV - 1107)) | (1L << (MOD - 1107)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonOperatorContext extends ParserRuleContext {
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(MySqlParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(MySqlParser.GREATER_SYMBOL, i);
		}
		public JsonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonOperatorContext jsonOperator() throws RecognitionException {
		JsonOperatorContext _localctx = new JsonOperatorContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_jsonOperator);
		try {
			setState(7202);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1057,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7197);
				match(MINUS);
				setState(7198);
				match(GREATER_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7199);
				match(MINUS);
				setState(7200);
				match(GREATER_SYMBOL);
				setState(7201);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameBaseContext extends ParserRuleContext {
		public TerminalNode ARMSCII8() { return getToken(MySqlParser.ARMSCII8, 0); }
		public TerminalNode ASCII() { return getToken(MySqlParser.ASCII, 0); }
		public TerminalNode BIG5() { return getToken(MySqlParser.BIG5, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode CP1250() { return getToken(MySqlParser.CP1250, 0); }
		public TerminalNode CP1251() { return getToken(MySqlParser.CP1251, 0); }
		public TerminalNode CP1256() { return getToken(MySqlParser.CP1256, 0); }
		public TerminalNode CP1257() { return getToken(MySqlParser.CP1257, 0); }
		public TerminalNode CP850() { return getToken(MySqlParser.CP850, 0); }
		public TerminalNode CP852() { return getToken(MySqlParser.CP852, 0); }
		public TerminalNode CP866() { return getToken(MySqlParser.CP866, 0); }
		public TerminalNode CP932() { return getToken(MySqlParser.CP932, 0); }
		public TerminalNode DEC8() { return getToken(MySqlParser.DEC8, 0); }
		public TerminalNode EUCJPMS() { return getToken(MySqlParser.EUCJPMS, 0); }
		public TerminalNode EUCKR() { return getToken(MySqlParser.EUCKR, 0); }
		public TerminalNode GB18030() { return getToken(MySqlParser.GB18030, 0); }
		public TerminalNode GB2312() { return getToken(MySqlParser.GB2312, 0); }
		public TerminalNode GBK() { return getToken(MySqlParser.GBK, 0); }
		public TerminalNode GEOSTD8() { return getToken(MySqlParser.GEOSTD8, 0); }
		public TerminalNode GREEK() { return getToken(MySqlParser.GREEK, 0); }
		public TerminalNode HEBREW() { return getToken(MySqlParser.HEBREW, 0); }
		public TerminalNode HP8() { return getToken(MySqlParser.HP8, 0); }
		public TerminalNode KEYBCS2() { return getToken(MySqlParser.KEYBCS2, 0); }
		public TerminalNode KOI8R() { return getToken(MySqlParser.KOI8R, 0); }
		public TerminalNode KOI8U() { return getToken(MySqlParser.KOI8U, 0); }
		public TerminalNode LATIN1() { return getToken(MySqlParser.LATIN1, 0); }
		public TerminalNode LATIN2() { return getToken(MySqlParser.LATIN2, 0); }
		public TerminalNode LATIN5() { return getToken(MySqlParser.LATIN5, 0); }
		public TerminalNode LATIN7() { return getToken(MySqlParser.LATIN7, 0); }
		public TerminalNode MACCE() { return getToken(MySqlParser.MACCE, 0); }
		public TerminalNode MACROMAN() { return getToken(MySqlParser.MACROMAN, 0); }
		public TerminalNode SJIS() { return getToken(MySqlParser.SJIS, 0); }
		public TerminalNode SWE7() { return getToken(MySqlParser.SWE7, 0); }
		public TerminalNode TIS620() { return getToken(MySqlParser.TIS620, 0); }
		public TerminalNode UCS2() { return getToken(MySqlParser.UCS2, 0); }
		public TerminalNode UJIS() { return getToken(MySqlParser.UJIS, 0); }
		public TerminalNode UTF16() { return getToken(MySqlParser.UTF16, 0); }
		public TerminalNode UTF16LE() { return getToken(MySqlParser.UTF16LE, 0); }
		public TerminalNode UTF32() { return getToken(MySqlParser.UTF32, 0); }
		public TerminalNode UTF8() { return getToken(MySqlParser.UTF8, 0); }
		public TerminalNode UTF8MB3() { return getToken(MySqlParser.UTF8MB3, 0); }
		public TerminalNode UTF8MB4() { return getToken(MySqlParser.UTF8MB4, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharsetNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharsetNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharsetNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameBaseContext charsetNameBase() throws RecognitionException {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_charsetNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7204);
			_la = _input.LA(1);
			if ( !(_la==BINARY || ((((_la - 726)) & ~0x3f) == 0 && ((1L << (_la - 726)) & ((1L << (ARMSCII8 - 726)) | (1L << (ASCII - 726)) | (1L << (BIG5 - 726)) | (1L << (CP1250 - 726)) | (1L << (CP1251 - 726)) | (1L << (CP1256 - 726)) | (1L << (CP1257 - 726)) | (1L << (CP850 - 726)) | (1L << (CP852 - 726)) | (1L << (CP866 - 726)) | (1L << (CP932 - 726)) | (1L << (DEC8 - 726)) | (1L << (EUCJPMS - 726)) | (1L << (EUCKR - 726)) | (1L << (GB18030 - 726)) | (1L << (GB2312 - 726)) | (1L << (GBK - 726)) | (1L << (GEOSTD8 - 726)) | (1L << (GREEK - 726)) | (1L << (HEBREW - 726)) | (1L << (HP8 - 726)) | (1L << (KEYBCS2 - 726)) | (1L << (KOI8R - 726)) | (1L << (KOI8U - 726)) | (1L << (LATIN1 - 726)) | (1L << (LATIN2 - 726)) | (1L << (LATIN5 - 726)) | (1L << (LATIN7 - 726)) | (1L << (MACCE - 726)) | (1L << (MACROMAN - 726)) | (1L << (SJIS - 726)) | (1L << (SWE7 - 726)) | (1L << (TIS620 - 726)) | (1L << (UCS2 - 726)) | (1L << (UJIS - 726)) | (1L << (UTF16 - 726)) | (1L << (UTF16LE - 726)) | (1L << (UTF32 - 726)) | (1L << (UTF8 - 726)) | (1L << (UTF8MB3 - 726)) | (1L << (UTF8MB4 - 726)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelBaseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(MySqlParser.REPEATABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(MySqlParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(MySqlParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MySqlParser.SERIALIZABLE, 0); }
		public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevelBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionLevelBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionLevelBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTransactionLevelBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelBaseContext transactionLevelBase() throws RecognitionException {
		TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_transactionLevelBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7206);
			_la = _input.LA(1);
			if ( !(((((_la - 779)) & ~0x3f) == 0 && ((1L << (_la - 779)) & ((1L << (REPEATABLE - 779)) | (1L << (COMMITTED - 779)) | (1L << (UNCOMMITTED - 779)) | (1L << (SERIALIZABLE - 779)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesBaseContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode ROUTINE() { return getToken(MySqlParser.ROUTINE, 0); }
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(MySqlParser.FILE, 0); }
		public TerminalNode PROCESS() { return getToken(MySqlParser.PROCESS, 0); }
		public TerminalNode RELOAD() { return getToken(MySqlParser.RELOAD, 0); }
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(MySqlParser.SUPER, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public PrivilegesBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegesBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrivilegesBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrivilegesBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrivilegesBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesBaseContext privilegesBase() throws RecognitionException {
		PrivilegesBaseContext _localctx = new PrivilegesBaseContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_privilegesBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7208);
			_la = _input.LA(1);
			if ( !(((((_la - 680)) & ~0x3f) == 0 && ((1L << (_la - 680)) & ((1L << (TABLES - 680)) | (1L << (ROUTINE - 680)) | (1L << (EXECUTE - 680)) | (1L << (FILE - 680)) | (1L << (PROCESS - 680)) | (1L << (RELOAD - 680)) | (1L << (SHUTDOWN - 680)) | (1L << (SUPER - 680)) | (1L << (PRIVILEGES - 680)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeBaseContext extends ParserRuleContext {
		public TerminalNode QUARTER() { return getToken(MySqlParser.QUARTER, 0); }
		public TerminalNode MONTH() { return getToken(MySqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(MySqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(MySqlParser.MINUTE, 0); }
		public TerminalNode WEEK() { return getToken(MySqlParser.WEEK, 0); }
		public TerminalNode SECOND() { return getToken(MySqlParser.SECOND, 0); }
		public TerminalNode MICROSECOND() { return getToken(MySqlParser.MICROSECOND, 0); }
		public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalTypeBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeBaseContext intervalTypeBase() throws RecognitionException {
		IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_intervalTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7210);
			_la = _input.LA(1);
			if ( !(((((_la - 672)) & ~0x3f) == 0 && ((1L << (_la - 672)) & ((1L << (QUARTER - 672)) | (1L << (MONTH - 672)) | (1L << (DAY - 672)) | (1L << (HOUR - 672)) | (1L << (MINUTE - 672)) | (1L << (WEEK - 672)) | (1L << (SECOND - 672)) | (1L << (MICROSECOND - 672)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeBaseContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode ENUM() { return getToken(MySqlParser.ENUM, 0); }
		public TerminalNode TEXT() { return getToken(MySqlParser.TEXT, 0); }
		public DataTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDataTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDataTypeBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDataTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeBaseContext dataTypeBase() throws RecognitionException {
		DataTypeBaseContext _localctx = new DataTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_dataTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7212);
			_la = _input.LA(1);
			if ( !(((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeywordsCanBeIdContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(MySqlParser.ACCOUNT, 0); }
		public TerminalNode ACTION() { return getToken(MySqlParser.ACTION, 0); }
		public TerminalNode ADMIN() { return getToken(MySqlParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(MySqlParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode ANY() { return getToken(MySqlParser.ANY, 0); }
		public TerminalNode AT() { return getToken(MySqlParser.AT, 0); }
		public TerminalNode AUDIT_ADMIN() { return getToken(MySqlParser.AUDIT_ADMIN, 0); }
		public TerminalNode AUTHORS() { return getToken(MySqlParser.AUTHORS, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(MySqlParser.AUTOCOMMIT, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode AVG() { return getToken(MySqlParser.AVG, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		public TerminalNode BACKUP_ADMIN() { return getToken(MySqlParser.BACKUP_ADMIN, 0); }
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode BINLOG_ADMIN() { return getToken(MySqlParser.BINLOG_ADMIN, 0); }
		public TerminalNode BINLOG_ENCRYPTION_ADMIN() { return getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		public TerminalNode BIT() { return getToken(MySqlParser.BIT, 0); }
		public TerminalNode BIT_AND() { return getToken(MySqlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(MySqlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(MySqlParser.BIT_XOR, 0); }
		public TerminalNode BLOCK() { return getToken(MySqlParser.BLOCK, 0); }
		public TerminalNode BOOL() { return getToken(MySqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySqlParser.BOOLEAN, 0); }
		public TerminalNode BTREE() { return getToken(MySqlParser.BTREE, 0); }
		public TerminalNode BUCKETS() { return getToken(MySqlParser.BUCKETS, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode CHANGED() { return getToken(MySqlParser.CHANGED, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(MySqlParser.PAGE_CHECKSUM, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(MySqlParser.CATALOG_NAME, 0); }
		public TerminalNode CIPHER() { return getToken(MySqlParser.CIPHER, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(MySqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode CLIENT() { return getToken(MySqlParser.CLIENT, 0); }
		public TerminalNode CLONE_ADMIN() { return getToken(MySqlParser.CLONE_ADMIN, 0); }
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public TerminalNode CLUSTERING() { return getToken(MySqlParser.CLUSTERING, 0); }
		public TerminalNode COALESCE() { return getToken(MySqlParser.COALESCE, 0); }
		public TerminalNode CODE() { return getToken(MySqlParser.CODE, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode COLUMN_FORMAT() { return getToken(MySqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(MySqlParser.COLUMN_NAME, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(MySqlParser.COMPACT, 0); }
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySqlParser.COMPRESSED, 0); }
		public TerminalNode COMPRESSION() { return getToken(MySqlParser.COMPRESSION, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode CONNECT() { return getToken(MySqlParser.CONNECT, 0); }
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode CONNECTION_ADMIN() { return getToken(MySqlParser.CONNECTION_ADMIN, 0); }
		public TerminalNode CONSISTENT() { return getToken(MySqlParser.CONSISTENT, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(MySqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONTAINS() { return getToken(MySqlParser.CONTAINS, 0); }
		public TerminalNode CONTEXT() { return getToken(MySqlParser.CONTEXT, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(MySqlParser.CONTRIBUTORS, 0); }
		public TerminalNode COPY() { return getToken(MySqlParser.COPY, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode CPU() { return getToken(MySqlParser.CPU, 0); }
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(MySqlParser.CURSOR_NAME, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode DEALLOCATE() { return getToken(MySqlParser.DEALLOCATE, 0); }
		public TerminalNode DEFAULT_AUTH() { return getToken(MySqlParser.DEFAULT_AUTH, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode DES_KEY_FILE() { return getToken(MySqlParser.DES_KEY_FILE, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(MySqlParser.DIAGNOSTICS, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySqlParser.DUMPFILE, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySqlParser.DUPLICATE, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MySqlParser.ENCRYPTION, 0); }
		public TerminalNode ENCRYPTION_KEY_ADMIN() { return getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public TerminalNode ENDS() { return getToken(MySqlParser.ENDS, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode ENGINE_ATTRIBUTE() { return getToken(MySqlParser.ENGINE_ATTRIBUTE, 0); }
		public TerminalNode ENGINES() { return getToken(MySqlParser.ENGINES, 0); }
		public TerminalNode ERROR() { return getToken(MySqlParser.ERROR, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(MySqlParser.ESCAPE, 0); }
		public TerminalNode EUR() { return getToken(MySqlParser.EUR, 0); }
		public TerminalNode EVEN() { return getToken(MySqlParser.EVEN, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode EVERY() { return getToken(MySqlParser.EVERY, 0); }
		public TerminalNode EXCEPT() { return getToken(MySqlParser.EXCEPT, 0); }
		public TerminalNode EXCHANGE() { return getToken(MySqlParser.EXCHANGE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySqlParser.EXCLUSIVE, 0); }
		public TerminalNode EXPIRE() { return getToken(MySqlParser.EXPIRE, 0); }
		public TerminalNode EXPORT() { return getToken(MySqlParser.EXPORT, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(MySqlParser.EXTENT_SIZE, 0); }
		public TerminalNode FAST() { return getToken(MySqlParser.FAST, 0); }
		public TerminalNode FAULTS() { return getToken(MySqlParser.FAULTS, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		public TerminalNode FILTER() { return getToken(MySqlParser.FILTER, 0); }
		public TerminalNode FIREWALL_ADMIN() { return getToken(MySqlParser.FIREWALL_ADMIN, 0); }
		public TerminalNode FIREWALL_USER() { return getToken(MySqlParser.FIREWALL_USER, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode FLUSH() { return getToken(MySqlParser.FLUSH, 0); }
		public TerminalNode FOLLOWS() { return getToken(MySqlParser.FOLLOWS, 0); }
		public TerminalNode FOUND() { return getToken(MySqlParser.FOUND, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode GENERAL() { return getToken(MySqlParser.GENERAL, 0); }
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode GRANTS() { return getToken(MySqlParser.GRANTS, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(MySqlParser.GROUP_CONCAT, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public TerminalNode GROUP_REPLICATION_ADMIN() { return getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0); }
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode HELP() { return getToken(MySqlParser.HELP, 0); }
		public TerminalNode HOST() { return getToken(MySqlParser.HOST, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode IGNORED() { return getToken(MySqlParser.IGNORED, 0); }
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode INDEXES() { return getToken(MySqlParser.INDEXES, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode INNODB_REDO_LOG_ARCHIVE() { return getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		public TerminalNode INPLACE() { return getToken(MySqlParser.INPLACE, 0); }
		public TerminalNode INSERT_METHOD() { return getToken(MySqlParser.INSERT_METHOD, 0); }
		public TerminalNode INSTALL() { return getToken(MySqlParser.INSTALL, 0); }
		public TerminalNode INSTANCE() { return getToken(MySqlParser.INSTANCE, 0); }
		public TerminalNode INSTANT() { return getToken(MySqlParser.INSTANT, 0); }
		public TerminalNode INTERNAL() { return getToken(MySqlParser.INTERNAL, 0); }
		public TerminalNode INVOKE() { return getToken(MySqlParser.INVOKE, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode IO() { return getToken(MySqlParser.IO, 0); }
		public TerminalNode IO_THREAD() { return getToken(MySqlParser.IO_THREAD, 0); }
		public TerminalNode IPC() { return getToken(MySqlParser.IPC, 0); }
		public TerminalNode ISO() { return getToken(MySqlParser.ISO, 0); }
		public TerminalNode ISOLATION() { return getToken(MySqlParser.ISOLATION, 0); }
		public TerminalNode ISSUER() { return getToken(MySqlParser.ISSUER, 0); }
		public TerminalNode JIS() { return getToken(MySqlParser.JIS, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode LAMBDA() { return getToken(MySqlParser.LAMBDA, 0); }
		public TerminalNode LANGUAGE() { return getToken(MySqlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public TerminalNode LEAVES() { return getToken(MySqlParser.LEAVES, 0); }
		public TerminalNode LESS() { return getToken(MySqlParser.LESS, 0); }
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(MySqlParser.LIST, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(MySqlParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode MASTER_HOST() { return getToken(MySqlParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(MySqlParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_PORT() { return getToken(MySqlParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_SSL() { return getToken(MySqlParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(MySqlParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(MySqlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(MySqlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(MySqlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		public TerminalNode MASTER_USER() { return getToken(MySqlParser.MASTER_USER, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode MAX() { return getToken(MySqlParser.MAX, 0); }
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public TerminalNode MAX_SIZE() { return getToken(MySqlParser.MAX_SIZE, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public TerminalNode MEDIUM() { return getToken(MySqlParser.MEDIUM, 0); }
		public TerminalNode MEMBER() { return getToken(MySqlParser.MEMBER, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(MySqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MID() { return getToken(MySqlParser.MID, 0); }
		public TerminalNode MIGRATE() { return getToken(MySqlParser.MIGRATE, 0); }
		public TerminalNode MIN() { return getToken(MySqlParser.MIN, 0); }
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public TerminalNode MODE() { return getToken(MySqlParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(MySqlParser.MODIFY, 0); }
		public TerminalNode MUTEX() { return getToken(MySqlParser.MUTEX, 0); }
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(MySqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode NAME() { return getToken(MySqlParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(MySqlParser.NAMES, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode NDB_STORED_USER() { return getToken(MySqlParser.NDB_STORED_USER, 0); }
		public TerminalNode NEVER() { return getToken(MySqlParser.NEVER, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode NOCOPY() { return getToken(MySqlParser.NOCOPY, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode NOWAIT() { return getToken(MySqlParser.NOWAIT, 0); }
		public TerminalNode NUMBER() { return getToken(MySqlParser.NUMBER, 0); }
		public TerminalNode ODBC() { return getToken(MySqlParser.ODBC, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public TerminalNode OFFSET() { return getToken(MySqlParser.OFFSET, 0); }
		public TerminalNode OF() { return getToken(MySqlParser.OF, 0); }
		public TerminalNode OJ() { return getToken(MySqlParser.OJ, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MySqlParser.OLD_PASSWORD, 0); }
		public TerminalNode ONE() { return getToken(MySqlParser.ONE, 0); }
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode OPTIONAL() { return getToken(MySqlParser.OPTIONAL, 0); }
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode OWNER() { return getToken(MySqlParser.OWNER, 0); }
		public TerminalNode PACK_KEYS() { return getToken(MySqlParser.PACK_KEYS, 0); }
		public TerminalNode PAGE() { return getToken(MySqlParser.PAGE, 0); }
		public TerminalNode PARSER() { return getToken(MySqlParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(MySqlParser.PARTIAL, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode PASSWORDLESS_USER_ADMIN() { return getToken(MySqlParser.PASSWORDLESS_USER_ADMIN, 0); }
		public TerminalNode PERSIST_RO_VARIABLES_ADMIN() { return getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		public TerminalNode PHASE() { return getToken(MySqlParser.PHASE, 0); }
		public TerminalNode PLUGINS() { return getToken(MySqlParser.PLUGINS, 0); }
		public TerminalNode PLUGIN_DIR() { return getToken(MySqlParser.PLUGIN_DIR, 0); }
		public TerminalNode PLUGIN() { return getToken(MySqlParser.PLUGIN, 0); }
		public TerminalNode PORT() { return getToken(MySqlParser.PORT, 0); }
		public TerminalNode PRECEDES() { return getToken(MySqlParser.PRECEDES, 0); }
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public TerminalNode PREV() { return getToken(MySqlParser.PREV, 0); }
		public TerminalNode PROCESSLIST() { return getToken(MySqlParser.PROCESSLIST, 0); }
		public TerminalNode PROFILE() { return getToken(MySqlParser.PROFILE, 0); }
		public TerminalNode PROFILES() { return getToken(MySqlParser.PROFILES, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode REBUILD() { return getToken(MySqlParser.REBUILD, 0); }
		public TerminalNode RECOVER() { return getToken(MySqlParser.RECOVER, 0); }
		public TerminalNode RECURSIVE() { return getToken(MySqlParser.RECURSIVE, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySqlParser.REDUNDANT, 0); }
		public TerminalNode RELAY() { return getToken(MySqlParser.RELAY, 0); }
		public TerminalNode RELAYLOG() { return getToken(MySqlParser.RELAYLOG, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public TerminalNode REMOVE() { return getToken(MySqlParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(MySqlParser.REORGANIZE, 0); }
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode REPLICATE_DO_DB() { return getToken(MySqlParser.REPLICATE_DO_DB, 0); }
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode REPLICATION_APPLIER() { return getToken(MySqlParser.REPLICATION_APPLIER, 0); }
		public TerminalNode REPLICATION_SLAVE_ADMIN() { return getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0); }
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode RESOURCE_GROUP_ADMIN() { return getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_USER() { return getToken(MySqlParser.RESOURCE_GROUP_USER, 0); }
		public TerminalNode RESUME() { return getToken(MySqlParser.RESUME, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(MySqlParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public TerminalNode ROLE_ADMIN() { return getToken(MySqlParser.ROLE_ADMIN, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(MySqlParser.ROLLUP, 0); }
		public TerminalNode ROTATE() { return getToken(MySqlParser.ROTATE, 0); }
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(MySqlParser.ROW_FORMAT, 0); }
		public TerminalNode RTREE() { return getToken(MySqlParser.RTREE, 0); }
		public TerminalNode S3() { return getToken(MySqlParser.S3, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(MySqlParser.SCHEMA_NAME, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SET_USER_ID() { return getToken(MySqlParser.SET_USER_ID, 0); }
		public TerminalNode SHARE() { return getToken(MySqlParser.SHARE, 0); }
		public TerminalNode SHARED() { return getToken(MySqlParser.SHARED, 0); }
		public TerminalNode SHOW_ROUTINE() { return getToken(MySqlParser.SHOW_ROUTINE, 0); }
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode SIMPLE() { return getToken(MySqlParser.SIMPLE, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode SLOW() { return getToken(MySqlParser.SLOW, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MySqlParser.SNAPSHOT, 0); }
		public TerminalNode SOCKET() { return getToken(MySqlParser.SOCKET, 0); }
		public TerminalNode SOME() { return getToken(MySqlParser.SOME, 0); }
		public TerminalNode SONAME() { return getToken(MySqlParser.SONAME, 0); }
		public TerminalNode SOUNDS() { return getToken(MySqlParser.SOUNDS, 0); }
		public TerminalNode SOURCE() { return getToken(MySqlParser.SOURCE, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_THREAD() { return getToken(MySqlParser.SQL_THREAD, 0); }
		public TerminalNode STACKED() { return getToken(MySqlParser.STACKED, 0); }
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode STARTS() { return getToken(MySqlParser.STARTS, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(MySqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode STD() { return getToken(MySqlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(MySqlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(MySqlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(MySqlParser.STDDEV_SAMP, 0); }
		public TerminalNode STOP() { return getToken(MySqlParser.STOP, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode STRING() { return getToken(MySqlParser.STRING, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode SUBJECT() { return getToken(MySqlParser.SUBJECT, 0); }
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(MySqlParser.SUBPARTITIONS, 0); }
		public TerminalNode SUM() { return getToken(MySqlParser.SUM, 0); }
		public TerminalNode SUSPEND() { return getToken(MySqlParser.SUSPEND, 0); }
		public TerminalNode SWAPS() { return getToken(MySqlParser.SWAPS, 0); }
		public TerminalNode SWITCHES() { return getToken(MySqlParser.SWITCHES, 0); }
		public TerminalNode SYSTEM_VARIABLES_ADMIN() { return getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		public TerminalNode TABLE_NAME() { return getToken(MySqlParser.TABLE_NAME, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public TerminalNode TABLE_ENCRYPTION_ADMIN() { return getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		public TerminalNode TABLE_TYPE() { return getToken(MySqlParser.TABLE_TYPE, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public TerminalNode THAN() { return getToken(MySqlParser.THAN, 0); }
		public TerminalNode TRADITIONAL() { return getToken(MySqlParser.TRADITIONAL, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public TerminalNode TRANSACTIONAL() { return getToken(MySqlParser.TRANSACTIONAL, 0); }
		public TerminalNode TRIGGERS() { return getToken(MySqlParser.TRIGGERS, 0); }
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode UNINSTALL() { return getToken(MySqlParser.UNINSTALL, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySqlParser.UNKNOWN, 0); }
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode USA() { return getToken(MySqlParser.USA, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode USE_FRM() { return getToken(MySqlParser.USE_FRM, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(MySqlParser.USER_RESOURCES, 0); }
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public TerminalNode VAR_POP() { return getToken(MySqlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(MySqlParser.VAR_SAMP, 0); }
		public TerminalNode VARIABLES() { return getToken(MySqlParser.VARIABLES, 0); }
		public TerminalNode VARIANCE() { return getToken(MySqlParser.VARIANCE, 0); }
		public TerminalNode VERSION_TOKEN_ADMIN() { return getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(MySqlParser.WRAPPER, 0); }
		public TerminalNode X509() { return getToken(MySqlParser.X509, 0); }
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode XA_RECOVER_ADMIN() { return getToken(MySqlParser.XA_RECOVER_ADMIN, 0); }
		public TerminalNode XML() { return getToken(MySqlParser.XML, 0); }
		public TerminalNode VIA() { return getToken(MySqlParser.VIA, 0); }
		public TerminalNode LASTVAL() { return getToken(MySqlParser.LASTVAL, 0); }
		public TerminalNode NEXTVAL() { return getToken(MySqlParser.NEXTVAL, 0); }
		public TerminalNode SETVAL() { return getToken(MySqlParser.SETVAL, 0); }
		public TerminalNode PREVIOUS() { return getToken(MySqlParser.PREVIOUS, 0); }
		public TerminalNode PERSISTENT() { return getToken(MySqlParser.PERSISTENT, 0); }
		public TerminalNode REPLICATION_MASTER_ADMIN() { return getToken(MySqlParser.REPLICATION_MASTER_ADMIN, 0); }
		public TerminalNode REPLICA() { return getToken(MySqlParser.REPLICA, 0); }
		public TerminalNode READ_ONLY_ADMIN() { return getToken(MySqlParser.READ_ONLY_ADMIN, 0); }
		public TerminalNode FEDERATED_ADMIN() { return getToken(MySqlParser.FEDERATED_ADMIN, 0); }
		public TerminalNode BINLOG_MONITOR() { return getToken(MySqlParser.BINLOG_MONITOR, 0); }
		public TerminalNode BINLOG_REPLAY() { return getToken(MySqlParser.BINLOG_REPLAY, 0); }
		public TerminalNode ENCRYPTED() { return getToken(MySqlParser.ENCRYPTED, 0); }
		public TerminalNode ENCRYPTION_KEY_ID() { return getToken(MySqlParser.ENCRYPTION_KEY_ID, 0); }
		public TerminalNode SKIP_() { return getToken(MySqlParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(MySqlParser.LOCKED, 0); }
		public TerminalNode CYCLE() { return getToken(MySqlParser.CYCLE, 0); }
		public TerminalNode INCREMENT() { return getToken(MySqlParser.INCREMENT, 0); }
		public TerminalNode MINVALUE() { return getToken(MySqlParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(MySqlParser.MAXVALUE, 0); }
		public TerminalNode NOCACHE() { return getToken(MySqlParser.NOCACHE, 0); }
		public TerminalNode NOCYCLE() { return getToken(MySqlParser.NOCYCLE, 0); }
		public TerminalNode NOMINVALUE() { return getToken(MySqlParser.NOMINVALUE, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(MySqlParser.NOMAXVALUE, 0); }
		public TerminalNode RESTART() { return getToken(MySqlParser.RESTART, 0); }
		public TerminalNode SEQUENCE() { return getToken(MySqlParser.SEQUENCE, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keywordsCanBeId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterKeywordsCanBeId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitKeywordsCanBeId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitKeywordsCanBeId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeywordsCanBeIdContext keywordsCanBeId() throws RecognitionException {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_keywordsCanBeId);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7214);
			_la = _input.LA(1);
			if ( !(((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (BUCKETS - 17)) | (1L << (CURRENT - 17)) | (1L << (DIAGNOSTICS - 17)) | (1L << (EXCEPT - 17)) | (1L << (GROUP - 17)) | (1L << (IGNORED - 17)))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (LOCKED - 100)) | (1L << (MAXVALUE - 100)) | (1L << (MINVALUE - 100)) | (1L << (NUMBER - 100)) | (1L << (OPTIONAL - 100)) | (1L << (ORDER - 100)) | (1L << (SKIP_ - 100)) | (1L << (STACKED - 100)))) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & ((1L << (SERIAL - 233)) | (1L << (AVG - 233)) | (1L << (BIT_AND - 233)) | (1L << (BIT_OR - 233)) | (1L << (BIT_XOR - 233)) | (1L << (COUNT - 233)) | (1L << (GROUP_CONCAT - 233)) | (1L << (MAX - 233)) | (1L << (MIN - 233)) | (1L << (STD - 233)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (STDDEV - 297)) | (1L << (STDDEV_POP - 297)) | (1L << (STDDEV_SAMP - 297)) | (1L << (SUM - 297)) | (1L << (VAR_POP - 297)) | (1L << (VAR_SAMP - 297)) | (1L << (VARIANCE - 297)) | (1L << (ACCOUNT - 297)) | (1L << (ACTION - 297)) | (1L << (AFTER - 297)) | (1L << (AGGREGATE - 297)) | (1L << (ALGORITHM - 297)) | (1L << (ANY - 297)) | (1L << (AT - 297)) | (1L << (AUTHORS - 297)) | (1L << (AUTOCOMMIT - 297)) | (1L << (AUTOEXTEND_SIZE - 297)) | (1L << (AUTO_INCREMENT - 297)) | (1L << (AVG_ROW_LENGTH - 297)) | (1L << (BEGIN - 297)) | (1L << (BINLOG - 297)) | (1L << (BIT - 297)) | (1L << (BLOCK - 297)) | (1L << (BOOL - 297)) | (1L << (BOOLEAN - 297)) | (1L << (BTREE - 297)) | (1L << (CACHE - 297)) | (1L << (CASCADED - 297)) | (1L << (CHAIN - 297)) | (1L << (CHANGED - 297)) | (1L << (CHANNEL - 297)) | (1L << (CHECKSUM - 297)) | (1L << (PAGE_CHECKSUM - 297)) | (1L << (CIPHER - 297)) | (1L << (CLASS_ORIGIN - 297)) | (1L << (CLIENT - 297)) | (1L << (CLOSE - 297)) | (1L << (CLUSTERING - 297)) | (1L << (COALESCE - 297)) | (1L << (CODE - 297)) | (1L << (COLUMNS - 297)) | (1L << (COLUMN_FORMAT - 297)) | (1L << (COLUMN_NAME - 297)) | (1L << (COMMENT - 297)) | (1L << (COMMIT - 297)))) != 0) || ((((_la - 361)) & ~0x3f) == 0 && ((1L << (_la - 361)) & ((1L << (COMPACT - 361)) | (1L << (COMPLETION - 361)) | (1L << (COMPRESSED - 361)) | (1L << (COMPRESSION - 361)) | (1L << (CONCURRENT - 361)) | (1L << (CONNECT - 361)) | (1L << (CONNECTION - 361)) | (1L << (CONSISTENT - 361)) | (1L << (CONSTRAINT_CATALOG - 361)) | (1L << (CONSTRAINT_SCHEMA - 361)) | (1L << (CONSTRAINT_NAME - 361)) | (1L << (CONTAINS - 361)) | (1L << (CONTEXT - 361)) | (1L << (CONTRIBUTORS - 361)) | (1L << (COPY - 361)) | (1L << (CPU - 361)) | (1L << (CYCLE - 361)) | (1L << (CURSOR_NAME - 361)) | (1L << (DATA - 361)) | (1L << (DATAFILE - 361)) | (1L << (DEALLOCATE - 361)) | (1L << (DEFAULT_AUTH - 361)) | (1L << (DEFINER - 361)) | (1L << (DELAY_KEY_WRITE - 361)) | (1L << (DES_KEY_FILE - 361)) | (1L << (DIRECTORY - 361)) | (1L << (DISABLE - 361)) | (1L << (DISCARD - 361)) | (1L << (DISK - 361)) | (1L << (DO - 361)) | (1L << (DUMPFILE - 361)) | (1L << (DUPLICATE - 361)) | (1L << (DYNAMIC - 361)) | (1L << (ENABLE - 361)) | (1L << (ENCRYPTION - 361)) | (1L << (END - 361)) | (1L << (ENDS - 361)) | (1L << (ENGINE - 361)) | (1L << (ENGINES - 361)) | (1L << (ERROR - 361)) | (1L << (ERRORS - 361)) | (1L << (ESCAPE - 361)) | (1L << (EVEN - 361)) | (1L << (EVENT - 361)) | (1L << (EVENTS - 361)) | (1L << (EVERY - 361)) | (1L << (EXCHANGE - 361)) | (1L << (EXCLUSIVE - 361)) | (1L << (EXPIRE - 361)) | (1L << (EXPORT - 361)) | (1L << (EXTENDED - 361)) | (1L << (EXTENT_SIZE - 361)) | (1L << (FAST - 361)) | (1L << (FAULTS - 361)) | (1L << (FIELDS - 361)) | (1L << (FILE_BLOCK_SIZE - 361)) | (1L << (FILTER - 361)) | (1L << (FIRST - 361)) | (1L << (FIXED - 361)) | (1L << (FLUSH - 361)) | (1L << (FOLLOWS - 361)) | (1L << (FOUND - 361)) | (1L << (FULL - 361)))) != 0) || ((((_la - 425)) & ~0x3f) == 0 && ((1L << (_la - 425)) & ((1L << (FUNCTION - 425)) | (1L << (GENERAL - 425)) | (1L << (GLOBAL - 425)) | (1L << (GRANTS - 425)) | (1L << (GROUP_REPLICATION - 425)) | (1L << (HANDLER - 425)) | (1L << (HASH - 425)) | (1L << (HELP - 425)) | (1L << (HOST - 425)) | (1L << (HOSTS - 425)) | (1L << (IDENTIFIED - 425)) | (1L << (IGNORE_SERVER_IDS - 425)) | (1L << (IMPORT - 425)) | (1L << (INCREMENT - 425)) | (1L << (INDEXES - 425)) | (1L << (INITIAL_SIZE - 425)) | (1L << (INPLACE - 425)) | (1L << (INSERT_METHOD - 425)) | (1L << (INSTALL - 425)) | (1L << (INSTANCE - 425)) | (1L << (INSTANT - 425)) | (1L << (INVOKER - 425)) | (1L << (IO - 425)) | (1L << (IO_THREAD - 425)) | (1L << (IPC - 425)) | (1L << (ISOLATION - 425)) | (1L << (ISSUER - 425)) | (1L << (JSON - 425)) | (1L << (KEY_BLOCK_SIZE - 425)) | (1L << (LANGUAGE - 425)) | (1L << (LAST - 425)) | (1L << (LEAVES - 425)) | (1L << (LESS - 425)) | (1L << (LEVEL - 425)) | (1L << (LIST - 425)) | (1L << (LOCAL - 425)) | (1L << (LOGFILE - 425)) | (1L << (LOGS - 425)) | (1L << (MASTER - 425)) | (1L << (MASTER_AUTO_POSITION - 425)) | (1L << (MASTER_CONNECT_RETRY - 425)) | (1L << (MASTER_DELAY - 425)) | (1L << (MASTER_HEARTBEAT_PERIOD - 425)) | (1L << (MASTER_HOST - 425)) | (1L << (MASTER_LOG_FILE - 425)) | (1L << (MASTER_LOG_POS - 425)) | (1L << (MASTER_PASSWORD - 425)) | (1L << (MASTER_PORT - 425)) | (1L << (MASTER_RETRY_COUNT - 425)) | (1L << (MASTER_SSL - 425)) | (1L << (MASTER_SSL_CA - 425)) | (1L << (MASTER_SSL_CAPATH - 425)) | (1L << (MASTER_SSL_CERT - 425)) | (1L << (MASTER_SSL_CIPHER - 425)) | (1L << (MASTER_SSL_CRL - 425)) | (1L << (MASTER_SSL_CRLPATH - 425)) | (1L << (MASTER_SSL_KEY - 425)) | (1L << (MASTER_TLS_VERSION - 425)) | (1L << (MASTER_USER - 425)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 425)) | (1L << (MAX_QUERIES_PER_HOUR - 425)) | (1L << (MAX_ROWS - 425)) | (1L << (MAX_SIZE - 425)))) != 0) || ((((_la - 489)) & ~0x3f) == 0 && ((1L << (_la - 489)) & ((1L << (MAX_UPDATES_PER_HOUR - 489)) | (1L << (MAX_USER_CONNECTIONS - 489)) | (1L << (MEDIUM - 489)) | (1L << (MEMBER - 489)) | (1L << (MERGE - 489)) | (1L << (MESSAGE_TEXT - 489)) | (1L << (MID - 489)) | (1L << (MIGRATE - 489)) | (1L << (MIN_ROWS - 489)) | (1L << (MODE - 489)) | (1L << (MODIFY - 489)) | (1L << (MUTEX - 489)) | (1L << (MYSQL - 489)) | (1L << (MYSQL_ERRNO - 489)) | (1L << (NAME - 489)) | (1L << (NAMES - 489)) | (1L << (NCHAR - 489)) | (1L << (NEVER - 489)) | (1L << (NEXT - 489)) | (1L << (NO - 489)) | (1L << (NOCACHE - 489)) | (1L << (NOCOPY - 489)) | (1L << (NOCYCLE - 489)) | (1L << (NOMAXVALUE - 489)) | (1L << (NOMINVALUE - 489)) | (1L << (NOWAIT - 489)) | (1L << (NODEGROUP - 489)) | (1L << (NONE - 489)) | (1L << (ODBC - 489)) | (1L << (OFFLINE - 489)) | (1L << (OFFSET - 489)) | (1L << (OF - 489)) | (1L << (OJ - 489)) | (1L << (OLD_PASSWORD - 489)) | (1L << (ONE - 489)) | (1L << (ONLINE - 489)) | (1L << (ONLY - 489)) | (1L << (OPEN - 489)) | (1L << (OPTIMIZER_COSTS - 489)) | (1L << (OPTIONS - 489)) | (1L << (OWNER - 489)) | (1L << (PACK_KEYS - 489)) | (1L << (PAGE - 489)) | (1L << (PARSER - 489)) | (1L << (PARTIAL - 489)) | (1L << (PARTITIONING - 489)) | (1L << (PARTITIONS - 489)) | (1L << (PASSWORD - 489)) | (1L << (PHASE - 489)) | (1L << (PLUGIN - 489)) | (1L << (PLUGIN_DIR - 489)) | (1L << (PLUGINS - 489)) | (1L << (PORT - 489)) | (1L << (PRECEDES - 489)) | (1L << (PREPARE - 489)) | (1L << (PRESERVE - 489)) | (1L << (PREV - 489)) | (1L << (PROCESSLIST - 489)) | (1L << (PROFILE - 489)) | (1L << (PROFILES - 489)) | (1L << (PROXY - 489)) | (1L << (QUERY - 489)) | (1L << (QUICK - 489)))) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & ((1L << (REBUILD - 553)) | (1L << (RECOVER - 553)) | (1L << (RECURSIVE - 553)) | (1L << (REDO_BUFFER_SIZE - 553)) | (1L << (REDUNDANT - 553)) | (1L << (RELAY - 553)) | (1L << (RELAY_LOG_FILE - 553)) | (1L << (RELAY_LOG_POS - 553)) | (1L << (RELAYLOG - 553)) | (1L << (REMOVE - 553)) | (1L << (REORGANIZE - 553)) | (1L << (REPAIR - 553)) | (1L << (REPLICATE_DO_DB - 553)) | (1L << (REPLICATE_DO_TABLE - 553)) | (1L << (REPLICATE_IGNORE_DB - 553)) | (1L << (REPLICATE_IGNORE_TABLE - 553)) | (1L << (REPLICATE_REWRITE_DB - 553)) | (1L << (REPLICATE_WILD_DO_TABLE - 553)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 553)) | (1L << (REPLICATION - 553)) | (1L << (RESET - 553)) | (1L << (RESTART - 553)) | (1L << (RESUME - 553)) | (1L << (RETURNED_SQLSTATE - 553)) | (1L << (RETURNS - 553)) | (1L << (ROLE - 553)) | (1L << (ROLLBACK - 553)) | (1L << (ROLLUP - 553)) | (1L << (ROTATE - 553)) | (1L << (ROW - 553)) | (1L << (ROWS - 553)) | (1L << (ROW_FORMAT - 553)) | (1L << (RTREE - 553)) | (1L << (SAVEPOINT - 553)) | (1L << (SCHEDULE - 553)) | (1L << (SECURITY - 553)) | (1L << (SEQUENCE - 553)) | (1L << (SERVER - 553)) | (1L << (SESSION - 553)) | (1L << (SHARE - 553)) | (1L << (SHARED - 553)) | (1L << (SIGNED - 553)) | (1L << (SIMPLE - 553)) | (1L << (SLAVE - 553)) | (1L << (SLOW - 553)) | (1L << (SNAPSHOT - 553)) | (1L << (SOCKET - 553)) | (1L << (SOME - 553)) | (1L << (SONAME - 553)) | (1L << (SOUNDS - 553)) | (1L << (SOURCE - 553)) | (1L << (SQL_AFTER_GTIDS - 553)) | (1L << (SQL_AFTER_MTS_GAPS - 553)) | (1L << (SQL_BEFORE_GTIDS - 553)) | (1L << (SQL_BUFFER_RESULT - 553)) | (1L << (SQL_CACHE - 553)) | (1L << (SQL_NO_CACHE - 553)) | (1L << (SQL_THREAD - 553)) | (1L << (START - 553)) | (1L << (STARTS - 553)) | (1L << (STATS_AUTO_RECALC - 553)) | (1L << (STATS_PERSISTENT - 553)) | (1L << (STATS_SAMPLE_PAGES - 553)))) != 0) || ((((_la - 617)) & ~0x3f) == 0 && ((1L << (_la - 617)) & ((1L << (STATUS - 617)) | (1L << (STOP - 617)) | (1L << (STORAGE - 617)) | (1L << (STRING - 617)) | (1L << (SUBCLASS_ORIGIN - 617)) | (1L << (SUBJECT - 617)) | (1L << (SUBPARTITION - 617)) | (1L << (SUBPARTITIONS - 617)) | (1L << (SUSPEND - 617)) | (1L << (SWAPS - 617)) | (1L << (SWITCHES - 617)) | (1L << (TABLE_NAME - 617)) | (1L << (TABLESPACE - 617)) | (1L << (TABLE_TYPE - 617)) | (1L << (TEMPORARY - 617)) | (1L << (TEMPTABLE - 617)) | (1L << (THAN - 617)) | (1L << (TRADITIONAL - 617)) | (1L << (TRANSACTION - 617)) | (1L << (TRANSACTIONAL - 617)) | (1L << (TRIGGERS - 617)) | (1L << (TRUNCATE - 617)) | (1L << (UNDEFINED - 617)) | (1L << (UNDOFILE - 617)) | (1L << (UNDO_BUFFER_SIZE - 617)) | (1L << (UNINSTALL - 617)) | (1L << (UNKNOWN - 617)) | (1L << (UNTIL - 617)) | (1L << (UPGRADE - 617)) | (1L << (USER - 617)) | (1L << (USE_FRM - 617)) | (1L << (USER_RESOURCES - 617)) | (1L << (VALIDATION - 617)) | (1L << (VALUE - 617)) | (1L << (VARIABLES - 617)) | (1L << (VIEW - 617)) | (1L << (WAIT - 617)) | (1L << (WARNINGS - 617)) | (1L << (WITHOUT - 617)) | (1L << (WORK - 617)) | (1L << (WRAPPER - 617)) | (1L << (X509 - 617)) | (1L << (XA - 617)) | (1L << (XML - 617)) | (1L << (EUR - 617)) | (1L << (USA - 617)) | (1L << (JIS - 617)) | (1L << (ISO - 617)) | (1L << (INTERNAL - 617)))) != 0) || ((((_la - 690)) & ~0x3f) == 0 && ((1L << (_la - 690)) & ((1L << (AUDIT_ADMIN - 690)) | (1L << (BACKUP_ADMIN - 690)) | (1L << (BINLOG_ADMIN - 690)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 690)) | (1L << (CLONE_ADMIN - 690)) | (1L << (CONNECTION_ADMIN - 690)) | (1L << (ENCRYPTION_KEY_ADMIN - 690)) | (1L << (FIREWALL_ADMIN - 690)) | (1L << (FIREWALL_USER - 690)) | (1L << (ADMIN - 690)) | (1L << (GROUP_REPLICATION_ADMIN - 690)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 690)) | (1L << (INVOKE - 690)) | (1L << (LAMBDA - 690)) | (1L << (NDB_STORED_USER - 690)) | (1L << (PASSWORDLESS_USER_ADMIN - 690)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 690)) | (1L << (REPLICATION_APPLIER - 690)) | (1L << (REPLICATION_SLAVE_ADMIN - 690)) | (1L << (RESOURCE_GROUP_ADMIN - 690)) | (1L << (RESOURCE_GROUP_USER - 690)) | (1L << (ROLE_ADMIN - 690)) | (1L << (S3 - 690)) | (1L << (SESSION_VARIABLES_ADMIN - 690)) | (1L << (SET_USER_ID - 690)) | (1L << (SHOW_ROUTINE - 690)) | (1L << (SYSTEM_VARIABLES_ADMIN - 690)) | (1L << (TABLE_ENCRYPTION_ADMIN - 690)) | (1L << (VERSION_TOKEN_ADMIN - 690)) | (1L << (XA_RECOVER_ADMIN - 690)))) != 0) || _la==MEMORY || _la==CATALOG_NAME || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE || _la==SCHEMA_NAME || ((((_la - 1086)) & ~0x3f) == 0 && ((1L << (_la - 1086)) & ((1L << (VIA - 1086)) | (1L << (LASTVAL - 1086)) | (1L << (NEXTVAL - 1086)) | (1L << (SETVAL - 1086)) | (1L << (PREVIOUS - 1086)) | (1L << (PERSISTENT - 1086)) | (1L << (BINLOG_MONITOR - 1086)) | (1L << (BINLOG_REPLAY - 1086)) | (1L << (FEDERATED_ADMIN - 1086)) | (1L << (READ_ONLY_ADMIN - 1086)) | (1L << (REPLICA - 1086)) | (1L << (REPLICATION_MASTER_ADMIN - 1086)))) != 0) || _la==ENCRYPTED || _la==ENCRYPTION_KEY_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameBaseContext extends ParserRuleContext {
		public TerminalNode ABS() { return getToken(MySqlParser.ABS, 0); }
		public TerminalNode ACOS() { return getToken(MySqlParser.ACOS, 0); }
		public TerminalNode ADDDATE() { return getToken(MySqlParser.ADDDATE, 0); }
		public TerminalNode ADDTIME() { return getToken(MySqlParser.ADDTIME, 0); }
		public TerminalNode AES_DECRYPT() { return getToken(MySqlParser.AES_DECRYPT, 0); }
		public TerminalNode AES_ENCRYPT() { return getToken(MySqlParser.AES_ENCRYPT, 0); }
		public TerminalNode AREA() { return getToken(MySqlParser.AREA, 0); }
		public TerminalNode ASBINARY() { return getToken(MySqlParser.ASBINARY, 0); }
		public TerminalNode ASIN() { return getToken(MySqlParser.ASIN, 0); }
		public TerminalNode ASTEXT() { return getToken(MySqlParser.ASTEXT, 0); }
		public TerminalNode ASWKB() { return getToken(MySqlParser.ASWKB, 0); }
		public TerminalNode ASWKT() { return getToken(MySqlParser.ASWKT, 0); }
		public TerminalNode ASYMMETRIC_DECRYPT() { return getToken(MySqlParser.ASYMMETRIC_DECRYPT, 0); }
		public TerminalNode ASYMMETRIC_DERIVE() { return getToken(MySqlParser.ASYMMETRIC_DERIVE, 0); }
		public TerminalNode ASYMMETRIC_ENCRYPT() { return getToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0); }
		public TerminalNode ASYMMETRIC_SIGN() { return getToken(MySqlParser.ASYMMETRIC_SIGN, 0); }
		public TerminalNode ASYMMETRIC_VERIFY() { return getToken(MySqlParser.ASYMMETRIC_VERIFY, 0); }
		public TerminalNode ATAN() { return getToken(MySqlParser.ATAN, 0); }
		public TerminalNode ATAN2() { return getToken(MySqlParser.ATAN2, 0); }
		public TerminalNode BENCHMARK() { return getToken(MySqlParser.BENCHMARK, 0); }
		public TerminalNode BIN() { return getToken(MySqlParser.BIN, 0); }
		public TerminalNode BIT_COUNT() { return getToken(MySqlParser.BIT_COUNT, 0); }
		public TerminalNode BIT_LENGTH() { return getToken(MySqlParser.BIT_LENGTH, 0); }
		public TerminalNode BUFFER() { return getToken(MySqlParser.BUFFER, 0); }
		public TerminalNode CEIL() { return getToken(MySqlParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(MySqlParser.CEILING, 0); }
		public TerminalNode CENTROID() { return getToken(MySqlParser.CENTROID, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(MySqlParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(MySqlParser.CHAR_LENGTH, 0); }
		public TerminalNode COERCIBILITY() { return getToken(MySqlParser.COERCIBILITY, 0); }
		public TerminalNode COLLATION() { return getToken(MySqlParser.COLLATION, 0); }
		public TerminalNode COMPRESS() { return getToken(MySqlParser.COMPRESS, 0); }
		public TerminalNode CONCAT() { return getToken(MySqlParser.CONCAT, 0); }
		public TerminalNode CONCAT_WS() { return getToken(MySqlParser.CONCAT_WS, 0); }
		public TerminalNode CONNECTION_ID() { return getToken(MySqlParser.CONNECTION_ID, 0); }
		public TerminalNode CONV() { return getToken(MySqlParser.CONV, 0); }
		public TerminalNode CONVERT_TZ() { return getToken(MySqlParser.CONVERT_TZ, 0); }
		public TerminalNode COS() { return getToken(MySqlParser.COS, 0); }
		public TerminalNode COT() { return getToken(MySqlParser.COT, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode CRC32() { return getToken(MySqlParser.CRC32, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return getToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return getToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
		public TerminalNode CREATE_DH_PARAMETERS() { return getToken(MySqlParser.CREATE_DH_PARAMETERS, 0); }
		public TerminalNode CREATE_DIGEST() { return getToken(MySqlParser.CREATE_DIGEST, 0); }
		public TerminalNode CROSSES() { return getToken(MySqlParser.CROSSES, 0); }
		public TerminalNode CUME_DIST() { return getToken(MySqlParser.CUME_DIST, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode DATEDIFF() { return getToken(MySqlParser.DATEDIFF, 0); }
		public TerminalNode DATE_FORMAT() { return getToken(MySqlParser.DATE_FORMAT, 0); }
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode DAYNAME() { return getToken(MySqlParser.DAYNAME, 0); }
		public TerminalNode DAYOFMONTH() { return getToken(MySqlParser.DAYOFMONTH, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(MySqlParser.DAYOFWEEK, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(MySqlParser.DAYOFYEAR, 0); }
		public TerminalNode DECODE() { return getToken(MySqlParser.DECODE, 0); }
		public TerminalNode DEGREES() { return getToken(MySqlParser.DEGREES, 0); }
		public TerminalNode DENSE_RANK() { return getToken(MySqlParser.DENSE_RANK, 0); }
		public TerminalNode DES_DECRYPT() { return getToken(MySqlParser.DES_DECRYPT, 0); }
		public TerminalNode DES_ENCRYPT() { return getToken(MySqlParser.DES_ENCRYPT, 0); }
		public TerminalNode DIMENSION() { return getToken(MySqlParser.DIMENSION, 0); }
		public TerminalNode DISJOINT() { return getToken(MySqlParser.DISJOINT, 0); }
		public TerminalNode ELT() { return getToken(MySqlParser.ELT, 0); }
		public TerminalNode ENCODE() { return getToken(MySqlParser.ENCODE, 0); }
		public TerminalNode ENCRYPT() { return getToken(MySqlParser.ENCRYPT, 0); }
		public TerminalNode ENDPOINT() { return getToken(MySqlParser.ENDPOINT, 0); }
		public TerminalNode ENVELOPE() { return getToken(MySqlParser.ENVELOPE, 0); }
		public TerminalNode EQUALS() { return getToken(MySqlParser.EQUALS, 0); }
		public TerminalNode EXP() { return getToken(MySqlParser.EXP, 0); }
		public TerminalNode EXPORT_SET() { return getToken(MySqlParser.EXPORT_SET, 0); }
		public TerminalNode EXTERIORRING() { return getToken(MySqlParser.EXTERIORRING, 0); }
		public TerminalNode EXTRACTVALUE() { return getToken(MySqlParser.EXTRACTVALUE, 0); }
		public TerminalNode FIELD() { return getToken(MySqlParser.FIELD, 0); }
		public TerminalNode FIND_IN_SET() { return getToken(MySqlParser.FIND_IN_SET, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(MySqlParser.FIRST_VALUE, 0); }
		public TerminalNode FLOOR() { return getToken(MySqlParser.FLOOR, 0); }
		public TerminalNode FORMAT() { return getToken(MySqlParser.FORMAT, 0); }
		public TerminalNode FOUND_ROWS() { return getToken(MySqlParser.FOUND_ROWS, 0); }
		public TerminalNode FROM_BASE64() { return getToken(MySqlParser.FROM_BASE64, 0); }
		public TerminalNode FROM_DAYS() { return getToken(MySqlParser.FROM_DAYS, 0); }
		public TerminalNode FROM_UNIXTIME() { return getToken(MySqlParser.FROM_UNIXTIME, 0); }
		public TerminalNode GEOMCOLLFROMTEXT() { return getToken(MySqlParser.GEOMCOLLFROMTEXT, 0); }
		public TerminalNode GEOMCOLLFROMWKB() { return getToken(MySqlParser.GEOMCOLLFROMWKB, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return getToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMWKB() { return getToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode GEOMETRYFROMTEXT() { return getToken(MySqlParser.GEOMETRYFROMTEXT, 0); }
		public TerminalNode GEOMETRYFROMWKB() { return getToken(MySqlParser.GEOMETRYFROMWKB, 0); }
		public TerminalNode GEOMETRYN() { return getToken(MySqlParser.GEOMETRYN, 0); }
		public TerminalNode GEOMETRYTYPE() { return getToken(MySqlParser.GEOMETRYTYPE, 0); }
		public TerminalNode GEOMFROMTEXT() { return getToken(MySqlParser.GEOMFROMTEXT, 0); }
		public TerminalNode GEOMFROMWKB() { return getToken(MySqlParser.GEOMFROMWKB, 0); }
		public TerminalNode GET_FORMAT() { return getToken(MySqlParser.GET_FORMAT, 0); }
		public TerminalNode GET_LOCK() { return getToken(MySqlParser.GET_LOCK, 0); }
		public TerminalNode GLENGTH() { return getToken(MySqlParser.GLENGTH, 0); }
		public TerminalNode GREATEST() { return getToken(MySqlParser.GREATEST, 0); }
		public TerminalNode GTID_SUBSET() { return getToken(MySqlParser.GTID_SUBSET, 0); }
		public TerminalNode GTID_SUBTRACT() { return getToken(MySqlParser.GTID_SUBTRACT, 0); }
		public TerminalNode HEX() { return getToken(MySqlParser.HEX, 0); }
		public TerminalNode HOUR() { return getToken(MySqlParser.HOUR, 0); }
		public TerminalNode IFNULL() { return getToken(MySqlParser.IFNULL, 0); }
		public TerminalNode INET6_ATON() { return getToken(MySqlParser.INET6_ATON, 0); }
		public TerminalNode INET6_NTOA() { return getToken(MySqlParser.INET6_NTOA, 0); }
		public TerminalNode INET_ATON() { return getToken(MySqlParser.INET_ATON, 0); }
		public TerminalNode INET_NTOA() { return getToken(MySqlParser.INET_NTOA, 0); }
		public TerminalNode INSTR() { return getToken(MySqlParser.INSTR, 0); }
		public TerminalNode INTERIORRINGN() { return getToken(MySqlParser.INTERIORRINGN, 0); }
		public TerminalNode INTERSECTS() { return getToken(MySqlParser.INTERSECTS, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public TerminalNode ISCLOSED() { return getToken(MySqlParser.ISCLOSED, 0); }
		public TerminalNode ISEMPTY() { return getToken(MySqlParser.ISEMPTY, 0); }
		public TerminalNode ISNULL() { return getToken(MySqlParser.ISNULL, 0); }
		public TerminalNode ISSIMPLE() { return getToken(MySqlParser.ISSIMPLE, 0); }
		public TerminalNode IS_FREE_LOCK() { return getToken(MySqlParser.IS_FREE_LOCK, 0); }
		public TerminalNode IS_IPV4() { return getToken(MySqlParser.IS_IPV4, 0); }
		public TerminalNode IS_IPV4_COMPAT() { return getToken(MySqlParser.IS_IPV4_COMPAT, 0); }
		public TerminalNode IS_IPV4_MAPPED() { return getToken(MySqlParser.IS_IPV4_MAPPED, 0); }
		public TerminalNode IS_IPV6() { return getToken(MySqlParser.IS_IPV6, 0); }
		public TerminalNode IS_USED_LOCK() { return getToken(MySqlParser.IS_USED_LOCK, 0); }
		public TerminalNode LAG() { return getToken(MySqlParser.LAG, 0); }
		public TerminalNode LAST_INSERT_ID() { return getToken(MySqlParser.LAST_INSERT_ID, 0); }
		public TerminalNode LAST_VALUE() { return getToken(MySqlParser.LAST_VALUE, 0); }
		public TerminalNode LCASE() { return getToken(MySqlParser.LCASE, 0); }
		public TerminalNode LEAD() { return getToken(MySqlParser.LEAD, 0); }
		public TerminalNode LEAST() { return getToken(MySqlParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(MySqlParser.LENGTH, 0); }
		public TerminalNode LINEFROMTEXT() { return getToken(MySqlParser.LINEFROMTEXT, 0); }
		public TerminalNode LINEFROMWKB() { return getToken(MySqlParser.LINEFROMWKB, 0); }
		public TerminalNode LINESTRING() { return getToken(MySqlParser.LINESTRING, 0); }
		public TerminalNode LINESTRINGFROMTEXT() { return getToken(MySqlParser.LINESTRINGFROMTEXT, 0); }
		public TerminalNode LINESTRINGFROMWKB() { return getToken(MySqlParser.LINESTRINGFROMWKB, 0); }
		public TerminalNode LN() { return getToken(MySqlParser.LN, 0); }
		public TerminalNode LOAD_FILE() { return getToken(MySqlParser.LOAD_FILE, 0); }
		public TerminalNode LOCATE() { return getToken(MySqlParser.LOCATE, 0); }
		public TerminalNode LOG() { return getToken(MySqlParser.LOG, 0); }
		public TerminalNode LOG10() { return getToken(MySqlParser.LOG10, 0); }
		public TerminalNode LOG2() { return getToken(MySqlParser.LOG2, 0); }
		public TerminalNode LOWER() { return getToken(MySqlParser.LOWER, 0); }
		public TerminalNode LPAD() { return getToken(MySqlParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(MySqlParser.LTRIM, 0); }
		public TerminalNode MAKEDATE() { return getToken(MySqlParser.MAKEDATE, 0); }
		public TerminalNode MAKETIME() { return getToken(MySqlParser.MAKETIME, 0); }
		public TerminalNode MAKE_SET() { return getToken(MySqlParser.MAKE_SET, 0); }
		public TerminalNode MASTER_POS_WAIT() { return getToken(MySqlParser.MASTER_POS_WAIT, 0); }
		public TerminalNode MBRCONTAINS() { return getToken(MySqlParser.MBRCONTAINS, 0); }
		public TerminalNode MBRDISJOINT() { return getToken(MySqlParser.MBRDISJOINT, 0); }
		public TerminalNode MBREQUAL() { return getToken(MySqlParser.MBREQUAL, 0); }
		public TerminalNode MBRINTERSECTS() { return getToken(MySqlParser.MBRINTERSECTS, 0); }
		public TerminalNode MBROVERLAPS() { return getToken(MySqlParser.MBROVERLAPS, 0); }
		public TerminalNode MBRTOUCHES() { return getToken(MySqlParser.MBRTOUCHES, 0); }
		public TerminalNode MBRWITHIN() { return getToken(MySqlParser.MBRWITHIN, 0); }
		public TerminalNode MD5() { return getToken(MySqlParser.MD5, 0); }
		public TerminalNode MICROSECOND() { return getToken(MySqlParser.MICROSECOND, 0); }
		public TerminalNode MINUTE() { return getToken(MySqlParser.MINUTE, 0); }
		public TerminalNode MLINEFROMTEXT() { return getToken(MySqlParser.MLINEFROMTEXT, 0); }
		public TerminalNode MLINEFROMWKB() { return getToken(MySqlParser.MLINEFROMWKB, 0); }
		public TerminalNode MOD() { return getToken(MySqlParser.MOD, 0); }
		public TerminalNode MONTH() { return getToken(MySqlParser.MONTH, 0); }
		public TerminalNode MONTHNAME() { return getToken(MySqlParser.MONTHNAME, 0); }
		public TerminalNode MPOINTFROMTEXT() { return getToken(MySqlParser.MPOINTFROMTEXT, 0); }
		public TerminalNode MPOINTFROMWKB() { return getToken(MySqlParser.MPOINTFROMWKB, 0); }
		public TerminalNode MPOLYFROMTEXT() { return getToken(MySqlParser.MPOLYFROMTEXT, 0); }
		public TerminalNode MPOLYFROMWKB() { return getToken(MySqlParser.MPOLYFROMWKB, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTILINESTRINGFROMTEXT() { return getToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0); }
		public TerminalNode MULTILINESTRINGFROMWKB() { return getToken(MySqlParser.MULTILINESTRINGFROMWKB, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOINTFROMTEXT() { return getToken(MySqlParser.MULTIPOINTFROMTEXT, 0); }
		public TerminalNode MULTIPOINTFROMWKB() { return getToken(MySqlParser.MULTIPOINTFROMWKB, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(MySqlParser.MULTIPOLYGON, 0); }
		public TerminalNode MULTIPOLYGONFROMTEXT() { return getToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0); }
		public TerminalNode MULTIPOLYGONFROMWKB() { return getToken(MySqlParser.MULTIPOLYGONFROMWKB, 0); }
		public TerminalNode NAME_CONST() { return getToken(MySqlParser.NAME_CONST, 0); }
		public TerminalNode NTH_VALUE() { return getToken(MySqlParser.NTH_VALUE, 0); }
		public TerminalNode NTILE() { return getToken(MySqlParser.NTILE, 0); }
		public TerminalNode NULLIF() { return getToken(MySqlParser.NULLIF, 0); }
		public TerminalNode NUMGEOMETRIES() { return getToken(MySqlParser.NUMGEOMETRIES, 0); }
		public TerminalNode NUMINTERIORRINGS() { return getToken(MySqlParser.NUMINTERIORRINGS, 0); }
		public TerminalNode NUMPOINTS() { return getToken(MySqlParser.NUMPOINTS, 0); }
		public TerminalNode OCT() { return getToken(MySqlParser.OCT, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(MySqlParser.OCTET_LENGTH, 0); }
		public TerminalNode ORD() { return getToken(MySqlParser.ORD, 0); }
		public TerminalNode OVERLAPS() { return getToken(MySqlParser.OVERLAPS, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(MySqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERIOD_ADD() { return getToken(MySqlParser.PERIOD_ADD, 0); }
		public TerminalNode PERIOD_DIFF() { return getToken(MySqlParser.PERIOD_DIFF, 0); }
		public TerminalNode PI() { return getToken(MySqlParser.PI, 0); }
		public TerminalNode POINT() { return getToken(MySqlParser.POINT, 0); }
		public TerminalNode POINTFROMTEXT() { return getToken(MySqlParser.POINTFROMTEXT, 0); }
		public TerminalNode POINTFROMWKB() { return getToken(MySqlParser.POINTFROMWKB, 0); }
		public TerminalNode POINTN() { return getToken(MySqlParser.POINTN, 0); }
		public TerminalNode POLYFROMTEXT() { return getToken(MySqlParser.POLYFROMTEXT, 0); }
		public TerminalNode POLYFROMWKB() { return getToken(MySqlParser.POLYFROMWKB, 0); }
		public TerminalNode POLYGON() { return getToken(MySqlParser.POLYGON, 0); }
		public TerminalNode POLYGONFROMTEXT() { return getToken(MySqlParser.POLYGONFROMTEXT, 0); }
		public TerminalNode POLYGONFROMWKB() { return getToken(MySqlParser.POLYGONFROMWKB, 0); }
		public TerminalNode POSITION() { return getToken(MySqlParser.POSITION, 0); }
		public TerminalNode POW() { return getToken(MySqlParser.POW, 0); }
		public TerminalNode POWER() { return getToken(MySqlParser.POWER, 0); }
		public TerminalNode QUARTER() { return getToken(MySqlParser.QUARTER, 0); }
		public TerminalNode QUOTE() { return getToken(MySqlParser.QUOTE, 0); }
		public TerminalNode RADIANS() { return getToken(MySqlParser.RADIANS, 0); }
		public TerminalNode RAND() { return getToken(MySqlParser.RAND, 0); }
		public TerminalNode RANK() { return getToken(MySqlParser.RANK, 0); }
		public TerminalNode RANDOM_BYTES() { return getToken(MySqlParser.RANDOM_BYTES, 0); }
		public TerminalNode RELEASE_LOCK() { return getToken(MySqlParser.RELEASE_LOCK, 0); }
		public TerminalNode REVERSE() { return getToken(MySqlParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode ROUND() { return getToken(MySqlParser.ROUND, 0); }
		public TerminalNode ROW_COUNT() { return getToken(MySqlParser.ROW_COUNT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(MySqlParser.ROW_NUMBER, 0); }
		public TerminalNode RPAD() { return getToken(MySqlParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(MySqlParser.RTRIM, 0); }
		public TerminalNode SECOND() { return getToken(MySqlParser.SECOND, 0); }
		public TerminalNode SEC_TO_TIME() { return getToken(MySqlParser.SEC_TO_TIME, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public TerminalNode SESSION_USER() { return getToken(MySqlParser.SESSION_USER, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SHA() { return getToken(MySqlParser.SHA, 0); }
		public TerminalNode SHA1() { return getToken(MySqlParser.SHA1, 0); }
		public TerminalNode SHA2() { return getToken(MySqlParser.SHA2, 0); }
		public TerminalNode SIGN() { return getToken(MySqlParser.SIGN, 0); }
		public TerminalNode SIN() { return getToken(MySqlParser.SIN, 0); }
		public TerminalNode SLEEP() { return getToken(MySqlParser.SLEEP, 0); }
		public TerminalNode SOUNDEX() { return getToken(MySqlParser.SOUNDEX, 0); }
		public TerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return getToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
		public TerminalNode SQRT() { return getToken(MySqlParser.SQRT, 0); }
		public TerminalNode SRID() { return getToken(MySqlParser.SRID, 0); }
		public TerminalNode STARTPOINT() { return getToken(MySqlParser.STARTPOINT, 0); }
		public TerminalNode STRCMP() { return getToken(MySqlParser.STRCMP, 0); }
		public TerminalNode STR_TO_DATE() { return getToken(MySqlParser.STR_TO_DATE, 0); }
		public TerminalNode ST_AREA() { return getToken(MySqlParser.ST_AREA, 0); }
		public TerminalNode ST_ASBINARY() { return getToken(MySqlParser.ST_ASBINARY, 0); }
		public TerminalNode ST_ASTEXT() { return getToken(MySqlParser.ST_ASTEXT, 0); }
		public TerminalNode ST_ASWKB() { return getToken(MySqlParser.ST_ASWKB, 0); }
		public TerminalNode ST_ASWKT() { return getToken(MySqlParser.ST_ASWKT, 0); }
		public TerminalNode ST_BUFFER() { return getToken(MySqlParser.ST_BUFFER, 0); }
		public TerminalNode ST_CENTROID() { return getToken(MySqlParser.ST_CENTROID, 0); }
		public TerminalNode ST_CONTAINS() { return getToken(MySqlParser.ST_CONTAINS, 0); }
		public TerminalNode ST_CROSSES() { return getToken(MySqlParser.ST_CROSSES, 0); }
		public TerminalNode ST_DIFFERENCE() { return getToken(MySqlParser.ST_DIFFERENCE, 0); }
		public TerminalNode ST_DIMENSION() { return getToken(MySqlParser.ST_DIMENSION, 0); }
		public TerminalNode ST_DISJOINT() { return getToken(MySqlParser.ST_DISJOINT, 0); }
		public TerminalNode ST_DISTANCE() { return getToken(MySqlParser.ST_DISTANCE, 0); }
		public TerminalNode ST_ENDPOINT() { return getToken(MySqlParser.ST_ENDPOINT, 0); }
		public TerminalNode ST_ENVELOPE() { return getToken(MySqlParser.ST_ENVELOPE, 0); }
		public TerminalNode ST_EQUALS() { return getToken(MySqlParser.ST_EQUALS, 0); }
		public TerminalNode ST_EXTERIORRING() { return getToken(MySqlParser.ST_EXTERIORRING, 0); }
		public TerminalNode ST_GEOMCOLLFROMTEXT() { return getToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMTXT() { return getToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMWKB() { return getToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYFROMTEXT() { return getToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYFROMWKB() { return getToken(MySqlParser.ST_GEOMETRYFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYN() { return getToken(MySqlParser.ST_GEOMETRYN, 0); }
		public TerminalNode ST_GEOMETRYTYPE() { return getToken(MySqlParser.ST_GEOMETRYTYPE, 0); }
		public TerminalNode ST_GEOMFROMTEXT() { return getToken(MySqlParser.ST_GEOMFROMTEXT, 0); }
		public TerminalNode ST_GEOMFROMWKB() { return getToken(MySqlParser.ST_GEOMFROMWKB, 0); }
		public TerminalNode ST_INTERIORRINGN() { return getToken(MySqlParser.ST_INTERIORRINGN, 0); }
		public TerminalNode ST_INTERSECTION() { return getToken(MySqlParser.ST_INTERSECTION, 0); }
		public TerminalNode ST_INTERSECTS() { return getToken(MySqlParser.ST_INTERSECTS, 0); }
		public TerminalNode ST_ISCLOSED() { return getToken(MySqlParser.ST_ISCLOSED, 0); }
		public TerminalNode ST_ISEMPTY() { return getToken(MySqlParser.ST_ISEMPTY, 0); }
		public TerminalNode ST_ISSIMPLE() { return getToken(MySqlParser.ST_ISSIMPLE, 0); }
		public TerminalNode ST_LINEFROMTEXT() { return getToken(MySqlParser.ST_LINEFROMTEXT, 0); }
		public TerminalNode ST_LINEFROMWKB() { return getToken(MySqlParser.ST_LINEFROMWKB, 0); }
		public TerminalNode ST_LINESTRINGFROMTEXT() { return getToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0); }
		public TerminalNode ST_LINESTRINGFROMWKB() { return getToken(MySqlParser.ST_LINESTRINGFROMWKB, 0); }
		public TerminalNode ST_NUMGEOMETRIES() { return getToken(MySqlParser.ST_NUMGEOMETRIES, 0); }
		public TerminalNode ST_NUMINTERIORRING() { return getToken(MySqlParser.ST_NUMINTERIORRING, 0); }
		public TerminalNode ST_NUMINTERIORRINGS() { return getToken(MySqlParser.ST_NUMINTERIORRINGS, 0); }
		public TerminalNode ST_NUMPOINTS() { return getToken(MySqlParser.ST_NUMPOINTS, 0); }
		public TerminalNode ST_OVERLAPS() { return getToken(MySqlParser.ST_OVERLAPS, 0); }
		public TerminalNode ST_POINTFROMTEXT() { return getToken(MySqlParser.ST_POINTFROMTEXT, 0); }
		public TerminalNode ST_POINTFROMWKB() { return getToken(MySqlParser.ST_POINTFROMWKB, 0); }
		public TerminalNode ST_POINTN() { return getToken(MySqlParser.ST_POINTN, 0); }
		public TerminalNode ST_POLYFROMTEXT() { return getToken(MySqlParser.ST_POLYFROMTEXT, 0); }
		public TerminalNode ST_POLYFROMWKB() { return getToken(MySqlParser.ST_POLYFROMWKB, 0); }
		public TerminalNode ST_POLYGONFROMTEXT() { return getToken(MySqlParser.ST_POLYGONFROMTEXT, 0); }
		public TerminalNode ST_POLYGONFROMWKB() { return getToken(MySqlParser.ST_POLYGONFROMWKB, 0); }
		public TerminalNode ST_SRID() { return getToken(MySqlParser.ST_SRID, 0); }
		public TerminalNode ST_STARTPOINT() { return getToken(MySqlParser.ST_STARTPOINT, 0); }
		public TerminalNode ST_SYMDIFFERENCE() { return getToken(MySqlParser.ST_SYMDIFFERENCE, 0); }
		public TerminalNode ST_TOUCHES() { return getToken(MySqlParser.ST_TOUCHES, 0); }
		public TerminalNode ST_UNION() { return getToken(MySqlParser.ST_UNION, 0); }
		public TerminalNode ST_WITHIN() { return getToken(MySqlParser.ST_WITHIN, 0); }
		public TerminalNode ST_X() { return getToken(MySqlParser.ST_X, 0); }
		public TerminalNode ST_Y() { return getToken(MySqlParser.ST_Y, 0); }
		public TerminalNode SUBDATE() { return getToken(MySqlParser.SUBDATE, 0); }
		public TerminalNode SUBSTRING_INDEX() { return getToken(MySqlParser.SUBSTRING_INDEX, 0); }
		public TerminalNode SUBTIME() { return getToken(MySqlParser.SUBTIME, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(MySqlParser.SYSTEM_USER, 0); }
		public TerminalNode TAN() { return getToken(MySqlParser.TAN, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMEDIFF() { return getToken(MySqlParser.TIMEDIFF, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(MySqlParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(MySqlParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TIME_FORMAT() { return getToken(MySqlParser.TIME_FORMAT, 0); }
		public TerminalNode TIME_TO_SEC() { return getToken(MySqlParser.TIME_TO_SEC, 0); }
		public TerminalNode TOUCHES() { return getToken(MySqlParser.TOUCHES, 0); }
		public TerminalNode TO_BASE64() { return getToken(MySqlParser.TO_BASE64, 0); }
		public TerminalNode TO_DAYS() { return getToken(MySqlParser.TO_DAYS, 0); }
		public TerminalNode TO_SECONDS() { return getToken(MySqlParser.TO_SECONDS, 0); }
		public TerminalNode UCASE() { return getToken(MySqlParser.UCASE, 0); }
		public TerminalNode UNCOMPRESS() { return getToken(MySqlParser.UNCOMPRESS, 0); }
		public TerminalNode UNCOMPRESSED_LENGTH() { return getToken(MySqlParser.UNCOMPRESSED_LENGTH, 0); }
		public TerminalNode UNHEX() { return getToken(MySqlParser.UNHEX, 0); }
		public TerminalNode UNIX_TIMESTAMP() { return getToken(MySqlParser.UNIX_TIMESTAMP, 0); }
		public TerminalNode UPDATEXML() { return getToken(MySqlParser.UPDATEXML, 0); }
		public TerminalNode UPPER() { return getToken(MySqlParser.UPPER, 0); }
		public TerminalNode UUID() { return getToken(MySqlParser.UUID, 0); }
		public TerminalNode UUID_SHORT() { return getToken(MySqlParser.UUID_SHORT, 0); }
		public TerminalNode VALIDATE_PASSWORD_STRENGTH() { return getToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0); }
		public TerminalNode VERSION() { return getToken(MySqlParser.VERSION, 0); }
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return getToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
		public TerminalNode WEEK() { return getToken(MySqlParser.WEEK, 0); }
		public TerminalNode WEEKDAY() { return getToken(MySqlParser.WEEKDAY, 0); }
		public TerminalNode WEEKOFYEAR() { return getToken(MySqlParser.WEEKOFYEAR, 0); }
		public TerminalNode WEIGHT_STRING() { return getToken(MySqlParser.WEIGHT_STRING, 0); }
		public TerminalNode WITHIN() { return getToken(MySqlParser.WITHIN, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode YEARWEEK() { return getToken(MySqlParser.YEARWEEK, 0); }
		public TerminalNode Y_FUNCTION() { return getToken(MySqlParser.Y_FUNCTION, 0); }
		public TerminalNode X_FUNCTION() { return getToken(MySqlParser.X_FUNCTION, 0); }
		public TerminalNode JSON_ARRAY() { return getToken(MySqlParser.JSON_ARRAY, 0); }
		public TerminalNode JSON_OBJECT() { return getToken(MySqlParser.JSON_OBJECT, 0); }
		public TerminalNode JSON_QUOTE() { return getToken(MySqlParser.JSON_QUOTE, 0); }
		public TerminalNode JSON_CONTAINS() { return getToken(MySqlParser.JSON_CONTAINS, 0); }
		public TerminalNode JSON_CONTAINS_PATH() { return getToken(MySqlParser.JSON_CONTAINS_PATH, 0); }
		public TerminalNode JSON_EXTRACT() { return getToken(MySqlParser.JSON_EXTRACT, 0); }
		public TerminalNode JSON_KEYS() { return getToken(MySqlParser.JSON_KEYS, 0); }
		public TerminalNode JSON_OVERLAPS() { return getToken(MySqlParser.JSON_OVERLAPS, 0); }
		public TerminalNode JSON_SEARCH() { return getToken(MySqlParser.JSON_SEARCH, 0); }
		public TerminalNode JSON_VALUE() { return getToken(MySqlParser.JSON_VALUE, 0); }
		public TerminalNode JSON_ARRAY_APPEND() { return getToken(MySqlParser.JSON_ARRAY_APPEND, 0); }
		public TerminalNode JSON_ARRAY_INSERT() { return getToken(MySqlParser.JSON_ARRAY_INSERT, 0); }
		public TerminalNode JSON_INSERT() { return getToken(MySqlParser.JSON_INSERT, 0); }
		public TerminalNode JSON_MERGE() { return getToken(MySqlParser.JSON_MERGE, 0); }
		public TerminalNode JSON_MERGE_PATCH() { return getToken(MySqlParser.JSON_MERGE_PATCH, 0); }
		public TerminalNode JSON_MERGE_PRESERVE() { return getToken(MySqlParser.JSON_MERGE_PRESERVE, 0); }
		public TerminalNode JSON_REMOVE() { return getToken(MySqlParser.JSON_REMOVE, 0); }
		public TerminalNode JSON_REPLACE() { return getToken(MySqlParser.JSON_REPLACE, 0); }
		public TerminalNode JSON_SET() { return getToken(MySqlParser.JSON_SET, 0); }
		public TerminalNode JSON_UNQUOTE() { return getToken(MySqlParser.JSON_UNQUOTE, 0); }
		public TerminalNode JSON_DEPTH() { return getToken(MySqlParser.JSON_DEPTH, 0); }
		public TerminalNode JSON_LENGTH() { return getToken(MySqlParser.JSON_LENGTH, 0); }
		public TerminalNode JSON_TYPE() { return getToken(MySqlParser.JSON_TYPE, 0); }
		public TerminalNode JSON_VALID() { return getToken(MySqlParser.JSON_VALID, 0); }
		public TerminalNode JSON_TABLE() { return getToken(MySqlParser.JSON_TABLE, 0); }
		public TerminalNode JSON_SCHEMA_VALID() { return getToken(MySqlParser.JSON_SCHEMA_VALID, 0); }
		public TerminalNode JSON_SCHEMA_VALIDATION_REPORT() { return getToken(MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, 0); }
		public TerminalNode JSON_PRETTY() { return getToken(MySqlParser.JSON_PRETTY, 0); }
		public TerminalNode JSON_STORAGE_FREE() { return getToken(MySqlParser.JSON_STORAGE_FREE, 0); }
		public TerminalNode JSON_STORAGE_SIZE() { return getToken(MySqlParser.JSON_STORAGE_SIZE, 0); }
		public TerminalNode JSON_ARRAYAGG() { return getToken(MySqlParser.JSON_ARRAYAGG, 0); }
		public TerminalNode JSON_OBJECTAGG() { return getToken(MySqlParser.JSON_OBJECTAGG, 0); }
		public TerminalNode LASTVAL() { return getToken(MySqlParser.LASTVAL, 0); }
		public TerminalNode NEXTVAL() { return getToken(MySqlParser.NEXTVAL, 0); }
		public TerminalNode SETVAL() { return getToken(MySqlParser.SETVAL, 0); }
		public FunctionNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameBaseContext functionNameBase() throws RecognitionException {
		FunctionNameBaseContext _localctx = new FunctionNameBaseContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_functionNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7216);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (LEFT - 93)) | (1L << (RIGHT - 93)) | (1L << (SCHEMA - 93)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (YEAR - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (POSITION - 275)))) != 0) || _la==INVISIBLE || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (VISIBLE - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (GEOMETRYCOLLECTION - 783)) | (1L << (LINESTRING - 783)) | (1L << (MULTILINESTRING - 783)) | (1L << (MULTIPOINT - 783)) | (1L << (MULTIPOLYGON - 783)) | (1L << (POINT - 783)) | (1L << (POLYGON - 783)) | (1L << (ABS - 783)) | (1L << (ACOS - 783)) | (1L << (ADDDATE - 783)) | (1L << (ADDTIME - 783)) | (1L << (AES_DECRYPT - 783)) | (1L << (AES_ENCRYPT - 783)) | (1L << (AREA - 783)) | (1L << (ASBINARY - 783)) | (1L << (ASIN - 783)) | (1L << (ASTEXT - 783)) | (1L << (ASWKB - 783)) | (1L << (ASWKT - 783)) | (1L << (ASYMMETRIC_DECRYPT - 783)) | (1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (DES_DECRYPT - 847)) | (1L << (DES_ENCRYPT - 847)) | (1L << (DIMENSION - 847)) | (1L << (DISJOINT - 847)) | (1L << (ELT - 847)) | (1L << (ENCODE - 847)) | (1L << (ENCRYPT - 847)) | (1L << (ENDPOINT - 847)) | (1L << (ENVELOPE - 847)) | (1L << (EQUALS - 847)) | (1L << (EXP - 847)) | (1L << (EXPORT_SET - 847)) | (1L << (EXTERIORRING - 847)) | (1L << (EXTRACTVALUE - 847)) | (1L << (FIELD - 847)) | (1L << (FIND_IN_SET - 847)) | (1L << (FLOOR - 847)) | (1L << (FORMAT - 847)) | (1L << (FOUND_ROWS - 847)) | (1L << (FROM_BASE64 - 847)) | (1L << (FROM_DAYS - 847)) | (1L << (FROM_UNIXTIME - 847)) | (1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (LINESTRINGFROMTEXT - 911)) | (1L << (LINESTRINGFROMWKB - 911)) | (1L << (LN - 911)) | (1L << (LOAD_FILE - 911)) | (1L << (LOCATE - 911)) | (1L << (LOG - 911)) | (1L << (LOG10 - 911)) | (1L << (LOG2 - 911)) | (1L << (LOWER - 911)) | (1L << (LPAD - 911)) | (1L << (LTRIM - 911)) | (1L << (MAKEDATE - 911)) | (1L << (MAKETIME - 911)) | (1L << (MAKE_SET - 911)) | (1L << (MASTER_POS_WAIT - 911)) | (1L << (MBRCONTAINS - 911)) | (1L << (MBRDISJOINT - 911)) | (1L << (MBREQUAL - 911)) | (1L << (MBRINTERSECTS - 911)) | (1L << (MBROVERLAPS - 911)) | (1L << (MBRTOUCHES - 911)) | (1L << (MBRWITHIN - 911)) | (1L << (MD5 - 911)) | (1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ROW_COUNT - 975)) | (1L << (RPAD - 975)) | (1L << (RTRIM - 975)) | (1L << (SEC_TO_TIME - 975)) | (1L << (SESSION_USER - 975)) | (1L << (SHA - 975)) | (1L << (SHA1 - 975)) | (1L << (SHA2 - 975)) | (1L << (SIGN - 975)) | (1L << (SIN - 975)) | (1L << (SLEEP - 975)) | (1L << (SOUNDEX - 975)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 975)) | (1L << (SQRT - 975)) | (1L << (SRID - 975)) | (1L << (STARTPOINT - 975)) | (1L << (STRCMP - 975)) | (1L << (STR_TO_DATE - 975)) | (1L << (ST_AREA - 975)) | (1L << (ST_ASBINARY - 975)) | (1L << (ST_ASTEXT - 975)) | (1L << (ST_ASWKB - 975)) | (1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (ST_POINTFROMWKB - 1039)) | (1L << (ST_POINTN - 1039)) | (1L << (ST_POLYFROMTEXT - 1039)) | (1L << (ST_POLYFROMWKB - 1039)) | (1L << (ST_POLYGONFROMTEXT - 1039)) | (1L << (ST_POLYGONFROMWKB - 1039)) | (1L << (ST_SRID - 1039)) | (1L << (ST_STARTPOINT - 1039)) | (1L << (ST_SYMDIFFERENCE - 1039)) | (1L << (ST_TOUCHES - 1039)) | (1L << (ST_UNION - 1039)) | (1L << (ST_WITHIN - 1039)) | (1L << (ST_X - 1039)) | (1L << (ST_Y - 1039)) | (1L << (SUBDATE - 1039)) | (1L << (SUBSTRING_INDEX - 1039)) | (1L << (SUBTIME - 1039)) | (1L << (SYSTEM_USER - 1039)) | (1L << (TAN - 1039)) | (1L << (TIMEDIFF - 1039)) | (1L << (TIMESTAMPADD - 1039)) | (1L << (TIMESTAMPDIFF - 1039)) | (1L << (TIME_FORMAT - 1039)) | (1L << (TIME_TO_SEC - 1039)) | (1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (LASTVAL - 1039)) | (1L << (NEXTVAL - 1039)) | (1L << (SETVAL - 1039)))) != 0) || _la==MOD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 330:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 331:
			return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 332:
			return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 8);
		case 2:
			return precpred(_ctx, 6);
		case 3:
			return precpred(_ctx, 5);
		case 4:
			return precpred(_ctx, 3);
		case 5:
			return precpred(_ctx, 10);
		case 6:
			return precpred(_ctx, 9);
		case 7:
			return precpred(_ctx, 7);
		case 8:
			return precpred(_ctx, 4);
		case 9:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 3);
		case 11:
			return precpred(_ctx, 2);
		case 12:
			return precpred(_ctx, 1);
		case 13:
			return precpred(_ctx, 12);
		}
		return true;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u0483\u1c33\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"+
		"\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"+
		"\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"+
		"\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007"+
		"\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007"+
		"\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007"+
		"\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007"+
		"\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007"+
		"\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007"+
		"\u00c5\u0002\u00c6\u0007\u00c6\u0002\u00c7\u0007\u00c7\u0002\u00c8\u0007"+
		"\u00c8\u0002\u00c9\u0007\u00c9\u0002\u00ca\u0007\u00ca\u0002\u00cb\u0007"+
		"\u00cb\u0002\u00cc\u0007\u00cc\u0002\u00cd\u0007\u00cd\u0002\u00ce\u0007"+
		"\u00ce\u0002\u00cf\u0007\u00cf\u0002\u00d0\u0007\u00d0\u0002\u00d1\u0007"+
		"\u00d1\u0002\u00d2\u0007\u00d2\u0002\u00d3\u0007\u00d3\u0002\u00d4\u0007"+
		"\u00d4\u0002\u00d5\u0007\u00d5\u0002\u00d6\u0007\u00d6\u0002\u00d7\u0007"+
		"\u00d7\u0002\u00d8\u0007\u00d8\u0002\u00d9\u0007\u00d9\u0002\u00da\u0007"+
		"\u00da\u0002\u00db\u0007\u00db\u0002\u00dc\u0007\u00dc\u0002\u00dd\u0007"+
		"\u00dd\u0002\u00de\u0007\u00de\u0002\u00df\u0007\u00df\u0002\u00e0\u0007"+
		"\u00e0\u0002\u00e1\u0007\u00e1\u0002\u00e2\u0007\u00e2\u0002\u00e3\u0007"+
		"\u00e3\u0002\u00e4\u0007\u00e4\u0002\u00e5\u0007\u00e5\u0002\u00e6\u0007"+
		"\u00e6\u0002\u00e7\u0007\u00e7\u0002\u00e8\u0007\u00e8\u0002\u00e9\u0007"+
		"\u00e9\u0002\u00ea\u0007\u00ea\u0002\u00eb\u0007\u00eb\u0002\u00ec\u0007"+
		"\u00ec\u0002\u00ed\u0007\u00ed\u0002\u00ee\u0007\u00ee\u0002\u00ef\u0007"+
		"\u00ef\u0002\u00f0\u0007\u00f0\u0002\u00f1\u0007\u00f1\u0002\u00f2\u0007"+
		"\u00f2\u0002\u00f3\u0007\u00f3\u0002\u00f4\u0007\u00f4\u0002\u00f5\u0007"+
		"\u00f5\u0002\u00f6\u0007\u00f6\u0002\u00f7\u0007\u00f7\u0002\u00f8\u0007"+
		"\u00f8\u0002\u00f9\u0007\u00f9\u0002\u00fa\u0007\u00fa\u0002\u00fb\u0007"+
		"\u00fb\u0002\u00fc\u0007\u00fc\u0002\u00fd\u0007\u00fd\u0002\u00fe\u0007"+
		"\u00fe\u0002\u00ff\u0007\u00ff\u0002\u0100\u0007\u0100\u0002\u0101\u0007"+
		"\u0101\u0002\u0102\u0007\u0102\u0002\u0103\u0007\u0103\u0002\u0104\u0007"+
		"\u0104\u0002\u0105\u0007\u0105\u0002\u0106\u0007\u0106\u0002\u0107\u0007"+
		"\u0107\u0002\u0108\u0007\u0108\u0002\u0109\u0007\u0109\u0002\u010a\u0007"+
		"\u010a\u0002\u010b\u0007\u010b\u0002\u010c\u0007\u010c\u0002\u010d\u0007"+
		"\u010d\u0002\u010e\u0007\u010e\u0002\u010f\u0007\u010f\u0002\u0110\u0007"+
		"\u0110\u0002\u0111\u0007\u0111\u0002\u0112\u0007\u0112\u0002\u0113\u0007"+
		"\u0113\u0002\u0114\u0007\u0114\u0002\u0115\u0007\u0115\u0002\u0116\u0007"+
		"\u0116\u0002\u0117\u0007\u0117\u0002\u0118\u0007\u0118\u0002\u0119\u0007"+
		"\u0119\u0002\u011a\u0007\u011a\u0002\u011b\u0007\u011b\u0002\u011c\u0007"+
		"\u011c\u0002\u011d\u0007\u011d\u0002\u011e\u0007\u011e\u0002\u011f\u0007"+
		"\u011f\u0002\u0120\u0007\u0120\u0002\u0121\u0007\u0121\u0002\u0122\u0007"+
		"\u0122\u0002\u0123\u0007\u0123\u0002\u0124\u0007\u0124\u0002\u0125\u0007"+
		"\u0125\u0002\u0126\u0007\u0126\u0002\u0127\u0007\u0127\u0002\u0128\u0007"+
		"\u0128\u0002\u0129\u0007\u0129\u0002\u012a\u0007\u012a\u0002\u012b\u0007"+
		"\u012b\u0002\u012c\u0007\u012c\u0002\u012d\u0007\u012d\u0002\u012e\u0007"+
		"\u012e\u0002\u012f\u0007\u012f\u0002\u0130\u0007\u0130\u0002\u0131\u0007"+
		"\u0131\u0002\u0132\u0007\u0132\u0002\u0133\u0007\u0133\u0002\u0134\u0007"+
		"\u0134\u0002\u0135\u0007\u0135\u0002\u0136\u0007\u0136\u0002\u0137\u0007"+
		"\u0137\u0002\u0138\u0007\u0138\u0002\u0139\u0007\u0139\u0002\u013a\u0007"+
		"\u013a\u0002\u013b\u0007\u013b\u0002\u013c\u0007\u013c\u0002\u013d\u0007"+
		"\u013d\u0002\u013e\u0007\u013e\u0002\u013f\u0007\u013f\u0002\u0140\u0007"+
		"\u0140\u0002\u0141\u0007\u0141\u0002\u0142\u0007\u0142\u0002\u0143\u0007"+
		"\u0143\u0002\u0144\u0007\u0144\u0002\u0145\u0007\u0145\u0002\u0146\u0007"+
		"\u0146\u0002\u0147\u0007\u0147\u0002\u0148\u0007\u0148\u0002\u0149\u0007"+
		"\u0149\u0002\u014a\u0007\u014a\u0002\u014b\u0007\u014b\u0002\u014c\u0007"+
		"\u014c\u0002\u014d\u0007\u014d\u0002\u014e\u0007\u014e\u0002\u014f\u0007"+
		"\u014f\u0002\u0150\u0007\u0150\u0002\u0151\u0007\u0151\u0002\u0152\u0007"+
		"\u0152\u0002\u0153\u0007\u0153\u0002\u0154\u0007\u0154\u0002\u0155\u0007"+
		"\u0155\u0002\u0156\u0007\u0156\u0002\u0157\u0007\u0157\u0002\u0158\u0007"+
		"\u0158\u0002\u0159\u0007\u0159\u0001\u0000\u0003\u0000\u02b6\b\u0000\u0001"+
		"\u0000\u0001\u0000\u0003\u0000\u02ba\b\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0003\u0001\u02c1\b\u0001\u0001\u0001\u0003"+
		"\u0001\u02c4\b\u0001\u0001\u0001\u0005\u0001\u02c7\b\u0001\n\u0001\f\u0001"+
		"\u02ca\t\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0003\u0001\u02cf\b"+
		"\u0001\u0001\u0001\u0003\u0001\u02d2\b\u0001\u0001\u0001\u0003\u0001\u02d5"+
		"\b\u0001\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0003\u0002\u02de\b\u0002\u0001\u0003\u0001\u0003\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0003\u0004\u030b"+
		"\b\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001"+
		"\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0003\u0005\u0317"+
		"\b\u0005\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001"+
		"\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0003\u0006\u0322\b\u0006\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0333\b\u0007\u0001\b\u0001"+
		"\b\u0001\b\u0003\b\u0338\b\b\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\t\u0003\t\u0344\b\t\u0001\n\u0001\n\u0001"+
		"\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001"+
		"\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001"+
		"\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003\n\u035f\b\n\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0003"+
		"\u000b\u0368\b\u000b\u0001\f\u0001\f\u0001\f\u0003\f\u036d\b\f\u0001\f"+
		"\u0001\f\u0005\f\u0371\b\f\n\f\f\f\u0374\t\f\u0001\r\u0001\r\u0003\r\u0378"+
		"\b\r\u0001\r\u0001\r\u0003\r\u037c\b\r\u0001\r\u0001\r\u0001\r\u0001\r"+
		"\u0001\r\u0001\r\u0001\r\u0003\r\u0385\b\r\u0001\r\u0003\r\u0388\b\r\u0001"+
		"\r\u0003\r\u038b\b\r\u0001\r\u0001\r\u0003\r\u038f\b\r\u0001\r\u0001\r"+
		"\u0001\r\u0001\u000e\u0001\u000e\u0001\u000e\u0003\u000e\u0397\b\u000e"+
		"\u0001\u000e\u0003\u000e\u039a\b\u000e\u0001\u000e\u0003\u000e\u039d\b"+
		"\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0003\u000e\u03a3"+
		"\b\u000e\u0001\u000e\u0001\u000e\u0003\u000e\u03a7\b\u000e\u0001\u000e"+
		"\u0001\u000e\u0001\u000e\u0001\u000e\u0003\u000e\u03ad\b\u000e\u0001\u000e"+
		"\u0005\u000e\u03b0\b\u000e\n\u000e\f\u000e\u03b3\t\u000e\u0001\u000e\u0001"+
		"\u000e\u0003\u000e\u03b7\b\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0003"+
		"\u000e\u03bc\b\u000e\u0001\u000e\u0005\u000e\u03bf\b\u000e\n\u000e\f\u000e"+
		"\u03c2\t\u000e\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f"+
		"\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u03cd\b\u000f"+
		"\u0001\u000f\u0003\u000f\u03d0\b\u000f\u0001\u000f\u0001\u000f\u0003\u000f"+
		"\u03d4\b\u000f\u0001\u000f\u0003\u000f\u03d7\b\u000f\u0001\u000f\u0001"+
		"\u000f\u0003\u000f\u03db\b\u000f\u0001\u000f\u0003\u000f\u03de\b\u000f"+
		"\u0001\u000f\u0001\u000f\u0003\u000f\u03e2\b\u000f\u0001\u000f\u0003\u000f"+
		"\u03e5\b\u000f\u0001\u000f\u0003\u000f\u03e8\b\u000f\u0001\u000f\u0001"+
		"\u000f\u0003\u000f\u03ec\b\u000f\u0001\u000f\u0003\u000f\u03ef\b\u000f"+
		"\u0001\u000f\u0001\u000f\u0003\u000f\u03f3\b\u000f\u0001\u000f\u0001\u000f"+
		"\u0001\u0010\u0001\u0010\u0003\u0010\u03f9\b\u0010\u0001\u0010\u0001\u0010"+
		"\u0001\u0010\u0001\u0010\u0003\u0010\u03ff\b\u0010\u0001\u0010\u0001\u0010"+
		"\u0005\u0010\u0403\b\u0010\n\u0010\f\u0010\u0406\t\u0010\u0001\u0010\u0001"+
		"\u0010\u0005\u0010\u040a\b\u0010\n\u0010\f\u0010\u040d\t\u0010\u0001\u0010"+
		"\u0001\u0010\u0001\u0011\u0001\u0011\u0003\u0011\u0413\b\u0011\u0001\u0011"+
		"\u0001\u0011\u0001\u0011\u0001\u0011\u0003\u0011\u0419\b\u0011\u0001\u0011"+
		"\u0001\u0011\u0005\u0011\u041d\b\u0011\n\u0011\f\u0011\u0420\t\u0011\u0001"+
		"\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0005\u0011\u0426\b\u0011\n"+
		"\u0011\f\u0011\u0429\t\u0011\u0001\u0011\u0001\u0011\u0003\u0011\u042d"+
		"\b\u0011\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0003"+
		"\u0012\u0434\b\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0005\u0012\u0439"+
		"\b\u0012\n\u0012\f\u0012\u043c\t\u0012\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0005\u0013\u044a\b\u0013\n\u0013"+
		"\f\u0013\u044d\t\u0013\u0001\u0013\u0001\u0013\u0001\u0014\u0001\u0014"+
		"\u0001\u0014\u0003\u0014\u0454\b\u0014\u0001\u0014\u0003\u0014\u0457\b"+
		"\u0014\u0001\u0014\u0001\u0014\u0003\u0014\u045b\b\u0014\u0001\u0014\u0001"+
		"\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001"+
		"\u0014\u0003\u0014\u0465\b\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0003"+
		"\u0014\u046a\b\u0014\u0001\u0014\u0003\u0014\u046d\b\u0014\u0001\u0014"+
		"\u0001\u0014\u0003\u0014\u0471\b\u0014\u0001\u0014\u0001\u0014\u0003\u0014"+
		"\u0475\b\u0014\u0001\u0014\u0001\u0014\u0003\u0014\u0479\b\u0014\u0001"+
		"\u0014\u0005\u0014\u047c\b\u0014\n\u0014\f\u0014\u047f\t\u0014\u0003\u0014"+
		"\u0481\b\u0014\u0001\u0014\u0003\u0014\u0484\b\u0014\u0001\u0014\u0003"+
		"\u0014\u0487\b\u0014\u0001\u0014\u0003\u0014\u048a\b\u0014\u0001\u0014"+
		"\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0003\u0014\u0491\b\u0014"+
		"\u0001\u0014\u0003\u0014\u0494\b\u0014\u0001\u0014\u0001\u0014\u0003\u0014"+
		"\u0498\b\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0003\u0014"+
		"\u049e\b\u0014\u0001\u0014\u0005\u0014\u04a1\b\u0014\n\u0014\f\u0014\u04a4"+
		"\t\u0014\u0003\u0014\u04a6\b\u0014\u0001\u0014\u0003\u0014\u04a9\b\u0014"+
		"\u0003\u0014\u04ab\b\u0014\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015"+
		"\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0003\u0015"+
		"\u04b6\b\u0015\u0001\u0015\u0001\u0015\u0003\u0015\u04ba\b\u0015\u0001"+
		"\u0015\u0003\u0015\u04bd\b\u0015\u0001\u0016\u0001\u0016\u0001\u0016\u0001"+
		"\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001"+
		"\u0016\u0001\u0016\u0001\u0016\u0003\u0016\u04cb\b\u0016\u0001\u0016\u0003"+
		"\u0016\u04ce\b\u0016\u0001\u0016\u0001\u0016\u0003\u0016\u04d2\b\u0016"+
		"\u0001\u0016\u0003\u0016\u04d5\b\u0016\u0001\u0016\u0001\u0016\u0003\u0016"+
		"\u04d9\b\u0016\u0001\u0016\u0003\u0016\u04dc\b\u0016\u0001\u0016\u0001"+
		"\u0016\u0003\u0016\u04e0\b\u0016\u0001\u0016\u0003\u0016\u04e3\b\u0016"+
		"\u0001\u0016\u0001\u0016\u0003\u0016\u04e7\b\u0016\u0001\u0016\u0003\u0016"+
		"\u04ea\b\u0016\u0001\u0016\u0003\u0016\u04ed\b\u0016\u0001\u0016\u0001"+
		"\u0016\u0003\u0016\u04f1\b\u0016\u0001\u0016\u0003\u0016\u04f4\b\u0016"+
		"\u0001\u0016\u0001\u0016\u0003\u0016\u04f8\b\u0016\u0001\u0016\u0001\u0016"+
		"\u0001\u0017\u0001\u0017\u0001\u0017\u0003\u0017\u04ff\b\u0017\u0001\u0017"+
		"\u0003\u0017\u0502\b\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017"+
		"\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017"+
		"\u0001\u0017\u0003\u0017\u050f\b\u0017\u0001\u0017\u0001\u0017\u0001\u0018"+
		"\u0001\u0018\u0003\u0018\u0515\b\u0018\u0001\u0018\u0001\u0018\u0001\u0019"+
		"\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0005\u0019\u051e\b\u0019"+
		"\n\u0019\f\u0019\u0521\t\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u0525"+
		"\b\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001"+
		"\u0019\u0003\u0019\u052d\b\u0019\u0001\u001a\u0001\u001a\u0001\u001b\u0001"+
		"\u001b\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0536\b\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u053b\b\u001c\u0001\u001c\u0003"+
		"\u001c\u053e\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0543"+
		"\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0003\u001c\u054b\b\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u054f"+
		"\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0554\b\u001c"+
		"\u0001\u001c\u0001\u001c\u0003\u001c\u0558\b\u001c\u0001\u001d\u0001\u001d"+
		"\u0001\u001d\u0003\u001d\u055d\b\u001d\u0001\u001d\u0003\u001d\u0560\b"+
		"\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u0564\b\u001d\u0001\u001d\u0001"+
		"\u001d\u0001\u001d\u0005\u001d\u0569\b\u001d\n\u001d\f\u001d\u056c\t\u001d"+
		"\u0001\u001e\u0001\u001e\u0003\u001e\u0570\b\u001e\u0001\u001e\u0001\u001e"+
		"\u0001\u001e\u0003\u001e\u0575\b\u001e\u0001\u001e\u0001\u001e\u0001\u001e"+
		"\u0001\u001e\u0001\u001e\u0001\u001e\u0003\u001e\u057d\b\u001e\u0001\u001e"+
		"\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0003\u001e"+
		"\u0585\b\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0003\u001e\u058a\b"+
		"\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001"+
		"\u001e\u0003\u001e\u0592\b\u001e\u0001\u001e\u0003\u001e\u0595\b\u001e"+
		"\u0001\u001f\u0003\u001f\u0598\b\u001f\u0001\u001f\u0001\u001f\u0003\u001f"+
		"\u059c\b\u001f\u0001\u001f\u0001\u001f\u0003\u001f\u05a0\b\u001f\u0001"+
		"\u001f\u0003\u001f\u05a3\b\u001f\u0001\u001f\u0001\u001f\u0003\u001f\u05a7"+
		"\b\u001f\u0001\u001f\u0001\u001f\u0003\u001f\u05ab\b\u001f\u0001\u001f"+
		"\u0001\u001f\u0003\u001f\u05af\b\u001f\u0001\u001f\u0001\u001f\u0001\u001f"+
		"\u0001\u001f\u0003\u001f\u05b5\b\u001f\u0001\u001f\u0003\u001f\u05b8\b"+
		"\u001f\u0001 \u0001 \u0001 \u0001 \u0001 \u0003 \u05bf\b \u0001!\u0001"+
		"!\u0001!\u0001!\u0001!\u0001!\u0003!\u05c7\b!\u0003!\u05c9\b!\u0001\""+
		"\u0001\"\u0001\"\u0005\"\u05ce\b\"\n\"\f\"\u05d1\t\"\u0001\"\u0001\"\u0001"+
		"\"\u0003\"\u05d6\b\"\u0001\"\u0001\"\u0001\"\u0001\"\u0005\"\u05dc\b\""+
		"\n\"\f\"\u05df\t\"\u0003\"\u05e1\b\"\u0001\"\u0001\"\u0001\"\u0005\"\u05e6"+
		"\b\"\n\"\f\"\u05e9\t\"\u0003\"\u05eb\b\"\u0003\"\u05ed\b\"\u0001#\u0001"+
		"#\u0001#\u0001#\u0003#\u05f3\b#\u0001$\u0001$\u0001$\u0001$\u0003$\u05f9"+
		"\b$\u0001$\u0001$\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001"+
		"%\u0001%\u0001%\u0001%\u0001%\u0001%\u0003%\u060a\b%\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0003&\u0611\b&\u0001\'\u0001\'\u0001\'\u0001(\u0001("+
		"\u0003(\u0618\b(\u0001(\u0001(\u0001(\u0001(\u0001(\u0001(\u0001(\u0001"+
		"(\u0001(\u0001(\u0003(\u0624\b(\u0001(\u0001(\u0001(\u0003(\u0629\b(\u0001"+
		"(\u0001(\u0001(\u0001(\u0001(\u0001(\u0001(\u0003(\u0632\b(\u0003(\u0634"+
		"\b(\u0001)\u0003)\u0637\b)\u0001)\u0001)\u0001)\u0001*\u0001*\u0001*\u0001"+
		"+\u0001+\u0001+\u0001+\u0001+\u0003+\u0644\b+\u0001+\u0001+\u0001+\u0001"+
		"+\u0001+\u0001+\u0001+\u0001+\u0001+\u0001+\u0001+\u0003+\u0651\b+\u0001"+
		"+\u0001+\u0001+\u0003+\u0656\b+\u0001,\u0001,\u0001,\u0001,\u0001,\u0001"+
		",\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0003,\u0666"+
		"\b,\u0001-\u0001-\u0001-\u0001-\u0005-\u066c\b-\n-\f-\u066f\t-\u0001-"+
		"\u0001-\u0001.\u0001.\u0001.\u0001.\u0001.\u0003.\u0678\b.\u0001/\u0001"+
		"/\u0005/\u067c\b/\n/\f/\u067f\t/\u00010\u00010\u00010\u00010\u00010\u0001"+
		"0\u00010\u00010\u00010\u00030\u068a\b0\u00010\u00030\u068d\b0\u00010\u0001"+
		"0\u00010\u00030\u0692\b0\u00010\u00010\u00010\u00010\u00010\u00010\u0001"+
		"0\u00010\u00010\u00010\u00010\u00030\u069f\b0\u00010\u00010\u00010\u0001"+
		"0\u00010\u00030\u06a6\b0\u00010\u00010\u00010\u00010\u00010\u00030\u06ad"+
		"\b0\u00030\u06af\b0\u00010\u00010\u00010\u00010\u00010\u00030\u06b6\b"+
		"0\u00011\u00011\u00031\u06ba\b1\u00031\u06bc\b1\u00011\u00011\u00011\u0003"+
		"1\u06c1\b1\u00011\u00031\u06c4\b1\u00011\u00011\u00051\u06c8\b1\n1\f1"+
		"\u06cb\t1\u00011\u00011\u00031\u06cf\b1\u00031\u06d1\b1\u00011\u00011"+
		"\u00031\u06d5\b1\u00011\u00031\u06d8\b1\u00011\u00031\u06db\b1\u00011"+
		"\u00011\u00051\u06df\b1\n1\f1\u06e2\t1\u00011\u00011\u00031\u06e6\b1\u0003"+
		"1\u06e8\b1\u00011\u00011\u00011\u00031\u06ed\b1\u00011\u00011\u00011\u0001"+
		"1\u00011\u00031\u06f4\b1\u00031\u06f6\b1\u00011\u00011\u00011\u00011\u0001"+
		"1\u00031\u06fd\b1\u00012\u00012\u00012\u00032\u0702\b2\u00012\u00012\u0003"+
		"2\u0706\b2\u00012\u00032\u0709\b2\u00013\u00013\u00013\u00013\u00013\u0001"+
		"3\u00033\u0711\b3\u00013\u00013\u00013\u00013\u00013\u00013\u00033\u0719"+
		"\b3\u00033\u071b\b3\u00014\u00014\u00014\u00014\u00014\u00014\u00034\u0723"+
		"\b4\u00015\u00015\u00035\u0727\b5\u00015\u00035\u072a\b5\u00015\u0001"+
		"5\u00055\u072e\b5\n5\f5\u0731\t5\u00015\u00015\u00035\u0735\b5\u00015"+
		"\u00035\u0738\b5\u00015\u00015\u00055\u073c\b5\n5\f5\u073f\t5\u00035\u0741"+
		"\b5\u00016\u00016\u00036\u0745\b6\u00016\u00036\u0748\b6\u00016\u0001"+
		"6\u00036\u074c\b6\u00016\u00016\u00016\u00036\u0751\b6\u00016\u00016\u0001"+
		"6\u00036\u0756\b6\u00016\u00016\u00016\u00036\u075b\b6\u00016\u00016\u0003"+
		"6\u075f\b6\u00016\u00016\u00036\u0763\b6\u00016\u00016\u00036\u0767\b"+
		"6\u00016\u00016\u00036\u076b\b6\u00016\u00016\u00036\u076f\b6\u00016\u0001"+
		"6\u00036\u0773\b6\u00016\u00016\u00016\u00036\u0778\b6\u00016\u00016\u0001"+
		"6\u00036\u077d\b6\u00016\u00016\u00016\u00036\u0782\b6\u00016\u00016\u0001"+
		"6\u00016\u00036\u0788\b6\u00016\u00016\u00016\u00036\u078d\b6\u00016\u0001"+
		"6\u00016\u00036\u0792\b6\u00016\u00016\u00016\u00016\u00036\u0798\b6\u0001"+
		"6\u00016\u00016\u00036\u079d\b6\u00016\u00016\u00016\u00036\u07a2\b6\u0001"+
		"6\u00016\u00016\u00036\u07a7\b6\u00016\u00016\u00016\u00036\u07ac\b6\u0001"+
		"6\u00016\u00016\u00036\u07b1\b6\u00016\u00016\u00016\u00036\u07b6\b6\u0001"+
		"6\u00016\u00016\u00036\u07bb\b6\u00016\u00016\u00016\u00016\u00016\u0003"+
		"6\u07c2\b6\u00016\u00016\u00016\u00036\u07c7\b6\u00016\u00016\u00016\u0003"+
		"6\u07cc\b6\u00016\u00016\u00016\u00036\u07d1\b6\u00016\u00016\u00016\u0001"+
		"6\u00036\u07d7\b6\u00016\u00016\u00016\u00016\u00016\u00016\u00036\u07df"+
		"\b6\u00016\u00016\u00016\u00016\u00036\u07e5\b6\u00017\u00017\u00018\u0001"+
		"8\u00018\u00019\u00019\u00019\u00019\u00019\u00039\u07f1\b9\u00019\u0001"+
		"9\u00019\u00019\u00019\u00039\u07f8\b9\u00039\u07fa\b9\u00019\u00019\u0001"+
		"9\u00019\u00059\u0800\b9\n9\f9\u0803\t9\u00019\u00019\u00039\u0807\b9"+
		"\u0001:\u0003:\u080a\b:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0003"+
		":\u0812\b:\u0001:\u0001:\u0001:\u0001:\u0003:\u0818\b:\u0001:\u0001:\u0001"+
		":\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001"+
		":\u0001:\u0003:\u0828\b:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001"+
		":\u0001:\u0001:\u0001:\u0003:\u0834\b:\u0003:\u0836\b:\u0001;\u0003;\u0839"+
		"\b;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0003;\u0841\b;\u0001;\u0001"+
		";\u0001;\u0001;\u0003;\u0847\b;\u0001;\u0001;\u0001;\u0001;\u0003;\u084d"+
		"\b;\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0005"+
		"<\u0858\b<\n<\f<\u085b\t<\u0001<\u0001<\u0005<\u085f\b<\n<\f<\u0862\t"+
		"<\u0001<\u0001<\u0001<\u0001<\u0005<\u0868\b<\n<\f<\u086b\t<\u0001<\u0001"+
		"<\u0003<\u086f\b<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0005"+
		"<\u0878\b<\n<\f<\u087b\t<\u0001<\u0001<\u0001<\u0001<\u0005<\u0881\b<"+
		"\n<\f<\u0884\t<\u0001<\u0001<\u0003<\u0888\b<\u0001<\u0001<\u0001<\u0001"+
		"<\u0001<\u0001<\u0001<\u0001<\u0005<\u0892\b<\n<\f<\u0895\t<\u0001<\u0001"+
		"<\u0005<\u0899\b<\n<\f<\u089c\t<\u0001<\u0001<\u0001<\u0001<\u0005<\u08a2"+
		"\b<\n<\f<\u08a5\t<\u0001<\u0001<\u0003<\u08a9\b<\u0001<\u0001<\u0001<"+
		"\u0001<\u0001<\u0001<\u0001<\u0001<\u0005<\u08b3\b<\n<\f<\u08b6\t<\u0001"+
		"<\u0001<\u0005<\u08ba\b<\n<\f<\u08bd\t<\u0001<\u0001<\u0001<\u0001<\u0005"+
		"<\u08c3\b<\n<\f<\u08c6\t<\u0001<\u0001<\u0003<\u08ca\b<\u0001<\u0001<"+
		"\u0001<\u0005<\u08cf\b<\n<\f<\u08d2\t<\u0001<\u0001<\u0001<\u0001<\u0005"+
		"<\u08d8\b<\n<\f<\u08db\t<\u0001<\u0001<\u0003<\u08df\b<\u0003<\u08e1\b"+
		"<\u0001=\u0001=\u0001=\u0003=\u08e6\b=\u0001>\u0001>\u0001>\u0001>\u0004"+
		">\u08ec\b>\u000b>\f>\u08ed\u0001>\u0001>\u0001?\u0001?\u0001?\u0005?\u08f5"+
		"\b?\n?\f?\u08f8\t?\u0001@\u0003@\u08fb\b@\u0001@\u0003@\u08fe\b@\u0001"+
		"@\u0001@\u0003@\u0902\b@\u0001@\u0001@\u0001@\u0003@\u0907\b@\u0001@\u0001"+
		"@\u0001@\u0001@\u0003@\u090d\b@\u0001@\u0001@\u0001@\u0001@\u0003@\u0913"+
		"\b@\u0001@\u0001@\u0001@\u0003@\u0918\b@\u0001@\u0001@\u0001@\u0003@\u091d"+
		"\b@\u0001@\u0001@\u0001@\u0003@\u0922\b@\u0001@\u0001@\u0001@\u0003@\u0927"+
		"\b@\u0001@\u0003@\u092a\b@\u0001A\u0001A\u0001A\u0003A\u092f\bA\u0001"+
		"A\u0004A\u0932\bA\u000bA\fA\u0933\u0001A\u0001A\u0001A\u0001A\u0001A\u0001"+
		"A\u0001A\u0001A\u0003A\u093e\bA\u0001B\u0001B\u0003B\u0942\bB\u0001B\u0001"+
		"B\u0001B\u0001B\u0001B\u0003B\u0949\bB\u0001B\u0001B\u0001B\u0003B\u094e"+
		"\bB\u0001B\u0003B\u0951\bB\u0001B\u0001B\u0001B\u0003B\u0956\bB\u0001"+
		"B\u0003B\u0959\bB\u0001B\u0001B\u0003B\u095d\bB\u0001B\u0001B\u0003B\u0961"+
		"\bB\u0001C\u0001C\u0001C\u0001C\u0005C\u0967\bC\nC\fC\u096a\tC\u0001D"+
		"\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001E\u0001E\u0001E\u0001"+
		"E\u0001E\u0001E\u0001E\u0001E\u0001E\u0003E\u097c\bE\u0001E\u0003E\u097f"+
		"\bE\u0001E\u0003E\u0982\bE\u0001E\u0001E\u0003E\u0986\bE\u0001E\u0001"+
		"E\u0001F\u0001F\u0001F\u0001F\u0005F\u098e\bF\nF\fF\u0991\tF\u0001G\u0001"+
		"G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0005G\u099b\bG\nG\fG\u099e"+
		"\tG\u0001G\u0001G\u0001H\u0001H\u0003H\u09a4\bH\u0001H\u0003H\u09a7\b"+
		"H\u0001H\u0001H\u0001H\u0003H\u09ac\bH\u0001H\u0001H\u0001H\u0005H\u09b1"+
		"\bH\nH\fH\u09b4\tH\u0003H\u09b6\bH\u0001H\u0003H\u09b9\bH\u0001I\u0001"+
		"I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0003I\u09c4\bI\u0001"+
		"I\u0003I\u09c7\bI\u0001I\u0001I\u0003I\u09cb\bI\u0001I\u0001I\u0001J\u0001"+
		"J\u0001J\u0001J\u0003J\u09d3\bJ\u0001J\u0003J\u09d6\bJ\u0001J\u0001J\u0001"+
		"J\u0003J\u09db\bJ\u0001J\u0001J\u0001J\u0001J\u0001J\u0001J\u0003J\u09e3"+
		"\bJ\u0001J\u0001J\u0001J\u0001J\u0003J\u09e9\bJ\u0001J\u0001J\u0003J\u09ed"+
		"\bJ\u0001K\u0001K\u0001K\u0003K\u09f2\bK\u0001K\u0001K\u0004K\u09f6\b"+
		"K\u000bK\fK\u09f7\u0001L\u0001L\u0003L\u09fc\bL\u0001L\u0005L\u09ff\b"+
		"L\nL\fL\u0a02\tL\u0001L\u0001L\u0003L\u0a06\bL\u0001L\u0003L\u0a09\bL"+
		"\u0001L\u0001L\u0001L\u0001L\u0001L\u0003L\u0a10\bL\u0001L\u0001L\u0003"+
		"L\u0a14\bL\u0001L\u0003L\u0a17\bL\u0001L\u0001L\u0001L\u0001L\u0001L\u0001"+
		"L\u0001L\u0005L\u0a20\bL\nL\fL\u0a23\tL\u0001L\u0001L\u0001L\u0001L\u0001"+
		"L\u0003L\u0a2a\bL\u0001L\u0003L\u0a2d\bL\u0001L\u0003L\u0a30\bL\u0001"+
		"L\u0001L\u0005L\u0a34\bL\nL\fL\u0a37\tL\u0001L\u0001L\u0001L\u0003L\u0a3c"+
		"\bL\u0003L\u0a3e\bL\u0001L\u0001L\u0001L\u0003L\u0a43\bL\u0001L\u0003"+
		"L\u0a46\bL\u0001L\u0001L\u0005L\u0a4a\bL\nL\fL\u0a4d\tL\u0001L\u0001L"+
		"\u0001L\u0003L\u0a52\bL\u0003L\u0a54\bL\u0001L\u0001L\u0003L\u0a58\bL"+
		"\u0001L\u0003L\u0a5b\bL\u0001L\u0003L\u0a5e\bL\u0001L\u0001L\u0005L\u0a62"+
		"\bL\nL\fL\u0a65\tL\u0001L\u0001L\u0001L\u0003L\u0a6a\bL\u0001L\u0003L"+
		"\u0a6d\bL\u0001L\u0001L\u0005L\u0a71\bL\nL\fL\u0a74\tL\u0001L\u0001L\u0001"+
		"L\u0003L\u0a79\bL\u0003L\u0a7b\bL\u0001L\u0001L\u0001L\u0003L\u0a80\b"+
		"L\u0001L\u0003L\u0a83\bL\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0003"+
		"L\u0a8b\bL\u0003L\u0a8d\bL\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001"+
		"L\u0003L\u0a96\bL\u0001L\u0001L\u0001L\u0003L\u0a9b\bL\u0001L\u0001L\u0001"+
		"L\u0001L\u0001L\u0001L\u0003L\u0aa3\bL\u0001L\u0001L\u0003L\u0aa7\bL\u0001"+
		"L\u0003L\u0aaa\bL\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0003L\u0ab2"+
		"\bL\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0003L\u0abc"+
		"\bL\u0001L\u0001L\u0001L\u0003L\u0ac1\bL\u0001L\u0003L\u0ac4\bL\u0001"+
		"L\u0001L\u0001L\u0001L\u0001L\u0003L\u0acb\bL\u0001L\u0001L\u0003L\u0acf"+
		"\bL\u0001L\u0003L\u0ad2\bL\u0001L\u0001L\u0003L\u0ad6\bL\u0001L\u0001"+
		"L\u0001L\u0003L\u0adb\bL\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001"+
		"L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001"+
		"L\u0001L\u0003L\u0aef\bL\u0001L\u0001L\u0001L\u0001L\u0001L\u0003L\u0af6"+
		"\bL\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0003L\u0aff\bL\u0001"+
		"L\u0001L\u0003L\u0b03\bL\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001"+
		"L\u0001L\u0001L\u0001L\u0003L\u0b0f\bL\u0001L\u0003L\u0b12\bL\u0001L\u0001"+
		"L\u0001L\u0001L\u0001L\u0001L\u0001L\u0003L\u0b1b\bL\u0001L\u0001L\u0001"+
		"L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0003L\u0b27\bL\u0001"+
		"L\u0001L\u0001L\u0001L\u0005L\u0b2d\bL\nL\fL\u0b30\tL\u0001L\u0001L\u0001"+
		"L\u0001L\u0001L\u0003L\u0b37\bL\u0001L\u0001L\u0001L\u0001L\u0001L\u0003"+
		"L\u0b3e\bL\u0001L\u0001L\u0001L\u0001L\u0001L\u0003L\u0b45\bL\u0001L\u0001"+
		"L\u0001L\u0001L\u0001L\u0003L\u0b4c\bL\u0001L\u0001L\u0001L\u0001L\u0001"+
		"L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0005L\u0b59\bL\nL\fL\u0b5c"+
		"\tL\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001"+
		"L\u0003L\u0b68\bL\u0001L\u0001L\u0001L\u0001L\u0003L\u0b6e\bL\u0001L\u0001"+
		"L\u0001L\u0001L\u0003L\u0b74\bL\u0001L\u0001L\u0001L\u0001L\u0003L\u0b7a"+
		"\bL\u0001L\u0001L\u0001L\u0001L\u0003L\u0b80\bL\u0001L\u0001L\u0001L\u0001"+
		"L\u0003L\u0b86\bL\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0003L\u0b8e"+
		"\bL\u0001L\u0003L\u0b91\bL\u0001L\u0001L\u0001L\u0001L\u0005L\u0b97\b"+
		"L\nL\fL\u0b9a\tL\u0001L\u0001L\u0003L\u0b9e\bL\u0001M\u0001M\u0001M\u0003"+
		"M\u0ba3\bM\u0001M\u0001M\u0001N\u0001N\u0001N\u0003N\u0baa\bN\u0001N\u0001"+
		"N\u0001O\u0001O\u0001O\u0003O\u0bb1\bO\u0001O\u0001O\u0001O\u0001O\u0001"+
		"O\u0003O\u0bb8\bO\u0001O\u0001O\u0001O\u0003O\u0bbd\bO\u0001O\u0005O\u0bc0"+
		"\bO\nO\fO\u0bc3\tO\u0001O\u0003O\u0bc6\bO\u0001P\u0001P\u0001P\u0001P"+
		"\u0001P\u0001P\u0001P\u0001P\u0001Q\u0001Q\u0001Q\u0003Q\u0bd3\bQ\u0001"+
		"Q\u0001Q\u0001R\u0001R\u0001R\u0003R\u0bda\bR\u0001R\u0001R\u0001S\u0001"+
		"S\u0001S\u0003S\u0be1\bS\u0001S\u0001S\u0001T\u0001T\u0003T\u0be7\bT\u0001"+
		"T\u0001T\u0003T\u0beb\bT\u0001T\u0001T\u0003T\u0bef\bT\u0001T\u0003T\u0bf2"+
		"\bT\u0001U\u0001U\u0001U\u0001U\u0001U\u0003U\u0bf9\bU\u0001U\u0003U\u0bfc"+
		"\bU\u0001V\u0001V\u0001V\u0003V\u0c01\bV\u0001V\u0001V\u0001W\u0001W\u0001"+
		"W\u0003W\u0c08\bW\u0001W\u0001W\u0001W\u0005W\u0c0d\bW\nW\fW\u0c10\tW"+
		"\u0001W\u0003W\u0c13\bW\u0001X\u0001X\u0001X\u0003X\u0c18\bX\u0001X\u0001"+
		"X\u0001X\u0005X\u0c1d\bX\nX\fX\u0c20\tX\u0001Y\u0001Y\u0001Y\u0001Y\u0001"+
		"Y\u0001Y\u0001Y\u0001Y\u0005Y\u0c2a\bY\nY\fY\u0c2d\tY\u0003Y\u0c2f\bY"+
		"\u0001Y\u0001Y\u0001Y\u0003Y\u0c34\bY\u0001Y\u0001Y\u0001Y\u0003Y\u0c39"+
		"\bY\u0005Y\u0c3b\bY\nY\fY\u0c3e\tY\u0001Y\u0001Y\u0001Y\u0003Y\u0c43\b"+
		"Y\u0001Z\u0001Z\u0003Z\u0c47\bZ\u0001Z\u0001Z\u0003Z\u0c4b\bZ\u0001Z\u0003"+
		"Z\u0c4e\bZ\u0001Z\u0001Z\u0001Z\u0005Z\u0c53\bZ\nZ\fZ\u0c56\tZ\u0001["+
		"\u0001[\u0001[\u0001[\u0001[\u0005[\u0c5d\b[\n[\f[\u0c60\t[\u0001\\\u0001"+
		"\\\u0003\\\u0c64\b\\\u0001\\\u0001\\\u0001\\\u0001]\u0001]\u0003]\u0c6b"+
		"\b]\u0001]\u0001]\u0003]\u0c6f\b]\u0001^\u0001^\u0001^\u0001^\u0001^\u0003"+
		"^\u0c76\b^\u0001^\u0003^\u0c79\b^\u0001_\u0001_\u0003_\u0c7d\b_\u0001"+
		"`\u0001`\u0001`\u0001a\u0001a\u0001a\u0001a\u0003a\u0c86\ba\u0001b\u0001"+
		"b\u0003b\u0c8a\bb\u0001b\u0003b\u0c8d\bb\u0001b\u0003b\u0c90\bb\u0001"+
		"b\u0001b\u0001b\u0001b\u0003b\u0c96\bb\u0001b\u0003b\u0c99\bb\u0001b\u0001"+
		"b\u0001b\u0001b\u0003b\u0c9f\bb\u0001b\u0001b\u0001b\u0001b\u0001b\u0005"+
		"b\u0ca6\bb\nb\fb\u0ca9\tb\u0003b\u0cab\bb\u0001b\u0001b\u0001b\u0001b"+
		"\u0001b\u0001b\u0001b\u0005b\u0cb4\bb\nb\fb\u0cb7\tb\u0003b\u0cb9\bb\u0001"+
		"c\u0001c\u0001c\u0003c\u0cbe\bc\u0001c\u0003c\u0cc1\bc\u0001c\u0001c\u0001"+
		"c\u0003c\u0cc6\bc\u0001c\u0001c\u0001c\u0001c\u0001c\u0001c\u0001c\u0001"+
		"c\u0003c\u0cd0\bc\u0001c\u0001c\u0001c\u0003c\u0cd5\bc\u0001c\u0001c\u0004"+
		"c\u0cd9\bc\u000bc\fc\u0cda\u0003c\u0cdd\bc\u0001c\u0001c\u0004c\u0ce1"+
		"\bc\u000bc\fc\u0ce2\u0003c\u0ce5\bc\u0001c\u0001c\u0001c\u0001c\u0003"+
		"c\u0ceb\bc\u0001c\u0001c\u0001c\u0001c\u0005c\u0cf1\bc\nc\fc\u0cf4\tc"+
		"\u0001c\u0001c\u0003c\u0cf8\bc\u0001c\u0001c\u0001c\u0001c\u0005c\u0cfe"+
		"\bc\nc\fc\u0d01\tc\u0003c\u0d03\bc\u0001d\u0001d\u0001d\u0003d\u0d08\b"+
		"d\u0001d\u0003d\u0d0b\bd\u0001d\u0001d\u0001d\u0003d\u0d10\bd\u0001d\u0001"+
		"d\u0001d\u0001d\u0001d\u0001d\u0003d\u0d18\bd\u0001d\u0001d\u0001d\u0001"+
		"d\u0001d\u0001d\u0003d\u0d20\bd\u0001d\u0001d\u0001d\u0001d\u0003d\u0d26"+
		"\bd\u0001d\u0001d\u0001d\u0001d\u0005d\u0d2c\bd\nd\fd\u0d2f\td\u0001d"+
		"\u0001d\u0003d\u0d33\bd\u0001d\u0001d\u0001d\u0001d\u0005d\u0d39\bd\n"+
		"d\fd\u0d3c\td\u0003d\u0d3e\bd\u0001e\u0001e\u0003e\u0d42\be\u0001e\u0003"+
		"e\u0d45\be\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0003e\u0d4d\be\u0001"+
		"e\u0001e\u0001e\u0001e\u0003e\u0d53\be\u0001e\u0001e\u0001e\u0001e\u0001"+
		"e\u0005e\u0d5a\be\ne\fe\u0d5d\te\u0003e\u0d5f\be\u0001f\u0001f\u0003f"+
		"\u0d63\bf\u0001f\u0001f\u0003f\u0d67\bf\u0001f\u0001f\u0004f\u0d6b\bf"+
		"\u000bf\ff\u0d6c\u0001f\u0001f\u0003f\u0d71\bf\u0001f\u0001f\u0003f\u0d75"+
		"\bf\u0003f\u0d77\bf\u0001f\u0003f\u0d7a\bf\u0001f\u0003f\u0d7d\bf\u0001"+
		"f\u0003f\u0d80\bf\u0001f\u0001f\u0004f\u0d84\bf\u000bf\ff\u0d85\u0001"+
		"f\u0001f\u0003f\u0d8a\bf\u0001f\u0003f\u0d8d\bf\u0001f\u0003f\u0d90\b"+
		"f\u0001f\u0003f\u0d93\bf\u0001f\u0003f\u0d96\bf\u0003f\u0d98\bf\u0001"+
		"g\u0001g\u0003g\u0d9c\bg\u0001h\u0001h\u0001h\u0001h\u0003h\u0da2\bh\u0001"+
		"h\u0001h\u0001h\u0001h\u0003h\u0da8\bh\u0001h\u0005h\u0dab\bh\nh\fh\u0dae"+
		"\th\u0003h\u0db0\bh\u0001i\u0001i\u0001i\u0001i\u0003i\u0db6\bi\u0001"+
		"j\u0001j\u0003j\u0dba\bj\u0001k\u0001k\u0001k\u0001k\u0001k\u0001k\u0003"+
		"k\u0dc2\bk\u0001k\u0003k\u0dc5\bk\u0001l\u0001l\u0003l\u0dc9\bl\u0001"+
		"l\u0003l\u0dcc\bl\u0001l\u0003l\u0dcf\bl\u0001l\u0001l\u0001l\u0001l\u0001"+
		"l\u0001l\u0001l\u0003l\u0dd8\bl\u0001l\u0001l\u0003l\u0ddc\bl\u0001l\u0003"+
		"l\u0ddf\bl\u0001l\u0001l\u0003l\u0de3\bl\u0001m\u0001m\u0003m\u0de7\b"+
		"m\u0001m\u0003m\u0dea\bm\u0001m\u0003m\u0ded\bm\u0001m\u0001m\u0001m\u0003"+
		"m\u0df2\bm\u0001m\u0001m\u0001m\u0001m\u0003m\u0df8\bm\u0005m\u0dfa\b"+
		"m\nm\fm\u0dfd\tm\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0003"+
		"m\u0e06\bm\u0001m\u0001m\u0001m\u0001m\u0003m\u0e0c\bm\u0005m\u0e0e\b"+
		"m\nm\fm\u0e11\tm\u0001m\u0001m\u0001m\u0003m\u0e16\bm\u0001m\u0001m\u0003"+
		"m\u0e1a\bm\u0001n\u0001n\u0001n\u0001n\u0003n\u0e20\bn\u0001n\u0003n\u0e23"+
		"\bn\u0001o\u0001o\u0001o\u0001o\u0001o\u0001o\u0001o\u0001o\u0001o\u0001"+
		"o\u0003o\u0e2f\bo\u0001o\u0001o\u0003o\u0e33\bo\u0001o\u0001o\u0003o\u0e37"+
		"\bo\u0001p\u0001p\u0001p\u0001p\u0001p\u0001p\u0003p\u0e3f\bp\u0001p\u0001"+
		"p\u0003p\u0e43\bp\u0001q\u0001q\u0001q\u0001q\u0001r\u0001r\u0003r\u0e4b"+
		"\br\u0001r\u0003r\u0e4e\br\u0001r\u0001r\u0003r\u0e52\br\u0001r\u0003"+
		"r\u0e55\br\u0001r\u0001r\u0001r\u0001r\u0005r\u0e5b\br\nr\fr\u0e5e\tr"+
		"\u0001r\u0001r\u0003r\u0e62\br\u0001r\u0003r\u0e65\br\u0001r\u0003r\u0e68"+
		"\br\u0001s\u0001s\u0003s\u0e6c\bs\u0001s\u0003s\u0e6f\bs\u0001s\u0001"+
		"s\u0001s\u0001s\u0001s\u0005s\u0e76\bs\ns\fs\u0e79\ts\u0001s\u0001s\u0003"+
		"s\u0e7d\bs\u0001t\u0001t\u0001t\u0001t\u0001t\u0005t\u0e84\bt\nt\ft\u0e87"+
		"\tt\u0001u\u0001u\u0003u\u0e8b\bu\u0001v\u0001v\u0001v\u0005v\u0e90\b"+
		"v\nv\fv\u0e93\tv\u0001w\u0001w\u0005w\u0e97\bw\nw\fw\u0e9a\tw\u0001w\u0001"+
		"w\u0001w\u0005w\u0e9f\bw\nw\fw\u0ea2\tw\u0001w\u0001w\u0003w\u0ea6\bw"+
		"\u0001x\u0001x\u0001x\u0001x\u0001x\u0001x\u0003x\u0eae\bx\u0001x\u0003"+
		"x\u0eb1\bx\u0001x\u0003x\u0eb4\bx\u0001x\u0001x\u0001x\u0005x\u0eb9\b"+
		"x\nx\fx\u0ebc\tx\u0003x\u0ebe\bx\u0001x\u0001x\u0001x\u0001x\u0001x\u0003"+
		"x\u0ec5\bx\u0001x\u0003x\u0ec8\bx\u0001x\u0001x\u0001x\u0001x\u0001x\u0001"+
		"x\u0003x\u0ed0\bx\u0001y\u0001y\u0001y\u0001y\u0003y\u0ed6\by\u0001y\u0001"+
		"y\u0001y\u0001y\u0001z\u0001z\u0001z\u0001z\u0001z\u0003z\u0ee1\bz\u0001"+
		"{\u0003{\u0ee4\b{\u0001{\u0001{\u0001{\u0001{\u0001{\u0001{\u0001{\u0001"+
		"{\u0001{\u0003{\u0eef\b{\u0001{\u0001{\u0001{\u0001{\u0003{\u0ef5\b{\u0001"+
		"{\u0001{\u0003{\u0ef9\b{\u0001{\u0001{\u0001{\u0001{\u0001{\u0001{\u0001"+
		"{\u0001{\u0001{\u0003{\u0f04\b{\u0001{\u0001{\u0001{\u0003{\u0f09\b{\u0003"+
		"{\u0f0b\b{\u0001{\u0001{\u0003{\u0f0f\b{\u0001|\u0001|\u0001|\u0001|\u0001"+
		"|\u0001|\u0001|\u0001|\u0003|\u0f19\b|\u0001}\u0001}\u0001}\u0001}\u0001"+
		"}\u0001}\u0001}\u0001}\u0003}\u0f23\b}\u0001~\u0001~\u0005~\u0f27\b~\n"+
		"~\f~\u0f2a\t~\u0001~\u0001~\u0003~\u0f2e\b~\u0001~\u0003~\u0f31\b~\u0001"+
		"~\u0003~\u0f34\b~\u0001~\u0003~\u0f37\b~\u0001~\u0003~\u0f3a\b~\u0001"+
		"~\u0003~\u0f3d\b~\u0001~\u0003~\u0f40\b~\u0001~\u0001~\u0005~\u0f44\b"+
		"~\n~\f~\u0f47\t~\u0001~\u0001~\u0003~\u0f4b\b~\u0001~\u0003~\u0f4e\b~"+
		"\u0001~\u0003~\u0f51\b~\u0001~\u0003~\u0f54\b~\u0001~\u0003~\u0f57\b~"+
		"\u0001~\u0003~\u0f5a\b~\u0001~\u0003~\u0f5d\b~\u0003~\u0f5f\b~\u0001\u007f"+
		"\u0001\u007f\u0005\u007f\u0f63\b\u007f\n\u007f\f\u007f\u0f66\t\u007f\u0001"+
		"\u007f\u0001\u007f\u0003\u007f\u0f6a\b\u007f\u0001\u007f\u0003\u007f\u0f6d"+
		"\b\u007f\u0001\u007f\u0003\u007f\u0f70\b\u007f\u0001\u007f\u0003\u007f"+
		"\u0f73\b\u007f\u0001\u007f\u0003\u007f\u0f76\b\u007f\u0001\u007f\u0003"+
		"\u007f\u0f79\b\u007f\u0001\u0080\u0001\u0080\u0003\u0080\u0f7d\b\u0080"+
		"\u0001\u0080\u0001\u0080\u0001\u0081\u0001\u0081\u0003\u0081\u0f83\b\u0081"+
		"\u0001\u0081\u0001\u0081\u0003\u0081\u0f87\b\u0081\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0003\u0082\u0f91\b\u0082\u0001\u0083\u0001\u0083\u0003\u0083\u0f95\b"+
		"\u0083\u0001\u0083\u0001\u0083\u0005\u0083\u0f99\b\u0083\n\u0083\f\u0083"+
		"\u0f9c\t\u0083\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084"+
		"\u0001\u0084\u0003\u0084\u0fa4\b\u0084\u0001\u0084\u0003\u0084\u0fa7\b"+
		"\u0084\u0001\u0084\u0001\u0084\u0003\u0084\u0fab\b\u0084\u0001\u0084\u0003"+
		"\u0084\u0fae\b\u0084\u0001\u0084\u0001\u0084\u0003\u0084\u0fb2\b\u0084"+
		"\u0001\u0084\u0001\u0084\u0003\u0084\u0fb6\b\u0084\u0001\u0084\u0003\u0084"+
		"\u0fb9\b\u0084\u0003\u0084\u0fbb\b\u0084\u0001\u0085\u0001\u0085\u0001"+
		"\u0085\u0001\u0085\u0005\u0085\u0fc1\b\u0085\n\u0085\f\u0085\u0fc4\t\u0085"+
		"\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0085"+
		"\u0001\u0085\u0001\u0085\u0001\u0085\u0003\u0085\u0fcf\b\u0085\u0001\u0085"+
		"\u0001\u0085\u0004\u0085\u0fd3\b\u0085\u000b\u0085\f\u0085\u0fd4\u0003"+
		"\u0085\u0fd7\b\u0085\u0001\u0085\u0001\u0085\u0004\u0085\u0fdb\b\u0085"+
		"\u000b\u0085\f\u0085\u0fdc\u0003\u0085\u0fdf\b\u0085\u0003\u0085\u0fe1"+
		"\b\u0085\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0003\u0086\u0fe7"+
		"\b\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001"+
		"\u0086\u0003\u0086\u0fef\b\u0086\u0001\u0087\u0001\u0087\u0001\u0087\u0001"+
		"\u0087\u0001\u0087\u0001\u0087\u0003\u0087\u0ff7\b\u0087\u0001\u0088\u0001"+
		"\u0088\u0003\u0088\u0ffb\b\u0088\u0001\u0088\u0001\u0088\u0003\u0088\u0fff"+
		"\b\u0088\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0005"+
		"\u0089\u1006\b\u0089\n\u0089\f\u0089\u1009\t\u0089\u0001\u0089\u0001\u0089"+
		"\u0003\u0089\u100d\b\u0089\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008b"+
		"\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b"+
		"\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b"+
		"\u0005\u008b\u101f\b\u008b\n\u008b\f\u008b\u1022\t\u008b\u0001\u008c\u0001"+
		"\u008c\u0003\u008c\u1026\b\u008c\u0001\u008d\u0001\u008d\u0001\u008d\u0001"+
		"\u008d\u0003\u008d\u102c\b\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001"+
		"\u008d\u0001\u008d\u0003\u008d\u1033\b\u008d\u0001\u008e\u0001\u008e\u0001"+
		"\u008e\u0003\u008e\u1038\b\u008e\u0001\u008f\u0001\u008f\u0001\u008f\u0001"+
		"\u008f\u0001\u008f\u0005\u008f\u103f\b\u008f\n\u008f\f\u008f\u1042\t\u008f"+
		"\u0003\u008f\u1044\b\u008f\u0001\u0090\u0001\u0090\u0003\u0090\u1048\b"+
		"\u0090\u0001\u0091\u0001\u0091\u0003\u0091\u104c\b\u0091\u0001\u0091\u0001"+
		"\u0091\u0003\u0091\u1050\b\u0091\u0001\u0091\u0003\u0091\u1053\b\u0091"+
		"\u0001\u0091\u0003\u0091\u1056\b\u0091\u0001\u0091\u0003\u0091\u1059\b"+
		"\u0091\u0001\u0092\u0001\u0092\u0003\u0092\u105d\b\u0092\u0001\u0092\u0001"+
		"\u0092\u0003\u0092\u1061\b\u0092\u0001\u0092\u0003\u0092\u1064\b\u0092"+
		"\u0001\u0092\u0003\u0092\u1067\b\u0092\u0001\u0092\u0003\u0092\u106a\b"+
		"\u0092\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0094\u0001\u0094\u0003"+
		"\u0094\u1071\b\u0094\u0001\u0094\u0001\u0094\u0003\u0094\u1075\b\u0094"+
		"\u0001\u0094\u0001\u0094\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095"+
		"\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0005\u0096"+
		"\u1082\b\u0096\n\u0096\f\u0096\u1085\t\u0096\u0001\u0096\u0003\u0096\u1088"+
		"\b\u0096\u0001\u0097\u0001\u0097\u0001\u0097\u0001\u0098\u0001\u0098\u0001"+
		"\u0098\u0001\u0098\u0001\u0098\u0001\u0099\u0001\u0099\u0003\u0099\u1094"+
		"\b\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0005\u0099\u109a"+
		"\b\u0099\n\u0099\f\u0099\u109d\t\u0099\u0001\u009a\u0001\u009a\u0001\u009a"+
		"\u0001\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0003\u009a\u10a6\b\u009a"+
		"\u0001\u009b\u0001\u009b\u0003\u009b\u10aa\b\u009b\u0001\u009b\u0003\u009b"+
		"\u10ad\b\u009b\u0001\u009b\u0001\u009b\u0001\u009c\u0001\u009c\u0003\u009c"+
		"\u10b3\b\u009c\u0001\u009c\u0003\u009c\u10b6\b\u009c\u0001\u009c\u0003"+
		"\u009c\u10b9\b\u009c\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001"+
		"\u009d\u0001\u009d\u0001\u009d\u0003\u009d\u10c2\b\u009d\u0001\u009e\u0001"+
		"\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0003"+
		"\u009e\u10cb\b\u009e\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001"+
		"\u009f\u0001\u009f\u0005\u009f\u10d3\b\u009f\n\u009f\f\u009f\u10d6\t\u009f"+
		"\u0001\u009f\u0003\u009f\u10d9\b\u009f\u0001\u00a0\u0001\u00a0\u0001\u00a0"+
		"\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0005\u00a0\u10e1\b\u00a0\n\u00a0"+
		"\f\u00a0\u10e4\t\u00a0\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1"+
		"\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0003\u00a1\u10ed\b\u00a1\u0001\u00a2"+
		"\u0001\u00a2\u0001\u00a2\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0003\u00a3"+
		"\u10f5\b\u00a3\u0001\u00a3\u0003\u00a3\u10f8\b\u00a3\u0001\u00a4\u0001"+
		"\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0005\u00a4\u10ff\b\u00a4\n"+
		"\u00a4\f\u00a4\u1102\t\u00a4\u0003\u00a4\u1104\b\u00a4\u0001\u00a4\u0001"+
		"\u00a4\u0003\u00a4\u1108\b\u00a4\u0001\u00a4\u0005\u00a4\u110b\b\u00a4"+
		"\n\u00a4\f\u00a4\u110e\t\u00a4\u0001\u00a4\u0003\u00a4\u1111\b\u00a4\u0001"+
		"\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0005\u00a5\u1118"+
		"\b\u00a5\n\u00a5\f\u00a5\u111b\t\u00a5\u0003\u00a5\u111d\b\u00a5\u0001"+
		"\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001"+
		"\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001"+
		"\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001"+
		"\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001"+
		"\u00a8\u0001\u00a8\u0001\u00a8\u0005\u00a8\u113a\b\u00a8\n\u00a8\f\u00a8"+
		"\u113d\t\u00a8\u0003\u00a8\u113f\b\u00a8\u0001\u00a8\u0003\u00a8\u1142"+
		"\b\u00a8\u0001\u00a9\u0001\u00a9\u0001\u00aa\u0001\u00aa\u0001\u00ab\u0001"+
		"\u00ab\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ad\u0001"+
		"\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001"+
		"\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001"+
		"\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001"+
		"\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001"+
		"\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001"+
		"\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001"+
		"\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0005\u00ad\u1178"+
		"\b\u00ad\n\u00ad\f\u00ad\u117b\t\u00ad\u0001\u00ad\u0001\u00ad\u0003\u00ad"+
		"\u117f\b\u00ad\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae"+
		"\u0001\u00ae\u0001\u00af\u0001\u00af\u0001\u00b0\u0001\u00b0\u0001\u00b0"+
		"\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0"+
		"\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0"+
		"\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0003\u00b0\u119b\b\u00b0\u0001\u00b1"+
		"\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1"+
		"\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0003\u00b1"+
		"\u11a9\b\u00b1\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0005\u00b2\u11ae\b"+
		"\u00b2\n\u00b2\f\u00b2\u11b1\t\u00b2\u0001\u00b2\u0003\u00b2\u11b4\b\u00b2"+
		"\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0003\u00b3\u11ba\b\u00b3"+
		"\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4"+
		"\u0003\u00b4\u11c2\b\u00b4\u0003\u00b4\u11c4\b\u00b4\u0001\u00b5\u0001"+
		"\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001"+
		"\u00b6\u0001\u00b6\u0003\u00b6\u11cf\b\u00b6\u0001\u00b7\u0001\u00b7\u0001"+
		"\u00b7\u0001\u00b7\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0003"+
		"\u00b8\u11d9\b\u00b8\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001"+
		"\u00b9\u0003\u00b9\u11e0\b\u00b9\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0001"+
		"\u00ba\u0003\u00ba\u11e6\b\u00ba\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001"+
		"\u00bb\u0001\u00bc\u0001\u00bc\u0003\u00bc\u11ee\b\u00bc\u0001\u00bd\u0001"+
		"\u00bd\u0001\u00bd\u0003\u00bd\u11f3\b\u00bd\u0001\u00bd\u0001\u00bd\u0001"+
		"\u00bd\u0001\u00bd\u0005\u00bd\u11f9\b\u00bd\n\u00bd\f\u00bd\u11fc\t\u00bd"+
		"\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0005\u00bd\u1201\b\u00bd\n\u00bd"+
		"\f\u00bd\u1204\t\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0005\u00bd"+
		"\u1209\b\u00bd\n\u00bd\f\u00bd\u120c\t\u00bd\u0001\u00bd\u0001\u00bd\u0001"+
		"\u00bd\u0005\u00bd\u1211\b\u00bd\n\u00bd\f\u00bd\u1214\t\u00bd\u0001\u00bd"+
		"\u0005\u00bd\u1217\b\u00bd\n\u00bd\f\u00bd\u121a\t\u00bd\u0003\u00bd\u121c"+
		"\b\u00bd\u0001\u00bd\u0001\u00bd\u0003\u00bd\u1220\b\u00bd\u0001\u00be"+
		"\u0001\u00be\u0001\u00be\u0003\u00be\u1225\b\u00be\u0001\u00be\u0004\u00be"+
		"\u1228\b\u00be\u000b\u00be\f\u00be\u1229\u0001\u00be\u0001\u00be\u0004"+
		"\u00be\u122e\b\u00be\u000b\u00be\f\u00be\u122f\u0003\u00be\u1232\b\u00be"+
		"\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00bf\u0001\u00bf\u0001\u00bf"+
		"\u0001\u00bf\u0004\u00bf\u123b\b\u00bf\u000b\u00bf\f\u00bf\u123c\u0001"+
		"\u00bf\u0005\u00bf\u1240\b\u00bf\n\u00bf\f\u00bf\u1243\t\u00bf\u0001\u00bf"+
		"\u0001\u00bf\u0004\u00bf\u1247\b\u00bf\u000b\u00bf\f\u00bf\u1248\u0003"+
		"\u00bf\u124b\b\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00c0\u0001"+
		"\u00c0\u0001\u00c0\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0001\u00c2\u0001"+
		"\u00c2\u0001\u00c2\u0003\u00c2\u1259\b\u00c2\u0001\u00c2\u0001\u00c2\u0004"+
		"\u00c2\u125d\b\u00c2\u000b\u00c2\f\u00c2\u125e\u0001\u00c2\u0001\u00c2"+
		"\u0001\u00c2\u0003\u00c2\u1264\b\u00c2\u0001\u00c3\u0001\u00c3\u0001\u00c3"+
		"\u0003\u00c3\u1269\b\u00c3\u0001\u00c3\u0001\u00c3\u0004\u00c3\u126d\b"+
		"\u00c3\u000b\u00c3\f\u00c3\u126e\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001"+
		"\u00c3\u0001\u00c3\u0003\u00c3\u1276\b\u00c3\u0001\u00c4\u0001\u00c4\u0001"+
		"\u00c4\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0003\u00c5\u127e\b\u00c5\u0001"+
		"\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0004\u00c5\u1284\b\u00c5\u000b"+
		"\u00c5\f\u00c5\u1285\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0003\u00c5\u128b"+
		"\b\u00c5\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0003\u00c6\u1291"+
		"\b\u00c6\u0001\u00c6\u0003\u00c6\u1294\b\u00c6\u0001\u00c6\u0001\u00c6"+
		"\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0003\u00c6\u129c\b\u00c6"+
		"\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0003\u00c7"+
		"\u12a3\b\u00c7\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8"+
		"\u0001\u00c8\u0001\u00c8\u0003\u00c8\u12ac\b\u00c8\u0001\u00c8\u0003\u00c8"+
		"\u12af\b\u00c8\u0001\u00c9\u0001\u00c9\u0001\u00c9\u0001\u00c9\u0001\u00c9"+
		"\u0001\u00c9\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca"+
		"\u0001\u00ca\u0001\u00ca\u0005\u00ca\u12be\b\u00ca\n\u00ca\f\u00ca\u12c1"+
		"\t\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0003"+
		"\u00cb\u12c8\b\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001"+
		"\u00cb\u0001\u00cb\u0003\u00cb\u12d0\b\u00cb\u0001\u00cc\u0001\u00cc\u0003"+
		"\u00cc\u12d4\b\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cd\u0001\u00cd\u0001"+
		"\u00cd\u0003\u00cd\u12db\b\u00cd\u0001\u00cd\u0001\u00cd\u0004\u00cd\u12df"+
		"\b\u00cd\u000b\u00cd\f\u00cd\u12e0\u0001\u00ce\u0001\u00ce\u0001\u00ce"+
		"\u0001\u00ce\u0004\u00ce\u12e7\b\u00ce\u000b\u00ce\f\u00ce\u12e8\u0001"+
		"\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0005\u00cf\u12f0"+
		"\b\u00cf\n\u00cf\f\u00cf\u12f3\t\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf"+
		"\u0003\u00cf\u12f8\b\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0005\u00cf"+
		"\u12fd\b\u00cf\n\u00cf\f\u00cf\u1300\t\u00cf\u0001\u00cf\u0001\u00cf\u0001"+
		"\u00cf\u0001\u00cf\u0003\u00cf\u1306\b\u00cf\u0001\u00cf\u0005\u00cf\u1309"+
		"\b\u00cf\n\u00cf\f\u00cf\u130c\t\u00cf\u0003\u00cf\u130e\b\u00cf\u0003"+
		"\u00cf\u1310\b\u00cf\u0001\u00cf\u0001\u00cf\u0004\u00cf\u1314\b\u00cf"+
		"\u000b\u00cf\f\u00cf\u1315\u0003\u00cf\u1318\b\u00cf\u0001\u00cf\u0001"+
		"\u00cf\u0005\u00cf\u131c\b\u00cf\n\u00cf\f\u00cf\u131f\t\u00cf\u0003\u00cf"+
		"\u1321\b\u00cf\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0"+
		"\u0005\u00d0\u1328\b\u00d0\n\u00d0\f\u00d0\u132b\t\u00d0\u0001\u00d0\u0001"+
		"\u00d0\u0001\u00d0\u0003\u00d0\u1330\b\u00d0\u0001\u00d0\u0001\u00d0\u0001"+
		"\u00d0\u0005\u00d0\u1335\b\u00d0\n\u00d0\f\u00d0\u1338\t\u00d0\u0001\u00d0"+
		"\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0003\u00d0\u133e\b\u00d0\u0001\u00d0"+
		"\u0005\u00d0\u1341\b\u00d0\n\u00d0\f\u00d0\u1344\t\u00d0\u0003\u00d0\u1346"+
		"\b\u00d0\u0003\u00d0\u1348\b\u00d0\u0001\u00d0\u0001\u00d0\u0004\u00d0"+
		"\u134c\b\u00d0\u000b\u00d0\f\u00d0\u134d\u0003\u00d0\u1350\b\u00d0\u0001"+
		"\u00d0\u0001\u00d0\u0005\u00d0\u1354\b\u00d0\n\u00d0\f\u00d0\u1357\t\u00d0"+
		"\u0003\u00d0\u1359\b\u00d0\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0003\u00d1"+
		"\u135e\b\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0005\u00d1\u1363\b"+
		"\u00d1\n\u00d1\f\u00d1\u1366\t\u00d1\u0001\u00d2\u0001\u00d2\u0001\u00d2"+
		"\u0001\u00d2\u0005\u00d2\u136c\b\u00d2\n\u00d2\f\u00d2\u136f\t\u00d2\u0001"+
		"\u00d2\u0001\u00d2\u0003\u00d2\u1373\b\u00d2\u0001\u00d2\u0001\u00d2\u0001"+
		"\u00d2\u0001\u00d2\u0001\u00d2\u0005\u00d2\u137a\b\u00d2\n\u00d2\f\u00d2"+
		"\u137d\t\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0003\u00d2"+
		"\u1383\b\u00d2\u0001\u00d2\u0005\u00d2\u1386\b\u00d2\n\u00d2\f\u00d2\u1389"+
		"\t\u00d2\u0003\u00d2\u138b\b\u00d2\u0003\u00d2\u138d\b\u00d2\u0001\u00d2"+
		"\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0005\u00d2\u1393\b\u00d2\n\u00d2"+
		"\f\u00d2\u1396\t\u00d2\u0003\u00d2\u1398\b\u00d2\u0001\u00d2\u0001\u00d2"+
		"\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0003\u00d2\u13a0\b\u00d2"+
		"\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0003\u00d2\u13a5\b\u00d2\u0001\u00d2"+
		"\u0001\u00d2\u0001\u00d2\u0003\u00d2\u13aa\b\u00d2\u0005\u00d2\u13ac\b"+
		"\u00d2\n\u00d2\f\u00d2\u13af\t\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2"+
		"\u0003\u00d2\u13b4\b\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0003\u00d2"+
		"\u13b9\b\u00d2\u0005\u00d2\u13bb\b\u00d2\n\u00d2\f\u00d2\u13be\t\u00d2"+
		"\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0003\u00d2\u13c3\b\u00d2\u0003\u00d2"+
		"\u13c5\b\u00d2\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3"+
		"\u0001\u00d3\u0001\u00d3\u0005\u00d3\u13ce\b\u00d3\n\u00d3\f\u00d3\u13d1"+
		"\t\u00d3\u0003\u00d3\u13d3\b\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3"+
		"\u0005\u00d3\u13d8\b\u00d3\n\u00d3\f\u00d3\u13db\t\u00d3\u0003\u00d3\u13dd"+
		"\b\u00d3\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0001"+
		"\u00d4\u0001\u00d4\u0001\u00d4\u0005\u00d4\u13e7\b\u00d4\n\u00d4\f\u00d4"+
		"\u13ea\t\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0003\u00d4\u13ef\b"+
		"\u00d4\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0005"+
		"\u00d5\u13f6\b\u00d5\n\u00d5\f\u00d5\u13f9\t\u00d5\u0001\u00d6\u0001\u00d6"+
		"\u0001\u00d6\u0001\u00d6\u0005\u00d6\u13ff\b\u00d6\n\u00d6\f\u00d6\u1402"+
		"\t\u00d6\u0001\u00d6\u0001\u00d6\u0003\u00d6\u1406\b\u00d6\u0001\u00d6"+
		"\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0005\u00d6\u140d\b\u00d6"+
		"\n\u00d6\f\u00d6\u1410\t\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0003"+
		"\u00d6\u1415\b\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001"+
		"\u00d6\u0001\u00d6\u0001\u00d6\u0005\u00d6\u141e\b\u00d6\n\u00d6\f\u00d6"+
		"\u1421\t\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0005\u00d6"+
		"\u1427\b\u00d6\n\u00d6\f\u00d6\u142a\t\u00d6\u0001\u00d6\u0001\u00d6\u0001"+
		"\u00d6\u0003\u00d6\u142f\b\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0003"+
		"\u00d6\u1434\b\u00d6\u0005\u00d6\u1436\b\u00d6\n\u00d6\f\u00d6\u1439\t"+
		"\u00d6\u0003\u00d6\u143b\b\u00d6\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001"+
		"\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0005\u00d7\u1445"+
		"\b\u00d7\n\u00d7\f\u00d7\u1448\t\u00d7\u0001\u00d8\u0001\u00d8\u0001\u00d8"+
		"\u0001\u00d8\u0003\u00d8\u144e\b\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8"+
		"\u0003\u00d8\u1453\b\u00d8\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00da"+
		"\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da"+
		"\u0001\u00da\u0001\u00da\u0001\u00da\u0003\u00da\u1462\b\u00da\u0001\u00da"+
		"\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0003\u00da\u1469\b\u00da"+
		"\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da"+
		"\u0003\u00da\u1471\b\u00da\u0001\u00da\u0003\u00da\u1474\b\u00da\u0001"+
		"\u00db\u0001\u00db\u0001\u00db\u0001\u00db\u0001\u00db\u0001\u00db\u0001"+
		"\u00db\u0001\u00db\u0003\u00db\u147e\b\u00db\u0001\u00dc\u0001\u00dc\u0001"+
		"\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0003"+
		"\u00dc\u1488\b\u00dc\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001"+
		"\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0003\u00dd\u1492\b\u00dd\u0001"+
		"\u00de\u0001\u00de\u0001\u00de\u0001\u00df\u0001\u00df\u0001\u00df\u0001"+
		"\u00df\u0001\u00df\u0003\u00df\u149c\b\u00df\u0001\u00e0\u0001\u00e0\u0003"+
		"\u00e0\u14a0\b\u00e0\u0001\u00e0\u0001\u00e0\u0003\u00e0\u14a4\b\u00e0"+
		"\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0"+
		"\u0001\u00e0\u0001\u00e0\u0003\u00e0\u14ae\b\u00e0\u0001\u00e0\u0001\u00e0"+
		"\u0001\u00e0\u0003\u00e0\u14b3\b\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0"+
		"\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0"+
		"\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0"+
		"\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0"+
		"\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0"+
		"\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0"+
		"\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0"+
		"\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0"+
		"\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0"+
		"\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0"+
		"\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0"+
		"\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0"+
		"\u0001\u00e0\u0003\u00e0\u14fb\b\u00e0\u0001\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0003\u00e1\u150d\b\u00e1\u0001\u00e2\u0001\u00e2\u0001\u00e2"+
		"\u0001\u00e2\u0001\u00e3\u0001\u00e3\u0003\u00e3\u1515\b\u00e3\u0001\u00e3"+
		"\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3"+
		"\u0001\u00e3\u0005\u00e3\u151f\b\u00e3\n\u00e3\f\u00e3\u1522\t\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0003\u00e3\u1528\b\u00e3\u0003"+
		"\u00e3\u152a\b\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0005\u00e3\u1532\b\u00e3\n\u00e3\f\u00e3\u1535\t\u00e3"+
		"\u0003\u00e3\u1537\b\u00e3\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4"+
		"\u0005\u00e4\u153d\b\u00e4\n\u00e4\f\u00e4\u1540\t\u00e4\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0003\u00e5\u1546\b\u00e5\u0001\u00e6\u0001"+
		"\u00e6\u0003\u00e6\u154a\b\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0003"+
		"\u00e6\u154f\b\u00e6\u0001\u00e7\u0001\u00e7\u0003\u00e7\u1553\b\u00e7"+
		"\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0003\u00e7\u1558\b\u00e7\u0001\u00e7"+
		"\u0003\u00e7\u155b\b\u00e7\u0001\u00e7\u0003\u00e7\u155e\b\u00e7\u0001"+
		"\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001"+
		"\u00e8\u0003\u00e8\u1567\b\u00e8\u0001\u00e9\u0001\u00e9\u0003\u00e9\u156b"+
		"\b\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001"+
		"\u00e9\u0001\u00e9\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001"+
		"\u00ea\u0001\u00ea\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001"+
		"\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0003\u00ec\u1583"+
		"\b\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0003"+
		"\u00ec\u158a\b\u00ec\u0005\u00ec\u158c\b\u00ec\n\u00ec\f\u00ec\u158f\t"+
		"\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0003\u00ec\u1595"+
		"\b\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0003"+
		"\u00ec\u159c\b\u00ec\u0001\u00ec\u0003\u00ec\u159f\b\u00ec\u0001\u00ec"+
		"\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec"+
		"\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0005\u00ec"+
		"\u15ad\b\u00ec\n\u00ec\f\u00ec\u15b0\t\u00ec\u0003\u00ec\u15b2\b\u00ec"+
		"\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed"+
		"\u0001\u00ed\u0001\u00ed\u0003\u00ed\u15bc\b\u00ed\u0001\u00ed\u0001\u00ed"+
		"\u0003\u00ed\u15c0\b\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed"+
		"\u0003\u00ed\u15c6\b\u00ed\u0001\u00ed\u0003\u00ed\u15c9\b\u00ed\u0001"+
		"\u00ed\u0001\u00ed\u0001\u00ed\u0003\u00ed\u15ce\b\u00ed\u0001\u00ed\u0001"+
		"\u00ed\u0003\u00ed\u15d2\b\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001"+
		"\u00ed\u0001\u00ed\u0003\u00ed\u15d9\b\u00ed\u0001\u00ed\u0003\u00ed\u15dc"+
		"\b\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0003\u00ed\u15e2"+
		"\b\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001"+
		"\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001"+
		"\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001"+
		"\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0003\u00ed\u15fa"+
		"\b\u00ed\u0001\u00ed\u0003\u00ed\u15fd\b\u00ed\u0001\u00ed\u0001\u00ed"+
		"\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed"+
		"\u0001\u00ed\u0001\u00ed\u0003\u00ed\u1609\b\u00ed\u0001\u00ed\u0003\u00ed"+
		"\u160c\b\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed"+
		"\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0003\u00ed\u1616\b\u00ed\u0001\u00ed"+
		"\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0003\u00ed"+
		"\u161e\b\u00ed\u0001\u00ed\u0001\u00ed\u0003\u00ed\u1622\b\u00ed\u0001"+
		"\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0003\u00ed\u1629"+
		"\b\u00ed\u0001\u00ed\u0003\u00ed\u162c\b\u00ed\u0001\u00ed\u0001\u00ed"+
		"\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0005\u00ed\u1633\b\u00ed\n\u00ed"+
		"\f\u00ed\u1636\t\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0003\u00ed"+
		"\u163b\b\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0003\u00ed"+
		"\u1641\b\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed"+
		"\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0003\u00ed\u164b\b\u00ed\u0003\u00ed"+
		"\u164d\b\u00ed\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0003\u00ee"+
		"\u1653\b\u00ee\u0001\u00ee\u0003\u00ee\u1656\b\u00ee\u0001\u00ee\u0003"+
		"\u00ee\u1659\b\u00ee\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001"+
		"\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0003"+
		"\u00ef\u1665\b\u00ef\u0001\u00ef\u0003\u00ef\u1668\b\u00ef\u0001\u00f0"+
		"\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0003\u00f0\u166e\b\u00f0\u0001\u00f1"+
		"\u0003\u00f1\u1671\b\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0003\u00f1\u1679\b\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u1681\b\u00f1"+
		"\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0003\u00f2\u1687\b\u00f2"+
		"\u0001\u00f2\u0001\u00f2\u0003\u00f2\u168b\b\u00f2\u0001\u00f3\u0001\u00f3"+
		"\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3"+
		"\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0003\u00f3\u1699\b\u00f3"+
		"\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f5\u0001\u00f5\u0001\u00f5"+
		"\u0001\u00f5\u0001\u00f5\u0005\u00f5\u16a3\b\u00f5\n\u00f5\f\u00f5\u16a6"+
		"\t\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0003\u00f5\u16ac"+
		"\b\u00f5\u0001\u00f5\u0003\u00f5\u16af\b\u00f5\u0001\u00f5\u0001\u00f5"+
		"\u0001\u00f5\u0001\u00f6\u0001\u00f6\u0003\u00f6\u16b6\b\u00f6\u0001\u00f6"+
		"\u0001\u00f6\u0001\u00f6\u0005\u00f6\u16bb\b\u00f6\n\u00f6\f\u00f6\u16be"+
		"\t\u00f6\u0001\u00f7\u0001\u00f7\u0003\u00f7\u16c2\b\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8"+
		"\u0001\u00f8\u0001\u00f8\u0005\u00f8\u16cd\b\u00f8\n\u00f8\f\u00f8\u16d0"+
		"\t\u00f8\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00fa\u0001"+
		"\u00fa\u0001\u00fb\u0001\u00fb\u0003\u00fb\u16da\b\u00fb\u0001\u00fb\u0001"+
		"\u00fb\u0001\u00fb\u0001\u00fb\u0003\u00fb\u16e0\b\u00fb\u0001\u00fc\u0001"+
		"\u00fc\u0001\u00fc\u0003\u00fc\u16e5\b\u00fc\u0001\u00fc\u0001\u00fc\u0001"+
		"\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001"+
		"\u00fc\u0001\u00fc\u0001\u00fc\u0003\u00fc\u16f2\b\u00fc\u0003\u00fc\u16f4"+
		"\b\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0003\u00fc\u16f9\b\u00fc"+
		"\u0001\u00fc\u0001\u00fc\u0003\u00fc\u16fd\b\u00fc\u0001\u00fc\u0003\u00fc"+
		"\u1700\b\u00fc\u0003\u00fc\u1702\b\u00fc\u0001\u00fd\u0001\u00fd\u0001"+
		"\u00fd\u0001\u00fd\u0001\u00fd\u0003\u00fd\u1709\b\u00fd\u0001\u00fe\u0001"+
		"\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0003\u00fe\u1710\b\u00fe\u0001"+
		"\u00fe\u0003\u00fe\u1713\b\u00fe\u0001\u00fe\u0003\u00fe\u1716\b\u00fe"+
		"\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0003\u00fe\u171c\b\u00fe"+
		"\u0001\u00fe\u0001\u00fe\u0003\u00fe\u1720\b\u00fe\u0001\u00ff\u0001\u00ff"+
		"\u0001\u00ff\u0001\u00ff\u0003\u00ff\u1726\b\u00ff\u0001\u0100\u0001\u0100"+
		"\u0001\u0100\u0001\u0100\u0003\u0100\u172c\b\u0100\u0001\u0100\u0001\u0100"+
		"\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0102\u0001\u0102\u0001\u0102"+
		"\u0001\u0103\u0001\u0103\u0001\u0103\u0003\u0103\u1739\b\u0103\u0001\u0103"+
		"\u0001\u0103\u0001\u0103\u0003\u0103\u173e\b\u0103\u0001\u0103\u0001\u0103"+
		"\u0001\u0103\u0001\u0103\u0005\u0103\u1744\b\u0103\n\u0103\f\u0103\u1747"+
		"\t\u0103\u0003\u0103\u1749\b\u0103\u0001\u0104\u0001\u0104\u0001\u0104"+
		"\u0003\u0104\u174e\b\u0104\u0001\u0104\u0001\u0104\u0001\u0104\u0003\u0104"+
		"\u1753\b\u0104\u0001\u0104\u0001\u0104\u0001\u0104\u0001\u0104\u0005\u0104"+
		"\u1759\b\u0104\n\u0104\f\u0104\u175c\t\u0104\u0003\u0104\u175e\b\u0104"+
		"\u0001\u0105\u0001\u0105\u0001\u0105\u0001\u0105\u0001\u0105\u0001\u0105"+
		"\u0003\u0105\u1766\b\u0105\u0001\u0106\u0001\u0106\u0003\u0106\u176a\b"+
		"\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0001"+
		"\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0005\u0106\u1775\b\u0106\n"+
		"\u0106\f\u0106\u1778\t\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0003"+
		"\u0106\u177d\b\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0001"+
		"\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0005\u0106\u1787\b\u0106\n"+
		"\u0106\f\u0106\u178a\t\u0106\u0003\u0106\u178c\b\u0106\u0001\u0107\u0001"+
		"\u0107\u0001\u0108\u0001\u0108\u0001\u0108\u0001\u0108\u0001\u0108\u0003"+
		"\u0108\u1795\b\u0108\u0001\u0108\u0001\u0108\u0001\u0108\u0003\u0108\u179a"+
		"\b\u0108\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0003\u0109\u17a0"+
		"\b\u0109\u0001\u010a\u0001\u010a\u0001\u010b\u0001\u010b\u0003\u010b\u17a6"+
		"\b\u010b\u0001\u010c\u0001\u010c\u0001\u010c\u0003\u010c\u17ab\b\u010c"+
		"\u0003\u010c\u17ad\b\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0003\u010c"+
		"\u17b2\b\u010c\u0003\u010c\u17b4\b\u010c\u0001\u010d\u0001\u010d\u0003"+
		"\u010d\u17b8\b\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0003"+
		"\u010d\u17be\b\u010d\u0001\u010d\u0003\u010d\u17c1\b\u010d\u0001\u010d"+
		"\u0003\u010d\u17c4\b\u010d\u0001\u010e\u0001\u010e\u0001\u010e\u0001\u010e"+
		"\u0001\u010e\u0001\u010e\u0003\u010e\u17cc\b\u010e\u0001\u010f\u0001\u010f"+
		"\u0001\u0110\u0001\u0110\u0001\u0110\u0001\u0110\u0003\u0110\u17d4\b\u0110"+
		"\u0001\u0111\u0001\u0111\u0003\u0111\u17d8\b\u0111\u0001\u0112\u0001\u0112"+
		"\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113"+
		"\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113"+
		"\u0001\u0113\u0001\u0113\u0004\u0113\u17ea\b\u0113\u000b\u0113\f\u0113"+
		"\u17eb\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0003"+
		"\u0114\u17f3\b\u0114\u0003\u0114\u17f5\b\u0114\u0001\u0115\u0001\u0115"+
		"\u0001\u0115\u0004\u0115\u17fa\b\u0115\u000b\u0115\f\u0115\u17fb\u0003"+
		"\u0115\u17fe\b\u0115\u0001\u0116\u0001\u0116\u0003\u0116\u1802\b\u0116"+
		"\u0001\u0117\u0001\u0117\u0001\u0117\u0003\u0117\u1807\b\u0117\u0001\u0118"+
		"\u0001\u0118\u0001\u0118\u0001\u0118\u0001\u0118\u0001\u0118\u0001\u0118"+
		"\u0001\u0118\u0001\u0118\u0003\u0118\u1812\b\u0118\u0001\u0119\u0001\u0119"+
		"\u0001\u0119\u0003\u0119\u1817\b\u0119\u0001\u011a\u0001\u011a\u0001\u011b"+
		"\u0001\u011b\u0003\u011b\u181d\b\u011b\u0001\u011c\u0003\u011c\u1820\b"+
		"\u011c\u0001\u011c\u0001\u011c\u0003\u011c\u1824\b\u011c\u0001\u011c\u0004"+
		"\u011c\u1827\b\u011c\u000b\u011c\f\u011c\u1828\u0001\u011c\u0003\u011c"+
		"\u182c\b\u011c\u0001\u011c\u0001\u011c\u0003\u011c\u1830\b\u011c\u0001"+
		"\u011c\u0001\u011c\u0003\u011c\u1834\b\u011c\u0003\u011c\u1836\b\u011c"+
		"\u0001\u011d\u0001\u011d\u0001\u011e\u0003\u011e\u183b\b\u011e\u0001\u011e"+
		"\u0001\u011e\u0001\u011f\u0003\u011f\u1840\b\u011f\u0001\u011f\u0001\u011f"+
		"\u0001\u0120\u0001\u0120\u0001\u0120\u0001\u0120\u0001\u0120\u0001\u0120"+
		"\u0001\u0120\u0001\u0120\u0001\u0120\u0003\u0120\u184d\b\u0120\u0001\u0120"+
		"\u0003\u0120\u1850\b\u0120\u0001\u0121\u0001\u0121\u0003\u0121\u1854\b"+
		"\u0121\u0001\u0121\u0003\u0121\u1857\b\u0121\u0001\u0121\u0003\u0121\u185a"+
		"\b\u0121\u0001\u0121\u0001\u0121\u0001\u0121\u0003\u0121\u185f\b\u0121"+
		"\u0001\u0121\u0001\u0121\u0001\u0121\u0003\u0121\u1864\b\u0121\u0001\u0121"+
		"\u0001\u0121\u0001\u0121\u0003\u0121\u1869\b\u0121\u0001\u0121\u0003\u0121"+
		"\u186c\b\u0121\u0001\u0121\u0001\u0121\u0001\u0121\u0003\u0121\u1871\b"+
		"\u0121\u0001\u0121\u0003\u0121\u1874\b\u0121\u0001\u0121\u0001\u0121\u0001"+
		"\u0121\u0001\u0121\u0003\u0121\u187a\b\u0121\u0001\u0121\u0003\u0121\u187d"+
		"\b\u0121\u0001\u0121\u0001\u0121\u0003\u0121\u1881\b\u0121\u0001\u0121"+
		"\u0005\u0121\u1884\b\u0121\n\u0121\f\u0121\u1887\t\u0121\u0001\u0121\u0001"+
		"\u0121\u0003\u0121\u188b\b\u0121\u0001\u0121\u0005\u0121\u188e\b\u0121"+
		"\n\u0121\f\u0121\u1891\t\u0121\u0001\u0121\u0001\u0121\u0003\u0121\u1895"+
		"\b\u0121\u0001\u0121\u0003\u0121\u1898\b\u0121\u0001\u0121\u0005\u0121"+
		"\u189b\b\u0121\n\u0121\f\u0121\u189e\t\u0121\u0001\u0121\u0001\u0121\u0003"+
		"\u0121\u18a2\b\u0121\u0001\u0121\u0005\u0121\u18a5\b\u0121\n\u0121\f\u0121"+
		"\u18a8\t\u0121\u0001\u0121\u0001\u0121\u0001\u0121\u0003\u0121\u18ad\b"+
		"\u0121\u0001\u0121\u0001\u0121\u0001\u0121\u0003\u0121\u18b2\b\u0121\u0001"+
		"\u0121\u0001\u0121\u0001\u0121\u0003\u0121\u18b7\b\u0121\u0001\u0121\u0001"+
		"\u0121\u0001\u0121\u0003\u0121\u18bc\b\u0121\u0001\u0121\u0003\u0121\u18bf"+
		"\b\u0121\u0001\u0121\u0001\u0121\u0001\u0121\u0003\u0121\u18c4\b\u0121"+
		"\u0001\u0121\u0001\u0121\u0003\u0121\u18c8\b\u0121\u0001\u0121\u0001\u0121"+
		"\u0003\u0121\u18cc\b\u0121\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122"+
		"\u0005\u0122\u18d2\b\u0122\n\u0122\f\u0122\u18d5\t\u0122\u0001\u0122\u0001"+
		"\u0122\u0001\u0123\u0001\u0123\u0003\u0123\u18db\b\u0123\u0001\u0123\u0001"+
		"\u0123\u0003\u0123\u18df\b\u0123\u0001\u0123\u0001\u0123\u0001\u0123\u0003"+
		"\u0123\u18e4\b\u0123\u0001\u0123\u0001\u0123\u0001\u0123\u0003\u0123\u18e9"+
		"\b\u0123\u0001\u0123\u0001\u0123\u0003\u0123\u18ed\b\u0123\u0003\u0123"+
		"\u18ef\b\u0123\u0001\u0123\u0003\u0123\u18f2\b\u0123\u0001\u0124\u0001"+
		"\u0124\u0001\u0124\u0001\u0124\u0001\u0125\u0001\u0125\u0001\u0125\u0001"+
		"\u0125\u0001\u0125\u0001\u0125\u0001\u0126\u0001\u0126\u0001\u0126\u0001"+
		"\u0126\u0003\u0126\u1902\b\u0126\u0001\u0126\u0001\u0126\u0001\u0127\u0001"+
		"\u0127\u0001\u0127\u0005\u0127\u1909\b\u0127\n\u0127\f\u0127\u190c\t\u0127"+
		"\u0001\u0128\u0001\u0128\u0001\u0128\u0005\u0128\u1911\b\u0128\n\u0128"+
		"\f\u0128\u1914\t\u0128\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129"+
		"\u0005\u0129\u191a\b\u0129\n\u0129\f\u0129\u191d\t\u0129\u0001\u0129\u0001"+
		"\u0129\u0001\u012a\u0001\u012a\u0001\u012a\u0005\u012a\u1924\b\u012a\n"+
		"\u012a\f\u012a\u1927\t\u012a\u0001\u012b\u0001\u012b\u0001\u012b\u0005"+
		"\u012b\u192c\b\u012b\n\u012b\f\u012b\u192f\t\u012b\u0001\u012c\u0001\u012c"+
		"\u0001\u012c\u0005\u012c\u1934\b\u012c\n\u012c\f\u012c\u1937\t\u012c\u0001"+
		"\u012d\u0001\u012d\u0001\u012d\u0005\u012d\u193c\b\u012d\n\u012d\f\u012d"+
		"\u193f\t\u012d\u0001\u012e\u0001\u012e\u0001\u012e\u0005\u012e\u1944\b"+
		"\u012e\n\u012e\f\u012e\u1947\t\u012e\u0001\u012f\u0001\u012f\u0001\u012f"+
		"\u0001\u012f\u0001\u012f\u0001\u012f\u0001\u012f\u0001\u012f\u0001\u012f"+
		"\u0003\u012f\u1952\b\u012f\u0001\u012f\u0001\u012f\u0001\u012f\u0001\u012f"+
		"\u0001\u012f\u0003\u012f\u1959\b\u012f\u0001\u012f\u0001\u012f\u0001\u012f"+
		"\u0001\u012f\u0001\u012f\u0001\u012f\u0001\u012f\u0001\u012f\u0001\u012f"+
		"\u0001\u012f\u0001\u012f\u0001\u012f\u0001\u012f\u0001\u012f\u0001\u012f"+
		"\u0001\u012f\u0001\u012f\u0003\u012f\u196c\b\u012f\u0001\u0130\u0001\u0130"+
		"\u0001\u0130\u0003\u0130\u1971\b\u0130\u0001\u0130\u0003\u0130\u1974\b"+
		"\u0130\u0001\u0130\u0001\u0130\u0001\u0130\u0003\u0130\u1979\b\u0130\u0001"+
		"\u0130\u0003\u0130\u197c\b\u0130\u0001\u0131\u0001\u0131\u0003\u0131\u1980"+
		"\b\u0131\u0001\u0132\u0001\u0132\u0001\u0132\u0001\u0133\u0001\u0133\u0001"+
		"\u0133\u0001\u0133\u0001\u0134\u0001\u0134\u0001\u0134\u0003\u0134\u198c"+
		"\b\u0134\u0001\u0135\u0001\u0135\u0001\u0135\u0003\u0135\u1991\b\u0135"+
		"\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0136"+
		"\u0003\u0136\u1999\b\u0136\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0136"+
		"\u0001\u0136\u0003\u0136\u19a0\b\u0136\u0001\u0136\u0001\u0136\u0001\u0136"+
		"\u0003\u0136\u19a5\b\u0136\u0001\u0137\u0001\u0137\u0001\u0137\u0003\u0137"+
		"\u19aa\b\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137"+
		"\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137"+
		"\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137"+
		"\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137"+
		"\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137"+
		"\u0004\u0137\u19c9\b\u0137\u000b\u0137\f\u0137\u19ca\u0001\u0137\u0001"+
		"\u0137\u0003\u0137\u19cf\b\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001"+
		"\u0137\u0004\u0137\u19d5\b\u0137\u000b\u0137\f\u0137\u19d6\u0001\u0137"+
		"\u0001\u0137\u0003\u0137\u19db\b\u0137\u0001\u0137\u0001\u0137\u0001\u0137"+
		"\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0003\u0137\u19e4\b\u0137"+
		"\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137"+
		"\u0003\u0137\u19ec\b\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0003\u0137"+
		"\u19f1\b\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137"+
		"\u0001\u0137\u0003\u0137\u19f9\b\u0137\u0001\u0137\u0001\u0137\u0001\u0137"+
		"\u0003\u0137\u19fe\b\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0003\u0137"+
		"\u1a03\b\u0137\u0003\u0137\u1a05\b\u0137\u0001\u0137\u0001\u0137\u0001"+
		"\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0003\u0137\u1a0e"+
		"\b\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0003\u0137\u1a13\b\u0137"+
		"\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137"+
		"\u0003\u0137\u1a1b\b\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0003\u0137"+
		"\u1a20\b\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137"+
		"\u0001\u0137\u0003\u0137\u1a28\b\u0137\u0001\u0137\u0001\u0137\u0001\u0137"+
		"\u0001\u0137\u0001\u0137\u0001\u0137\u0003\u0137\u1a30\b\u0137\u0001\u0137"+
		"\u0003\u0137\u1a33\b\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137"+
		"\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0003\u0137\u1a3d\b\u0137"+
		"\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137"+
		"\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137"+
		"\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0003\u0137\u1a4f\b\u0137"+
		"\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0003\u0137\u1a55\b\u0137"+
		"\u0001\u0137\u0001\u0137\u0003\u0137\u1a59\b\u0137\u0001\u0137\u0001\u0137"+
		"\u0001\u0137\u0001\u0137\u0003\u0137\u1a5f\b\u0137\u0001\u0137\u0001\u0137"+
		"\u0003\u0137\u1a63\b\u0137\u0001\u0137\u0001\u0137\u0003\u0137\u1a67\b"+
		"\u0137\u0001\u0138\u0001\u0138\u0001\u0138\u0001\u0138\u0001\u0138\u0001"+
		"\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0005\u0139\u1a72\b\u0139\n"+
		"\u0139\f\u0139\u1a75\t\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0001"+
		"\u0139\u0001\u0139\u0003\u0139\u1a7c\b\u0139\u0001\u013a\u0001\u013a\u0003"+
		"\u013a\u1a80\b\u013a\u0001\u013b\u0001\u013b\u0001\u013b\u0003\u013b\u1a85"+
		"\b\u013b\u0001\u013b\u0001\u013b\u0001\u013b\u0003\u013b\u1a8a\b\u013b"+
		"\u0001\u013b\u0001\u013b\u0001\u013b\u0001\u013b\u0003\u013b\u1a90\b\u013b"+
		"\u0001\u013b\u0001\u013b\u0001\u013b\u0003\u013b\u1a95\b\u013b\u0001\u013b"+
		"\u0001\u013b\u0003\u013b\u1a99\b\u013b\u0001\u013b\u0001\u013b\u0001\u013b"+
		"\u0003\u013b\u1a9e\b\u013b\u0001\u013b\u0001\u013b\u0001\u013b\u0003\u013b"+
		"\u1aa3\b\u013b\u0001\u013b\u0001\u013b\u0001\u013b\u0003\u013b\u1aa8\b"+
		"\u013b\u0001\u013b\u0001\u013b\u0001\u013b\u0001\u013b\u0001\u013b\u0001"+
		"\u013b\u0005\u013b\u1ab0\b\u013b\n\u013b\f\u013b\u1ab3\t\u013b\u0003\u013b"+
		"\u1ab5\b\u013b\u0001\u013b\u0001\u013b\u0003\u013b\u1ab9\b\u013b\u0001"+
		"\u013b\u0001\u013b\u0003\u013b\u1abd\b\u013b\u0001\u013c\u0001\u013c\u0001"+
		"\u013c\u0001\u013c\u0001\u013c\u0003\u013c\u1ac4\b\u013c\u0001\u013c\u0001"+
		"\u013c\u0003\u013c\u1ac8\b\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001"+
		"\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001"+
		"\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001"+
		"\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001"+
		"\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0003"+
		"\u013c\u1ae5\b\u013c\u0001\u013d\u0001\u013d\u0001\u013d\u0003\u013d\u1aea"+
		"\b\u013d\u0001\u013d\u0001\u013d\u0003\u013d\u1aee\b\u013d\u0001\u013e"+
		"\u0003\u013e\u1af1\b\u013e\u0001\u013e\u0003\u013e\u1af4\b\u013e\u0001"+
		"\u013e\u0003\u013e\u1af7\b\u013e\u0001\u013e\u0003\u013e\u1afa\b\u013e"+
		"\u0001\u013f\u0001\u013f\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0141"+
		"\u0001\u0141\u0001\u0142\u0001\u0142\u0003\u0142\u1b05\b\u0142\u0001\u0143"+
		"\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0144\u0001\u0144"+
		"\u0001\u0144\u0001\u0144\u0001\u0144\u0001\u0144\u0001\u0144\u0003\u0144"+
		"\u1b13\b\u0144\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145"+
		"\u0005\u0145\u1b1a\b\u0145\n\u0145\f\u0145\u1b1d\t\u0145\u0001\u0146\u0001"+
		"\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001"+
		"\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001"+
		"\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001"+
		"\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0003\u0146\u1b36\b\u0146\u0001"+
		"\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001\u0148\u0001"+
		"\u0148\u0001\u0148\u0001\u0148\u0003\u0148\u1b41\b\u0148\u0001\u0148\u0001"+
		"\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0003\u0148\u1b48\b\u0148\u0005"+
		"\u0148\u1b4a\b\u0148\n\u0148\f\u0148\u1b4d\t\u0148\u0001\u0149\u0001\u0149"+
		"\u0001\u0149\u0001\u0149\u0003\u0149\u1b53\b\u0149\u0001\u014a\u0001\u014a"+
		"\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0003\u014a\u1b5b\b\u014a"+
		"\u0001\u014a\u0001\u014a\u0001\u014a\u0003\u014a\u1b60\b\u014a\u0001\u014a"+
		"\u0001\u014a\u0001\u014a\u0001\u014a\u0005\u014a\u1b66\b\u014a\n\u014a"+
		"\f\u014a\u1b69\t\u014a\u0001\u014b\u0001\u014b\u0001\u014b\u0003\u014b"+
		"\u1b6e\b\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0003\u014b\u1b78\b\u014b\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0003\u014b\u1b85\b\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0003\u014b\u1b8b\b\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0003\u014b\u1b91\b\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0003\u014b\u1ba1\b\u014b\u0001\u014b\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0003\u014b\u1ba7\b\u014b\u0001\u014b\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0005\u014b"+
		"\u1bb0\b\u014b\n\u014b\f\u014b\u1bb3\t\u014b\u0001\u014c\u0001\u014c\u0001"+
		"\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0001"+
		"\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0005"+
		"\u014c\u1bc3\b\u014c\n\u014c\f\u014c\u1bc6\t\u014c\u0001\u014c\u0001\u014c"+
		"\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0004\u014c"+
		"\u1bcf\b\u014c\u000b\u014c\f\u014c\u1bd0\u0001\u014c\u0001\u014c\u0001"+
		"\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0001"+
		"\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0001"+
		"\u014c\u0003\u014c\u1be2\b\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0001"+
		"\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0001"+
		"\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0005"+
		"\u014c\u1bf3\b\u014c\n\u014c\f\u014c\u1bf6\t\u014c\u0001\u014d\u0001\u014d"+
		"\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0001\u014e\u0003\u014e\u1c08\b\u014e\u0001\u014f\u0001\u014f"+
		"\u0001\u014f\u0001\u014f\u0001\u014f\u0001\u014f\u0001\u014f\u0003\u014f"+
		"\u1c11\b\u014f\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150"+
		"\u0001\u0150\u0001\u0150\u0003\u0150\u1c1a\b\u0150\u0001\u0151\u0001\u0151"+
		"\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0003\u0152"+
		"\u1c23\b\u0152\u0001\u0153\u0001\u0153\u0001\u0154\u0001\u0154\u0001\u0155"+
		"\u0001\u0155\u0001\u0156\u0001\u0156\u0001\u0157\u0001\u0157\u0001\u0158"+
		"\u0001\u0158\u0001\u0159\u0001\u0159\u0001\u0159\u0000\u0003\u0294\u0296"+
		"\u0298\u015a\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016"+
		"\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprt"+
		"vxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094"+
		"\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac"+
		"\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4"+
		"\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc"+
		"\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4"+
		"\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c"+
		"\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124"+
		"\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c"+
		"\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154"+
		"\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c"+
		"\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184"+
		"\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c"+
		"\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4"+
		"\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc"+
		"\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4"+
		"\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc"+
		"\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214"+
		"\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c"+
		"\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244"+
		"\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c"+
		"\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274"+
		"\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c"+
		"\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4"+
		"\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u0000\u008f\u0002\u0000%%\u0092"+
		"\u0092\u0002\u0000\u0206\u0206\u020c\u020c\u0003\u0000BB\u009a\u009a\u00af"+
		"\u00af\u0005\u0000((\u0177\u0177\u01b9\u01b9\u01bd\u01bd\u01fe\u01fe\u0004"+
		"\u0000((\u0198\u0198\u0204\u0204\u0252\u0252\u0002\u0000\u01f5\u01f5\u0472"+
		"\u0472\u0002\u0000KK\u0089\u0089\u0002\u0000\u000e\u000e\u0145\u0145\u0003"+
		"\u0000**RR\u00b2\u00b2\u0002\u0000\u01a6\u01a6\u021e\u021e\u0003\u0000"+
		"\u01ed\u01ed\u0279\u0279\u0281\u0281\u0002\u0000\u017f\u017f\u01bf\u01bf"+
		"\u0002\u0000\u0157\u0157\u01cd\u01cd\u0002\u0000\u0012\u0012\u045a\u045a"+
		"\u0002\u0000\u00ba\u00ba\u045a\u045a\u0002\u0000((\u0468\u0469\u0003\u0000"+
		"\u0155\u0155\u01af\u01af\u024a\u024a\u0002\u0000\u01be\u01be\u0290\u0290"+
		"\u0002\u0000\u01fc\u01fc\u029a\u029a\u0003\u0000MMQQyy\u0003\u0000((\u0189"+
		"\u0189\u01a3\u01a3\u0003\u0000((\u0185\u0185\u0304\u0304\u0002\u0000\u026c"+
		"\u026c\u028f\u028f\u0002\u0000NNXX\u0003\u0000\u01a8\u01a8\u0215\u0215"+
		"\u0254\u0254\u0002\u0000BB\u009a\u009a\u0001\u0000\u015b\u015c\u0001\u0000"+
		"\u0468\u0469\u0002\u0000\u0472\u0472\u047a\u047a\u0002\u0000NN\u017b\u017b"+
		"\u0003\u0000\u01a2\u01a2\u01c8\u01c8\u01fc\u01fc\u0007\u0000((\u0169\u0169"+
		"\u016b\u016b\u0189\u0189\u01a3\u01a3\u022d\u022d\u047a\u047a\u0002\u0000"+
		"((\u0473\u0473\u0002\u0000\u01f5\u01f5\u0205\u0205\u0001\u0000\u0469\u046a"+
		"\u0002\u0000\u0005\u000511\u0004\u0000((\u0177\u0177\u01b9\u01b9\u01bd"+
		"\u01bd\u0002\u0000\u0019\u0019\u001d\u001d\u0002\u0000\f\f\u00a9\u00a9"+
		"\u0002\u0000\u00ba\u00ba\u0294\u0294\u0003\u0000((\u0177\u0177\u01b9\u01b9"+
		"\u0002\u0000\u0014\u0014\u008c\u008c\u0003\u0000))HHff\u0002\u0000ff\u016d"+
		"\u016d\u0002\u0000\u0164\u0164\u019f\u019f\u0002\u0000aa\u0248\u0248\u0002"+
		"\u0000))ff\u0002\u0000\u0006\u0006//\u0002\u0000\u00b6\u00b6\u028c\u028c"+
		"\u0004\u0000\u01a2\u01a2\u01c8\u01c8\u01fb\u01fb\u0222\u0222\u0002\u0000"+
		"\u01a2\u01a2\u01fb\u01fb\u0002\u0000\r\r++\u0003\u0000??KK\u00b4\u00b4"+
		"\u0002\u0000!!PP\u0002\u0000]]\u0090\u0090\u0002\u0000\u0006\u0006/0\u0001"+
		"\u0000\u0261\u0262\u0002\u0000\u00a6\u00a6\u02a8\u02a8\u0002\u0000\u01ab"+
		"\u01ab\u0250\u0250\u0002\u0000\u00dc\u00dc\u01d0\u01d0\u0005\u0000gg\u01d5"+
		"\u01d6\u01d8\u01d8\u01dc\u01e4\u022f\u022f\u0004\u0000\u01d2\u01d3\u01d7"+
		"\u01d7\u01d9\u01da\u0230\u0230\u0003\u0000hh\u01d1\u01d1\u01db\u01db\u0002"+
		"\u0000\u01c1\u01c1\u0263\u0263\u0002\u0000\u025d\u025d\u025f\u025f\u0002"+
		"\u0000\u014f\u014f\u0264\u0264\u0002\u0000WW\u023f\u023f\u0002\u00001"+
		"1\u017d\u017d\u0003\u0000\u001e\u001e::\u00ad\u00ad\u0003\u0000\u007f"+
		"\u007f\u00a6\u00a6\u01a9\u01a9\u0002\u0000cc\u00b0\u00b0\u0003\u0000\u015f"+
		"\u015f\u0255\u0255\u0448\u0448\u0002\u0000&&\u028e\u028e\u0002\u0000o"+
		"o\u01cd\u01cd\u0002\u0000\u019b\u019b\u0228\u0228\u0004\u0000\u00c8\u00c8"+
		"\u00ca\u00ca\u00d0\u00d0\u026d\u026d\u0002\u0000\u044a\u044a\u045a\u045a"+
		"\u0002\u0000\u0150\u0150\u0231\u0231\u0002\u0000AAMM\u0006\u0000\u007f"+
		"\u007f\u00a6\u00a6\u00ab\u00ab\u0194\u0194\u01a9\u01a9\u028e\u028e\u0002"+
		"\u0000\u01f4\u01f4\u0269\u0269\u0002\u0000\u0191\u0191\u0292\u0292\u0002"+
		"\u0000\u007f\u007f\u01a9\u01a9\u0003\u0000NNYY\u01b7\u01b7\u0003\u0000"+
		"\u01ab\u01ab\u01cd\u01cd\u0250\u0250\u0002\u0000\u0269\u0269\u028d\u028d"+
		"\u0002\u0000\u016f\u016f\u0227\u0227\u0006\u0000\u00dc\u00dc\u018e\u018e"+
		"\u0190\u0190\u01aa\u01aa\u022e\u022e\u0256\u0256\u0002\u0000+,;;\u0003"+
		"\u0000\u019b\u019b\u0217\u0217\u0361\u0361\u0002\u0000\u01c5\u01c5\u027b"+
		"\u027b\n\u0000\u015e\u015e\u0166\u0166\u0171\u0173\u017a\u017a\u01ee\u01ee"+
		"\u01f6\u01f6\u026e\u026e\u0275\u0275\u0330\u0330\u03d8\u03d8\u0002\u0000"+
		"\"\"\u00a3\u00a3\u0002\u0000qq\u03cf\u03cf\u000b\u0000\u015e\u015e\u0166"+
		"\u0166\u0171\u0173\u017a\u017a\u01ee\u01ee\u01f6\u01f6\u0240\u0240\u026e"+
		"\u026e\u0275\u0275\u0330\u0330\u03d8\u03d8\u0001\u0000\u047f\u0480\u0004"+
		"\u0000\u016e\u016e\u02ff\u030a\u0472\u0472\u047a\u047b\u0003\u0000\u0468"+
		"\u046a\u0473\u0473\u0475\u0475\u0002\u0000<<\u00ac\u00ac\u0002\u0000p"+
		"p\u0476\u0476\u0005\u0000\u0018\u0018\u00d8\u00da\u00e1\u00e1\u00e3\u00e6"+
		"\u01f9\u01f9\u0002\u0000\u0018\u0018\u00d9\u00d9\u0002\u0000\u0018\u0018"+
		"\u00d8\u00d8\u0001\u0000\u00be\u00c9\u0003\u0000\u00b1\u00b1\u00bd\u00bd"+
		"\u0253\u0253\u0002\u0000\u00cd\u00d2\u01a3\u01a3\u0006\u0000\u00d3\u00d3"+
		"\u00de\u00de\u00e0\u00e0\u00e2\u00e2\u00e9\u00e9\u0153\u0154\u0004\u0000"+
		"\u00d4\u00d7\u00dc\u00dd\u00df\u00df\u0151\u0151\u0002\u0000\u0095\u0095"+
		"\u00e7\u00e7\u0002\u0000\u01c5\u01c5\u030f\u0317\u0002\u0000\u00dc\u00dc"+
		"\u01f9\u01f9\u0005\u0000\u00c2\u00c2\u00c8\u00c8\u00d3\u00d4\u00d6\u00d6"+
		"\u01c5\u01c5\u0002\u0000\u00b1\u00b1\u0253\u0253\u0001\u0000\u043f\u0440"+
		"\u0002\u0000\u01fb\u01fb\u0442\u0442\u0002\u0000\u0132\u0135\u0139\u0139"+
		"\u0002\u0000##\u0130\u0133\u0001\u0000\u013c\u013d\u0003\u0000\u0010\u0010"+
		"[[\u00aa\u00aa\u0002\u0000\u00d8\u00d8\u00dc\u00dc\u0002\u0000\u00d3\u00d4"+
		"\u00d6\u00d6\u0003\u0000\r\r++\u03cd\u03cd\u0003\u0000\u0115\u0115\u0121"+
		"\u0122\u012c\u012c\u0003\u0000\u0116\u0118\u0128\u012b\u012d\u012f\u0002"+
		"\u0000\u011e\u011e\u0120\u0120\u0002\u0000\u011c\u011c\u011f\u011f\u0002"+
		"\u0000\u011a\u011b\u0125\u0127\u0002\u0000\u0081\u0081\u0248\u0248\u0002"+
		"\u0000\u01a5\u01a5\u021f\u021f\u0002\u0000\u020a\u020a\u0218\u0218\u0002"+
		"\u0000nn\u045d\u045d\u0003\u0000<<\u00ac\u00ac\u0285\u0285\u0002\u0000"+
		"\u0085\u0085\u0091\u0091\u0003\u0000\u0006\u0006\u0148\u0148\u0259\u0259"+
		"\u0003\u0000nn\u0456\u0457\u045d\u045e\u0001\u0000\u0453\u0459\u0002\u0000"+
		"\u00dc\u00dc\u02d6\u02fe\u0001\u0000\u030b\u030e\u0001\u0000\u02a8\u02b0"+
		"\u0001\u0000\u02a0\u02a7\u0003\u0000\u00d3\u00d7\u00e4\u00e4\u00e7\u00e7"+
		"\'\u0000\u0011\u0011\"\"..88FFLLddjkqquuxx\u0099\u0099\u00a3\u00a3\u00e9"+
		"\u00e9\u0115\u0119\u011d\u011d\u0121\u0122\u0128\u012f\u0143\u01a4\u01a6"+
		"\u01bd\u01bf\u021e\u0220\u0240\u0242\u026b\u026d\u027f\u0281\u028e\u0291"+
		"\u0292\u0294\u0299\u029b\u029f\u02b2\u02ba\u02bf\u02c1\u02c3\u02cd\u02cf"+
		"\u02d5\u0304\u0304\u0330\u0330\u0357\u0357\u03d3\u03d3\u03d8\u03d8\u043e"+
		"\u0449\u0482\u0483\u0017\u0000%%]]\u0090\u0090\u0092\u0092\u00d3\u00d5"+
		"\u00d7\u00d7\u00f5\u0114\u0119\u011c\u011e\u0120\u0123\u0127\u013b\u013b"+
		"\u01be\u01be\u0290\u0290\u02a0\u02a7\u02cf\u02cf\u030f\u030f\u0312\u032f"+
		"\u0331\u0356\u0358\u03d2\u03d4\u03d7\u03d9\u043d\u043f\u0441\u0459\u0459"+
		"\u2144\u0000\u02b5\u0001\u0000\u0000\u0000\u0002\u02c8\u0001\u0000\u0000"+
		"\u0000\u0004\u02dd\u0001\u0000\u0000\u0000\u0006\u02df\u0001\u0000\u0000"+
		"\u0000\b\u030a\u0001\u0000\u0000\u0000\n\u0316\u0001\u0000\u0000\u0000"+
		"\f\u0321\u0001\u0000\u0000\u0000\u000e\u0332\u0001\u0000\u0000\u0000\u0010"+
		"\u0337\u0001\u0000\u0000\u0000\u0012\u0343\u0001\u0000\u0000\u0000\u0014"+
		"\u035e\u0001\u0000\u0000\u0000\u0016\u0367\u0001\u0000\u0000\u0000\u0018"+
		"\u0369\u0001\u0000\u0000\u0000\u001a\u0375\u0001\u0000\u0000\u0000\u001c"+
		"\u0393\u0001\u0000\u0000\u0000\u001e\u03c3\u0001\u0000\u0000\u0000 \u03f6"+
		"\u0001\u0000\u0000\u0000\"\u0410\u0001\u0000\u0000\u0000$\u042e\u0001"+
		"\u0000\u0000\u0000&\u043d\u0001\u0000\u0000\u0000(\u04aa\u0001\u0000\u0000"+
		"\u0000*\u04ac\u0001\u0000\u0000\u0000,\u04be\u0001\u0000\u0000\u0000."+
		"\u04fb\u0001\u0000\u0000\u00000\u0512\u0001\u0000\u0000\u00002\u0518\u0001"+
		"\u0000\u0000\u00004\u052e\u0001\u0000\u0000\u00006\u0530\u0001\u0000\u0000"+
		"\u00008\u0532\u0001\u0000\u0000\u0000:\u0559\u0001\u0000\u0000\u0000<"+
		"\u0594\u0001\u0000\u0000\u0000>\u05b7\u0001\u0000\u0000\u0000@\u05be\u0001"+
		"\u0000\u0000\u0000B\u05c0\u0001\u0000\u0000\u0000D\u05ec\u0001\u0000\u0000"+
		"\u0000F\u05f2\u0001\u0000\u0000\u0000H\u05f4\u0001\u0000\u0000\u0000J"+
		"\u0609\u0001\u0000\u0000\u0000L\u0610\u0001\u0000\u0000\u0000N\u0612\u0001"+
		"\u0000\u0000\u0000P\u0633\u0001\u0000\u0000\u0000R\u0636\u0001\u0000\u0000"+
		"\u0000T\u063b\u0001\u0000\u0000\u0000V\u0655\u0001\u0000\u0000\u0000X"+
		"\u0665\u0001\u0000\u0000\u0000Z\u0667\u0001\u0000\u0000\u0000\\\u0677"+
		"\u0001\u0000\u0000\u0000^\u0679\u0001\u0000\u0000\u0000`\u06b5\u0001\u0000"+
		"\u0000\u0000b\u06fc\u0001\u0000\u0000\u0000d\u06fe\u0001\u0000\u0000\u0000"+
		"f\u071a\u0001\u0000\u0000\u0000h\u0722\u0001\u0000\u0000\u0000j\u0740"+
		"\u0001\u0000\u0000\u0000l\u07e4\u0001\u0000\u0000\u0000n\u07e6\u0001\u0000"+
		"\u0000\u0000p\u07e8\u0001\u0000\u0000\u0000r\u07eb\u0001\u0000\u0000\u0000"+
		"t\u0835\u0001\u0000\u0000\u0000v\u084c\u0001\u0000\u0000\u0000x\u08e0"+
		"\u0001\u0000\u0000\u0000z\u08e5\u0001\u0000\u0000\u0000|\u08e7\u0001\u0000"+
		"\u0000\u0000~\u08f1\u0001\u0000\u0000\u0000\u0080\u0929\u0001\u0000\u0000"+
		"\u0000\u0082\u093d\u0001\u0000\u0000\u0000\u0084\u093f\u0001\u0000\u0000"+
		"\u0000\u0086\u0962\u0001\u0000\u0000\u0000\u0088\u096b\u0001\u0000\u0000"+
		"\u0000\u008a\u0972\u0001\u0000\u0000\u0000\u008c\u0989\u0001\u0000\u0000"+
		"\u0000\u008e\u0992\u0001\u0000\u0000\u0000\u0090\u09a1\u0001\u0000\u0000"+
		"\u0000\u0092\u09ba\u0001\u0000\u0000\u0000\u0094\u09ce\u0001\u0000\u0000"+
		"\u0000\u0096\u09ee\u0001\u0000\u0000\u0000\u0098\u0b9d\u0001\u0000\u0000"+
		"\u0000\u009a\u0b9f\u0001\u0000\u0000\u0000\u009c\u0ba6\u0001\u0000\u0000"+
		"\u0000\u009e\u0bad\u0001\u0000\u0000\u0000\u00a0\u0bc7\u0001\u0000\u0000"+
		"\u0000\u00a2\u0bcf\u0001\u0000\u0000\u0000\u00a4\u0bd6\u0001\u0000\u0000"+
		"\u0000\u00a6\u0bdd\u0001\u0000\u0000\u0000\u00a8\u0be4\u0001\u0000\u0000"+
		"\u0000\u00aa\u0bf3\u0001\u0000\u0000\u0000\u00ac\u0bfd\u0001\u0000\u0000"+
		"\u0000\u00ae\u0c04\u0001\u0000\u0000\u0000\u00b0\u0c14\u0001\u0000\u0000"+
		"\u0000\u00b2\u0c42\u0001\u0000\u0000\u0000\u00b4\u0c44\u0001\u0000\u0000"+
		"\u0000\u00b6\u0c57\u0001\u0000\u0000\u0000\u00b8\u0c61\u0001\u0000\u0000"+
		"\u0000\u00ba\u0c68\u0001\u0000\u0000\u0000\u00bc\u0c70\u0001\u0000\u0000"+
		"\u0000\u00be\u0c7c\u0001\u0000\u0000\u0000\u00c0\u0c7e\u0001\u0000\u0000"+
		"\u0000\u00c2\u0c85\u0001\u0000\u0000\u0000\u00c4\u0c87\u0001\u0000\u0000"+
		"\u0000\u00c6\u0cba\u0001\u0000\u0000\u0000\u00c8\u0d04\u0001\u0000\u0000"+
		"\u0000\u00ca\u0d3f\u0001\u0000\u0000\u0000\u00cc\u0d97\u0001\u0000\u0000"+
		"\u0000\u00ce\u0d9b\u0001\u0000\u0000\u0000\u00d0\u0daf\u0001\u0000\u0000"+
		"\u0000\u00d2\u0db1\u0001\u0000\u0000\u0000\u00d4\u0db9\u0001\u0000\u0000"+
		"\u0000\u00d6\u0dc1\u0001\u0000\u0000\u0000\u00d8\u0dc6\u0001\u0000\u0000"+
		"\u0000\u00da\u0de4\u0001\u0000\u0000\u0000\u00dc\u0e1b\u0001\u0000\u0000"+
		"\u0000\u00de\u0e24\u0001\u0000\u0000\u0000\u00e0\u0e38\u0001\u0000\u0000"+
		"\u0000\u00e2\u0e44\u0001\u0000\u0000\u0000\u00e4\u0e48\u0001\u0000\u0000"+
		"\u0000\u00e6\u0e69\u0001\u0000\u0000\u0000\u00e8\u0e7e\u0001\u0000\u0000"+
		"\u0000\u00ea\u0e88\u0001\u0000\u0000\u0000\u00ec\u0e8c\u0001\u0000\u0000"+
		"\u0000\u00ee\u0ea5\u0001\u0000\u0000\u0000\u00f0\u0ecf\u0001\u0000\u0000"+
		"\u0000\u00f2\u0ed1\u0001\u0000\u0000\u0000\u00f4\u0ee0\u0001\u0000\u0000"+
		"\u0000\u00f6\u0f0e\u0001\u0000\u0000\u0000\u00f8\u0f18\u0001\u0000\u0000"+
		"\u0000\u00fa\u0f22\u0001\u0000\u0000\u0000\u00fc\u0f5e\u0001\u0000\u0000"+
		"\u0000\u00fe\u0f60\u0001\u0000\u0000\u0000\u0100\u0f7a\u0001\u0000\u0000"+
		"\u0000\u0102\u0f80\u0001\u0000\u0000\u0000\u0104\u0f90\u0001\u0000\u0000"+
		"\u0000\u0106\u0f94\u0001\u0000\u0000\u0000\u0108\u0fba\u0001\u0000\u0000"+
		"\u0000\u010a\u0fe0\u0001\u0000\u0000\u0000\u010c\u0fee\u0001\u0000\u0000"+
		"\u0000\u010e\u0ff6\u0001\u0000\u0000\u0000\u0110\u0ffa\u0001\u0000\u0000"+
		"\u0000\u0112\u1000\u0001\u0000\u0000\u0000\u0114\u100e\u0001\u0000\u0000"+
		"\u0000\u0116\u1011\u0001\u0000\u0000\u0000\u0118\u1023\u0001\u0000\u0000"+
		"\u0000\u011a\u1027\u0001\u0000\u0000\u0000\u011c\u1037\u0001\u0000\u0000"+
		"\u0000\u011e\u1039\u0001\u0000\u0000\u0000\u0120\u1045\u0001\u0000\u0000"+
		"\u0000\u0122\u1049\u0001\u0000\u0000\u0000\u0124\u105a\u0001\u0000\u0000"+
		"\u0000\u0126\u106b\u0001\u0000\u0000\u0000\u0128\u106e\u0001\u0000\u0000"+
		"\u0000\u012a\u1078\u0001\u0000\u0000\u0000\u012c\u107c\u0001\u0000\u0000"+
		"\u0000\u012e\u1089\u0001\u0000\u0000\u0000\u0130\u108c\u0001\u0000\u0000"+
		"\u0000\u0132\u1091\u0001\u0000\u0000\u0000\u0134\u10a5\u0001\u0000\u0000"+
		"\u0000\u0136\u10a7\u0001\u0000\u0000\u0000\u0138\u10b8\u0001\u0000\u0000"+
		"\u0000\u013a\u10c1\u0001\u0000\u0000\u0000\u013c\u10ca\u0001\u0000\u0000"+
		"\u0000\u013e\u10cc\u0001\u0000\u0000\u0000\u0140\u10da\u0001\u0000\u0000"+
		"\u0000\u0142\u10e5\u0001\u0000\u0000\u0000\u0144\u10ee\u0001\u0000\u0000"+
		"\u0000\u0146\u10f1\u0001\u0000\u0000\u0000\u0148\u10f9\u0001\u0000\u0000"+
		"\u0000\u014a\u1112\u0001\u0000\u0000\u0000\u014c\u111e\u0001\u0000\u0000"+
		"\u0000\u014e\u1121\u0001\u0000\u0000\u0000\u0150\u1141\u0001\u0000\u0000"+
		"\u0000\u0152\u1143\u0001\u0000\u0000\u0000\u0154\u1145\u0001\u0000\u0000"+
		"\u0000\u0156\u1147\u0001\u0000\u0000\u0000\u0158\u1149\u0001\u0000\u0000"+
		"\u0000\u015a\u117e\u0001\u0000\u0000\u0000\u015c\u1180\u0001\u0000\u0000"+
		"\u0000\u015e\u1186\u0001\u0000\u0000\u0000\u0160\u119a\u0001\u0000\u0000"+
		"\u0000\u0162\u11a8\u0001\u0000\u0000\u0000\u0164\u11b3\u0001\u0000\u0000"+
		"\u0000\u0166\u11b5\u0001\u0000\u0000\u0000\u0168\u11bb\u0001\u0000\u0000"+
		"\u0000\u016a\u11c5\u0001\u0000\u0000\u0000\u016c\u11c9\u0001\u0000\u0000"+
		"\u0000\u016e\u11d0\u0001\u0000\u0000\u0000\u0170\u11d4\u0001\u0000\u0000"+
		"\u0000\u0172\u11da\u0001\u0000\u0000\u0000\u0174\u11e1\u0001\u0000\u0000"+
		"\u0000\u0176\u11e7\u0001\u0000\u0000\u0000\u0178\u11ed\u0001\u0000\u0000"+
		"\u0000\u017a\u11f2\u0001\u0000\u0000\u0000\u017c\u1221\u0001\u0000\u0000"+
		"\u0000\u017e\u1236\u0001\u0000\u0000\u0000\u0180\u124f\u0001\u0000\u0000"+
		"\u0000\u0182\u1252\u0001\u0000\u0000\u0000\u0184\u1258\u0001\u0000\u0000"+
		"\u0000\u0186\u1268\u0001\u0000\u0000\u0000\u0188\u1277\u0001\u0000\u0000"+
		"\u0000\u018a\u127d\u0001\u0000\u0000\u0000\u018c\u129b\u0001\u0000\u0000"+
		"\u0000\u018e\u129d\u0001\u0000\u0000\u0000\u0190\u12a4\u0001\u0000\u0000"+
		"\u0000\u0192\u12b0\u0001\u0000\u0000\u0000\u0194\u12b6\u0001\u0000\u0000"+
		"\u0000\u0196\u12cf\u0001\u0000\u0000\u0000\u0198\u12d3\u0001\u0000\u0000"+
		"\u0000\u019a\u12d7\u0001\u0000\u0000\u0000\u019c\u12e2\u0001\u0000\u0000"+
		"\u0000\u019e\u1320\u0001\u0000\u0000\u0000\u01a0\u1358\u0001\u0000\u0000"+
		"\u0000\u01a2\u135a\u0001\u0000\u0000\u0000\u01a4\u13c4\u0001\u0000\u0000"+
		"\u0000\u01a6\u13dc\u0001\u0000\u0000\u0000\u01a8\u13de\u0001\u0000\u0000"+
		"\u0000\u01aa\u13f0\u0001\u0000\u0000\u0000\u01ac\u143a\u0001\u0000\u0000"+
		"\u0000\u01ae\u143c\u0001\u0000\u0000\u0000\u01b0\u1449\u0001\u0000\u0000"+
		"\u0000\u01b2\u1454\u0001\u0000\u0000\u0000\u01b4\u1473\u0001\u0000\u0000"+
		"\u0000\u01b6\u147d\u0001\u0000\u0000\u0000\u01b8\u1487\u0001\u0000\u0000"+
		"\u0000\u01ba\u1489\u0001\u0000\u0000\u0000\u01bc\u1493\u0001\u0000\u0000"+
		"\u0000\u01be\u1496\u0001\u0000\u0000\u0000\u01c0\u14fa\u0001\u0000\u0000"+
		"\u0000\u01c2\u150c\u0001\u0000\u0000\u0000\u01c4\u150e\u0001\u0000\u0000"+
		"\u0000\u01c6\u1512\u0001\u0000\u0000\u0000\u01c8\u1538\u0001\u0000\u0000"+
		"\u0000\u01ca\u1541\u0001\u0000\u0000\u0000\u01cc\u1547\u0001\u0000\u0000"+
		"\u0000\u01ce\u1550\u0001\u0000\u0000\u0000\u01d0\u1566\u0001\u0000\u0000"+
		"\u0000\u01d2\u1568\u0001\u0000\u0000\u0000\u01d4\u1573\u0001\u0000\u0000"+
		"\u0000\u01d6\u1579\u0001\u0000\u0000\u0000\u01d8\u15b1\u0001\u0000\u0000"+
		"\u0000\u01da\u164c\u0001\u0000\u0000\u0000\u01dc\u1658\u0001\u0000\u0000"+
		"\u0000\u01de\u1667\u0001\u0000\u0000\u0000\u01e0\u166d\u0001\u0000\u0000"+
		"\u0000\u01e2\u1680\u0001\u0000\u0000\u0000\u01e4\u168a\u0001\u0000\u0000"+
		"\u0000\u01e6\u1698\u0001\u0000\u0000\u0000\u01e8\u169a\u0001\u0000\u0000"+
		"\u0000\u01ea\u169d\u0001\u0000\u0000\u0000\u01ec\u16b3\u0001\u0000\u0000"+
		"\u0000\u01ee\u16bf\u0001\u0000\u0000\u0000\u01f0\u16c5\u0001\u0000\u0000"+
		"\u0000\u01f2\u16d1\u0001\u0000\u0000\u0000\u01f4\u16d5\u0001\u0000\u0000"+
		"\u0000\u01f6\u16d7\u0001\u0000\u0000\u0000\u01f8\u1701\u0001\u0000\u0000"+
		"\u0000\u01fa\u1708\u0001\u0000\u0000\u0000\u01fc\u170a\u0001\u0000\u0000"+
		"\u0000\u01fe\u1721\u0001\u0000\u0000\u0000\u0200\u1727\u0001\u0000\u0000"+
		"\u0000\u0202\u172f\u0001\u0000\u0000\u0000\u0204\u1732\u0001\u0000\u0000"+
		"\u0000\u0206\u1735\u0001\u0000\u0000\u0000\u0208\u174a\u0001\u0000\u0000"+
		"\u0000\u020a\u175f\u0001\u0000\u0000\u0000\u020c\u1767\u0001\u0000\u0000"+
		"\u0000\u020e\u178d\u0001\u0000\u0000\u0000\u0210\u1799\u0001\u0000\u0000"+
		"\u0000\u0212\u179b\u0001\u0000\u0000\u0000\u0214\u17a1\u0001\u0000\u0000"+
		"\u0000\u0216\u17a5\u0001\u0000\u0000\u0000\u0218\u17b3\u0001\u0000\u0000"+
		"\u0000\u021a\u17c0\u0001\u0000\u0000\u0000\u021c\u17cb\u0001\u0000\u0000"+
		"\u0000\u021e\u17cd\u0001\u0000\u0000\u0000\u0220\u17d3\u0001\u0000\u0000"+
		"\u0000\u0222\u17d7\u0001\u0000\u0000\u0000\u0224\u17d9\u0001\u0000\u0000"+
		"\u0000\u0226\u17db\u0001\u0000\u0000\u0000\u0228\u17ed\u0001\u0000\u0000"+
		"\u0000\u022a\u17fd\u0001\u0000\u0000\u0000\u022c\u1801\u0001\u0000\u0000"+
		"\u0000\u022e\u1806\u0001\u0000\u0000\u0000\u0230\u1811\u0001\u0000\u0000"+
		"\u0000\u0232\u1816\u0001\u0000\u0000\u0000\u0234\u1818\u0001\u0000\u0000"+
		"\u0000\u0236\u181c\u0001\u0000\u0000\u0000\u0238\u1835\u0001\u0000\u0000"+
		"\u0000\u023a\u1837\u0001\u0000\u0000\u0000\u023c\u183a\u0001\u0000\u0000"+
		"\u0000\u023e\u183f\u0001\u0000\u0000\u0000\u0240\u184f\u0001\u0000\u0000"+
		"\u0000\u0242\u18cb\u0001\u0000\u0000\u0000\u0244\u18cd\u0001\u0000\u0000"+
		"\u0000\u0246\u18ee\u0001\u0000\u0000\u0000\u0248\u18f3\u0001\u0000\u0000"+
		"\u0000\u024a\u18f7\u0001\u0000\u0000\u0000\u024c\u18fd\u0001\u0000\u0000"+
		"\u0000\u024e\u1905\u0001\u0000\u0000\u0000\u0250\u190d\u0001\u0000\u0000"+
		"\u0000\u0252\u1915\u0001\u0000\u0000\u0000\u0254\u1920\u0001\u0000\u0000"+
		"\u0000\u0256\u1928\u0001\u0000\u0000\u0000\u0258\u1930\u0001\u0000\u0000"+
		"\u0000\u025a\u1938\u0001\u0000\u0000\u0000\u025c\u1940\u0001\u0000\u0000"+
		"\u0000\u025e\u196b\u0001\u0000\u0000\u0000\u0260\u197b\u0001\u0000\u0000"+
		"\u0000\u0262\u197f\u0001\u0000\u0000\u0000\u0264\u1981\u0001\u0000\u0000"+
		"\u0000\u0266\u1984\u0001\u0000\u0000\u0000\u0268\u198b\u0001\u0000\u0000"+
		"\u0000\u026a\u1990\u0001\u0000\u0000\u0000\u026c\u19a4\u0001\u0000\u0000"+
		"\u0000\u026e\u1a66\u0001\u0000\u0000\u0000\u0270\u1a68\u0001\u0000\u0000"+
		"\u0000\u0272\u1a7b\u0001\u0000\u0000\u0000\u0274\u1a7d\u0001\u0000\u0000"+
		"\u0000\u0276\u1abc\u0001\u0000\u0000\u0000\u0278\u1ae4\u0001\u0000\u0000"+
		"\u0000\u027a\u1ae6\u0001\u0000\u0000\u0000\u027c\u1af0\u0001\u0000\u0000"+
		"\u0000\u027e\u1afb\u0001\u0000\u0000\u0000\u0280\u1afd\u0001\u0000\u0000"+
		"\u0000\u0282\u1b00\u0001\u0000\u0000\u0000\u0284\u1b04\u0001\u0000\u0000"+
		"\u0000\u0286\u1b06\u0001\u0000\u0000\u0000\u0288\u1b12\u0001\u0000\u0000"+
		"\u0000\u028a\u1b14\u0001\u0000\u0000\u0000\u028c\u1b35\u0001\u0000\u0000"+
		"\u0000\u028e\u1b37\u0001\u0000\u0000\u0000\u0290\u1b40\u0001\u0000\u0000"+
		"\u0000\u0292\u1b52\u0001\u0000\u0000\u0000\u0294\u1b5f\u0001\u0000\u0000"+
		"\u0000\u0296\u1b6a\u0001\u0000\u0000\u0000\u0298\u1be1\u0001\u0000\u0000"+
		"\u0000\u029a\u1bf7\u0001\u0000\u0000\u0000\u029c\u1c07\u0001\u0000\u0000"+
		"\u0000\u029e\u1c10\u0001\u0000\u0000\u0000\u02a0\u1c19\u0001\u0000\u0000"+
		"\u0000\u02a2\u1c1b\u0001\u0000\u0000\u0000\u02a4\u1c22\u0001\u0000\u0000"+
		"\u0000\u02a6\u1c24\u0001\u0000\u0000\u0000\u02a8\u1c26\u0001\u0000\u0000"+
		"\u0000\u02aa\u1c28\u0001\u0000\u0000\u0000\u02ac\u1c2a\u0001\u0000\u0000"+
		"\u0000\u02ae\u1c2c\u0001\u0000\u0000\u0000\u02b0\u1c2e\u0001\u0000\u0000"+
		"\u0000\u02b2\u1c30\u0001\u0000\u0000\u0000\u02b4\u02b6\u0003\u0002\u0001"+
		"\u0000\u02b5\u02b4\u0001\u0000\u0000\u0000\u02b5\u02b6\u0001\u0000\u0000"+
		"\u0000\u02b6\u02b9\u0001\u0000\u0000\u0000\u02b7\u02b8\u0005\u0457\u0000"+
		"\u0000\u02b8\u02ba\u0005\u0457\u0000\u0000\u02b9\u02b7\u0001\u0000\u0000"+
		"\u0000\u02b9\u02ba\u0001\u0000\u0000\u0000\u02ba\u02bb\u0001\u0000\u0000"+
		"\u0000\u02bb\u02bc\u0005\u0000\u0000\u0001\u02bc\u0001\u0001\u0000\u0000"+
		"\u0000\u02bd\u02c0\u0003\u0004\u0002\u0000\u02be\u02bf\u0005\u0457\u0000"+
		"\u0000\u02bf\u02c1\u0005\u0457\u0000\u0000\u02c0\u02be\u0001\u0000\u0000"+
		"\u0000\u02c0\u02c1\u0001\u0000\u0000\u0000\u02c1\u02c3\u0001\u0000\u0000"+
		"\u0000\u02c2\u02c4\u0005\u0466\u0000\u0000\u02c3\u02c2\u0001\u0000\u0000"+
		"\u0000\u02c3\u02c4\u0001\u0000\u0000\u0000\u02c4\u02c7\u0001\u0000\u0000"+
		"\u0000\u02c5\u02c7\u0003\u0006\u0003\u0000\u02c6\u02bd\u0001\u0000\u0000"+
		"\u0000\u02c6\u02c5\u0001\u0000\u0000\u0000\u02c7\u02ca\u0001\u0000\u0000"+
		"\u0000\u02c8\u02c6\u0001\u0000\u0000\u0000\u02c8\u02c9\u0001\u0000\u0000"+
		"\u0000\u02c9\u02d4\u0001\u0000\u0000\u0000\u02ca\u02c8\u0001\u0000\u0000"+
		"\u0000\u02cb\u02d1\u0003\u0004\u0002\u0000\u02cc\u02cd\u0005\u0457\u0000"+
		"\u0000\u02cd\u02cf\u0005\u0457\u0000\u0000\u02ce\u02cc\u0001\u0000\u0000"+
		"\u0000\u02ce\u02cf\u0001\u0000\u0000\u0000\u02cf\u02d0\u0001\u0000\u0000"+
		"\u0000\u02d0\u02d2\u0005\u0466\u0000\u0000\u02d1\u02ce\u0001\u0000\u0000"+
		"\u0000\u02d1\u02d2\u0001\u0000\u0000\u0000\u02d2\u02d5\u0001\u0000\u0000"+
		"\u0000\u02d3\u02d5\u0003\u0006\u0003\u0000\u02d4\u02cb\u0001\u0000\u0000"+
		"\u0000\u02d4\u02d3\u0001\u0000\u0000\u0000\u02d5\u0003\u0001\u0000\u0000"+
		"\u0000\u02d6\u02de\u0003\b\u0004\u0000\u02d7\u02de\u0003\n\u0005\u0000"+
		"\u02d8\u02de\u0003\f\u0006\u0000\u02d9\u02de\u0003\u000e\u0007\u0000\u02da"+
		"\u02de\u0003\u0010\b\u0000\u02db\u02de\u0003\u0014\n\u0000\u02dc\u02de"+
		"\u0003\u0016\u000b\u0000\u02dd\u02d6\u0001\u0000\u0000\u0000\u02dd\u02d7"+
		"\u0001\u0000\u0000\u0000\u02dd\u02d8\u0001\u0000\u0000\u0000\u02dd\u02d9"+
		"\u0001\u0000\u0000\u0000\u02dd\u02da\u0001\u0000\u0000\u0000\u02dd\u02db"+
		"\u0001\u0000\u0000\u0000\u02dd\u02dc\u0001\u0000\u0000\u0000\u02de\u0005"+
		"\u0001\u0000\u0000\u0000\u02df\u02e0\u0005\u0466\u0000\u0000\u02e0\u0007"+
		"\u0001\u0000\u0000\u0000\u02e1\u030b\u0003\u0018\f\u0000\u02e2\u030b\u0003"+
		"\u001a\r\u0000\u02e3\u030b\u0003\u001c\u000e\u0000\u02e4\u030b\u0003\u001e"+
		"\u000f\u0000\u02e5\u030b\u0003 \u0010\u0000\u02e6\u030b\u0003\"\u0011"+
		"\u0000\u02e7\u030b\u0003&\u0013\u0000\u02e8\u030b\u0003(\u0014\u0000\u02e9"+
		"\u030b\u0003*\u0015\u0000\u02ea\u030b\u0003,\u0016\u0000\u02eb\u030b\u0003"+
		".\u0017\u0000\u02ec\u030b\u00038\u001c\u0000\u02ed\u030b\u0003$\u0012"+
		"\u0000\u02ee\u030b\u0003:\u001d\u0000\u02ef\u030b\u0003\u0082A\u0000\u02f0"+
		"\u030b\u0003\u0084B\u0000\u02f1\u030b\u0003\u0086C\u0000\u02f2\u030b\u0003"+
		"\u0088D\u0000\u02f3\u030b\u0003\u008aE\u0000\u02f4\u030b\u0003\u008cF"+
		"\u0000\u02f5\u030b\u0003\u008eG\u0000\u02f6\u030b\u0003\u0090H\u0000\u02f7"+
		"\u030b\u0003\u0092I\u0000\u02f8\u030b\u0003\u0094J\u0000\u02f9\u030b\u0003"+
		"\u0096K\u0000\u02fa\u030b\u0003\u009aM\u0000\u02fb\u030b\u0003\u009cN"+
		"\u0000\u02fc\u030b\u0003\u009eO\u0000\u02fd\u030b\u0003\u00a0P\u0000\u02fe"+
		"\u030b\u0003\u00a2Q\u0000\u02ff\u030b\u0003\u00a4R\u0000\u0300\u030b\u0003"+
		"\u00a6S\u0000\u0301\u030b\u0003\u00a8T\u0000\u0302\u030b\u0003\u00aaU"+
		"\u0000\u0303\u030b\u0003\u00acV\u0000\u0304\u030b\u0003\u00aeW\u0000\u0305"+
		"\u030b\u0003\u00b0X\u0000\u0306\u030b\u0003\u00b4Z\u0000\u0307\u030b\u0003"+
		"\u00b2Y\u0000\u0308\u030b\u0003\u00b6[\u0000\u0309\u030b\u0003\u00ba]"+
		"\u0000\u030a\u02e1\u0001\u0000\u0000\u0000\u030a\u02e2\u0001\u0000\u0000"+
		"\u0000\u030a\u02e3\u0001\u0000\u0000\u0000\u030a\u02e4\u0001\u0000\u0000"+
		"\u0000\u030a\u02e5\u0001\u0000\u0000\u0000\u030a\u02e6\u0001\u0000\u0000"+
		"\u0000\u030a\u02e7\u0001\u0000\u0000\u0000\u030a\u02e8\u0001\u0000\u0000"+
		"\u0000\u030a\u02e9\u0001\u0000\u0000\u0000\u030a\u02ea\u0001\u0000\u0000"+
		"\u0000\u030a\u02eb\u0001\u0000\u0000\u0000\u030a\u02ec\u0001\u0000\u0000"+
		"\u0000\u030a\u02ed\u0001\u0000\u0000\u0000\u030a\u02ee\u0001\u0000\u0000"+
		"\u0000\u030a\u02ef\u0001\u0000\u0000\u0000\u030a\u02f0\u0001\u0000\u0000"+
		"\u0000\u030a\u02f1\u0001\u0000\u0000\u0000\u030a\u02f2\u0001\u0000\u0000"+
		"\u0000\u030a\u02f3\u0001\u0000\u0000\u0000\u030a\u02f4\u0001\u0000\u0000"+
		"\u0000\u030a\u02f5\u0001\u0000\u0000\u0000\u030a\u02f6\u0001\u0000\u0000"+
		"\u0000\u030a\u02f7\u0001\u0000\u0000\u0000\u030a\u02f8\u0001\u0000\u0000"+
		"\u0000\u030a\u02f9\u0001\u0000\u0000\u0000\u030a\u02fa\u0001\u0000\u0000"+
		"\u0000\u030a\u02fb\u0001\u0000\u0000\u0000\u030a\u02fc\u0001\u0000\u0000"+
		"\u0000\u030a\u02fd\u0001\u0000\u0000\u0000\u030a\u02fe\u0001\u0000\u0000"+
		"\u0000\u030a\u02ff\u0001\u0000\u0000\u0000\u030a\u0300\u0001\u0000\u0000"+
		"\u0000\u030a\u0301\u0001\u0000\u0000\u0000\u030a\u0302\u0001\u0000\u0000"+
		"\u0000\u030a\u0303\u0001\u0000\u0000\u0000\u030a\u0304\u0001\u0000\u0000"+
		"\u0000\u030a\u0305\u0001\u0000\u0000\u0000\u030a\u0306\u0001\u0000\u0000"+
		"\u0000\u030a\u0307\u0001\u0000\u0000\u0000\u030a\u0308\u0001\u0000\u0000"+
		"\u0000\u030a\u0309\u0001\u0000\u0000\u0000\u030b\t\u0001\u0000\u0000\u0000"+
		"\u030c\u0317\u0003\u00ccf\u0000\u030d\u0317\u0003\u00c4b\u0000\u030e\u0317"+
		"\u0003\u00ceg\u0000\u030f\u0317\u0003\u00be_\u0000\u0310\u0317\u0003\u00ca"+
		"e\u0000\u0311\u0317\u0003\u00bc^\u0000\u0312\u0317\u0003\u00c6c\u0000"+
		"\u0313\u0317\u0003\u00c8d\u0000\u0314\u0317\u0003\u00c0`\u0000\u0315\u0317"+
		"\u0003\u00c2a\u0000\u0316\u030c\u0001\u0000\u0000\u0000\u0316\u030d\u0001"+
		"\u0000\u0000\u0000\u0316\u030e\u0001\u0000\u0000\u0000\u0316\u030f\u0001"+
		"\u0000\u0000\u0000\u0316\u0310\u0001\u0000\u0000\u0000\u0316\u0311\u0001"+
		"\u0000\u0000\u0000\u0316\u0312\u0001\u0000\u0000\u0000\u0316\u0313\u0001"+
		"\u0000\u0000\u0000\u0316\u0314\u0001\u0000\u0000\u0000\u0316\u0315\u0001"+
		"\u0000\u0000\u0000\u0317\u000b\u0001\u0000\u0000\u0000\u0318\u0322\u0003"+
		"\u011e\u008f\u0000\u0319\u0322\u0003\u0120\u0090\u0000\u031a\u0322\u0003"+
		"\u0122\u0091\u0000\u031b\u0322\u0003\u0124\u0092\u0000\u031c\u0322\u0003"+
		"\u0126\u0093\u0000\u031d\u0322\u0003\u0128\u0094\u0000\u031e\u0322\u0003"+
		"\u012a\u0095\u0000\u031f\u0322\u0003\u012c\u0096\u0000\u0320\u0322\u0003"+
		"\u012e\u0097\u0000\u0321\u0318\u0001\u0000\u0000\u0000\u0321\u0319\u0001"+
		"\u0000\u0000\u0000\u0321\u031a\u0001\u0000\u0000\u0000\u0321\u031b\u0001"+
		"\u0000\u0000\u0000\u0321\u031c\u0001\u0000\u0000\u0000\u0321\u031d\u0001"+
		"\u0000\u0000\u0000\u0321\u031e\u0001\u0000\u0000\u0000\u0321\u031f\u0001"+
		"\u0000\u0000\u0000\u0321\u0320\u0001\u0000\u0000\u0000\u0322\r\u0001\u0000"+
		"\u0000\u0000\u0323\u0333\u0003\u013e\u009f\u0000\u0324\u0333\u0003\u0140"+
		"\u00a0\u0000\u0325\u0333\u0003\u0142\u00a1\u0000\u0326\u0333\u0003\u0144"+
		"\u00a2\u0000\u0327\u0333\u0003\u0146\u00a3\u0000\u0328\u0333\u0003\u0148"+
		"\u00a4\u0000\u0329\u0333\u0003\u014a\u00a5\u0000\u032a\u0333\u0003\u014c"+
		"\u00a6\u0000\u032b\u0333\u0003\u014e\u00a7\u0000\u032c\u0333\u0003\u0166"+
		"\u00b3\u0000\u032d\u0333\u0003\u0168\u00b4\u0000\u032e\u0333\u0003\u016a"+
		"\u00b5\u0000\u032f\u0333\u0003\u016c\u00b6\u0000\u0330\u0333\u0003\u016e"+
		"\u00b7\u0000\u0331\u0333\u0003\u0170\u00b8\u0000\u0332\u0323\u0001\u0000"+
		"\u0000\u0000\u0332\u0324\u0001\u0000\u0000\u0000\u0332\u0325\u0001\u0000"+
		"\u0000\u0000\u0332\u0326\u0001\u0000\u0000\u0000\u0332\u0327\u0001\u0000"+
		"\u0000\u0000\u0332\u0328\u0001\u0000\u0000\u0000\u0332\u0329\u0001\u0000"+
		"\u0000\u0000\u0332\u032a\u0001\u0000\u0000\u0000\u0332\u032b\u0001\u0000"+
		"\u0000\u0000\u0332\u032c\u0001\u0000\u0000\u0000\u0332\u032d\u0001\u0000"+
		"\u0000\u0000\u0332\u032e\u0001\u0000\u0000\u0000\u0332\u032f\u0001\u0000"+
		"\u0000\u0000\u0332\u0330\u0001\u0000\u0000\u0000\u0332\u0331\u0001\u0000"+
		"\u0000\u0000\u0333\u000f\u0001\u0000\u0000\u0000\u0334\u0338\u0003\u0172"+
		"\u00b9\u0000\u0335\u0338\u0003\u0174\u00ba\u0000\u0336\u0338\u0003\u0176"+
		"\u00bb\u0000\u0337\u0334\u0001\u0000\u0000\u0000\u0337\u0335\u0001\u0000"+
		"\u0000\u0000\u0337\u0336\u0001\u0000\u0000\u0000\u0338\u0011\u0001\u0000"+
		"\u0000\u0000\u0339\u0344\u0003\u017a\u00bd\u0000\u033a\u0344\u0003\u017c"+
		"\u00be\u0000\u033b\u0344\u0003\u017e\u00bf\u0000\u033c\u0344\u0003\u0182"+
		"\u00c1\u0000\u033d\u0344\u0003\u0184\u00c2\u0000\u033e\u0344\u0003\u0186"+
		"\u00c3\u0000\u033f\u0344\u0003\u018a\u00c5\u0000\u0340\u0344\u0003\u0180"+
		"\u00c0\u0000\u0341\u0344\u0003\u0188\u00c4\u0000\u0342\u0344\u0003\u018c"+
		"\u00c6\u0000\u0343\u0339\u0001\u0000\u0000\u0000\u0343\u033a\u0001\u0000"+
		"\u0000\u0000\u0343\u033b\u0001\u0000\u0000\u0000\u0343\u033c\u0001\u0000"+
		"\u0000\u0000\u0343\u033d\u0001\u0000\u0000\u0000\u0343\u033e\u0001\u0000"+
		"\u0000\u0000\u0343\u033f\u0001\u0000\u0000\u0000\u0343\u0340\u0001\u0000"+
		"\u0000\u0000\u0343\u0341\u0001\u0000\u0000\u0000\u0343\u0342\u0001\u0000"+
		"\u0000\u0000\u0344\u0013\u0001\u0000\u0000\u0000\u0345\u035f\u0003\u019e"+
		"\u00cf\u0000\u0346\u035f\u0003\u01a0\u00d0\u0000\u0347\u035f\u0003\u01a2"+
		"\u00d1\u0000\u0348\u035f\u0003\u01a4\u00d2\u0000\u0349\u035f\u0003\u01a8"+
		"\u00d4\u0000\u034a\u035f\u0003\u01aa\u00d5\u0000\u034b\u035f\u0003\u01ac"+
		"\u00d6\u0000\u034c\u035f\u0003\u01ae\u00d7\u0000\u034d\u035f\u0003\u01c6"+
		"\u00e3\u0000\u034e\u035f\u0003\u01c8\u00e4\u0000\u034f\u035f\u0003\u01ca"+
		"\u00e5\u0000\u0350\u035f\u0003\u01cc\u00e6\u0000\u0351\u035f\u0003\u01ce"+
		"\u00e7\u0000\u0352\u035f\u0003\u01d2\u00e9\u0000\u0353\u035f\u0003\u01d4"+
		"\u00ea\u0000\u0354\u035f\u0003\u01d6\u00eb\u0000\u0355\u035f\u0003\u01d8"+
		"\u00ec\u0000\u0356\u035f\u0003\u01da\u00ed\u0000\u0357\u035f\u0003\u01e8"+
		"\u00f4\u0000\u0358\u035f\u0003\u01ea\u00f5\u0000\u0359\u035f\u0003\u01ec"+
		"\u00f6\u0000\u035a\u035f\u0003\u01ee\u00f7\u0000\u035b\u035f\u0003\u01f0"+
		"\u00f8\u0000\u035c\u035f\u0003\u01f2\u00f9\u0000\u035d\u035f\u0003\u01f4"+
		"\u00fa\u0000\u035e\u0345\u0001\u0000\u0000\u0000\u035e\u0346\u0001\u0000"+
		"\u0000\u0000\u035e\u0347\u0001\u0000\u0000\u0000\u035e\u0348\u0001\u0000"+
		"\u0000\u0000\u035e\u0349\u0001\u0000\u0000\u0000\u035e\u034a\u0001\u0000"+
		"\u0000\u0000\u035e\u034b\u0001\u0000\u0000\u0000\u035e\u034c\u0001\u0000"+
		"\u0000\u0000\u035e\u034d\u0001\u0000\u0000\u0000\u035e\u034e\u0001\u0000"+
		"\u0000\u0000\u035e\u034f\u0001\u0000\u0000\u0000\u035e\u0350\u0001\u0000"+
		"\u0000\u0000\u035e\u0351\u0001\u0000\u0000\u0000\u035e\u0352\u0001\u0000"+
		"\u0000\u0000\u035e\u0353\u0001\u0000\u0000\u0000\u035e\u0354\u0001\u0000"+
		"\u0000\u0000\u035e\u0355\u0001\u0000\u0000\u0000\u035e\u0356\u0001\u0000"+
		"\u0000\u0000\u035e\u0357\u0001\u0000\u0000\u0000\u035e\u0358\u0001\u0000"+
		"\u0000\u0000\u035e\u0359\u0001\u0000\u0000\u0000\u035e\u035a\u0001\u0000"+
		"\u0000\u0000\u035e\u035b\u0001\u0000\u0000\u0000\u035e\u035c\u0001\u0000"+
		"\u0000\u0000\u035e\u035d\u0001\u0000\u0000\u0000\u035f\u0015\u0001\u0000"+
		"\u0000\u0000\u0360\u0368\u0003\u01fe\u00ff\u0000\u0361\u0368\u0003\u0200"+
		"\u0100\u0000\u0362\u0368\u0003\u0202\u0101\u0000\u0363\u0368\u0003\u0204"+
		"\u0102\u0000\u0364\u0368\u0003\u0206\u0103\u0000\u0365\u0368\u0003\u0208"+
		"\u0104\u0000\u0366\u0368\u0003\u020c\u0106\u0000\u0367\u0360\u0001\u0000"+
		"\u0000\u0000\u0367\u0361\u0001\u0000\u0000\u0000\u0367\u0362\u0001\u0000"+
		"\u0000\u0000\u0367\u0363\u0001\u0000\u0000\u0000\u0367\u0364\u0001\u0000"+
		"\u0000\u0000\u0367\u0365\u0001\u0000\u0000\u0000\u0367\u0366\u0001\u0000"+
		"\u0000\u0000\u0368\u0017\u0001\u0000\u0000\u0000\u0369\u036a\u0005 \u0000"+
		"\u0000\u036a\u036c\u0007\u0000\u0000\u0000\u036b\u036d\u0003\u0266\u0133"+
		"\u0000\u036c\u036b\u0001\u0000\u0000\u0000\u036c\u036d\u0001\u0000\u0000"+
		"\u0000\u036d\u036e\u0001\u0000\u0000\u0000\u036e\u0372\u0003\u022e\u0117"+
		"\u0000\u036f\u0371\u0003>\u001f\u0000\u0370\u036f\u0001\u0000\u0000\u0000"+
		"\u0371\u0374\u0001\u0000\u0000\u0000\u0372\u0370\u0001\u0000\u0000\u0000"+
		"\u0372\u0373\u0001\u0000\u0000\u0000\u0373\u0019\u0001\u0000\u0000\u0000"+
		"\u0374\u0372\u0001\u0000\u0000\u0000\u0375\u0377\u0005 \u0000\u0000\u0376"+
		"\u0378\u0003B!\u0000\u0377\u0376\u0001\u0000\u0000\u0000\u0377\u0378\u0001"+
		"\u0000\u0000\u0000\u0378\u0379\u0001\u0000\u0000\u0000\u0379\u037b\u0005"+
		"\u0194\u0000\u0000\u037a\u037c\u0003\u0266\u0133\u0000\u037b\u037a\u0001"+
		"\u0000\u0000\u0000\u037b\u037c\u0001\u0000\u0000\u0000\u037c\u037d\u0001"+
		"\u0000\u0000\u0000\u037d\u037e\u0003\u0212\u0109\u0000\u037e\u037f\u0005"+
		"r\u0000\u0000\u037f\u0380\u0005\u024c\u0000\u0000\u0380\u0387\u0003D\""+
		"\u0000\u0381\u0382\u0005r\u0000\u0000\u0382\u0384\u0005\u016a\u0000\u0000"+
		"\u0383\u0385\u0005n\u0000\u0000\u0384\u0383\u0001\u0000\u0000\u0000\u0384"+
		"\u0385\u0001\u0000\u0000\u0000\u0385\u0386\u0001\u0000\u0000\u0000\u0386"+
		"\u0388\u0005\u0221\u0000\u0000\u0387\u0381\u0001\u0000\u0000\u0000\u0387"+
		"\u0388\u0001\u0000\u0000\u0000\u0388\u038a\u0001\u0000\u0000\u0000\u0389"+
		"\u038b\u0003L&\u0000\u038a\u0389\u0001\u0000\u0000\u0000\u038a\u038b\u0001"+
		"\u0000\u0000\u0000\u038b\u038e\u0001\u0000\u0000\u0000\u038c\u038d\u0005"+
		"\u0167\u0000\u0000\u038d\u038f\u0005\u0472\u0000\u0000\u038e\u038c\u0001"+
		"\u0000\u0000\u0000\u038e\u038f\u0001\u0000\u0000\u0000\u038f\u0390\u0001"+
		"\u0000\u0000\u0000\u0390\u0391\u0005\u0186\u0000\u0000\u0391\u0392\u0003"+
		"\u0178\u00bc\u0000\u0392\u001b\u0001\u0000\u0000\u0000\u0393\u0396\u0005"+
		" \u0000\u0000\u0394\u0395\u0005w\u0000\u0000\u0395\u0397\u0005\u0089\u0000"+
		"\u0000\u0396\u0394\u0001\u0000\u0000\u0000\u0396\u0397\u0001\u0000\u0000"+
		"\u0000\u0397\u0399\u0001\u0000\u0000\u0000\u0398\u039a\u0007\u0001\u0000"+
		"\u0000\u0399\u0398\u0001\u0000\u0000\u0000\u0399\u039a\u0001\u0000\u0000"+
		"\u0000\u039a\u039c\u0001\u0000\u0000\u0000\u039b\u039d\u0007\u0002\u0000"+
		"\u0000\u039c\u039b\u0001\u0000\u0000\u0000\u039c\u039d\u0001\u0000\u0000"+
		"\u0000\u039d\u039e\u0001\u0000\u0000\u0000\u039e\u03a2\u0005N\u0000\u0000"+
		"\u039f\u03a0\u0005J\u0000\u0000\u03a0\u03a1\u0005n\u0000\u0000\u03a1\u03a3"+
		"\u00059\u0000\u0000\u03a2\u039f\u0001\u0000\u0000\u0000\u03a2\u03a3\u0001"+
		"\u0000\u0000\u0000\u03a3\u03a4\u0001\u0000\u0000\u0000\u03a4\u03a6\u0003"+
		"\u022e\u0117\u0000\u03a5\u03a7\u0003N\'\u0000\u03a6\u03a5\u0001\u0000"+
		"\u0000\u0000\u03a6\u03a7\u0001\u0000\u0000\u0000\u03a7\u03a8\u0001\u0000"+
		"\u0000\u0000\u03a8\u03a9\u0005r\u0000\u0000\u03a9\u03aa\u0003\u0214\u010a"+
		"\u0000\u03aa\u03ac\u0003\u0252\u0129\u0000\u03ab\u03ad\u0003\u0268\u0134"+
		"\u0000\u03ac\u03ab\u0001\u0000\u0000\u0000\u03ac\u03ad\u0001\u0000\u0000"+
		"\u0000\u03ad\u03b1\u0001\u0000\u0000\u0000\u03ae\u03b0\u0003P(\u0000\u03af"+
		"\u03ae\u0001\u0000\u0000\u0000\u03b0\u03b3\u0001\u0000\u0000\u0000\u03b1"+
		"\u03af\u0001\u0000\u0000\u0000\u03b1\u03b2\u0001\u0000\u0000\u0000\u03b2"+
		"\u03c0\u0001\u0000\u0000\u0000\u03b3\u03b1\u0001\u0000\u0000\u0000\u03b4"+
		"\u03b6\u0005\u0147\u0000\u0000\u03b5\u03b7\u0005\u045a\u0000\u0000\u03b6"+
		"\u03b5\u0001\u0000\u0000\u0000\u03b6\u03b7\u0001\u0000\u0000\u0000\u03b7"+
		"\u03b8\u0001\u0000\u0000\u0000\u03b8\u03bf\u0007\u0003\u0000\u0000\u03b9"+
		"\u03bb\u0005c\u0000\u0000\u03ba\u03bc\u0005\u045a\u0000\u0000\u03bb\u03ba"+
		"\u0001\u0000\u0000\u0000\u03bb\u03bc\u0001\u0000\u0000\u0000\u03bc\u03bd"+
		"\u0001\u0000\u0000\u0000\u03bd\u03bf\u0007\u0004\u0000\u0000\u03be\u03b4"+
		"\u0001\u0000\u0000\u0000\u03be\u03b9\u0001\u0000\u0000\u0000\u03bf\u03c2"+
		"\u0001\u0000\u0000\u0000\u03c0\u03be\u0001\u0000\u0000\u0000\u03c0\u03c1"+
		"\u0001\u0000\u0000\u0000\u03c1\u001d\u0001\u0000\u0000\u0000\u03c2\u03c0"+
		"\u0001\u0000\u0000\u0000\u03c3\u03c4\u0005 \u0000\u0000\u03c4\u03c5\u0005"+
		"\u01ce\u0000\u0000\u03c5\u03c6\u0005F\u0000\u0000\u03c6\u03c7\u0003\u022e"+
		"\u0117\u0000\u03c7\u03c8\u0005\u0005\u0000\u0000\u03c8\u03c9\u0005\u0282"+
		"\u0000\u0000\u03c9\u03cf\u0005\u0472\u0000\u0000\u03ca\u03cc\u0005\u01b8"+
		"\u0000\u0000\u03cb\u03cd\u0005\u045a\u0000\u0000\u03cc\u03cb\u0001\u0000"+
		"\u0000\u0000\u03cc\u03cd\u0001\u0000\u0000\u0000\u03cd\u03ce\u0001\u0000"+
		"\u0000\u0000\u03ce\u03d0\u0003\u0236\u011b\u0000\u03cf\u03ca\u0001\u0000"+
		"\u0000\u0000\u03cf\u03d0\u0001\u0000\u0000\u0000\u03d0\u03d6\u0001\u0000"+
		"\u0000\u0000\u03d1\u03d3\u0005\u0283\u0000\u0000\u03d2\u03d4\u0005\u045a"+
		"\u0000\u0000";
	private static final String _serializedATNSegment1 =
		"\u03d3\u03d2\u0001\u0000\u0000\u0000\u03d3\u03d4\u0001\u0000\u0000\u0000"+
		"\u03d4\u03d5\u0001\u0000\u0000\u0000\u03d5\u03d7\u0003\u0236\u011b\u0000"+
		"\u03d6\u03d1\u0001\u0000\u0000\u0000\u03d6\u03d7\u0001\u0000\u0000\u0000"+
		"\u03d7\u03dd\u0001\u0000\u0000\u0000\u03d8\u03da\u0005\u022c\u0000\u0000"+
		"\u03d9\u03db\u0005\u045a\u0000\u0000\u03da\u03d9\u0001\u0000\u0000\u0000"+
		"\u03da\u03db\u0001\u0000\u0000\u0000\u03db\u03dc\u0001\u0000\u0000\u0000"+
		"\u03dc\u03de\u0003\u0236\u011b\u0000\u03dd\u03d8\u0001\u0000\u0000\u0000"+
		"\u03dd\u03de\u0001\u0000\u0000\u0000\u03de\u03e4\u0001\u0000\u0000\u0000"+
		"\u03df\u03e1\u0005\u0203\u0000\u0000\u03e0\u03e2\u0005\u045a\u0000\u0000"+
		"\u03e1\u03e0\u0001\u0000\u0000\u0000\u03e1\u03e2\u0001\u0000\u0000\u0000"+
		"\u03e2\u03e3\u0001\u0000\u0000\u0000\u03e3\u03e5\u0003\u022e\u0117\u0000"+
		"\u03e4\u03df\u0001\u0000\u0000\u0000\u03e4\u03e5\u0001\u0000\u0000\u0000"+
		"\u03e5\u03e7\u0001\u0000\u0000\u0000\u03e6\u03e8\u0005\u0291\u0000\u0000"+
		"\u03e7\u03e6\u0001\u0000\u0000\u0000\u03e7\u03e8\u0001\u0000\u0000\u0000"+
		"\u03e8\u03ee\u0001\u0000\u0000\u0000\u03e9\u03eb\u0005\u0167\u0000\u0000"+
		"\u03ea\u03ec\u0005\u045a\u0000\u0000\u03eb\u03ea\u0001\u0000\u0000\u0000"+
		"\u03eb\u03ec\u0001\u0000\u0000\u0000\u03ec\u03ed\u0001\u0000\u0000\u0000"+
		"\u03ed\u03ef\u0005\u0472\u0000\u0000\u03ee\u03e9\u0001\u0000\u0000\u0000"+
		"\u03ee\u03ef\u0001\u0000\u0000\u0000\u03ef\u03f0\u0001\u0000\u0000\u0000"+
		"\u03f0\u03f2\u0005\u018e\u0000\u0000\u03f1\u03f3\u0005\u045a\u0000\u0000"+
		"\u03f2\u03f1\u0001\u0000\u0000\u0000\u03f2\u03f3\u0001\u0000\u0000\u0000"+
		"\u03f3\u03f4\u0001\u0000\u0000\u0000\u03f4\u03f5\u0003\u0224\u0112\u0000"+
		"\u03f5\u001f\u0001\u0000\u0000\u0000\u03f6\u03f8\u0005 \u0000\u0000\u03f7"+
		"\u03f9\u0003B!\u0000\u03f8\u03f7\u0001\u0000\u0000\u0000\u03f8\u03f9\u0001"+
		"\u0000\u0000\u0000\u03f9\u03fa\u0001\u0000\u0000\u0000\u03fa\u03fb\u0005"+
		"\u007f\u0000\u0000\u03fb\u03fc\u0003\u0212\u0109\u0000\u03fc\u03fe\u0005"+
		"\u0463\u0000\u0000\u03fd\u03ff\u0003R)\u0000\u03fe\u03fd\u0001\u0000\u0000"+
		"\u0000\u03fe\u03ff\u0001\u0000\u0000\u0000\u03ff\u0404\u0001\u0000\u0000"+
		"\u0000\u0400\u0401\u0005\u0465\u0000\u0000\u0401\u0403\u0003R)\u0000\u0402"+
		"\u0400\u0001\u0000\u0000\u0000\u0403\u0406\u0001\u0000\u0000\u0000\u0404"+
		"\u0402\u0001\u0000\u0000\u0000\u0404\u0405\u0001\u0000\u0000\u0000\u0405"+
		"\u0407\u0001\u0000\u0000\u0000\u0406\u0404\u0001\u0000\u0000\u0000\u0407"+
		"\u040b\u0005\u0464\u0000\u0000\u0408\u040a\u0003V+\u0000\u0409\u0408\u0001"+
		"\u0000\u0000\u0000\u040a\u040d\u0001\u0000\u0000\u0000\u040b\u0409\u0001"+
		"\u0000\u0000\u0000\u040b\u040c\u0001\u0000\u0000\u0000\u040c\u040e\u0001"+
		"\u0000\u0000\u0000\u040d\u040b\u0001\u0000\u0000\u0000\u040e\u040f\u0003"+
		"\u0178\u00bc\u0000\u040f!\u0001\u0000\u0000\u0000\u0410\u0412\u0005 \u0000"+
		"\u0000\u0411\u0413\u0003B!\u0000\u0412\u0411\u0001\u0000\u0000\u0000\u0412"+
		"\u0413\u0001\u0000\u0000\u0000\u0413\u0414\u0001\u0000\u0000\u0000\u0414"+
		"\u0415\u0005\u01a9\u0000\u0000\u0415\u0416\u0003\u0212\u0109\u0000\u0416"+
		"\u0418\u0005\u0463\u0000\u0000\u0417\u0419\u0003T*\u0000\u0418\u0417\u0001"+
		"\u0000\u0000\u0000\u0418\u0419\u0001\u0000\u0000\u0000\u0419\u041e\u0001"+
		"\u0000\u0000\u0000\u041a\u041b\u0005\u0465\u0000\u0000\u041b\u041d\u0003"+
		"T*\u0000\u041c\u041a\u0001\u0000\u0000\u0000\u041d\u0420\u0001\u0000\u0000"+
		"\u0000\u041e\u041c\u0001\u0000\u0000\u0000\u041e\u041f\u0001\u0000\u0000"+
		"\u0000\u041f\u0421\u0001\u0000\u0000\u0000\u0420\u041e\u0001\u0000\u0000"+
		"\u0000\u0421\u0422\u0005\u0464\u0000\u0000\u0422\u0423\u0005\u0242\u0000"+
		"\u0000\u0423\u0427\u0003\u0242\u0121\u0000\u0424\u0426\u0003V+\u0000\u0425"+
		"\u0424\u0001\u0000\u0000\u0000\u0426\u0429\u0001\u0000\u0000\u0000\u0427"+
		"\u0425\u0001\u0000\u0000\u0000\u0427\u0428\u0001\u0000\u0000\u0000\u0428"+
		"\u042c\u0001\u0000\u0000\u0000\u0429\u0427\u0001\u0000\u0000\u0000\u042a"+
		"\u042d\u0003\u0178\u00bc\u0000\u042b\u042d\u0003\u0188\u00c4\u0000\u042c"+
		"\u042a\u0001\u0000\u0000\u0000\u042c\u042b\u0001\u0000\u0000\u0000\u042d"+
		"#\u0001\u0000\u0000\u0000\u042e\u042f\u0005 \u0000\u0000\u042f\u0433\u0005"+
		"\u0243\u0000\u0000\u0430\u0431\u0005J\u0000\u0000\u0431\u0432\u0005n\u0000"+
		"\u0000\u0432\u0434\u00059\u0000\u0000\u0433\u0430\u0001\u0000\u0000\u0000"+
		"\u0433\u0434\u0001\u0000\u0000\u0000\u0434\u0435\u0001\u0000\u0000\u0000"+
		"\u0435\u043a\u0003\u0216\u010b\u0000\u0436\u0437\u0005\u0465\u0000\u0000"+
		"\u0437\u0439\u0003\u0216\u010b\u0000\u0438\u0436\u0001\u0000\u0000\u0000"+
		"\u0439\u043c\u0001\u0000\u0000\u0000\u043a\u0438\u0001\u0000\u0000\u0000"+
		"\u043a\u043b\u0001\u0000\u0000\u0000\u043b%\u0001\u0000\u0000\u0000\u043c"+
		"\u043a\u0001\u0000\u0000\u0000\u043d\u043e\u0005 \u0000\u0000\u043e\u043f"+
		"\u0005\u024f\u0000\u0000\u043f\u0440\u0003\u022e\u0117\u0000\u0440\u0441"+
		"\u0005@\u0000\u0000\u0441\u0442\u0005\u017b\u0000\u0000\u0442\u0443\u0005"+
		"\u0296\u0000\u0000\u0443\u0444\u0007\u0005\u0000\u0000\u0444\u0445\u0005"+
		"\u0210\u0000\u0000\u0445\u0446\u0005\u0463\u0000\u0000\u0446\u044b\u0003"+
		"X,\u0000\u0447\u0448\u0005\u0465\u0000\u0000\u0448\u044a\u0003X,\u0000"+
		"\u0449\u0447\u0001\u0000\u0000\u0000\u044a\u044d\u0001\u0000\u0000\u0000"+
		"\u044b\u0449\u0001\u0000\u0000\u0000\u044b\u044c\u0001\u0000\u0000\u0000"+
		"\u044c\u044e\u0001\u0000\u0000\u0000\u044d\u044b\u0001\u0000\u0000\u0000"+
		"\u044e\u044f\u0005\u0464\u0000\u0000\u044f\'\u0001\u0000\u0000\u0000\u0450"+
		"\u0453\u0005 \u0000\u0000\u0451\u0452\u0005w\u0000\u0000\u0452\u0454\u0005"+
		"\u0089\u0000\u0000\u0453\u0451\u0001\u0000\u0000\u0000\u0453\u0454\u0001"+
		"\u0000\u0000\u0000\u0454\u0456\u0001\u0000\u0000\u0000\u0455\u0457\u0005"+
		"\u0278\u0000\u0000\u0456\u0455\u0001\u0000\u0000\u0000\u0456\u0457\u0001"+
		"\u0000\u0000\u0000\u0457\u0458\u0001\u0000\u0000\u0000\u0458\u045a\u0005"+
		"\u00a6\u0000\u0000\u0459\u045b\u0003\u0266\u0133\u0000\u045a\u0459\u0001"+
		"\u0000\u0000\u0000\u045a\u045b\u0001\u0000\u0000\u0000\u045b\u045c\u0001"+
		"\u0000\u0000\u0000\u045c\u0464\u0003\u0214\u010a\u0000\u045d\u045e\u0005"+
		"^\u0000\u0000\u045e\u0465\u0003\u0214\u010a\u0000\u045f\u0460\u0005\u0463"+
		"\u0000\u0000\u0460\u0461\u0005^\u0000\u0000\u0461\u0462\u0003\u0214\u010a"+
		"\u0000\u0462\u0463\u0005\u0464\u0000\u0000\u0463\u0465\u0001\u0000\u0000"+
		"\u0000\u0464\u045d\u0001\u0000\u0000\u0000\u0464\u045f\u0001\u0000\u0000"+
		"\u0000\u0465\u04ab\u0001\u0000\u0000\u0000\u0466\u0469\u0005 \u0000\u0000"+
		"\u0467\u0468\u0005w\u0000\u0000\u0468\u046a\u0005\u0089\u0000\u0000\u0469"+
		"\u0467\u0001\u0000\u0000\u0000\u0469\u046a\u0001\u0000\u0000\u0000\u046a"+
		"\u046c\u0001\u0000\u0000\u0000\u046b\u046d\u0005\u0278\u0000\u0000\u046c"+
		"\u046b\u0001\u0000\u0000\u0000\u046c\u046d\u0001\u0000\u0000\u0000\u046d"+
		"\u046e\u0001\u0000\u0000\u0000\u046e\u0470\u0005\u00a6\u0000\u0000\u046f"+
		"\u0471\u0003\u0266\u0133\u0000\u0470\u046f\u0001\u0000\u0000\u0000\u0470"+
		"\u0471\u0001\u0000\u0000\u0000\u0471\u0472\u0001\u0000\u0000\u0000\u0472"+
		"\u0474\u0003\u0214\u010a\u0000\u0473\u0475\u0003Z-\u0000\u0474\u0473\u0001"+
		"\u0000\u0000\u0000\u0474\u0475\u0001\u0000\u0000\u0000\u0475\u0480\u0001"+
		"\u0000\u0000\u0000\u0476\u047d\u0003l6\u0000\u0477\u0479\u0005\u0465\u0000"+
		"\u0000\u0478\u0477\u0001\u0000\u0000\u0000\u0478\u0479\u0001\u0000\u0000"+
		"\u0000\u0479\u047a\u0001\u0000\u0000\u0000\u047a\u047c\u0003l6\u0000\u047b"+
		"\u0478\u0001\u0000\u0000\u0000\u047c\u047f\u0001\u0000\u0000\u0000\u047d"+
		"\u047b\u0001\u0000\u0000\u0000\u047d\u047e\u0001\u0000\u0000\u0000\u047e"+
		"\u0481\u0001\u0000\u0000\u0000\u047f\u047d\u0001\u0000\u0000\u0000\u0480"+
		"\u0476\u0001\u0000\u0000\u0000\u0480\u0481\u0001\u0000\u0000\u0000\u0481"+
		"\u0483\u0001\u0000\u0000\u0000\u0482\u0484\u0003r9\u0000\u0483\u0482\u0001"+
		"\u0000\u0000\u0000\u0483\u0484\u0001\u0000\u0000\u0000\u0484\u0486\u0001"+
		"\u0000\u0000\u0000\u0485\u0487\u0007\u0006\u0000\u0000\u0486\u0485\u0001"+
		"\u0000\u0000\u0000\u0486\u0487\u0001\u0000\u0000\u0000\u0487\u0489\u0001"+
		"\u0000\u0000\u0000\u0488\u048a\u0005\f\u0000\u0000\u0489\u0488\u0001\u0000"+
		"\u0000\u0000\u0489\u048a\u0001\u0000\u0000\u0000\u048a\u048b\u0001\u0000"+
		"\u0000\u0000\u048b\u048c\u0003\u00ccf\u0000\u048c\u04ab\u0001\u0000\u0000"+
		"\u0000\u048d\u0490\u0005 \u0000\u0000\u048e\u048f\u0005w\u0000\u0000\u048f"+
		"\u0491\u0005\u0089\u0000\u0000\u0490\u048e\u0001\u0000\u0000\u0000\u0490"+
		"\u0491\u0001\u0000\u0000\u0000\u0491\u0493\u0001\u0000\u0000\u0000\u0492"+
		"\u0494\u0005\u0278\u0000\u0000\u0493\u0492\u0001\u0000\u0000\u0000\u0493"+
		"\u0494\u0001\u0000\u0000\u0000\u0494\u0495\u0001\u0000\u0000\u0000\u0495"+
		"\u0497\u0005\u00a6\u0000\u0000\u0496\u0498\u0003\u0266\u0133\u0000\u0497"+
		"\u0496\u0001\u0000\u0000\u0000\u0497\u0498\u0001\u0000\u0000\u0000\u0498"+
		"\u0499\u0001\u0000\u0000\u0000\u0499\u049a\u0003\u0214\u010a\u0000\u049a"+
		"\u04a5\u0003Z-\u0000\u049b\u04a2\u0003l6\u0000\u049c\u049e\u0005\u0465"+
		"\u0000\u0000\u049d\u049c\u0001\u0000\u0000\u0000\u049d\u049e\u0001\u0000"+
		"\u0000\u0000\u049e\u049f\u0001\u0000\u0000\u0000\u049f\u04a1\u0003l6\u0000"+
		"\u04a0\u049d\u0001\u0000\u0000\u0000\u04a1\u04a4\u0001\u0000\u0000\u0000"+
		"\u04a2\u04a0\u0001\u0000\u0000\u0000\u04a2\u04a3\u0001\u0000\u0000\u0000"+
		"\u04a3\u04a6\u0001\u0000\u0000\u0000\u04a4\u04a2\u0001\u0000\u0000\u0000"+
		"\u04a5\u049b\u0001\u0000\u0000\u0000\u04a5\u04a6\u0001\u0000\u0000\u0000"+
		"\u04a6\u04a8\u0001\u0000\u0000\u0000\u04a7\u04a9\u0003r9\u0000\u04a8\u04a7"+
		"\u0001\u0000\u0000\u0000\u04a8\u04a9\u0001\u0000\u0000\u0000\u04a9\u04ab"+
		"\u0001\u0000\u0000\u0000\u04aa\u0450\u0001\u0000\u0000\u0000\u04aa\u0466"+
		"\u0001\u0000\u0000\u0000\u04aa\u048d\u0001\u0000\u0000\u0000\u04ab)\u0001"+
		"\u0000\u0000\u0000\u04ac\u04ad\u0005 \u0000\u0000\u04ad\u04ae\u0005\u0276"+
		"\u0000\u0000\u04ae\u04af\u0003\u022e\u0117\u0000\u04af\u04b0\u0005\u0005"+
		"\u0000\u0000\u04b0\u04b1\u0005\u017c\u0000\u0000\u04b1\u04b5\u0005\u0472"+
		"\u0000\u0000\u04b2\u04b3\u0005\u01a0\u0000\u0000\u04b3\u04b4\u0005\u045a"+
		"\u0000\u0000\u04b4\u04b6\u0003\u0236\u011b\u0000\u04b5\u04b2\u0001\u0000"+
		"\u0000\u0000\u04b5\u04b6\u0001\u0000\u0000\u0000\u04b6\u04bc\u0001\u0000"+
		"\u0000\u0000\u04b7\u04b9\u0005\u018e\u0000\u0000\u04b8\u04ba\u0005\u045a"+
		"\u0000\u0000\u04b9\u04b8\u0001\u0000\u0000\u0000\u04b9\u04ba\u0001\u0000"+
		"\u0000\u0000\u04ba\u04bb\u0001\u0000\u0000\u0000\u04bb\u04bd\u0003\u0224"+
		"\u0112\u0000\u04bc\u04b7\u0001\u0000\u0000\u0000\u04bc\u04bd\u0001\u0000"+
		"\u0000\u0000\u04bd+\u0001\u0000\u0000\u0000\u04be\u04bf\u0005 \u0000\u0000"+
		"\u04bf\u04c0\u0005\u0276\u0000\u0000\u04c0\u04c1\u0003\u022e\u0117\u0000"+
		"\u04c1\u04c2\u0005\u0005\u0000\u0000\u04c2\u04c3\u0005\u017c\u0000\u0000"+
		"\u04c3\u04c4\u0005\u0472\u0000\u0000\u04c4\u04c5\u0005\u00b4\u0000\u0000"+
		"\u04c5\u04c6\u0005\u01ce\u0000\u0000\u04c6\u04c7\u0005F\u0000\u0000\u04c7"+
		"\u04cd\u0003\u022e\u0117\u0000\u04c8\u04ca\u0005\u019c\u0000\u0000\u04c9"+
		"\u04cb\u0005\u045a\u0000\u0000\u04ca\u04c9\u0001\u0000\u0000\u0000\u04ca"+
		"\u04cb\u0001\u0000\u0000\u0000\u04cb\u04cc\u0001\u0000\u0000\u0000\u04cc"+
		"\u04ce\u0003\u0236\u011b\u0000\u04cd\u04c8\u0001\u0000\u0000\u0000\u04cd"+
		"\u04ce\u0001\u0000\u0000\u0000\u04ce\u04d4\u0001\u0000\u0000\u0000\u04cf"+
		"\u04d1\u0005\u01b8\u0000\u0000\u04d0\u04d2\u0005\u045a\u0000\u0000\u04d1"+
		"\u04d0\u0001\u0000\u0000\u0000\u04d1\u04d2\u0001\u0000\u0000\u0000\u04d2"+
		"\u04d3\u0001\u0000\u0000\u0000\u04d3\u04d5\u0003\u0236\u011b\u0000\u04d4"+
		"\u04cf\u0001\u0000\u0000\u0000\u04d4\u04d5\u0001\u0000\u0000\u0000\u04d5"+
		"\u04db\u0001\u0000\u0000\u0000\u04d6\u04d8\u0005\u014c\u0000\u0000\u04d7"+
		"\u04d9\u0005\u045a\u0000\u0000\u04d8\u04d7\u0001\u0000\u0000\u0000\u04d8"+
		"\u04d9\u0001\u0000\u0000\u0000\u04d9\u04da\u0001\u0000\u0000\u0000\u04da"+
		"\u04dc\u0003\u0236\u011b\u0000\u04db\u04d6\u0001\u0000\u0000\u0000\u04db"+
		"\u04dc\u0001\u0000\u0000\u0000\u04dc\u04e2\u0001\u0000\u0000\u0000\u04dd"+
		"\u04df\u0005\u01e8\u0000\u0000\u04de\u04e0\u0005\u045a\u0000\u0000\u04df"+
		"\u04de\u0001\u0000\u0000\u0000\u04df\u04e0\u0001\u0000\u0000\u0000\u04e0"+
		"\u04e1\u0001\u0000\u0000\u0000\u04e1\u04e3\u0003\u0236\u011b\u0000\u04e2"+
		"\u04dd\u0001\u0000\u0000\u0000\u04e2\u04e3\u0001\u0000\u0000\u0000\u04e3"+
		"\u04e9\u0001\u0000\u0000\u0000\u04e4\u04e6\u0005\u0203\u0000\u0000\u04e5"+
		"\u04e7\u0005\u045a\u0000\u0000\u04e6\u04e5\u0001\u0000\u0000\u0000\u04e6"+
		"\u04e7\u0001\u0000\u0000\u0000\u04e7\u04e8\u0001\u0000\u0000\u0000\u04e8"+
		"\u04ea\u0003\u022e\u0117\u0000\u04e9\u04e4\u0001\u0000\u0000\u0000\u04e9"+
		"\u04ea\u0001\u0000\u0000\u0000\u04ea\u04ec\u0001\u0000\u0000\u0000\u04eb"+
		"\u04ed\u0005\u0291\u0000\u0000\u04ec\u04eb\u0001\u0000\u0000\u0000\u04ec"+
		"\u04ed\u0001\u0000\u0000\u0000\u04ed\u04f3\u0001\u0000\u0000\u0000\u04ee"+
		"\u04f0\u0005\u0167\u0000\u0000\u04ef\u04f1\u0005\u045a\u0000\u0000\u04f0"+
		"\u04ef\u0001\u0000\u0000\u0000\u04f0\u04f1\u0001\u0000\u0000\u0000\u04f1"+
		"\u04f2\u0001\u0000\u0000\u0000\u04f2\u04f4\u0005\u0472\u0000\u0000\u04f3"+
		"\u04ee\u0001\u0000\u0000\u0000\u04f3\u04f4\u0001\u0000\u0000\u0000\u04f4"+
		"\u04f5\u0001\u0000\u0000\u0000\u04f5\u04f7\u0005\u018e\u0000\u0000\u04f6"+
		"\u04f8\u0005\u045a\u0000\u0000\u04f7\u04f6\u0001\u0000\u0000\u0000\u04f7"+
		"\u04f8\u0001\u0000\u0000\u0000\u04f8\u04f9\u0001\u0000\u0000\u0000\u04f9"+
		"\u04fa\u0003\u0224\u0112\u0000\u04fa-\u0001\u0000\u0000\u0000\u04fb\u04fe"+
		"\u0005 \u0000\u0000\u04fc\u04fd\u0005w\u0000\u0000\u04fd\u04ff\u0005\u0089"+
		"\u0000\u0000\u04fe\u04fc\u0001\u0000\u0000\u0000\u04fe\u04ff\u0001\u0000"+
		"\u0000\u0000\u04ff\u0501\u0001\u0000\u0000\u0000\u0500\u0502\u0003B!\u0000"+
		"\u0501\u0500\u0001\u0000\u0000\u0000\u0501\u0502\u0001\u0000\u0000\u0000"+
		"\u0502\u0503\u0001\u0000\u0000\u0000\u0503\u0504\u0005\u00ab\u0000\u0000"+
		"\u0504\u0505\u0003\u0212\u0109\u0000\u0505\u0506\u0007\u0007\u0000\u0000"+
		"\u0506\u0507\u0007\b\u0000\u0000\u0507\u0508\u0005r\u0000\u0000\u0508"+
		"\u0509\u0003\u0214\u010a\u0000\u0509\u050a\u0005>\u0000\u0000\u050a\u050b"+
		"\u00052\u0000\u0000\u050b\u050e\u0005\u0247\u0000\u0000\u050c\u050d\u0007"+
		"\t\u0000\u0000\u050d\u050f\u0003\u0212\u0109\u0000\u050e\u050c\u0001\u0000"+
		"\u0000\u0000\u050e\u050f\u0001\u0000\u0000\u0000\u050f\u0510\u0001\u0000"+
		"\u0000\u0000\u0510\u0511\u0003\u0178\u00bc\u0000\u0511/\u0001\u0000\u0000"+
		"\u0000\u0512\u0514\u0005\u00ba\u0000\u0000\u0513\u0515\u0005\u022b\u0000"+
		"\u0000\u0514\u0513\u0001\u0000\u0000\u0000\u0514\u0515\u0001\u0000\u0000"+
		"\u0000\u0515\u0516\u0001\u0000\u0000\u0000\u0516\u0517\u00032\u0019\u0000"+
		"\u05171\u0001\u0000\u0000\u0000\u0518\u0524\u00034\u001a\u0000\u0519\u051a"+
		"\u0005\u0463\u0000\u0000\u051a\u051f\u00036\u001b\u0000\u051b\u051c\u0005"+
		"\u0465\u0000\u0000\u051c\u051e\u00036\u001b\u0000\u051d\u051b\u0001\u0000"+
		"\u0000\u0000\u051e\u0521\u0001\u0000\u0000\u0000\u051f\u051d\u0001\u0000"+
		"\u0000\u0000\u051f\u0520\u0001\u0000\u0000\u0000\u0520\u0522\u0001\u0000"+
		"\u0000\u0000\u0521\u051f\u0001\u0000\u0000\u0000\u0522\u0523\u0005\u0464"+
		"\u0000\u0000\u0523\u0525\u0001\u0000\u0000\u0000\u0524\u0519\u0001\u0000"+
		"\u0000\u0000\u0524\u0525\u0001\u0000\u0000\u0000\u0525\u0526\u0001\u0000"+
		"\u0000\u0000\u0526\u0527\u0005\f\u0000\u0000\u0527\u0528\u0005\u0463\u0000"+
		"\u0000\u0528\u0529\u0003\n\u0005\u0000\u0529\u052c\u0005\u0464\u0000\u0000"+
		"\u052a\u052b\u0005\u0465\u0000\u0000\u052b\u052d\u00032\u0019\u0000\u052c"+
		"\u052a\u0001\u0000\u0000\u0000\u052c\u052d\u0001\u0000\u0000\u0000\u052d"+
		"3\u0001\u0000\u0000\u0000\u052e\u052f\u0003\u022e\u0117\u0000\u052f5\u0001"+
		"\u0000\u0000\u0000\u0530\u0531\u0003\u022e\u0117\u0000\u05317\u0001\u0000"+
		"\u0000\u0000\u0532\u0535\u0005 \u0000\u0000\u0533\u0534\u0005w\u0000\u0000"+
		"\u0534\u0536\u0005\u0089\u0000\u0000\u0535\u0533\u0001\u0000\u0000\u0000"+
		"\u0535\u0536\u0001\u0000\u0000\u0000\u0536\u053a\u0001\u0000\u0000\u0000"+
		"\u0537\u0538\u0005\u0147\u0000\u0000\u0538\u0539\u0005\u045a\u0000\u0000"+
		"\u0539\u053b\u0007\n\u0000\u0000\u053a\u0537\u0001\u0000\u0000\u0000\u053a"+
		"\u053b\u0001\u0000\u0000\u0000\u053b\u053d\u0001\u0000\u0000\u0000\u053c"+
		"\u053e\u0003B!\u0000\u053d\u053c\u0001\u0000\u0000\u0000\u053d\u053e\u0001"+
		"\u0000\u0000\u0000\u053e\u0542\u0001\u0000\u0000\u0000\u053f\u0540\u0005"+
		"\u009b\u0000\u0000\u0540\u0541\u0005\u024d\u0000\u0000\u0541\u0543\u0007"+
		"\u000b\u0000\u0000\u0542\u053f\u0001\u0000\u0000\u0000\u0542\u0543\u0001"+
		"\u0000\u0000\u0000\u0543\u0544\u0001\u0000\u0000\u0000\u0544\u0545\u0005"+
		"\u028e\u0000\u0000\u0545\u054a\u0003\u0212\u0109\u0000\u0546\u0547\u0005"+
		"\u0463\u0000\u0000\u0547\u0548\u0003\u024e\u0127\u0000\u0548\u0549\u0005"+
		"\u0464\u0000\u0000\u0549\u054b\u0001\u0000\u0000\u0000\u054a\u0546\u0001"+
		"\u0000\u0000\u0000\u054a\u054b\u0001\u0000\u0000\u0000\u054b\u054c\u0001"+
		"\u0000\u0000\u0000\u054c\u054e\u0005\f\u0000\u0000\u054d\u054f\u00030"+
		"\u0018\u0000\u054e\u054d\u0001\u0000\u0000\u0000\u054e\u054f\u0001\u0000"+
		"\u0000\u0000\u054f\u0550\u0001\u0000\u0000\u0000\u0550\u0557\u0003\u00cc"+
		"f\u0000\u0551\u0553\u0005\u00ba\u0000\u0000\u0552\u0554\u0007\f\u0000"+
		"\u0000\u0553\u0552\u0001\u0000\u0000\u0000\u0553\u0554\u0001\u0000\u0000"+
		"\u0000\u0554\u0555\u0001\u0000\u0000\u0000\u0555\u0556\u0005\u0019\u0000"+
		"\u0000\u0556\u0558\u0005t\u0000\u0000\u0557\u0551\u0001\u0000\u0000\u0000"+
		"\u0557\u0558\u0001\u0000\u0000\u0000\u05589\u0001\u0000\u0000\u0000\u0559"+
		"\u055c\u0005 \u0000\u0000\u055a\u055b\u0005w\u0000\u0000\u055b\u055d\u0005"+
		"\u0089\u0000\u0000\u055c\u055a\u0001\u0000\u0000\u0000\u055c\u055d\u0001"+
		"\u0000\u0000\u0000\u055d\u055f\u0001\u0000\u0000\u0000\u055e\u0560\u0005"+
		"\u0278\u0000\u0000\u055f\u055e\u0001\u0000\u0000\u0000\u055f\u0560\u0001"+
		"\u0000\u0000\u0000\u0560\u0561\u0001\u0000\u0000\u0000\u0561\u0563\u0005"+
		"\u024e\u0000\u0000\u0562\u0564\u0003\u0266\u0133\u0000\u0563\u0562\u0001"+
		"\u0000\u0000\u0000\u0563\u0564\u0001\u0000\u0000\u0000\u0564\u0565\u0001"+
		"\u0000\u0000\u0000\u0565\u056a\u0003\u0212\u0109\u0000\u0566\u0569\u0003"+
		"<\u001e\u0000\u0567\u0569\u0003l6\u0000\u0568\u0566\u0001\u0000\u0000"+
		"\u0000\u0568\u0567\u0001\u0000\u0000\u0000\u0569\u056c\u0001\u0000\u0000"+
		"\u0000\u056a\u0568\u0001\u0000\u0000\u0000\u056a\u056b\u0001\u0000\u0000"+
		"\u0000\u056b;\u0001\u0000\u0000\u0000\u056c\u056a\u0001\u0000\u0000\u0000"+
		"\u056d\u056f\u0005\u01b6\u0000\u0000\u056e\u0570\u0007\r\u0000\u0000\u056f"+
		"\u056e\u0001\u0000\u0000\u0000\u056f\u0570\u0001\u0000\u0000\u0000\u0570"+
		"\u0571\u0001\u0000\u0000\u0000\u0571\u0595\u0003\u0234\u011a\u0000\u0572"+
		"\u0574\u0005k\u0000\u0000\u0573\u0575\u0005\u045a\u0000\u0000\u0574\u0573"+
		"\u0001\u0000\u0000\u0000\u0574\u0575\u0001\u0000\u0000\u0000\u0575\u0576"+
		"\u0001\u0000\u0000\u0000\u0576\u0595\u0003\u0234\u011a\u0000\u0577\u0578"+
		"\u0005\u01fc\u0000\u0000\u0578\u0595\u0005k\u0000\u0000\u0579\u0595\u0005"+
		"\u0201\u0000\u0000\u057a\u057c\u0005j\u0000\u0000\u057b\u057d\u0005\u045a"+
		"\u0000\u0000\u057c\u057b\u0001\u0000\u0000\u0000\u057c\u057d\u0001\u0000"+
		"\u0000\u0000\u057d\u057e\u0001\u0000\u0000\u0000\u057e\u0595\u0003\u0234"+
		"\u011a\u0000\u057f\u0580\u0005\u01fc\u0000\u0000\u0580\u0595\u0005j\u0000"+
		"\u0000\u0581\u0595\u0005\u0200\u0000\u0000\u0582\u0584\u0005\u0264\u0000"+
		"\u0000\u0583\u0585\u0007\u000e\u0000\u0000\u0584\u0583\u0001\u0000\u0000"+
		"\u0000\u0584\u0585\u0001\u0000\u0000\u0000\u0585\u0586\u0001\u0000\u0000"+
		"\u0000\u0586\u0595\u0003\u0234\u011a\u0000\u0587\u0589\u0005\u0156\u0000"+
		"\u0000\u0588\u058a\u0005\u045a\u0000\u0000\u0589\u0588\u0001\u0000\u0000"+
		"\u0000\u0589\u058a\u0001\u0000\u0000\u0000\u058a\u058b\u0001\u0000\u0000"+
		"\u0000\u058b\u0595\u0003\u0234\u011a\u0000\u058c\u0595\u0005\u01fd\u0000"+
		"\u0000\u058d\u0595\u0005\u0179\u0000\u0000\u058e\u0595\u0005\u01ff\u0000"+
		"\u0000\u058f\u0591\u0005\u023e\u0000\u0000\u0590\u0592\u0007\u000e\u0000"+
		"\u0000\u0591\u0590\u0001\u0000\u0000\u0000\u0591\u0592\u0001\u0000\u0000"+
		"\u0000\u0592\u0593\u0001\u0000\u0000\u0000\u0593\u0595\u0003\u0234\u011a"+
		"\u0000\u0594\u056d\u0001\u0000\u0000\u0000\u0594\u0572\u0001\u0000\u0000"+
		"\u0000\u0594\u0577\u0001\u0000\u0000\u0000\u0594\u0579\u0001\u0000\u0000"+
		"\u0000\u0594\u057a\u0001\u0000\u0000\u0000\u0594\u057f\u0001\u0000\u0000"+
		"\u0000\u0594\u0581\u0001\u0000\u0000\u0000\u0594\u0582\u0001\u0000\u0000"+
		"\u0000\u0594\u0587\u0001\u0000\u0000\u0000\u0594\u058c\u0001\u0000\u0000"+
		"\u0000\u0594\u058d\u0001\u0000\u0000\u0000\u0594\u058e\u0001\u0000\u0000"+
		"\u0000\u0594\u058f\u0001\u0000\u0000\u0000\u0595=\u0001\u0000\u0000\u0000"+
		"\u0596\u0598\u0005(\u0000\u0000\u0597\u0596\u0001\u0000\u0000\u0000\u0597"+
		"\u0598\u0001\u0000\u0000\u0000\u0598\u0599\u0001\u0000\u0000\u0000\u0599"+
		"\u059b\u0003@ \u0000\u059a\u059c\u0005\u045a\u0000\u0000\u059b\u059a\u0001"+
		"\u0000\u0000\u0000\u059b\u059c\u0001\u0000\u0000\u0000\u059c\u059f\u0001"+
		"\u0000\u0000\u0000\u059d\u05a0\u0003\u0220\u0110\u0000\u059e\u05a0\u0005"+
		"(\u0000\u0000\u059f\u059d\u0001\u0000\u0000\u0000\u059f\u059e\u0001\u0000"+
		"\u0000\u0000\u05a0\u05b8\u0001\u0000\u0000\u0000\u05a1\u05a3\u0005(\u0000"+
		"\u0000\u05a2\u05a1\u0001\u0000\u0000\u0000\u05a2\u05a3\u0001\u0000\u0000"+
		"\u0000\u05a3\u05a4\u0001\u0000\u0000\u0000\u05a4\u05a6\u0005\u001a\u0000"+
		"\u0000\u05a5\u05a7\u0005\u045a\u0000\u0000\u05a6\u05a5\u0001\u0000\u0000"+
		"\u0000\u05a6\u05a7\u0001\u0000\u0000\u0000\u05a7\u05a8\u0001\u0000\u0000"+
		"\u0000\u05a8\u05b8\u0003\u0222\u0111\u0000\u05a9\u05ab\u0005(\u0000\u0000"+
		"\u05aa\u05a9\u0001\u0000\u0000\u0000\u05aa\u05ab\u0001\u0000\u0000\u0000"+
		"\u05ab\u05ac\u0001\u0000\u0000\u0000\u05ac\u05ae\u0005\u018b\u0000\u0000"+
		"\u05ad\u05af\u0005\u045a\u0000\u0000\u05ae\u05ad\u0001\u0000\u0000\u0000"+
		"\u05ae\u05af\u0001\u0000\u0000\u0000\u05af\u05b0\u0001\u0000\u0000\u0000"+
		"\u05b0\u05b8\u0005\u0472\u0000\u0000\u05b1\u05b2\u0005\u0082\u0000\u0000"+
		"\u05b2\u05b4\u0005\u020d\u0000\u0000\u05b3\u05b5\u0005\u045a\u0000\u0000"+
		"\u05b4\u05b3\u0001\u0000\u0000\u0000\u05b4\u05b5\u0001\u0000\u0000\u0000"+
		"\u05b5\u05b6\u0001\u0000\u0000\u0000\u05b6\u05b8\u0007\u000f\u0000\u0000"+
		"\u05b7\u0597\u0001\u0000\u0000\u0000\u05b7\u05a2\u0001\u0000\u0000\u0000"+
		"\u05b7\u05aa\u0001\u0000\u0000\u0000\u05b7\u05b1\u0001\u0000\u0000\u0000"+
		"\u05b8?\u0001\u0000\u0000\u0000\u05b9\u05ba\u0005\u0018\u0000\u0000\u05ba"+
		"\u05bf\u0005\u0095\u0000\u0000\u05bb\u05bf\u0005\u0335\u0000\u0000\u05bc"+
		"\u05bd\u0005\u00d8\u0000\u0000\u05bd\u05bf\u0005\u0095\u0000\u0000\u05be"+
		"\u05b9\u0001\u0000\u0000\u0000\u05be\u05bb\u0001\u0000\u0000\u0000\u05be"+
		"\u05bc\u0001\u0000\u0000\u0000\u05bfA\u0001\u0000\u0000\u0000\u05c0\u05c1"+
		"\u0005\u017f\u0000\u0000\u05c1\u05c8\u0005\u045a\u0000\u0000\u05c2\u05c9"+
		"\u0003\u021c\u010e\u0000\u05c3\u05c6\u0005#\u0000\u0000\u05c4\u05c5\u0005"+
		"\u0463\u0000\u0000\u05c5\u05c7\u0005\u0464\u0000\u0000\u05c6\u05c4\u0001"+
		"\u0000\u0000\u0000\u05c6\u05c7\u0001\u0000\u0000\u0000\u05c7\u05c9\u0001"+
		"\u0000\u0000\u0000\u05c8\u05c2\u0001\u0000\u0000\u0000\u05c8\u05c3\u0001"+
		"\u0000\u0000\u0000\u05c9C\u0001\u0000\u0000\u0000\u05ca\u05cb\u0005\u0149"+
		"\u0000\u0000\u05cb\u05cf\u0003F#\u0000\u05cc\u05ce\u0003H$\u0000\u05cd"+
		"\u05cc\u0001\u0000\u0000\u0000\u05ce\u05d1\u0001\u0000\u0000\u0000\u05cf"+
		"\u05cd\u0001\u0000\u0000\u0000\u05cf\u05d0\u0001\u0000\u0000\u0000\u05d0"+
		"\u05ed\u0001\u0000\u0000\u0000\u05d1\u05cf\u0001\u0000\u0000\u0000\u05d2"+
		"\u05d5\u0005\u0196\u0000\u0000\u05d3\u05d6\u0003\u0234\u011a\u0000\u05d4"+
		"\u05d6\u0003\u0294\u014a\u0000\u05d5\u05d3\u0001\u0000\u0000\u0000\u05d5"+
		"\u05d4\u0001\u0000\u0000\u0000\u05d6\u05d7\u0001\u0000\u0000\u0000\u05d7"+
		"\u05e0\u0003J%\u0000\u05d8\u05d9\u0005\u0265\u0000\u0000\u05d9\u05dd\u0003"+
		"F#\u0000\u05da\u05dc\u0003H$\u0000\u05db\u05da\u0001\u0000\u0000\u0000"+
		"\u05dc\u05df\u0001\u0000\u0000\u0000\u05dd\u05db\u0001\u0000\u0000\u0000"+
		"\u05dd\u05de\u0001\u0000\u0000\u0000\u05de\u05e1\u0001\u0000\u0000\u0000"+
		"\u05df\u05dd\u0001\u0000\u0000\u0000\u05e0\u05d8\u0001\u0000\u0000\u0000"+
		"\u05e0\u05e1\u0001\u0000\u0000\u0000\u05e1\u05ea\u0001\u0000\u0000\u0000"+
		"\u05e2\u05e3\u0005\u018d\u0000\u0000\u05e3\u05e7\u0003F#\u0000\u05e4\u05e6"+
		"\u0003H$\u0000\u05e5\u05e4\u0001\u0000\u0000\u0000\u05e6\u05e9\u0001\u0000"+
		"\u0000\u0000\u05e7\u05e5\u0001\u0000\u0000\u0000\u05e7\u05e8\u0001\u0000"+
		"\u0000\u0000\u05e8\u05eb\u0001\u0000\u0000\u0000\u05e9\u05e7\u0001\u0000"+
		"\u0000\u0000\u05ea\u05e2\u0001\u0000\u0000\u0000\u05ea\u05eb\u0001\u0000"+
		"\u0000\u0000\u05eb\u05ed\u0001\u0000\u0000\u0000\u05ec\u05ca\u0001\u0000"+
		"\u0000\u0000\u05ec\u05d2\u0001\u0000\u0000\u0000\u05edE\u0001\u0000\u0000"+
		"\u0000\u05ee\u05f3\u0005\u0132\u0000\u0000\u05ef\u05f3\u0003\u0238\u011c"+
		"\u0000\u05f0\u05f3\u0003\u0234\u011a\u0000\u05f1\u05f3\u0003\u0294\u014a"+
		"\u0000\u05f2\u05ee\u0001\u0000\u0000\u0000\u05f2\u05ef\u0001\u0000\u0000"+
		"\u0000\u05f2\u05f0\u0001\u0000\u0000\u0000\u05f2\u05f1\u0001\u0000\u0000"+
		"\u0000\u05f3G\u0001\u0000\u0000\u0000\u05f4\u05f5\u0005\u0456\u0000\u0000"+
		"\u05f5\u05f8\u0005S\u0000\u0000\u05f6\u05f9\u0003\u0234\u011a\u0000\u05f7"+
		"\u05f9\u0003\u0294\u014a\u0000\u05f8\u05f6\u0001\u0000\u0000\u0000\u05f8"+
		"\u05f7\u0001\u0000\u0000\u0000\u05f9\u05fa\u0001\u0000\u0000\u0000\u05fa"+
		"\u05fb\u0003J%\u0000\u05fbI\u0001\u0000\u0000\u0000\u05fc\u060a\u0003"+
		"\u02ac\u0156\u0000\u05fd\u060a\u0005\u00d7\u0000\u0000\u05fe\u060a\u0005"+
		"\u00ea\u0000\u0000\u05ff\u060a\u0005\u00eb\u0000\u0000\u0600\u060a\u0005"+
		"\u00ec\u0000\u0000\u0601\u060a\u0005\u00ed\u0000\u0000\u0602\u060a\u0005"+
		"\u00ee\u0000\u0000\u0603\u060a\u0005\u00ef\u0000\u0000\u0604\u060a\u0005"+
		"\u00f0\u0000\u0000\u0605\u060a\u0005\u00f1\u0000\u0000\u0606\u060a\u0005"+
		"\u00f2\u0000\u0000\u0607\u060a\u0005\u00f3\u0000\u0000\u0608\u060a\u0005"+
		"\u00f4\u0000\u0000\u0609\u05fc\u0001\u0000\u0000\u0000\u0609\u05fd\u0001"+
		"\u0000\u0000\u0000\u0609\u05fe\u0001\u0000\u0000\u0000\u0609\u05ff\u0001"+
		"\u0000\u0000\u0000\u0609\u0600\u0001\u0000\u0000\u0000\u0609\u0601\u0001"+
		"\u0000\u0000\u0000\u0609\u0602\u0001\u0000\u0000\u0000\u0609\u0603\u0001"+
		"\u0000\u0000\u0000\u0609\u0604\u0001\u0000\u0000\u0000\u0609\u0605\u0001"+
		"\u0000\u0000\u0000\u0609\u0606\u0001\u0000\u0000\u0000\u0609\u0607\u0001"+
		"\u0000\u0000\u0000\u0609\u0608\u0001\u0000\u0000\u0000\u060aK\u0001\u0000"+
		"\u0000\u0000\u060b\u0611\u0005\u018a\u0000\u0000\u060c\u0611\u0005\u0183"+
		"\u0000\u0000\u060d\u060e\u0005\u0183\u0000\u0000\u060e\u060f\u0005r\u0000"+
		"\u0000\u060f\u0611\u0005\u0255\u0000\u0000\u0610\u060b\u0001\u0000\u0000"+
		"\u0000\u0610\u060c\u0001\u0000\u0000\u0000\u0610\u060d\u0001\u0000\u0000"+
		"\u0000\u0611M\u0001\u0000\u0000\u0000\u0612\u0613\u0005\u00b5\u0000\u0000"+
		"\u0613\u0614\u0007\u0010\u0000\u0000\u0614O\u0001\u0000\u0000\u0000\u0615"+
		"\u0617\u0005\u01c6\u0000\u0000\u0616\u0618\u0005\u045a\u0000\u0000\u0617"+
		"\u0616\u0001\u0000\u0000\u0000\u0617\u0618\u0001\u0000\u0000\u0000\u0618"+
		"\u0619\u0001\u0000\u0000\u0000\u0619\u0634\u0003\u0236\u011b\u0000\u061a"+
		"\u0634\u0003N\'\u0000\u061b\u061c\u0005\u00ba\u0000\u0000\u061c\u061d"+
		"\u0005\u0214\u0000\u0000\u061d\u0634\u0003\u022e\u0117\u0000\u061e\u061f"+
		"\u0005\u0167\u0000\u0000\u061f\u0634\u0005\u0472\u0000\u0000\u0620\u0634"+
		"\u0007\u0011\u0000\u0000\u0621\u0623\u0005\u0357\u0000\u0000\u0622\u0624"+
		"\u0005\u045a\u0000\u0000\u0623\u0622\u0001\u0000\u0000\u0000\u0623\u0624"+
		"\u0001\u0000\u0000\u0000\u0624\u0625\u0001\u0000\u0000\u0000\u0625\u0634"+
		"\u0005\u0472\u0000\u0000\u0626\u0628\u0005\u03d3\u0000\u0000\u0627\u0629"+
		"\u0005\u045a\u0000\u0000\u0628\u0627\u0001\u0000\u0000\u0000\u0628\u0629"+
		"\u0001\u0000\u0000\u0000\u0629\u062a\u0001\u0000\u0000\u0000\u062a\u0634"+
		"\u0005\u0472\u0000\u0000\u062b\u062c\u0005\u0161\u0000\u0000\u062c\u062d"+
		"\u0005\u045a\u0000\u0000\u062d\u0634\u0007\u0012\u0000\u0000\u062e\u0632"+
		"\u0005L\u0000\u0000\u062f\u0630\u0005n\u0000\u0000\u0630\u0632\u0005L"+
		"\u0000\u0000\u0631\u062e\u0001\u0000\u0000\u0000\u0631\u062f\u0001\u0000"+
		"\u0000\u0000\u0632\u0634\u0001\u0000\u0000\u0000\u0633\u0615\u0001\u0000"+
		"\u0000\u0000\u0633\u061a\u0001\u0000\u0000\u0000\u0633\u061b\u0001\u0000"+
		"\u0000\u0000\u0633\u061e\u0001\u0000\u0000\u0000\u0633\u0620\u0001\u0000"+
		"\u0000\u0000\u0633\u0621\u0001\u0000\u0000\u0000\u0633\u0626\u0001\u0000"+
		"\u0000\u0000\u0633\u062b\u0001\u0000\u0000\u0000\u0633\u0631\u0001\u0000"+
		"\u0000\u0000\u0634Q\u0001\u0000\u0000\u0000\u0635\u0637\u0007\u0013\u0000"+
		"\u0000\u0636\u0635\u0001\u0000\u0000\u0000\u0636\u0637\u0001\u0000\u0000"+
		"\u0000\u0637\u0638\u0001\u0000\u0000\u0000\u0638\u0639\u0003\u022e\u0117"+
		"\u0000\u0639\u063a\u0003\u0242\u0121\u0000\u063aS\u0001\u0000\u0000\u0000"+
		"\u063b\u063c\u0003\u022e\u0117\u0000\u063c\u063d\u0003\u0242\u0121\u0000"+
		"\u063dU\u0001\u0000\u0000\u0000\u063e\u063f\u0005\u0167\u0000\u0000\u063f"+
		"\u0656\u0005\u0472\u0000\u0000\u0640\u0641\u0005\u01c7\u0000\u0000\u0641"+
		"\u0656\u0005\u009b\u0000\u0000\u0642\u0644\u0005n\u0000\u0000\u0643\u0642"+
		"\u0001\u0000\u0000\u0000\u0643\u0644\u0001\u0000\u0000\u0000\u0644\u0645"+
		"\u0001\u0000\u0000\u0000\u0645\u0656\u0005-\u0000\u0000\u0646\u0647\u0005"+
		"\u0174\u0000\u0000\u0647\u0651\u0005\u009b\u0000\u0000\u0648\u0649\u0005"+
		"\u01fc\u0000\u0000\u0649\u0651\u0005\u009b\u0000\u0000\u064a\u064b\u0005"+
		"\u0083\u0000\u0000\u064b\u064c\u0005\u009b\u0000\u0000\u064c\u0651\u0005"+
		"\u017b\u0000\u0000\u064d\u064e\u0005l\u0000\u0000\u064e\u064f\u0005\u009b"+
		"\u0000\u0000\u064f\u0651\u0005\u017b\u0000\u0000\u0650\u0646\u0001\u0000"+
		"\u0000\u0000\u0650\u0648\u0001\u0000\u0000\u0000\u0650\u064a\u0001\u0000"+
		"\u0000\u0000\u0650\u064d\u0001\u0000\u0000\u0000\u0651\u0656\u0001\u0000"+
		"\u0000\u0000\u0652\u0653\u0005\u009b\u0000\u0000\u0653\u0654\u0005\u024d"+
		"\u0000\u0000\u0654\u0656\u0007\u000b\u0000\u0000\u0655\u063e\u0001\u0000"+
		"\u0000\u0000\u0655\u0640\u0001\u0000\u0000\u0000\u0655\u0643\u0001\u0000"+
		"\u0000\u0000\u0655\u0650\u0001\u0000\u0000\u0000\u0655\u0652\u0001\u0000"+
		"\u0000\u0000\u0656W\u0001\u0000\u0000\u0000\u0657\u0658\u0005\u01b1\u0000"+
		"\u0000\u0658\u0666\u0005\u0472\u0000\u0000\u0659\u065a\u0005%\u0000\u0000"+
		"\u065a\u0666\u0005\u0472\u0000\u0000\u065b\u065c\u0005\u0288\u0000\u0000"+
		"\u065c\u0666\u0005\u0472\u0000\u0000\u065d\u065e\u0005\u0218\u0000\u0000"+
		"\u065e\u0666\u0005\u0472\u0000\u0000\u065f\u0660\u0005\u0258\u0000\u0000"+
		"\u0660\u0666\u0005\u0472\u0000\u0000\u0661\u0662\u0005\u0211\u0000\u0000"+
		"\u0662\u0666\u0005\u0472\u0000\u0000\u0663\u0664\u0005\u021d\u0000\u0000"+
		"\u0664\u0666\u0003\u0234\u011a\u0000\u0665\u0657\u0001\u0000\u0000\u0000"+
		"\u0665\u0659\u0001\u0000\u0000\u0000\u0665\u065b\u0001\u0000\u0000\u0000"+
		"\u0665\u065d\u0001\u0000\u0000\u0000\u0665\u065f\u0001\u0000\u0000\u0000"+
		"\u0665\u0661\u0001\u0000\u0000\u0000\u0665\u0663\u0001\u0000\u0000\u0000"+
		"\u0666Y\u0001\u0000\u0000\u0000\u0667\u0668\u0005\u0463\u0000\u0000\u0668"+
		"\u066d\u0003\\.\u0000\u0669\u066a\u0005\u0465\u0000\u0000\u066a\u066c"+
		"\u0003\\.\u0000\u066b\u0669\u0001\u0000\u0000\u0000\u066c\u066f\u0001"+
		"\u0000\u0000\u0000\u066d\u066b\u0001\u0000\u0000\u0000\u066d\u066e\u0001"+
		"\u0000\u0000\u0000\u066e\u0670\u0001\u0000\u0000\u0000\u066f\u066d\u0001"+
		"\u0000\u0000\u0000\u0670\u0671\u0005\u0464\u0000\u0000\u0671[\u0001\u0000"+
		"\u0000\u0000\u0672\u0673\u0003\u022e\u0117\u0000\u0673\u0674\u0003^/\u0000"+
		"\u0674\u0678\u0001\u0000\u0000\u0000\u0675\u0678\u0003b1\u0000\u0676\u0678"+
		"\u0003j5\u0000\u0677\u0672\u0001\u0000\u0000\u0000\u0677\u0675\u0001\u0000"+
		"\u0000\u0000\u0677\u0676\u0001\u0000\u0000\u0000\u0678]\u0001\u0000\u0000"+
		"\u0000\u0679\u067d\u0003\u0242\u0121\u0000\u067a\u067c\u0003`0\u0000\u067b"+
		"\u067a\u0001\u0000\u0000\u0000\u067c\u067f\u0001\u0000\u0000\u0000\u067d"+
		"\u067b\u0001\u0000\u0000\u0000\u067d\u067e\u0001\u0000\u0000\u0000\u067e"+
		"_\u0001\u0000\u0000\u0000\u067f\u067d\u0001\u0000\u0000\u0000\u0680\u06b6"+
		"\u0003\u023e\u011f\u0000\u0681\u0682\u0005(\u0000\u0000\u0682\u06b6\u0003"+
		"\u025e\u012f\u0000\u0683\u06b6\u0005\u0290\u0000\u0000\u0684\u06b6\u0005"+
		"\u01be\u0000\u0000\u0685\u068a\u0005\u014d\u0000\u0000\u0686\u0687\u0005"+
		"r\u0000\u0000\u0687\u0688\u0005\u00b2\u0000\u0000\u0688\u068a\u0003\u0260"+
		"\u0130\u0000\u0689\u0685\u0001\u0000\u0000\u0000\u0689\u0686\u0001\u0000"+
		"\u0000\u0000\u068a\u06b6\u0001\u0000\u0000\u0000\u068b\u068d\u0005~\u0000"+
		"\u0000\u068c\u068b\u0001\u0000\u0000\u0000\u068c\u068d\u0001\u0000\u0000"+
		"\u0000\u068d\u068e\u0001\u0000\u0000\u0000\u068e\u06b6\u0005X\u0000\u0000"+
		"\u068f\u0691\u0005\u00af\u0000\u0000\u0690\u0692\u0005X\u0000\u0000\u0691"+
		"\u0690\u0001\u0000\u0000\u0000\u0691\u0692\u0001\u0000\u0000\u0000\u0692"+
		"\u06b6\u0001\u0000\u0000\u0000\u0693\u0694\u0005\u0167\u0000\u0000\u0694"+
		"\u06b6\u0005\u0472\u0000\u0000\u0695\u0696\u0005\u0165\u0000\u0000\u0696"+
		"\u06b6\u0007\u0014\u0000\u0000\u0697\u0698\u0005\u026b\u0000\u0000\u0698"+
		"\u06b6\u0007\u0015\u0000\u0000\u0699\u06b6\u0003d2\u0000\u069a\u069b\u0005"+
		"\u001a\u0000\u0000\u069b\u06b6\u0003\u0222\u0111\u0000\u069c\u069d\u0005"+
		"C\u0000\u0000\u069d\u069f\u0005\b\u0000\u0000\u069e\u069c\u0001\u0000"+
		"\u0000\u0000\u069e\u069f\u0001\u0000\u0000\u0000\u069f\u06a0\u0001\u0000"+
		"\u0000\u0000\u06a0\u06a1\u0005\f\u0000\u0000\u06a1\u06a2\u0005\u0463\u0000"+
		"\u0000\u06a2\u06a3\u0003\u0294\u014a\u0000\u06a3\u06a5\u0005\u0464\u0000"+
		"\u0000\u06a4\u06a6\u0007\u0016\u0000\u0000\u06a5\u06a4\u0001\u0000\u0000"+
		"\u0000\u06a5\u06a6\u0001\u0000\u0000\u0000\u06a6\u06b6\u0001\u0000\u0000"+
		"\u0000\u06a7\u06a8\u0005\u00e9\u0000\u0000\u06a8\u06a9\u0005(\u0000\u0000"+
		"\u06a9\u06b6\u0005\u028c\u0000\u0000\u06aa\u06ac\u0005\u001d\u0000\u0000"+
		"\u06ab\u06ad\u0003\u022e\u0117\u0000\u06ac\u06ab\u0001\u0000\u0000\u0000"+
		"\u06ac\u06ad\u0001\u0000\u0000\u0000\u06ad\u06af\u0001\u0000\u0000\u0000"+
		"\u06ae\u06aa\u0001\u0000\u0000\u0000\u06ae\u06af\u0001\u0000\u0000\u0000"+
		"\u06af\u06b0\u0001\u0000\u0000\u0000\u06b0\u06b1\u0005\u0019\u0000\u0000"+
		"\u06b1\u06b2\u0005\u0463\u0000\u0000\u06b2\u06b3\u0003\u0294\u014a\u0000"+
		"\u06b3\u06b4\u0005\u0464\u0000\u0000\u06b4\u06b6\u0001\u0000\u0000\u0000"+
		"\u06b5\u0680\u0001\u0000\u0000\u0000\u06b5\u0681\u0001\u0000\u0000\u0000"+
		"\u06b5\u0683\u0001\u0000\u0000\u0000\u06b5\u0684\u0001\u0000\u0000\u0000"+
		"\u06b5\u0689\u0001\u0000\u0000\u0000\u06b5\u068c\u0001\u0000\u0000\u0000"+
		"\u06b5\u068f\u0001\u0000\u0000\u0000\u06b5\u0693\u0001\u0000\u0000\u0000"+
		"\u06b5\u0695\u0001\u0000\u0000\u0000\u06b5\u0697\u0001\u0000\u0000\u0000"+
		"\u06b5\u0699\u0001\u0000\u0000\u0000\u06b5\u069a\u0001\u0000\u0000\u0000"+
		"\u06b5\u069e\u0001\u0000\u0000\u0000\u06b5\u06a7\u0001\u0000\u0000\u0000"+
		"\u06b5\u06ae\u0001\u0000\u0000\u0000\u06b6a\u0001\u0000\u0000\u0000\u06b7"+
		"\u06b9\u0005\u001d\u0000\u0000\u06b8\u06ba\u0003\u022e\u0117\u0000\u06b9"+
		"\u06b8\u0001\u0000\u0000\u0000\u06b9\u06ba\u0001\u0000\u0000\u0000\u06ba"+
		"\u06bc\u0001\u0000\u0000\u0000\u06bb\u06b7\u0001\u0000\u0000\u0000\u06bb"+
		"\u06bc\u0001\u0000\u0000\u0000\u06bc\u06bd\u0001\u0000\u0000\u0000\u06bd"+
		"\u06be\u0005~\u0000\u0000\u06be\u06c0\u0005X\u0000\u0000\u06bf\u06c1\u0003"+
		"\u022e\u0117\u0000\u06c0\u06bf\u0001\u0000\u0000\u0000\u06c0\u06c1\u0001"+
		"\u0000\u0000\u0000\u06c1\u06c3\u0001\u0000\u0000\u0000\u06c2\u06c4\u0003"+
		"N\'\u0000\u06c3\u06c2\u0001\u0000\u0000\u0000\u06c3\u06c4\u0001\u0000"+
		"\u0000\u0000\u06c4\u06c5\u0001\u0000\u0000\u0000\u06c5\u06c9\u0003\u0252"+
		"\u0129\u0000\u06c6\u06c8\u0003P(\u0000\u06c7\u06c6\u0001\u0000\u0000\u0000"+
		"\u06c8\u06cb\u0001\u0000\u0000\u0000\u06c9\u06c7\u0001\u0000\u0000\u0000"+
		"\u06c9\u06ca\u0001\u0000\u0000\u0000\u06ca\u06fd\u0001\u0000\u0000\u0000"+
		"\u06cb\u06c9\u0001\u0000\u0000\u0000\u06cc\u06ce\u0005\u001d\u0000\u0000"+
		"\u06cd\u06cf\u0003\u022e\u0117\u0000\u06ce\u06cd\u0001\u0000\u0000\u0000"+
		"\u06ce\u06cf\u0001\u0000\u0000\u0000\u06cf\u06d1\u0001\u0000\u0000\u0000"+
		"\u06d0\u06cc\u0001\u0000\u0000\u0000\u06d0\u06d1\u0001\u0000\u0000\u0000"+
		"\u06d1\u06d2\u0001\u0000\u0000\u0000\u06d2\u06d4\u0005\u00af\u0000\u0000"+
		"\u06d3\u06d5\u0007\u0017\u0000\u0000\u06d4\u06d3\u0001\u0000\u0000\u0000"+
		"\u06d4\u06d5\u0001\u0000\u0000\u0000\u06d5\u06d7\u0001\u0000\u0000\u0000"+
		"\u06d6\u06d8\u0003\u022e\u0117\u0000\u06d7\u06d6\u0001\u0000\u0000\u0000"+
		"\u06d7\u06d8\u0001\u0000\u0000\u0000\u06d8\u06da\u0001\u0000\u0000\u0000"+
		"\u06d9\u06db\u0003N\'\u0000\u06da\u06d9\u0001\u0000\u0000\u0000\u06da"+
		"\u06db\u0001\u0000\u0000\u0000\u06db\u06dc\u0001\u0000\u0000\u0000\u06dc"+
		"\u06e0\u0003\u0252\u0129\u0000\u06dd\u06df\u0003P(\u0000\u06de\u06dd\u0001"+
		"\u0000\u0000\u0000\u06df\u06e2\u0001\u0000\u0000\u0000\u06e0\u06de\u0001"+
		"\u0000\u0000\u0000\u06e0\u06e1\u0001\u0000\u0000\u0000\u06e1\u06fd\u0001"+
		"\u0000\u0000\u0000\u06e2\u06e0\u0001\u0000\u0000\u0000\u06e3\u06e5\u0005"+
		"\u001d\u0000\u0000\u06e4\u06e6\u0003\u022e\u0117\u0000\u06e5\u06e4\u0001"+
		"\u0000\u0000\u0000\u06e5\u06e6\u0001\u0000\u0000\u0000\u06e6\u06e8\u0001"+
		"\u0000\u0000\u0000\u06e7\u06e3\u0001\u0000\u0000\u0000\u06e7\u06e8\u0001"+
		"\u0000\u0000\u0000\u06e8\u06e9\u0001\u0000\u0000\u0000\u06e9\u06ea\u0005"+
		"@\u0000\u0000\u06ea\u06ec\u0005X\u0000\u0000\u06eb\u06ed\u0003\u022e\u0117"+
		"\u0000\u06ec\u06eb\u0001\u0000\u0000\u0000\u06ec\u06ed\u0001\u0000\u0000"+
		"\u0000\u06ed\u06ee\u0001\u0000\u0000\u0000\u06ee\u06ef\u0003\u0252\u0129"+
		"\u0000\u06ef\u06f0\u0003d2\u0000\u06f0\u06fd\u0001\u0000\u0000\u0000\u06f1"+
		"\u06f3\u0005\u001d\u0000\u0000\u06f2\u06f4\u0003\u022e\u0117\u0000\u06f3"+
		"\u06f2\u0001\u0000\u0000\u0000\u06f3\u06f4\u0001\u0000\u0000\u0000\u06f4"+
		"\u06f6\u0001\u0000\u0000\u0000\u06f5\u06f1\u0001\u0000\u0000\u0000\u06f5"+
		"\u06f6\u0001\u0000\u0000\u0000\u06f6\u06f7\u0001\u0000\u0000\u0000\u06f7"+
		"\u06f8\u0005\u0019\u0000\u0000\u06f8\u06f9\u0005\u0463\u0000\u0000\u06f9"+
		"\u06fa\u0003\u0294\u014a\u0000\u06fa\u06fb\u0005\u0464\u0000\u0000\u06fb"+
		"\u06fd\u0001\u0000\u0000\u0000\u06fc\u06bb\u0001\u0000\u0000\u0000\u06fc"+
		"\u06d0\u0001\u0000\u0000\u0000\u06fc\u06e7\u0001\u0000\u0000\u0000\u06fc"+
		"\u06f5\u0001\u0000\u0000\u0000\u06fdc\u0001\u0000\u0000\u0000\u06fe\u06ff"+
		"\u0005\u0084\u0000\u0000\u06ff\u0701\u0003\u0214\u010a\u0000\u0700\u0702"+
		"\u0003\u0252\u0129\u0000\u0701\u0700\u0001\u0000\u0000\u0000\u0701\u0702"+
		"\u0001\u0000\u0000\u0000\u0702\u0705\u0001\u0000\u0000\u0000\u0703\u0704"+
		"\u0005i\u0000\u0000\u0704\u0706\u0007\u0018\u0000\u0000\u0705\u0703\u0001"+
		"\u0000\u0000\u0000\u0705\u0706\u0001\u0000\u0000\u0000\u0706\u0708\u0001"+
		"\u0000\u0000\u0000\u0707\u0709\u0003f3\u0000\u0708\u0707\u0001\u0000\u0000"+
		"\u0000\u0708\u0709\u0001\u0000\u0000\u0000\u0709e\u0001\u0000\u0000\u0000"+
		"\u070a\u070b\u0005r\u0000\u0000\u070b\u070c\u0005*\u0000\u0000\u070c\u0710"+
		"\u0003h4\u0000\u070d\u070e\u0005r\u0000\u0000\u070e\u070f\u0005\u00b2"+
		"\u0000\u0000\u070f\u0711\u0003h4\u0000\u0710\u070d\u0001\u0000\u0000\u0000"+
		"\u0710\u0711\u0001\u0000\u0000\u0000\u0711\u071b\u0001\u0000\u0000\u0000"+
		"\u0712\u0713\u0005r\u0000\u0000\u0713\u0714\u0005\u00b2\u0000\u0000\u0714"+
		"\u0718\u0003h4\u0000\u0715\u0716\u0005r\u0000\u0000\u0716\u0717\u0005"+
		"*\u0000\u0000\u0717\u0719\u0003h4\u0000\u0718\u0715\u0001\u0000\u0000"+
		"\u0000\u0718\u0719\u0001\u0000\u0000\u0000\u0719\u071b\u0001\u0000\u0000"+
		"\u0000\u071a\u070a\u0001\u0000\u0000\u0000\u071a\u0712\u0001\u0000\u0000"+
		"\u0000\u071bg\u0001\u0000\u0000\u0000\u071c\u0723\u0005\u008c\u0000\u0000"+
		"\u071d\u0723\u0005\u0014\u0000\u0000\u071e\u071f\u0005\u0095\u0000\u0000"+
		"\u071f\u0723\u0005p\u0000\u0000\u0720\u0721\u0005\u01fc\u0000\u0000\u0721"+
		"\u0723\u0005\u0144\u0000\u0000\u0722\u071c\u0001\u0000\u0000\u0000\u0722"+
		"\u071d\u0001\u0000\u0000\u0000\u0722\u071e\u0001\u0000\u0000\u0000\u0722"+
		"\u0720\u0001\u0000\u0000\u0000\u0723i\u0001\u0000\u0000\u0000\u0724\u0726"+
		"\u0007\u0017\u0000\u0000\u0725\u0727\u0003\u022e\u0117\u0000\u0726\u0725"+
		"\u0001\u0000\u0000\u0000\u0726\u0727\u0001\u0000\u0000\u0000\u0727\u0729"+
		"\u0001\u0000\u0000\u0000\u0728\u072a\u0003N\'\u0000\u0729\u0728\u0001"+
		"\u0000\u0000\u0000\u0729\u072a\u0001\u0000\u0000\u0000\u072a\u072b\u0001"+
		"\u0000\u0000\u0000\u072b\u072f\u0003\u0252\u0129\u0000\u072c\u072e\u0003"+
		"P(\u0000\u072d\u072c\u0001\u0000\u0000\u0000\u072e\u0731\u0001\u0000\u0000"+
		"\u0000\u072f\u072d\u0001\u0000\u0000\u0000\u072f\u0730\u0001\u0000\u0000"+
		"\u0000\u0730\u0741\u0001\u0000\u0000\u0000\u0731\u072f\u0001\u0000\u0000"+
		"\u0000\u0732\u0734\u0007\u0019\u0000\u0000\u0733\u0735\u0007\u0017\u0000"+
		"\u0000\u0734\u0733\u0001\u0000\u0000\u0000\u0734\u0735\u0001\u0000\u0000"+
		"\u0000\u0735\u0737\u0001\u0000\u0000\u0000\u0736\u0738\u0003\u022e\u0117"+
		"\u0000\u0737\u0736\u0001\u0000\u0000\u0000\u0737\u0738\u0001\u0000\u0000"+
		"\u0000\u0738\u0739\u0001\u0000\u0000\u0000\u0739\u073d\u0003\u0252\u0129"+
		"\u0000\u073a\u073c\u0003P(\u0000\u073b\u073a\u0001\u0000\u0000\u0000\u073c"+
		"\u073f\u0001\u0000\u0000\u0000\u073d\u073b\u0001\u0000\u0000\u0000\u073d"+
		"\u073e\u0001\u0000\u0000\u0000\u073e\u0741\u0001\u0000\u0000\u0000\u073f"+
		"\u073d\u0001\u0000\u0000\u0000\u0740\u0724\u0001\u0000\u0000\u0000\u0740"+
		"\u0732\u0001\u0000\u0000\u0000\u0741k\u0001\u0000\u0000\u0000\u0742\u0744"+
		"\u0005\u018e\u0000\u0000\u0743\u0745\u0005\u045a\u0000\u0000\u0744\u0743"+
		"\u0001\u0000\u0000\u0000\u0744\u0745\u0001\u0000\u0000\u0000\u0745\u0747"+
		"\u0001\u0000\u0000\u0000\u0746\u0748\u0003\u0224\u0112\u0000\u0747\u0746"+
		"\u0001\u0000\u0000\u0000\u0747\u0748\u0001\u0000\u0000\u0000\u0748\u07e5"+
		"\u0001\u0000\u0000\u0000\u0749\u074b\u0005\u0357\u0000\u0000\u074a\u074c"+
		"\u0005\u045a\u0000\u0000\u074b\u074a\u0001\u0000\u0000\u0000\u074b\u074c"+
		"\u0001\u0000\u0000\u0000\u074c\u074d\u0001\u0000\u0000\u0000\u074d\u07e5"+
		"\u0005\u0472\u0000\u0000\u074e\u0750\u0005\u014c\u0000\u0000\u074f\u0751"+
		"\u0005\u045a\u0000\u0000\u0750\u074f\u0001\u0000\u0000\u0000\u0750\u0751"+
		"\u0001\u0000\u0000\u0000\u0751\u0752\u0001\u0000\u0000\u0000\u0752\u07e5"+
		"\u0003\u0234\u011a\u0000\u0753\u0755\u0005\u014d\u0000\u0000\u0754\u0756"+
		"\u0005\u045a\u0000\u0000\u0755\u0754\u0001\u0000\u0000\u0000\u0755\u0756"+
		"\u0001\u0000\u0000\u0000\u0756\u0757\u0001\u0000\u0000\u0000\u0757\u07e5"+
		"\u0003\u0234\u011a\u0000\u0758\u075a\u0005\u014e\u0000\u0000\u0759\u075b"+
		"\u0005\u045a\u0000\u0000\u075a\u0759\u0001\u0000\u0000\u0000\u075a\u075b"+
		"\u0001\u0000\u0000\u0000\u075b\u075c\u0001\u0000\u0000\u0000\u075c\u07e5"+
		"\u0003\u0234\u011a\u0000\u075d\u075f\u0005(\u0000\u0000\u075e\u075d\u0001"+
		"\u0000\u0000\u0000\u075e\u075f\u0001\u0000\u0000\u0000\u075f\u0760\u0001"+
		"\u0000\u0000\u0000\u0760\u0762\u0003@ \u0000\u0761\u0763\u0005\u045a\u0000"+
		"\u0000\u0762\u0761\u0001\u0000\u0000\u0000\u0762\u0763\u0001\u0000\u0000"+
		"\u0000\u0763\u0766\u0001\u0000\u0000\u0000\u0764\u0767\u0003\u0220\u0110"+
		"\u0000\u0765\u0767\u0005(\u0000\u0000\u0766\u0764\u0001\u0000\u0000\u0000"+
		"\u0766\u0765\u0001\u0000\u0000\u0000\u0767\u07e5\u0001\u0000\u0000\u0000"+
		"\u0768\u076a\u0007\u001a\u0000\u0000\u0769\u076b\u0005\u045a\u0000\u0000"+
		"\u076a\u0769\u0001\u0000\u0000\u0000\u076a\u076b\u0001\u0000\u0000\u0000"+
		"\u076b\u076c\u0001\u0000\u0000\u0000\u076c\u07e5\u0007\u001b\u0000\u0000"+
		"\u076d\u076f\u0005(\u0000\u0000\u076e\u076d\u0001\u0000\u0000\u0000\u076e"+
		"\u076f\u0001\u0000\u0000\u0000\u076f\u0770\u0001\u0000\u0000\u0000\u0770"+
		"\u0772\u0005\u001a\u0000\u0000\u0771\u0773\u0005\u045a\u0000\u0000\u0772"+
		"\u0771\u0001\u0000\u0000\u0000\u0772\u0773\u0001\u0000\u0000\u0000\u0773"+
		"\u0774\u0001\u0000\u0000\u0000\u0774\u07e5\u0003\u0222\u0111\u0000\u0775"+
		"\u0777\u0005\u0167\u0000\u0000\u0776\u0778\u0005\u045a\u0000\u0000\u0777"+
		"\u0776\u0001\u0000\u0000\u0000\u0777\u0778\u0001\u0000\u0000\u0000\u0778"+
		"\u0779\u0001\u0000\u0000\u0000\u0779\u07e5\u0005\u0472\u0000\u0000\u077a"+
		"\u077c\u0005\u016c\u0000\u0000\u077b\u077d\u0005\u045a\u0000\u0000\u077c"+
		"\u077b\u0001\u0000\u0000\u0000\u077c\u077d\u0001\u0000\u0000\u0000\u077d"+
		"\u077e\u0001\u0000\u0000\u0000\u077e\u07e5\u0007\u001c\u0000\u0000\u077f"+
		"\u0781\u0005\u016f\u0000\u0000\u0780\u0782\u0005\u045a\u0000\u0000\u0781"+
		"\u0780\u0001\u0000\u0000\u0000\u0781\u0782\u0001\u0000\u0000\u0000\u0782"+
		"\u0783\u0001\u0000\u0000\u0000\u0783\u07e5\u0005\u0472\u0000\u0000\u0784"+
		"\u0785\u0007\u001d\u0000\u0000\u0785\u0787\u0005\u0182\u0000\u0000\u0786"+
		"\u0788\u0005\u045a\u0000\u0000\u0787\u0786\u0001\u0000\u0000\u0000\u0787"+
		"\u0788\u0001\u0000\u0000\u0000\u0788\u0789\u0001\u0000\u0000\u0000\u0789"+
		"\u07e5\u0005\u0472\u0000\u0000\u078a\u078c\u0005\u0180\u0000\u0000\u078b"+
		"\u078d\u0005\u045a\u0000\u0000\u078c\u078b\u0001\u0000\u0000\u0000\u078c"+
		"\u078d\u0001\u0000\u0000\u0000\u078d\u078e\u0001\u0000\u0000\u0000\u078e"+
		"\u07e5\u0007\u001b\u0000\u0000\u078f\u0791\u0005\u018b\u0000\u0000\u0790"+
		"\u0792\u0005\u045a\u0000\u0000\u0791\u0790\u0001\u0000\u0000\u0000\u0791"+
		"\u0792\u0001\u0000\u0000\u0000\u0792\u0793\u0001\u0000\u0000\u0000\u0793"+
		"\u07e5\u0005\u0472\u0000\u0000\u0794\u0795\u0005N\u0000\u0000\u0795\u0797"+
		"\u0005\u0182\u0000\u0000\u0796\u0798\u0005\u045a\u0000\u0000\u0797\u0796"+
		"\u0001\u0000\u0000\u0000\u0797\u0798\u0001\u0000\u0000\u0000\u0798\u0799"+
		"\u0001\u0000\u0000\u0000\u0799\u07e5\u0005\u0472\u0000\u0000\u079a\u079c"+
		"\u0005\u01ba\u0000\u0000\u079b\u079d\u0005\u045a\u0000\u0000\u079c\u079b"+
		"\u0001\u0000\u0000\u0000\u079c\u079d\u0001\u0000\u0000\u0000\u079d\u079e"+
		"\u0001\u0000\u0000\u0000\u079e\u07e5\u0007\u001e\u0000\u0000\u079f\u07a1"+
		"\u0005\u01c6\u0000\u0000\u07a0\u07a2\u0005\u045a\u0000\u0000\u07a1\u07a0"+
		"\u0001\u0000\u0000\u0000\u07a1\u07a2\u0001\u0000\u0000\u0000\u07a2\u07a3"+
		"\u0001\u0000\u0000\u0000\u07a3\u07e5\u0003\u0236\u011b\u0000\u07a4\u07a6"+
		"\u0005\u01e7\u0000\u0000\u07a5\u07a7\u0005\u045a\u0000\u0000\u07a6\u07a5"+
		"\u0001\u0000\u0000\u0000\u07a6\u07a7\u0001\u0000\u0000\u0000\u07a7\u07a8"+
		"\u0001\u0000\u0000\u0000\u07a8\u07e5\u0003\u0234\u011a\u0000\u07a9\u07ab"+
		"\u0005\u01f1\u0000\u0000\u07aa\u07ac\u0005\u045a\u0000\u0000\u07ab\u07aa"+
		"\u0001\u0000\u0000\u0000\u07ab\u07ac\u0001\u0000\u0000\u0000\u07ac\u07ad"+
		"\u0001\u0000\u0000\u0000\u07ad\u07e5\u0003\u0234\u011a\u0000\u07ae\u07b0"+
		"\u0005\u0212\u0000\u0000\u07af\u07b1\u0005\u045a\u0000\u0000\u07b0\u07af"+
		"\u0001\u0000\u0000\u0000\u07b0\u07b1\u0001\u0000\u0000\u0000\u07b1\u07b2"+
		"\u0001\u0000\u0000\u0000\u07b2\u07e5\u0007\u000f\u0000\u0000\u07b3\u07b5"+
		"\u0005\u0218\u0000\u0000\u07b4\u07b6\u0005\u045a\u0000\u0000\u07b5\u07b4"+
		"\u0001\u0000\u0000\u0000\u07b5\u07b6\u0001\u0000\u0000\u0000\u07b6\u07b7"+
		"\u0001\u0000\u0000\u0000\u07b7\u07e5\u0005\u0472\u0000\u0000\u07b8\u07ba"+
		"\u0005\u0249\u0000\u0000\u07b9\u07bb\u0005\u045a\u0000\u0000\u07ba\u07b9"+
		"\u0001\u0000\u0000\u0000\u07ba\u07bb\u0001\u0000\u0000\u0000\u07bb\u07bc"+
		"\u0001\u0000\u0000\u0000\u07bc\u07e5\u0007\u001f\u0000\u0000\u07bd\u07be"+
		"\u0005\u0264\u0000\u0000\u07be\u07e5\u0005\u027c\u0000\u0000\u07bf\u07c1"+
		"\u0005\u03d3\u0000\u0000\u07c0\u07c2\u0005\u045a\u0000\u0000\u07c1\u07c0"+
		"\u0001\u0000\u0000\u0000\u07c1\u07c2\u0001\u0000\u0000\u0000\u07c2\u07c3"+
		"\u0001\u0000\u0000\u0000\u07c3\u07e5\u0005\u0472\u0000\u0000\u07c4\u07c6"+
		"\u0005\u0266\u0000\u0000\u07c5\u07c7\u0005\u045a\u0000\u0000\u07c6\u07c5"+
		"\u0001\u0000\u0000\u0000\u07c6\u07c7\u0001\u0000\u0000\u0000\u07c7\u07c8"+
		"\u0001\u0000\u0000\u0000\u07c8\u07e5\u0007\u000f\u0000\u0000\u07c9\u07cb"+
		"\u0005\u0267\u0000\u0000\u07ca\u07cc\u0005\u045a\u0000\u0000\u07cb\u07ca"+
		"\u0001\u0000\u0000\u0000\u07cb\u07cc\u0001\u0000\u0000\u0000\u07cc\u07cd"+
		"\u0001\u0000\u0000\u0000\u07cd\u07e5\u0007\u000f\u0000\u0000\u07ce\u07d0"+
		"\u0005\u0268\u0000\u0000\u07cf\u07d1\u0005\u045a\u0000\u0000\u07d0\u07cf"+
		"\u0001\u0000\u0000\u0000\u07d0\u07d1\u0001\u0000\u0000\u0000\u07d1\u07d2"+
		"\u0001\u0000\u0000\u0000\u07d2\u07e5\u0007 \u0000\u0000\u07d3\u07d4\u0005"+
		"\u0276\u0000\u0000\u07d4\u07d6\u0003\u022e\u0117\u0000\u07d5\u07d7\u0003"+
		"p8\u0000\u07d6\u07d5\u0001\u0000\u0000\u0000\u07d6\u07d7\u0001\u0000\u0000"+
		"\u0000\u07d7\u07e5\u0001\u0000\u0000\u0000\u07d8\u07d9\u0005\u0277\u0000"+
		"\u0000\u07d9\u07da\u0005\u045a\u0000\u0000\u07da\u07e5\u0003n7\u0000\u07db"+
		"\u07e5\u0003p8\u0000\u07dc\u07de\u0005\u00ae\u0000\u0000\u07dd\u07df\u0005"+
		"\u045a\u0000\u0000\u07de\u07dd\u0001\u0000\u0000\u0000\u07de\u07df\u0001"+
		"\u0000\u0000\u0000\u07df\u07e0\u0001\u0000\u0000\u0000\u07e0\u07e1\u0005"+
		"\u0463\u0000\u0000\u07e1\u07e2\u0003\u0250\u0128\u0000\u07e2\u07e3\u0005"+
		"\u0464\u0000\u0000\u07e3\u07e5\u0001\u0000\u0000\u0000\u07e4\u0742\u0001"+
		"\u0000\u0000\u0000\u07e4\u0749\u0001\u0000\u0000\u0000\u07e4\u074e\u0001"+
		"\u0000\u0000\u0000\u07e4\u0753\u0001\u0000\u0000\u0000\u07e4\u0758\u0001"+
		"\u0000\u0000\u0000\u07e4\u075e\u0001\u0000\u0000\u0000\u07e4\u0768\u0001"+
		"\u0000\u0000\u0000\u07e4\u076e\u0001\u0000\u0000\u0000\u07e4\u0775\u0001"+
		"\u0000\u0000\u0000\u07e4\u077a\u0001\u0000\u0000\u0000\u07e4\u077f\u0001"+
		"\u0000\u0000\u0000\u07e4\u0784\u0001\u0000\u0000\u0000\u07e4\u078a\u0001"+
		"\u0000\u0000\u0000\u07e4\u078f\u0001\u0000\u0000\u0000\u07e4\u0794\u0001"+
		"\u0000\u0000\u0000\u07e4\u079a\u0001\u0000\u0000\u0000\u07e4\u079f\u0001"+
		"\u0000\u0000\u0000\u07e4\u07a4\u0001\u0000\u0000\u0000\u07e4\u07a9\u0001"+
		"\u0000\u0000\u0000\u07e4\u07ae\u0001\u0000\u0000\u0000\u07e4\u07b3\u0001"+
		"\u0000\u0000\u0000\u07e4\u07b8\u0001\u0000\u0000\u0000\u07e4\u07bd\u0001"+
		"\u0000\u0000\u0000\u07e4\u07bf\u0001\u0000\u0000\u0000\u07e4\u07c4\u0001"+
		"\u0000\u0000\u0000\u07e4\u07c9\u0001\u0000\u0000\u0000\u07e4\u07ce\u0001"+
		"\u0000\u0000\u0000\u07e4\u07d3\u0001\u0000\u0000\u0000\u07e4\u07d8\u0001"+
		"\u0000\u0000\u0000\u07e4\u07db\u0001\u0000\u0000\u0000\u07e4\u07dc\u0001"+
		"\u0000\u0000\u0000\u07e5m\u0001\u0000\u0000\u0000\u07e6\u07e7\u0007!\u0000"+
		"\u0000\u07e7o\u0001\u0000\u0000\u0000\u07e8\u07e9\u0005\u026b\u0000\u0000"+
		"\u07e9\u07ea\u0007\u0015\u0000\u0000\u07eaq\u0001\u0000\u0000\u0000\u07eb"+
		"\u07ec\u0005}\u0000\u0000\u07ec\u07ed\u0005\u0012\u0000\u0000\u07ed\u07f0"+
		"\u0003t:\u0000\u07ee\u07ef\u0005\u0217\u0000\u0000\u07ef\u07f1\u0003\u0234"+
		"\u011a\u0000\u07f0\u07ee\u0001\u0000\u0000\u0000\u07f0\u07f1\u0001\u0000"+
		"\u0000\u0000\u07f1\u07f9\u0001\u0000\u0000\u0000\u07f2\u07f3\u0005\u0270"+
		"\u0000\u0000\u07f3\u07f4\u0005\u0012\u0000\u0000\u07f4\u07f7\u0003v;\u0000"+
		"\u07f5\u07f6\u0005\u0271\u0000\u0000\u07f6\u07f8\u0003\u0234\u011a\u0000"+
		"\u07f7\u07f5\u0001\u0000\u0000\u0000\u07f7\u07f8\u0001\u0000\u0000\u0000"+
		"\u07f8\u07fa\u0001\u0000\u0000\u0000\u07f9\u07f2\u0001\u0000\u0000\u0000"+
		"\u07f9\u07fa\u0001\u0000\u0000\u0000\u07fa\u0806\u0001\u0000\u0000\u0000"+
		"\u07fb\u07fc\u0005\u0463\u0000\u0000\u07fc\u0801\u0003x<\u0000\u07fd\u07fe"+
		"\u0005\u0465\u0000\u0000\u07fe\u0800\u0003x<\u0000\u07ff\u07fd\u0001\u0000"+
		"\u0000\u0000\u0800\u0803\u0001\u0000\u0000\u0000\u0801\u07ff\u0001\u0000"+
		"\u0000\u0000\u0801\u0802\u0001\u0000\u0000\u0000\u0802\u0804\u0001\u0000"+
		"\u0000\u0000\u0803\u0801\u0001\u0000\u0000\u0000\u0804\u0805\u0005\u0464"+
		"\u0000\u0000\u0805\u0807\u0001\u0000\u0000\u0000\u0806\u07fb\u0001\u0000"+
		"\u0000\u0000\u0806\u0807\u0001\u0000\u0000\u0000\u0807s\u0001\u0000\u0000"+
		"\u0000\u0808\u080a\u0005`\u0000\u0000\u0809\u0808\u0001\u0000\u0000\u0000"+
		"\u0809\u080a\u0001\u0000\u0000\u0000\u080a\u080b\u0001\u0000\u0000\u0000"+
		"\u080b\u080c\u0005\u01af\u0000\u0000\u080c\u080d\u0005\u0463\u0000\u0000"+
		"\u080d\u080e\u0003\u0294\u014a\u0000\u080e\u080f\u0005\u0464\u0000\u0000"+
		"\u080f\u0836\u0001\u0000\u0000\u0000\u0810\u0812\u0005`\u0000\u0000\u0811"+
		"\u0810\u0001\u0000\u0000\u0000\u0811\u0812\u0001\u0000\u0000\u0000\u0812"+
		"\u0813\u0001\u0000\u0000\u0000\u0813\u0817\u0005X\u0000\u0000\u0814\u0815"+
		"\u0005\u0147\u0000\u0000\u0815\u0816\u0005\u045a\u0000\u0000\u0816\u0818"+
		"\u0007\"\u0000\u0000\u0817\u0814\u0001\u0000\u0000\u0000\u0817\u0818\u0001"+
		"\u0000\u0000\u0000\u0818\u0819\u0001\u0000\u0000\u0000\u0819\u081a\u0005"+
		"\u0463\u0000\u0000\u081a\u081b\u0003\u024e\u0127\u0000\u081b\u081c\u0005"+
		"\u0464\u0000\u0000\u081c\u0836\u0001\u0000\u0000\u0000\u081d\u0827\u0005"+
		"\u0081\u0000\u0000\u081e\u081f\u0005\u0463\u0000\u0000\u081f\u0820\u0003"+
		"\u0294\u014a\u0000\u0820\u0821\u0005\u0464\u0000\u0000\u0821\u0828\u0001"+
		"\u0000\u0000\u0000\u0822\u0823\u0005\u0164\u0000\u0000\u0823\u0824\u0005"+
		"\u0463\u0000\u0000\u0824\u0825\u0003\u024e\u0127\u0000\u0825\u0826\u0005"+
		"\u0464\u0000\u0000\u0826\u0828\u0001\u0000\u0000\u0000\u0827\u081e\u0001"+
		"\u0000\u0000\u0000\u0827\u0822\u0001\u0000\u0000\u0000\u0828\u0836\u0001"+
		"\u0000\u0000\u0000\u0829\u0833\u0005\u01cc\u0000\u0000\u082a\u082b\u0005"+
		"\u0463\u0000\u0000\u082b\u082c\u0003\u0294\u014a\u0000\u082c\u082d\u0005"+
		"\u0464\u0000\u0000\u082d\u0834\u0001\u0000\u0000\u0000\u082e\u082f\u0005"+
		"\u0164\u0000\u0000\u082f\u0830\u0005\u0463\u0000\u0000\u0830\u0831\u0003"+
		"\u024e\u0127\u0000\u0831\u0832\u0005\u0464\u0000\u0000\u0832\u0834\u0001"+
		"\u0000\u0000\u0000\u0833\u082a\u0001\u0000\u0000\u0000\u0833\u082e\u0001"+
		"\u0000\u0000\u0000\u0834\u0836\u0001\u0000\u0000\u0000\u0835\u0809\u0001"+
		"\u0000\u0000\u0000\u0835\u0811\u0001\u0000\u0000\u0000\u0835\u081d\u0001"+
		"\u0000\u0000\u0000\u0835\u0829\u0001\u0000\u0000\u0000\u0836u\u0001\u0000"+
		"\u0000\u0000\u0837\u0839\u0005`\u0000\u0000\u0838\u0837\u0001\u0000\u0000"+
		"\u0000\u0838\u0839\u0001\u0000\u0000\u0000\u0839\u083a\u0001\u0000\u0000"+
		"\u0000\u083a\u083b\u0005\u01af\u0000\u0000\u083b\u083c\u0005\u0463\u0000"+
		"\u0000\u083c\u083d\u0003\u0294\u014a\u0000\u083d\u083e\u0005\u0464\u0000"+
		"\u0000\u083e\u084d\u0001\u0000\u0000\u0000\u083f\u0841\u0005`\u0000\u0000"+
		"\u0840\u083f\u0001\u0000\u0000\u0000\u0840\u0841\u0001\u0000\u0000\u0000"+
		"\u0841\u0842\u0001\u0000\u0000\u0000\u0842\u0846\u0005X\u0000\u0000\u0843"+
		"\u0844\u0005\u0147\u0000\u0000\u0844\u0845\u0005\u045a\u0000\u0000\u0845"+
		"\u0847\u0007\"\u0000\u0000\u0846\u0843\u0001\u0000\u0000\u0000\u0846\u0847"+
		"\u0001\u0000\u0000\u0000\u0847\u0848\u0001\u0000\u0000\u0000\u0848\u0849"+
		"\u0005\u0463\u0000\u0000\u0849\u084a\u0003\u024e\u0127\u0000\u084a\u084b"+
		"\u0005\u0464\u0000\u0000\u084b\u084d\u0001\u0000\u0000\u0000\u084c\u0838"+
		"\u0001\u0000\u0000\u0000\u084c\u0840\u0001\u0000\u0000\u0000\u084dw\u0001"+
		"\u0000\u0000\u0000\u084e\u084f\u0005}\u0000\u0000\u084f\u0850\u0003\u022e"+
		"\u0117\u0000\u0850\u0851\u0005\u00b6\u0000\u0000\u0851\u0852\u0005\u01ca"+
		"\u0000\u0000\u0852\u0853\u0005\u027a\u0000\u0000\u0853\u0854\u0005\u0463"+
		"\u0000\u0000\u0854\u0859\u0003z=\u0000\u0855\u0856\u0005\u0465\u0000\u0000"+
		"\u0856\u0858\u0003z=\u0000\u0857\u0855\u0001\u0000\u0000\u0000\u0858\u085b"+
		"\u0001\u0000\u0000\u0000\u0859\u0857\u0001\u0000\u0000\u0000\u0859\u085a"+
		"\u0001\u0000\u0000\u0000\u085a\u085c\u0001\u0000\u0000\u0000\u085b\u0859"+
		"\u0001\u0000\u0000\u0000\u085c\u0860\u0005\u0464\u0000\u0000\u085d\u085f"+
		"\u0003\u0080@\u0000\u085e\u085d\u0001\u0000\u0000\u0000\u085f\u0862\u0001"+
		"\u0000\u0000\u0000\u0860\u085e\u0001\u0000\u0000\u0000\u0860\u0861\u0001"+
		"\u0000\u0000\u0000\u0861\u086e\u0001\u0000\u0000\u0000\u0862\u0860\u0001"+
		"\u0000\u0000\u0000\u0863\u0864\u0005\u0463\u0000\u0000\u0864\u0869\u0003"+
		"~?\u0000\u0865\u0866\u0005\u0465\u0000\u0000\u0866\u0868\u0003~?\u0000"+
		"\u0867\u0865\u0001\u0000\u0000\u0000\u0868\u086b\u0001\u0000\u0000\u0000"+
		"\u0869\u0867\u0001\u0000\u0000\u0000\u0869\u086a\u0001\u0000\u0000\u0000"+
		"\u086a\u086c\u0001\u0000\u0000\u0000\u086b\u0869\u0001\u0000\u0000\u0000"+
		"\u086c\u086d\u0005\u0464\u0000\u0000\u086d\u086f\u0001\u0000\u0000\u0000"+
		"\u086e\u0863\u0001\u0000\u0000\u0000\u086e\u086f\u0001\u0000\u0000\u0000"+
		"\u086f\u08e1\u0001\u0000\u0000\u0000\u0870\u0871\u0005}\u0000\u0000\u0871"+
		"\u0872\u0003\u022e\u0117\u0000\u0872\u0873\u0005\u00b6\u0000\u0000\u0873"+
		"\u0874\u0005\u01ca\u0000\u0000\u0874\u0875\u0005\u027a\u0000\u0000\u0875"+
		"\u0879\u0003z=\u0000\u0876\u0878\u0003\u0080@\u0000\u0877\u0876\u0001"+
		"\u0000\u0000\u0000\u0878\u087b\u0001\u0000\u0000\u0000\u0879\u0877\u0001"+
		"\u0000\u0000\u0000\u0879\u087a\u0001\u0000\u0000\u0000\u087a\u0887\u0001"+
		"\u0000\u0000\u0000\u087b\u0879\u0001\u0000\u0000\u0000\u087c\u087d\u0005"+
		"\u0463\u0000\u0000\u087d\u0882\u0003~?\u0000\u087e\u087f\u0005\u0465\u0000"+
		"\u0000\u087f\u0881\u0003~?\u0000\u0880\u087e\u0001\u0000\u0000\u0000\u0881"+
		"\u0884\u0001\u0000\u0000\u0000\u0882\u0880\u0001\u0000\u0000\u0000\u0882"+
		"\u0883\u0001\u0000\u0000\u0000\u0883\u0885\u0001\u0000\u0000\u0000\u0884"+
		"\u0882\u0001\u0000\u0000\u0000\u0885\u0886\u0005\u0464\u0000\u0000\u0886"+
		"\u0888\u0001\u0000\u0000\u0000\u0887\u087c\u0001\u0000\u0000\u0000\u0887"+
		"\u0888\u0001\u0000\u0000\u0000\u0888\u08e1\u0001\u0000\u0000\u0000\u0889"+
		"\u088a\u0005}\u0000\u0000\u088a\u088b\u0003\u022e\u0117\u0000\u088b\u088c"+
		"\u0005\u00b6\u0000\u0000\u088c\u088d\u0005M\u0000\u0000\u088d\u088e\u0005"+
		"\u0463\u0000\u0000\u088e\u0893\u0003z=\u0000\u088f\u0890\u0005\u0465\u0000"+
		"\u0000\u0890\u0892\u0003z=\u0000\u0891\u088f\u0001\u0000\u0000\u0000\u0892"+
		"\u0895\u0001\u0000\u0000\u0000\u0893\u0891\u0001\u0000\u0000\u0000\u0893"+
		"\u0894\u0001\u0000\u0000\u0000\u0894\u0896\u0001\u0000\u0000\u0000\u0895"+
		"\u0893\u0001\u0000\u0000\u0000\u0896\u089a\u0005\u0464\u0000\u0000\u0897"+
		"\u0899\u0003\u0080@\u0000\u0898\u0897\u0001\u0000\u0000\u0000\u0899\u089c"+
		"\u0001\u0000\u0000\u0000\u089a\u0898\u0001\u0000\u0000\u0000\u089a\u089b"+
		"\u0001\u0000\u0000\u0000\u089b\u08a8\u0001\u0000\u0000\u0000\u089c\u089a"+
		"\u0001\u0000\u0000\u0000\u089d\u089e\u0005\u0463\u0000\u0000\u089e\u08a3"+
		"\u0003~?\u0000\u089f\u08a0\u0005\u0465\u0000\u0000\u08a0\u08a2\u0003~"+
		"?\u0000\u08a1\u089f\u0001\u0000\u0000\u0000\u08a2\u08a5\u0001\u0000\u0000"+
		"\u0000\u08a3\u08a1\u0001\u0000\u0000\u0000\u08a3\u08a4\u0001\u0000\u0000"+
		"\u0000\u08a4\u08a6\u0001\u0000\u0000\u0000\u08a5\u08a3\u0001\u0000\u0000"+
		"\u0000\u08a6\u08a7\u0005\u0464\u0000\u0000\u08a7\u08a9\u0001\u0000\u0000"+
		"\u0000\u08a8\u089d\u0001\u0000\u0000\u0000\u08a8\u08a9\u0001\u0000\u0000"+
		"\u0000\u08a9\u08e1\u0001\u0000\u0000\u0000\u08aa\u08ab\u0005}\u0000\u0000"+
		"\u08ab\u08ac\u0003\u022e\u0117\u0000\u08ac\u08ad\u0005\u00b6\u0000\u0000"+
		"\u08ad\u08ae\u0005M\u0000\u0000\u08ae\u08af\u0005\u0463\u0000\u0000\u08af"+
		"\u08b4\u0003|>\u0000\u08b0\u08b1\u0005\u0465\u0000\u0000\u08b1\u08b3\u0003"+
		"|>\u0000\u08b2\u08b0\u0001\u0000\u0000\u0000\u08b3\u08b6\u0001\u0000\u0000"+
		"\u0000\u08b4\u08b2\u0001\u0000\u0000\u0000\u08b4\u08b5\u0001\u0000\u0000"+
		"\u0000\u08b5\u08b7\u0001\u0000\u0000\u0000\u08b6\u08b4\u0001\u0000\u0000"+
		"\u0000\u08b7\u08bb\u0005\u0464\u0000\u0000\u08b8\u08ba\u0003\u0080@\u0000"+
		"\u08b9\u08b8\u0001\u0000\u0000\u0000\u08ba\u08bd\u0001\u0000\u0000\u0000"+
		"\u08bb\u08b9\u0001\u0000\u0000\u0000\u08bb\u08bc\u0001\u0000\u0000\u0000"+
		"\u08bc\u08c9\u0001\u0000\u0000\u0000\u08bd\u08bb\u0001\u0000\u0000\u0000"+
		"\u08be\u08bf\u0005\u0463\u0000\u0000\u08bf\u08c4\u0003~?\u0000\u08c0\u08c1"+
		"\u0005\u0465\u0000\u0000\u08c1\u08c3\u0003~?\u0000\u08c2\u08c0\u0001\u0000"+
		"\u0000\u0000\u08c3\u08c6\u0001\u0000\u0000\u0000\u08c4\u08c2\u0001\u0000"+
		"\u0000\u0000\u08c4\u08c5\u0001\u0000\u0000\u0000\u08c5\u08c7\u0001\u0000"+
		"\u0000\u0000\u08c6\u08c4\u0001\u0000\u0000\u0000\u08c7\u08c8\u0005\u0464"+
		"\u0000\u0000\u08c8\u08ca\u0001\u0000\u0000\u0000\u08c9\u08be\u0001\u0000"+
		"\u0000\u0000\u08c9\u08ca\u0001\u0000\u0000\u0000\u08ca\u08e1\u0001\u0000"+
		"\u0000\u0000\u08cb\u08cc\u0005}\u0000\u0000\u08cc\u08d0\u0003\u022e\u0117"+
		"\u0000\u08cd\u08cf\u0003\u0080@\u0000\u08ce\u08cd\u0001\u0000\u0000\u0000"+
		"\u08cf\u08d2\u0001\u0000\u0000\u0000\u08d0\u08ce\u0001\u0000\u0000\u0000"+
		"\u08d0\u08d1\u0001\u0000\u0000\u0000\u08d1\u08de\u0001\u0000\u0000\u0000"+
		"\u08d2\u08d0\u0001\u0000\u0000\u0000\u08d3\u08d4\u0005\u0463\u0000\u0000"+
		"\u08d4\u08d9\u0003~?\u0000\u08d5\u08d6\u0005\u0465\u0000\u0000\u08d6\u08d8"+
		"\u0003~?\u0000\u08d7\u08d5\u0001\u0000\u0000\u0000\u08d8\u08db\u0001\u0000"+
		"\u0000\u0000\u08d9\u08d7\u0001\u0000\u0000\u0000\u08d9\u08da\u0001\u0000"+
		"\u0000\u0000\u08da\u08dc\u0001\u0000\u0000\u0000\u08db\u08d9\u0001\u0000"+
		"\u0000\u0000\u08dc\u08dd\u0005\u0464\u0000\u0000\u08dd\u08df\u0001\u0000"+
		"\u0000\u0000\u08de\u08d3\u0001\u0000\u0000\u0000\u08de\u08df\u0001\u0000"+
		"\u0000\u0000\u08df\u08e1\u0001\u0000\u0000\u0000\u08e0\u084e\u0001\u0000"+
		"\u0000\u0000\u08e0\u0870\u0001\u0000\u0000\u0000\u08e0\u0889\u0001\u0000"+
		"\u0000\u0000\u08e0\u08aa\u0001\u0000\u0000\u0000\u08e0\u08cb\u0001\u0000"+
		"\u0000\u0000\u08e1y\u0001\u0000\u0000\u0000\u08e2\u08e6\u0003\u0240\u0120"+
		"\u0000\u08e3\u08e6\u0003\u0294\u014a\u0000\u08e4\u08e6\u0005j\u0000\u0000"+
		"\u08e5\u08e2\u0001\u0000\u0000\u0000\u08e5\u08e3\u0001\u0000\u0000\u0000"+
		"\u08e5\u08e4\u0001\u0000\u0000\u0000\u08e6{\u0001\u0000\u0000\u0000\u08e7"+
		"\u08e8\u0005\u0463\u0000\u0000\u08e8\u08eb\u0003z=\u0000\u08e9\u08ea\u0005"+
		"\u0465\u0000\u0000\u08ea\u08ec\u0003z=\u0000\u08eb\u08e9\u0001\u0000\u0000"+
		"\u0000\u08ec\u08ed\u0001\u0000\u0000\u0000\u08ed\u08eb\u0001\u0000\u0000"+
		"\u0000\u08ed\u08ee\u0001\u0000\u0000\u0000\u08ee\u08ef\u0001\u0000\u0000"+
		"\u0000\u08ef\u08f0\u0005\u0464\u0000\u0000\u08f0}\u0001\u0000\u0000\u0000"+
		"\u08f1\u08f2\u0005\u0270\u0000\u0000\u08f2\u08f6\u0003\u022e\u0117\u0000"+
		"\u08f3\u08f5\u0003\u0080@\u0000\u08f4\u08f3\u0001\u0000\u0000\u0000\u08f5"+
		"\u08f8\u0001\u0000\u0000\u0000\u08f6\u08f4\u0001\u0000\u0000\u0000\u08f6"+
		"\u08f7\u0001\u0000\u0000\u0000\u08f7\u007f\u0001\u0000\u0000\u0000\u08f8"+
		"\u08f6\u0001\u0000\u0000\u0000\u08f9\u08fb\u0005(\u0000\u0000\u08fa\u08f9"+
		"\u0001\u0000\u0000\u0000\u08fa\u08fb\u0001\u0000\u0000\u0000\u08fb\u08fd"+
		"\u0001\u0000\u0000\u0000\u08fc\u08fe\u0005\u026b\u0000\u0000\u08fd\u08fc"+
		"\u0001\u0000\u0000\u0000\u08fd\u08fe\u0001\u0000\u0000\u0000\u08fe\u08ff"+
		"\u0001\u0000\u0000\u0000\u08ff\u0901\u0005\u018e\u0000\u0000\u0900\u0902"+
		"\u0005\u045a\u0000\u0000\u0901\u0900\u0001\u0000\u0000\u0000\u0901\u0902"+
		"\u0001\u0000\u0000\u0000\u0902\u0903\u0001\u0000\u0000\u0000\u0903\u092a"+
		"\u0003\u0224\u0112\u0000\u0904\u0906\u0005\u0167\u0000\u0000\u0905\u0907"+
		"\u0005\u045a\u0000\u0000\u0906\u0905\u0001\u0000\u0000\u0000\u0906\u0907"+
		"\u0001\u0000\u0000\u0000\u0907\u0908\u0001\u0000\u0000\u0000\u0908\u092a"+
		"\u0005\u0472\u0000\u0000\u0909\u090a\u0005\u017b\u0000\u0000\u090a\u090c"+
		"\u0005\u0182\u0000\u0000\u090b\u090d\u0005\u045a\u0000\u0000\u090c\u090b"+
		"\u0001\u0000\u0000\u0000\u090c\u090d\u0001\u0000\u0000\u0000\u090d\u090e"+
		"\u0001\u0000\u0000\u0000\u090e\u092a\u0005\u0472\u0000\u0000\u090f\u0910"+
		"\u0005N\u0000\u0000\u0910\u0912\u0005\u0182\u0000\u0000\u0911\u0913\u0005"+
		"\u045a\u0000\u0000\u0912\u0911\u0001\u0000\u0000\u0000\u0912\u0913\u0001"+
		"\u0000\u0000\u0000\u0913\u0914\u0001\u0000\u0000\u0000\u0914\u092a\u0005"+
		"\u0472\u0000\u0000\u0915\u0917\u0005\u01e7\u0000\u0000\u0916\u0918\u0005"+
		"\u045a\u0000\u0000\u0917\u0916\u0001\u0000\u0000\u0000\u0917\u0918\u0001"+
		"\u0000\u0000\u0000\u0918\u0919\u0001\u0000\u0000\u0000\u0919\u092a\u0003"+
		"\u0234\u011a\u0000\u091a\u091c\u0005\u01f1\u0000\u0000\u091b\u091d\u0005"+
		"\u045a\u0000\u0000\u091c\u091b\u0001\u0000\u0000\u0000\u091c\u091d\u0001"+
		"\u0000\u0000\u0000\u091d\u091e\u0001\u0000\u0000\u0000\u091e\u092a\u0003"+
		"\u0234\u011a\u0000\u091f\u0921\u0005\u0276\u0000\u0000\u0920\u0922\u0005"+
		"\u045a\u0000\u0000\u0921\u0920\u0001\u0000\u0000\u0000\u0921\u0922\u0001"+
		"\u0000\u0000\u0000\u0922\u0923\u0001\u0000\u0000\u0000\u0923\u092a\u0003"+
		"\u022e\u0117\u0000\u0924\u0926\u0005\u0203\u0000\u0000\u0925\u0927\u0005"+
		"\u045a\u0000\u0000\u0926\u0925\u0001\u0000\u0000\u0000\u0926\u0927\u0001"+
		"\u0000\u0000\u0000\u0927\u0928\u0001\u0000\u0000\u0000\u0928\u092a\u0003"+
		"\u022e\u0117\u0000\u0929\u08fa\u0001\u0000\u0000\u0000\u0929\u0904\u0001"+
		"\u0000\u0000\u0000\u0929\u0909\u0001\u0000\u0000\u0000\u0929\u090f\u0001"+
		"\u0000\u0000\u0000\u0929\u0915\u0001\u0000\u0000\u0000\u0929\u091a\u0001"+
		"\u0000\u0000\u0000\u0929\u091f\u0001\u0000\u0000\u0000\u0929\u0924\u0001"+
		"\u0000\u0000\u0000\u092a\u0081\u0001\u0000\u0000\u0000\u092b\u092c\u0005"+
		"\u0007\u0000\u0000\u092c\u092e\u0007\u0000\u0000\u0000\u092d\u092f\u0003"+
		"\u022e\u0117\u0000\u092e\u092d\u0001\u0000\u0000\u0000\u092e\u092f\u0001"+
		"\u0000\u0000\u0000\u092f\u0931\u0001\u0000\u0000\u0000\u0930\u0932\u0003"+
		">\u001f\u0000\u0931\u0930\u0001\u0000\u0000\u0000\u0932\u0933\u0001\u0000"+
		"\u0000\u0000\u0933\u0931\u0001\u0000\u0000\u0000\u0933\u0934\u0001\u0000"+
		"\u0000\u0000\u0934\u093e\u0001\u0000\u0000\u0000\u0935\u0936\u0005\u0007"+
		"\u0000\u0000\u0936\u0937\u0007\u0000\u0000\u0000\u0937\u0938\u0003\u022e"+
		"\u0117\u0000\u0938\u0939\u0005\u0287\u0000\u0000\u0939\u093a\u0005\u017b"+
		"\u0000\u0000\u093a\u093b\u0005\u0182\u0000\u0000\u093b\u093c\u0005\u01f7"+
		"\u0000\u0000\u093c\u093e\u0001\u0000\u0000\u0000\u093d\u092b\u0001\u0000"+
		"\u0000\u0000\u093d\u0935\u0001\u0000\u0000\u0000\u093e\u0083\u0001\u0000"+
		"\u0000\u0000\u093f\u0941\u0005\u0007\u0000\u0000\u0940\u0942\u0003B!\u0000"+
		"\u0941\u0940\u0001\u0000\u0000\u0000\u0941\u0942\u0001\u0000\u0000\u0000"+
		"\u0942\u0943\u0001\u0000\u0000\u0000\u0943\u0944\u0005\u0194\u0000\u0000"+
		"\u0944\u0948\u0003\u0212\u0109\u0000\u0945\u0946\u0005r\u0000\u0000\u0946"+
		"\u0947\u0005\u024c\u0000\u0000\u0947\u0949\u0003D\"\u0000\u0948\u0945"+
		"\u0001\u0000\u0000\u0000\u0948\u0949\u0001\u0000\u0000\u0000\u0949\u0950"+
		"\u0001\u0000\u0000\u0000\u094a\u094b\u0005r\u0000\u0000\u094b\u094d\u0005"+
		"\u016a\u0000\u0000\u094c\u094e\u0005n\u0000\u0000\u094d\u094c\u0001\u0000"+
		"\u0000\u0000\u094d\u094e\u0001\u0000\u0000\u0000\u094e\u094f\u0001\u0000"+
		"\u0000\u0000\u094f\u0951\u0005\u0221\u0000\u0000\u0950\u094a\u0001\u0000"+
		"\u0000\u0000\u0950\u0951\u0001\u0000\u0000\u0000\u0951\u0955\u0001\u0000"+
		"\u0000\u0000\u0952\u0953\u0005\u0087\u0000\u0000\u0953\u0954\u0005\u00a9"+
		"\u0000\u0000\u0954\u0956\u0003\u0212\u0109\u0000\u0955\u0952\u0001\u0000"+
		"\u0000\u0000\u0955\u0956\u0001\u0000\u0000\u0000\u0956\u0958\u0001\u0000"+
		"\u0000\u0000\u0957\u0959\u0003L&\u0000\u0958\u0957\u0001\u0000\u0000\u0000"+
		"\u0958\u0959\u0001\u0000\u0000\u0000\u0959\u095c\u0001\u0000\u0000\u0000"+
		"\u095a\u095b\u0005\u0167\u0000\u0000\u095b\u095d\u0005\u0472\u0000\u0000"+
		"\u095c\u095a\u0001\u0000\u0000\u0000\u095c\u095d\u0001\u0000\u0000\u0000"+
		"\u095d\u0960\u0001\u0000\u0000\u0000\u095e\u095f\u0005\u0186\u0000\u0000"+
		"\u095f\u0961\u0003\u0178\u00bc\u0000\u0960\u095e\u0001\u0000\u0000\u0000"+
		"\u0960\u0961\u0001\u0000\u0000\u0000\u0961\u0085\u0001\u0000\u0000\u0000"+
		"\u0962\u0963\u0005\u0007\u0000\u0000\u0963\u0964\u0005\u01a9\u0000\u0000"+
		"\u0964\u0968\u0003\u0212\u0109\u0000\u0965\u0967\u0003V+\u0000\u0966\u0965"+
		"\u0001\u0000\u0000\u0000\u0967\u096a\u0001\u0000\u0000\u0000\u0968\u0966"+
		"\u0001\u0000\u0000\u0000\u0968\u0969\u0001\u0000\u0000\u0000\u0969\u0087"+
		"\u0001\u0000\u0000\u0000\u096a\u0968\u0001\u0000\u0000\u0000\u096b\u096c"+
		"\u0005\u0007\u0000\u0000\u096c\u096d\u0005\u01bc\u0000\u0000\u096d\u096e"+
		"\u0005\u0246\u0000\u0000\u096e\u096f\u0005\u0303\u0000\u0000\u096f\u0970"+
		"\u0005\u01d0\u0000\u0000\u0970\u0971\u0005X\u0000\u0000\u0971\u0089\u0001"+
		"\u0000\u0000\u0000\u0972\u0973\u0005\u0007\u0000\u0000\u0973\u0974\u0005"+
		"\u01ce\u0000\u0000\u0974\u0975\u0005F\u0000\u0000\u0975\u0976\u0003\u022e"+
		"\u0117\u0000\u0976\u0977\u0005\u0005\u0000\u0000\u0977\u0978\u0005\u0282"+
		"\u0000\u0000\u0978\u097e\u0005\u0472\u0000\u0000\u0979\u097b\u0005\u01b8"+
		"\u0000\u0000\u097a\u097c\u0005\u045a\u0000\u0000\u097b\u097a\u0001\u0000"+
		"\u0000\u0000\u097b\u097c\u0001\u0000\u0000\u0000\u097c\u097d\u0001\u0000"+
		"\u0000\u0000\u097d\u097f\u0003\u0236\u011b\u0000\u097e\u0979\u0001\u0000"+
		"\u0000\u0000\u097e\u097f\u0001\u0000\u0000\u0000\u097f\u0981\u0001\u0000"+
		"\u0000\u0000\u0980\u0982\u0005\u0291\u0000\u0000\u0981\u0980\u0001\u0000"+
		"\u0000\u0000\u0981\u0982\u0001\u0000\u0000\u0000\u0982\u0983\u0001\u0000"+
		"\u0000\u0000\u0983\u0985\u0005\u018e\u0000\u0000\u0984\u0986\u0005\u045a"+
		"\u0000\u0000\u0985\u0984\u0001\u0000\u0000\u0000\u0985\u0986\u0001\u0000"+
		"\u0000\u0000\u0986\u0987\u0001\u0000\u0000\u0000\u0987\u0988\u0003\u0224"+
		"\u0112\u0000\u0988\u008b\u0001\u0000\u0000\u0000\u0989\u098a\u0005\u0007"+
		"\u0000\u0000\u098a\u098b\u0005\u007f\u0000\u0000\u098b\u098f\u0003\u0212"+
		"\u0109\u0000\u098c\u098e\u0003V+\u0000\u098d\u098c\u0001\u0000\u0000\u0000"+
		"\u098e\u0991\u0001\u0000\u0000\u0000\u098f\u098d\u0001\u0000\u0000\u0000"+
		"\u098f\u0990\u0001\u0000\u0000\u0000\u0990\u008d\u0001\u0000\u0000\u0000"+
		"\u0991\u098f\u0001\u0000\u0000\u0000\u0992\u0993\u0005\u0007\u0000\u0000"+
		"\u0993\u0994\u0005\u024f\u0000\u0000\u0994\u0995\u0003\u022e\u0117\u0000"+
		"\u0995\u0996\u0005\u0210\u0000\u0000\u0996\u0997\u0005\u0463\u0000\u0000"+
		"\u0997\u099c\u0003X,\u0000\u0998\u0999\u0005\u0465\u0000\u0000\u0999\u099b"+
		"\u0003X,\u0000\u099a\u0998\u0001\u0000\u0000\u0000\u099b\u099e\u0001\u0000"+
		"\u0000\u0000\u099c\u099a\u0001\u0000\u0000\u0000\u099c\u099d\u0001\u0000"+
		"\u0000\u0000\u099d\u099f\u0001\u0000\u0000\u0000\u099e\u099c\u0001\u0000"+
		"\u0000\u0000\u099f\u09a0\u0005\u0464\u0000\u0000\u09a0\u008f\u0001\u0000"+
		"\u0000\u0000\u09a1\u09a3\u0005\u0007\u0000\u0000\u09a2\u09a4\u0007\u0001"+
		"\u0000\u0000\u09a3\u09a2\u0001\u0000\u0000\u0000\u09a3\u09a4\u0001\u0000"+
		"\u0000\u0000\u09a4\u09a6\u0001\u0000\u0000\u0000\u09a5\u09a7\u0005K\u0000"+
		"\u0000\u09a6\u09a5\u0001\u0000\u0000\u0000\u09a6\u09a7\u0001\u0000\u0000"+
		"\u0000\u09a7\u09a8\u0001\u0000\u0000\u0000\u09a8\u09a9\u0005\u00a6\u0000"+
		"\u0000\u09a9\u09ab\u0003\u0214\u010a\u0000\u09aa\u09ac\u0003\u0268\u0134"+
		"\u0000\u09ab\u09aa\u0001\u0000\u0000\u0000\u09ab\u09ac\u0001\u0000\u0000"+
		"\u0000\u09ac\u09b5\u0001\u0000\u0000\u0000\u09ad\u09b2\u0003\u0098L\u0000"+
		"\u09ae\u09af\u0005\u0465\u0000\u0000\u09af\u09b1\u0003\u0098L\u0000\u09b0"+
		"\u09ae\u0001\u0000\u0000\u0000\u09b1\u09b4\u0001\u0000\u0000\u0000\u09b2"+
		"\u09b0\u0001\u0000\u0000\u0000\u09b2\u09b3\u0001\u0000\u0000\u0000\u09b3"+
		"\u09b6\u0001\u0000\u0000\u0000\u09b4\u09b2\u0001\u0000\u0000\u0000\u09b5"+
		"\u09ad\u0001\u0000\u0000\u0000\u09b5\u09b6\u0001\u0000\u0000\u0000\u09b6"+
		"\u09b8\u0001\u0000\u0000\u0000\u09b7\u09b9\u0003r9\u0000\u09b8\u09b7\u0001"+
		"\u0000\u0000\u0000\u09b8\u09b9\u0001\u0000\u0000\u0000\u09b9\u0091\u0001"+
		"\u0000\u0000\u0000\u09ba\u09bb\u0005\u0007\u0000\u0000\u09bb\u09bc\u0005"+
		"\u0276\u0000\u0000\u09bc\u09bd\u0003\u022e\u0117\u0000\u09bd\u09be\u0007"+
		"#\u0000\u0000\u09be\u09bf\u0005\u017c\u0000\u0000\u09bf\u09c3\u0005\u0472"+
		"\u0000\u0000\u09c0\u09c1\u0005\u01b8\u0000\u0000\u09c1\u09c2\u0005\u045a"+
		"\u0000\u0000\u09c2\u09c4\u0003\u0236\u011b\u0000\u09c3\u09c0\u0001\u0000"+
		"\u0000\u0000\u09c3\u09c4\u0001\u0000\u0000\u0000\u09c4\u09c6\u0001\u0000"+
		"\u0000\u0000\u09c5\u09c7\u0005\u0291\u0000\u0000\u09c6\u09c5\u0001\u0000"+
		"\u0000\u0000\u09c6\u09c7\u0001\u0000\u0000\u0000\u09c7\u09c8\u0001\u0000"+
		"\u0000\u0000\u09c8\u09ca\u0005\u018e\u0000\u0000\u09c9\u09cb\u0005\u045a"+
		"\u0000\u0000\u09ca\u09c9\u0001\u0000\u0000\u0000\u09ca\u09cb\u0001\u0000"+
		"\u0000\u0000\u09cb\u09cc\u0001\u0000\u0000\u0000\u09cc\u09cd\u0003\u0224"+
		"\u0112\u0000\u09cd\u0093\u0001\u0000\u0000\u0000\u09ce\u09d2\u0005\u0007"+
		"\u0000\u0000\u09cf\u09d0\u0005\u0147\u0000\u0000\u09d0\u09d1\u0005\u045a"+
		"\u0000\u0000\u09d1\u09d3\u0007\n\u0000\u0000\u09d2\u09cf\u0001\u0000\u0000"+
		"\u0000\u09d2\u09d3\u0001\u0000\u0000\u0000\u09d3\u09d5\u0001\u0000\u0000"+
		"\u0000\u09d4\u09d6\u0003B!\u0000\u09d5\u09d4\u0001\u0000\u0000\u0000\u09d5"+
		"\u09d6\u0001\u0000\u0000\u0000\u09d6\u09da\u0001\u0000\u0000\u0000\u09d7"+
		"\u09d8\u0005\u009b\u0000\u0000\u09d8\u09d9\u0005\u024d\u0000\u0000\u09d9"+
		"\u09db\u0007\u000b\u0000\u0000\u09da\u09d7\u0001\u0000\u0000\u0000\u09da"+
		"\u09db\u0001\u0000\u0000\u0000\u09db\u09dc\u0001\u0000\u0000\u0000\u09dc"+
		"\u09dd\u0005\u028e\u0000\u0000\u09dd\u09e2\u0003\u0212\u0109\u0000\u09de"+
		"\u09df\u0005\u0463\u0000\u0000\u09df\u09e0\u0003\u024e\u0127\u0000\u09e0"+
		"\u09e1\u0005\u0464\u0000\u0000\u09e1\u09e3\u0001\u0000\u0000\u0000\u09e2"+
		"\u09de\u0001\u0000\u0000\u0000\u09e2\u09e3\u0001\u0000\u0000\u0000\u09e3"+
		"\u09e4\u0001\u0000\u0000\u0000\u09e4\u09e5\u0005\f\u0000\u0000\u09e5\u09ec"+
		"\u0003\u00ccf\u0000\u09e6\u09e8\u0005\u00ba\u0000\u0000\u09e7\u09e9\u0007"+
		"\f\u0000\u0000\u09e8\u09e7\u0001\u0000\u0000\u0000\u09e8\u09e9\u0001\u0000"+
		"\u0000\u0000\u09e9\u09ea\u0001\u0000\u0000\u0000\u09ea\u09eb\u0005\u0019"+
		"\u0000\u0000\u09eb\u09ed\u0005t\u0000\u0000\u09ec\u09e6\u0001\u0000\u0000"+
		"\u0000\u09ec\u09ed\u0001\u0000\u0000\u0000\u09ed\u0095\u0001\u0000\u0000"+
		"\u0000\u09ee\u09ef\u0005\u0007\u0000\u0000\u09ef\u09f1\u0005\u024e\u0000"+
		"\u0000\u09f0\u09f2\u0003\u0264\u0132\u0000\u09f1\u09f0\u0001\u0000\u0000"+
		"\u0000\u09f1\u09f2\u0001\u0000\u0000\u0000\u09f2\u09f3\u0001\u0000\u0000"+
		"\u0000\u09f3\u09f5\u0003\u0212\u0109\u0000\u09f4\u09f6\u0003<\u001e\u0000"+
		"\u09f5\u09f4\u0001\u0000\u0000\u0000\u09f6\u09f7\u0001\u0000\u0000\u0000"+
		"\u09f7\u09f5\u0001\u0000\u0000\u0000\u09f7\u09f8\u0001\u0000\u0000\u0000"+
		"\u09f8\u0097\u0001\u0000\u0000\u0000\u09f9\u0a00\u0003l6\u0000\u09fa\u09fc"+
		"\u0005\u0465\u0000\u0000\u09fb\u09fa\u0001\u0000\u0000\u0000\u09fb\u09fc"+
		"\u0001\u0000\u0000\u0000\u09fc\u09fd\u0001\u0000\u0000\u0000\u09fd\u09ff"+
		"\u0003l6\u0000\u09fe\u09fb\u0001\u0000\u0000\u0000\u09ff\u0a02\u0001\u0000"+
		"\u0000\u0000\u0a00\u09fe\u0001\u0000\u0000\u0000\u0a00\u0a01\u0001\u0000"+
		"\u0000\u0000\u0a01\u0b9e\u0001\u0000\u0000\u0000\u0a02\u0a00\u0001\u0000"+
		"\u0000\u0000\u0a03\u0a05\u0005\u0005\u0000\u0000\u0a04\u0a06\u0005\u001b"+
		"\u0000\u0000\u0a05\u0a04\u0001\u0000\u0000\u0000\u0a05\u0a06\u0001\u0000"+
		"\u0000\u0000\u0a06\u0a08\u0001\u0000\u0000\u0000\u0a07\u0a09\u0003\u0266"+
		"\u0133\u0000\u0a08\u0a07\u0001\u0000\u0000\u0000\u0a08\u0a09\u0001\u0000"+
		"\u0000\u0000\u0a09\u0a0a\u0001\u0000\u0000\u0000\u0a0a\u0a0b\u0003\u022e"+
		"\u0117\u0000\u0a0b\u0a0f\u0003^/\u0000\u0a0c\u0a10\u0005\u01a2\u0000\u0000"+
		"\u0a0d\u0a0e\u0005\u0145\u0000\u0000\u0a0e\u0a10\u0003\u022e\u0117\u0000"+
		"\u0a0f\u0a0c\u0001\u0000\u0000\u0000\u0a0f\u0a0d\u0001\u0000\u0000\u0000"+
		"\u0a0f\u0a10\u0001\u0000\u0000\u0000\u0a10\u0b9e\u0001\u0000\u0000\u0000"+
		"\u0a11\u0a13\u0005\u0005\u0000\u0000\u0a12\u0a14\u0005\u001b\u0000\u0000"+
		"\u0a13\u0a12\u0001\u0000\u0000\u0000\u0a13\u0a14\u0001\u0000\u0000\u0000"+
		"\u0a14\u0a16\u0001\u0000\u0000\u0000\u0a15\u0a17\u0003\u0266\u0133\u0000"+
		"\u0a16\u0a15\u0001\u0000\u0000\u0000\u0a16\u0a17\u0001\u0000\u0000\u0000"+
		"\u0a17\u0a18\u0001\u0000\u0000\u0000\u0a18\u0a19\u0005\u0463\u0000\u0000"+
		"\u0a19\u0a1a\u0003\u022e\u0117\u0000\u0a1a\u0a21\u0003^/\u0000\u0a1b\u0a1c"+
		"\u0005\u0465\u0000\u0000\u0a1c\u0a1d\u0003\u022e\u0117\u0000\u0a1d\u0a1e"+
		"\u0003^/\u0000\u0a1e\u0a20\u0001\u0000\u0000\u0000\u0a1f\u0a1b\u0001\u0000"+
		"\u0000\u0000\u0a20\u0a23\u0001\u0000\u0000\u0000\u0a21\u0a1f\u0001\u0000"+
		"\u0000\u0000\u0a21\u0a22\u0001\u0000\u0000\u0000\u0a22\u0a24\u0001\u0000"+
		"\u0000\u0000\u0a23\u0a21\u0001\u0000\u0000\u0000\u0a24\u0a25\u0005\u0464"+
		"\u0000\u0000\u0a25\u0b9e\u0001\u0000\u0000\u0000\u0a26\u0a27\u0005\u0005"+
		"\u0000\u0000\u0a27\u0a29\u0007\u0017\u0000\u0000\u0a28\u0a2a\u0003\u0266"+
		"\u0133\u0000\u0a29\u0a28\u0001\u0000\u0000\u0000\u0a29\u0a2a\u0001\u0000"+
		"\u0000\u0000\u0a2a\u0a2c\u0001\u0000\u0000\u0000\u0a2b\u0a2d\u0003\u022e"+
		"\u0117\u0000\u0a2c\u0a2b\u0001\u0000\u0000\u0000\u0a2c\u0a2d\u0001\u0000"+
		"\u0000\u0000\u0a2d\u0a2f\u0001\u0000\u0000\u0000\u0a2e\u0a30\u0003N\'"+
		"\u0000\u0a2f\u0a2e\u0001\u0000\u0000\u0000\u0a2f\u0a30\u0001\u0000\u0000"+
		"\u0000\u0a30\u0a31\u0001\u0000\u0000\u0000\u0a31\u0a35\u0003\u0252\u0129"+
		"\u0000\u0a32\u0a34\u0003P(\u0000\u0a33\u0a32\u0001\u0000\u0000\u0000\u0a34"+
		"\u0a37\u0001\u0000\u0000\u0000\u0a35\u0a33\u0001\u0000\u0000\u0000\u0a35"+
		"\u0a36\u0001\u0000\u0000\u0000\u0a36\u0b9e\u0001\u0000\u0000\u0000\u0a37"+
		"\u0a35\u0001\u0000\u0000\u0000\u0a38\u0a3d\u0005\u0005\u0000\u0000\u0a39"+
		"\u0a3b\u0005\u001d\u0000\u0000\u0a3a\u0a3c\u0003\u022e\u0117\u0000\u0a3b"+
		"\u0a3a\u0001\u0000\u0000\u0000\u0a3b\u0a3c\u0001\u0000\u0000\u0000\u0a3c"+
		"\u0a3e\u0001\u0000\u0000\u0000\u0a3d\u0a39\u0001\u0000\u0000\u0000\u0a3d"+
		"\u0a3e\u0001\u0000\u0000\u0000\u0a3e\u0a3f\u0001\u0000\u0000\u0000\u0a3f"+
		"\u0a40\u0005~\u0000\u0000\u0a40\u0a42\u0005X\u0000\u0000\u0a41\u0a43\u0003"+
		"\u022e\u0117\u0000\u0a42\u0a41\u0001\u0000\u0000\u0000\u0a42\u0a43\u0001"+
		"\u0000\u0000\u0000\u0a43\u0a45\u0001\u0000\u0000\u0000\u0a44\u0a46\u0003"+
		"N\'\u0000\u0a45\u0a44\u0001\u0000\u0000\u0000\u0a45\u0a46\u0001\u0000"+
		"\u0000\u0000\u0a46\u0a47\u0001\u0000\u0000\u0000\u0a47\u0a4b\u0003\u0252"+
		"\u0129\u0000\u0a48\u0a4a\u0003P(\u0000\u0a49\u0a48\u0001\u0000\u0000\u0000"+
		"\u0a4a\u0a4d\u0001\u0000\u0000\u0000\u0a4b\u0a49\u0001\u0000\u0000\u0000"+
		"\u0a4b\u0a4c\u0001\u0000\u0000\u0000\u0a4c\u0b9e\u0001\u0000\u0000\u0000"+
		"\u0a4d\u0a4b\u0001\u0000\u0000\u0000\u0a4e\u0a53\u0005\u0005\u0000\u0000"+
		"\u0a4f\u0a51\u0005\u001d\u0000\u0000\u0a50\u0a52\u0003\u022e\u0117\u0000"+
		"\u0a51\u0a50\u0001\u0000\u0000\u0000\u0a51\u0a52\u0001\u0000\u0000\u0000"+
		"\u0a52\u0a54\u0001\u0000\u0000\u0000\u0a53\u0a4f\u0001\u0000\u0000\u0000"+
		"\u0a53\u0a54\u0001\u0000\u0000\u0000\u0a54\u0a55\u0001\u0000\u0000\u0000"+
		"\u0a55\u0a57\u0005\u00af\u0000\u0000\u0a56\u0a58\u0007\u0017\u0000\u0000"+
		"\u0a57\u0a56\u0001\u0000\u0000\u0000\u0a57\u0a58\u0001\u0000\u0000\u0000"+
		"\u0a58\u0a5a\u0001\u0000\u0000\u0000\u0a59\u0a5b\u0003\u022e\u0117\u0000"+
		"\u0a5a\u0a59\u0001\u0000\u0000\u0000\u0a5a\u0a5b\u0001\u0000\u0000\u0000"+
		"\u0a5b\u0a5d\u0001\u0000\u0000\u0000\u0a5c\u0a5e\u0003N\'\u0000\u0a5d"+
		"\u0a5c\u0001\u0000\u0000\u0000\u0a5d\u0a5e\u0001\u0000\u0000\u0000\u0a5e"+
		"\u0a5f\u0001\u0000\u0000\u0000\u0a5f\u0a63\u0003\u0252\u0129\u0000\u0a60"+
		"\u0a62\u0003P(\u0000\u0a61\u0a60\u0001\u0000\u0000\u0000\u0a62\u0a65\u0001"+
		"\u0000\u0000\u0000\u0a63\u0a61\u0001\u0000\u0000\u0000\u0a63\u0a64\u0001"+
		"\u0000\u0000\u0000\u0a64\u0b9e\u0001\u0000\u0000\u0000\u0a65\u0a63\u0001"+
		"\u0000\u0000\u0000\u0a66\u0a67\u0005\u0005\u0000\u0000\u0a67\u0a69\u0007"+
		"\u0019\u0000\u0000\u0a68\u0a6a\u0007\u0017\u0000\u0000\u0a69\u0a68\u0001"+
		"\u0000\u0000\u0000\u0a69\u0a6a\u0001\u0000\u0000\u0000\u0a6a\u0a6c\u0001"+
		"\u0000\u0000\u0000\u0a6b\u0a6d\u0003\u022e\u0117\u0000\u0a6c\u0a6b\u0001"+
		"\u0000\u0000\u0000\u0a6c\u0a6d\u0001\u0000\u0000\u0000\u0a6d\u0a6e\u0001"+
		"\u0000\u0000\u0000\u0a6e\u0a72\u0003\u0252\u0129\u0000\u0a6f\u0a71\u0003"+
		"P(\u0000\u0a70\u0a6f\u0001\u0000\u0000\u0000\u0a71\u0a74\u0001\u0000\u0000"+
		"\u0000\u0a72\u0a70\u0001\u0000\u0000\u0000\u0a72\u0a73\u0001\u0000\u0000"+
		"\u0000\u0a73\u0b9e\u0001\u0000\u0000\u0000\u0a74\u0a72\u0001\u0000\u0000"+
		"\u0000\u0a75\u0a7a\u0005\u0005\u0000\u0000\u0a76\u0a78\u0005\u001d\u0000"+
		"\u0000\u0a77\u0a79\u0003\u022e\u0117\u0000\u0a78\u0a77\u0001\u0000\u0000"+
		"\u0000\u0a78\u0a79\u0001\u0000\u0000\u0000\u0a79\u0a7b\u0001\u0000\u0000"+
		"\u0000\u0a7a\u0a76\u0001\u0000\u0000\u0000\u0a7a\u0a7b\u0001\u0000\u0000"+
		"\u0000\u0a7b\u0a7c\u0001\u0000\u0000\u0000\u0a7c\u0a7d\u0005@\u0000\u0000"+
		"\u0a7d\u0a7f\u0005X\u0000\u0000\u0a7e\u0a80\u0003\u0266\u0133\u0000\u0a7f"+
		"\u0a7e\u0001\u0000\u0000\u0000\u0a7f\u0a80\u0001\u0000\u0000\u0000\u0a80"+
		"\u0a82\u0001\u0000\u0000\u0000\u0a81\u0a83\u0003\u022e\u0117\u0000\u0a82"+
		"\u0a81\u0001\u0000\u0000\u0000\u0a82\u0a83\u0001\u0000\u0000\u0000\u0a83"+
		"\u0a84\u0001\u0000\u0000\u0000\u0a84\u0a85\u0003\u0252\u0129\u0000\u0a85"+
		"\u0a86\u0003d2\u0000\u0a86\u0b9e\u0001\u0000\u0000\u0000\u0a87\u0a8c\u0005"+
		"\u0005\u0000\u0000\u0a88\u0a8a\u0005\u001d\u0000\u0000\u0a89\u0a8b\u0003"+
		"\u022e\u0117\u0000\u0a8a\u0a89\u0001\u0000\u0000\u0000\u0a8a\u0a8b\u0001"+
		"\u0000\u0000\u0000\u0a8b\u0a8d\u0001\u0000\u0000\u0000\u0a8c\u0a88\u0001"+
		"\u0000\u0000\u0000\u0a8c\u0a8d\u0001\u0000\u0000\u0000\u0a8d\u0a8e\u0001"+
		"\u0000\u0000\u0000\u0a8e\u0a8f\u0005\u0019\u0000\u0000\u0a8f\u0a90\u0005"+
		"\u0463\u0000\u0000\u0a90\u0a91\u0003\u0294\u014a\u0000\u0a91\u0a92\u0005"+
		"\u0464\u0000\u0000\u0a92\u0b9e\u0001\u0000\u0000\u0000\u0a93\u0a95\u0005"+
		"\u0147\u0000\u0000\u0a94\u0a96\u0005\u045a\u0000\u0000\u0a95\u0a94\u0001"+
		"\u0000\u0000\u0000\u0a95\u0a96\u0001\u0000\u0000\u0000\u0a96\u0a97\u0001"+
		"\u0000\u0000\u0000\u0a97\u0b9e\u0007$\u0000\u0000\u0a98\u0a9a\u0005\u0007"+
		"\u0000\u0000\u0a99\u0a9b\u0005\u001b\u0000\u0000\u0a9a\u0a99\u0001\u0000"+
		"\u0000\u0000\u0a9a\u0a9b\u0001\u0000\u0000\u0000\u0a9b\u0a9c\u0001\u0000"+
		"\u0000\u0000\u0a9c\u0aa2\u0003\u022e\u0117\u0000\u0a9d\u0a9e\u0005\u0095"+
		"\u0000\u0000\u0a9e\u0a9f\u0005(\u0000\u0000\u0a9f\u0aa3\u0003\u025e\u012f"+
		"\u0000\u0aa0\u0aa1\u00051\u0000\u0000\u0aa1\u0aa3\u0005(\u0000\u0000\u0aa2"+
		"\u0a9d\u0001\u0000\u0000\u0000\u0aa2\u0aa0\u0001\u0000\u0000\u0000\u0aa3"+
		"\u0b9e\u0001\u0000\u0000\u0000\u0aa4\u0aa6\u0005\u0017\u0000\u0000\u0aa5"+
		"\u0aa7\u0005\u001b\u0000\u0000\u0aa6\u0aa5\u0001\u0000\u0000\u0000\u0aa6"+
		"\u0aa7\u0001\u0000\u0000\u0000\u0aa7\u0aa9\u0001\u0000\u0000\u0000\u0aa8"+
		"\u0aaa\u0003\u0264\u0132\u0000\u0aa9\u0aa8\u0001\u0000\u0000\u0000\u0aa9"+
		"\u0aaa\u0001\u0000\u0000\u0000\u0aaa\u0aab\u0001\u0000\u0000\u0000\u0aab"+
		"\u0aac\u0003\u022e\u0117\u0000\u0aac\u0aad\u0003\u022e\u0117\u0000\u0aad"+
		"\u0ab1\u0003^/\u0000\u0aae\u0ab2\u0005\u01a2\u0000\u0000\u0aaf\u0ab0\u0005"+
		"\u0145\u0000\u0000\u0ab0\u0ab2\u0003\u022e\u0117\u0000\u0ab1\u0aae\u0001"+
		"\u0000\u0000\u0000\u0ab1\u0aaf\u0001\u0000\u0000\u0000\u0ab1\u0ab2\u0001"+
		"\u0000\u0000\u0000\u0ab2\u0b9e\u0001\u0000\u0000\u0000\u0ab3\u0ab4\u0005"+
		"\u0087\u0000\u0000\u0ab4\u0ab5\u0005\u001b\u0000\u0000\u0ab5\u0ab6\u0003"+
		"\u022e\u0117\u0000\u0ab6\u0ab7\u0005\u00a9\u0000\u0000\u0ab7\u0ab8\u0003"+
		"\u022e\u0117\u0000\u0ab8\u0b9e\u0001\u0000\u0000\u0000\u0ab9\u0abb\u0005"+
		"c\u0000\u0000\u0aba\u0abc\u0005\u045a\u0000\u0000\u0abb\u0aba\u0001\u0000"+
		"\u0000\u0000\u0abb\u0abc\u0001\u0000\u0000\u0000\u0abc\u0abd\u0001\u0000"+
		"\u0000\u0000\u0abd\u0b9e\u0007\u0004\u0000\u0000\u0abe\u0ac0\u0005\u01f3"+
		"\u0000\u0000\u0abf\u0ac1\u0005\u001b\u0000\u0000\u0ac0\u0abf\u0001\u0000"+
		"\u0000\u0000\u0ac0\u0ac1\u0001\u0000\u0000\u0000\u0ac1\u0ac3\u0001\u0000"+
		"\u0000\u0000\u0ac2\u0ac4\u0003\u0264\u0132\u0000\u0ac3\u0ac2\u0001\u0000"+
		"\u0000\u0000\u0ac3\u0ac4\u0001\u0000\u0000\u0000\u0ac4\u0ac5\u0001\u0000"+
		"\u0000\u0000\u0ac5\u0ac6\u0003\u022e\u0117\u0000\u0ac6\u0aca\u0003^/\u0000"+
		"\u0ac7\u0acb\u0005\u01a2\u0000\u0000\u0ac8\u0ac9\u0005\u0145\u0000\u0000"+
		"\u0ac9\u0acb\u0003\u022e\u0117\u0000\u0aca\u0ac7\u0001\u0000\u0000\u0000"+
		"\u0aca\u0ac8\u0001\u0000\u0000\u0000\u0aca\u0acb\u0001\u0000\u0000\u0000"+
		"\u0acb\u0b9e\u0001\u0000\u0000\u0000\u0acc\u0ace\u00051\u0000\u0000\u0acd"+
		"\u0acf\u0005\u001b\u0000\u0000\u0ace\u0acd\u0001\u0000\u0000\u0000\u0ace"+
		"\u0acf\u0001\u0000\u0000\u0000\u0acf\u0ad1\u0001\u0000\u0000\u0000\u0ad0"+
		"\u0ad2\u0003\u0264\u0132\u0000\u0ad1\u0ad0\u0001\u0000\u0000\u0000\u0ad1"+
		"\u0ad2\u0001\u0000\u0000\u0000\u0ad2\u0ad3\u0001\u0000\u0000\u0000\u0ad3"+
		"\u0ad5\u0003\u022e\u0117\u0000\u0ad4\u0ad6\u0005\u008c\u0000\u0000\u0ad5"+
		"\u0ad4\u0001\u0000\u0000\u0000\u0ad5\u0ad6\u0001\u0000\u0000\u0000\u0ad6"+
		"\u0b9e\u0001\u0000\u0000\u0000\u0ad7\u0ad8\u00051\u0000\u0000\u0ad8\u0ada"+
		"\u0007%\u0000\u0000\u0ad9\u0adb\u0003\u0264\u0132\u0000\u0ada\u0ad9\u0001"+
		"\u0000\u0000\u0000\u0ada\u0adb\u0001\u0000\u0000\u0000\u0adb\u0adc\u0001"+
		"\u0000\u0000\u0000\u0adc\u0b9e\u0003\u022e\u0117\u0000\u0add\u0ade\u0005"+
		"1\u0000\u0000\u0ade\u0adf\u0005~\u0000\u0000\u0adf\u0b9e\u0005X\u0000"+
		"\u0000\u0ae0\u0ae1\u0005\u0087\u0000\u0000\u0ae1\u0ae2\u0007\u0017\u0000"+
		"\u0000\u0ae2\u0ae3\u0003\u022e\u0117\u0000\u0ae3\u0ae4\u0005\u00a9\u0000"+
		"\u0000\u0ae4\u0ae5\u0003\u022e\u0117\u0000\u0ae5\u0b9e\u0001\u0000\u0000"+
		"\u0000\u0ae6\u0ae7\u0005\u0007\u0000\u0000\u0ae7\u0ae8\u0005N\u0000\u0000"+
		"\u0ae8\u0ae9\u0003\u022e\u0117\u0000\u0ae9\u0aea\u0007\u0011\u0000\u0000"+
		"\u0aea\u0b9e\u0001\u0000\u0000\u0000\u0aeb\u0aec\u00051\u0000\u0000\u0aec"+
		"\u0aee\u0007\u0017\u0000\u0000\u0aed\u0aef\u0003\u0264\u0132\u0000\u0aee"+
		"\u0aed\u0001\u0000\u0000\u0000\u0aee\u0aef\u0001\u0000\u0000\u0000\u0aef"+
		"\u0af0\u0001\u0000\u0000\u0000\u0af0\u0b9e\u0003\u022e\u0117\u0000\u0af1"+
		"\u0af2\u00051\u0000\u0000\u0af2\u0af3\u0005@\u0000\u0000\u0af3\u0af5\u0005"+
		"X\u0000\u0000\u0af4\u0af6\u0003\u0264\u0132\u0000\u0af5\u0af4\u0001\u0000"+
		"\u0000\u0000\u0af5\u0af6\u0001\u0000\u0000\u0000\u0af6\u0af7\u0001\u0000"+
		"\u0000\u0000\u0af7\u0b9e\u0003\u022e\u0117\u0000\u0af8\u0af9\u0005\u0183"+
		"\u0000\u0000\u0af9\u0b9e\u0005Y\u0000\u0000\u0afa\u0afb\u0005\u018a\u0000"+
		"\u0000\u0afb\u0b9e\u0005Y\u0000\u0000\u0afc\u0afe\u0005\u0087\u0000\u0000"+
		"\u0afd\u0aff\u0007&\u0000\u0000\u0afe\u0afd\u0001\u0000\u0000\u0000\u0afe"+
		"\u0aff\u0001\u0000\u0000\u0000\u0aff\u0b02\u0001\u0000\u0000\u0000\u0b00"+
		"\u0b03\u0003\u022e\u0117\u0000\u0b01\u0b03\u0003\u0212\u0109\u0000\u0b02"+
		"\u0b00\u0001\u0000\u0000\u0000\u0b02\u0b01\u0001\u0000\u0000\u0000\u0b03"+
		"\u0b9e\u0001\u0000\u0000\u0000\u0b04\u0b05\u0005x\u0000\u0000\u0b05\u0b06"+
		"\u0005\u0012\u0000\u0000\u0b06\u0b9e\u0003\u024e\u0127\u0000\u0b07\u0b08"+
		"\u0005\u001f\u0000\u0000\u0b08\u0b09\u0005\u00a9\u0000\u0000\u0b09\u0b0a"+
		"\u0005\u0018\u0000\u0000\u0b0a\u0b0b\u0005\u0095\u0000\u0000\u0b0b\u0b0e"+
		"\u0003\u0220\u0110\u0000\u0b0c\u0b0d\u0005\u001a\u0000\u0000\u0b0d\u0b0f"+
		"\u0003\u0222\u0111\u0000\u0b0e\u0b0c\u0001\u0000\u0000\u0000\u0b0e\u0b0f"+
		"\u0001\u0000\u0000\u0000\u0b0f\u0b9e\u0001\u0000\u0000\u0000\u0b10\u0b12"+
		"\u0005(\u0000\u0000\u0b11\u0b10\u0001\u0000\u0000\u0000\u0b11\u0b12\u0001"+
		"\u0000\u0000\u0000\u0b12\u0b13\u0001\u0000\u0000\u0000\u0b13\u0b14\u0005"+
		"\u0018\u0000\u0000\u0b14\u0b15\u0005\u0095\u0000\u0000\u0b15\u0b16\u0005"+
		"\u045a\u0000\u0000\u0b16\u0b1a\u0003\u0220\u0110\u0000\u0b17\u0b18\u0005"+
		"\u001a\u0000\u0000\u0b18\u0b19\u0005\u045a\u0000\u0000\u0b19\u0b1b\u0003"+
		"\u0222\u0111\u0000\u0b1a\u0b17\u0001\u0000\u0000\u0000\u0b1a\u0b1b\u0001"+
		"\u0000\u0000\u0000\u0b1b\u0b9e\u0001\u0000\u0000\u0000\u0b1c\u0b1d\u0005"+
		"\u0184\u0000\u0000\u0b1d\u0b9e\u0005\u0276\u0000\u0000\u0b1e\u0b1f\u0005"+
		"\u01b5\u0000\u0000\u0b1f\u0b9e\u0005\u0276\u0000\u0000\u0b20\u0b9e\u0005"+
		"?\u0000\u0000\u0b21\u0b22\u0007\'\u0000\u0000\u0b22\u0b9e\u0005\u028b"+
		"\u0000\u0000\u0b23\u0b24\u0005\u0005\u0000\u0000\u0b24\u0b26\u0005}\u0000"+
		"\u0000\u0b25\u0b27\u0003\u0266\u0133\u0000\u0b26\u0b25\u0001\u0000\u0000"+
		"\u0000\u0b26\u0b27\u0001\u0000\u0000\u0000\u0b27\u0b28\u0001\u0000\u0000"+
		"\u0000\u0b28\u0b29\u0005\u0463\u0000\u0000\u0b29\u0b2e\u0003x<\u0000\u0b2a"+
		"\u0b2b\u0005\u0465\u0000\u0000\u0b2b\u0b2d\u0003x<\u0000\u0b2c\u0b2a\u0001"+
		"\u0000\u0000\u0000\u0b2d\u0b30\u0001\u0000\u0000\u0000\u0b2e\u0b2c\u0001"+
		"\u0000\u0000\u0000\u0b2e\u0b2f\u0001\u0000\u0000\u0000\u0b2f\u0b31\u0001"+
		"\u0000\u0000\u0000\u0b30\u0b2e\u0001\u0000\u0000\u0000\u0b31\u0b32\u0005"+
		"\u0464\u0000\u0000\u0b32\u0b9e\u0001\u0000\u0000\u0000\u0b33\u0b34\u0005"+
		"1\u0000\u0000\u0b34\u0b36\u0005}\u0000\u0000\u0b35\u0b37\u0003\u0264\u0132"+
		"\u0000\u0b36\u0b35\u0001\u0000\u0000\u0000\u0b36\u0b37\u0001\u0000\u0000"+
		"\u0000\u0b37\u0b38\u0001\u0000\u0000\u0000\u0b38\u0b9e\u0003\u024e\u0127"+
		"\u0000\u0b39\u0b3a\u0005\u0184\u0000\u0000\u0b3a\u0b3d\u0005}\u0000\u0000"+
		"\u0b3b\u0b3e\u0003\u024e\u0127\u0000\u0b3c\u0b3e\u0005\u0006\u0000\u0000"+
		"\u0b3d\u0b3b\u0001\u0000\u0000\u0000\u0b3d\u0b3c\u0001\u0000\u0000\u0000"+
		"\u0b3e\u0b3f\u0001\u0000\u0000\u0000\u0b3f\u0b9e\u0005\u0276\u0000\u0000"+
		"\u0b40\u0b41\u0005\u01b5\u0000\u0000\u0b41\u0b44\u0005}\u0000\u0000\u0b42"+
		"\u0b45\u0003\u024e\u0127\u0000\u0b43\u0b45\u0005\u0006\u0000\u0000\u0b44"+
		"\u0b42\u0001\u0000\u0000\u0000\u0b44\u0b43\u0001\u0000\u0000\u0000\u0b45"+
		"\u0b46\u0001\u0000\u0000\u0000\u0b46\u0b9e\u0005\u0276\u0000\u0000\u0b47"+
		"\u0b48\u0005\u027f\u0000\u0000\u0b48\u0b4b\u0005}\u0000\u0000\u0b49\u0b4c"+
		"\u0003\u024e\u0127\u0000\u0b4a\u0b4c\u0005\u0006\u0000\u0000\u0b4b\u0b49"+
		"\u0001\u0000\u0000\u0000\u0b4b\u0b4a\u0001\u0000\u0000\u0000\u0b4c\u0b9e"+
		"\u0001\u0000\u0000\u0000\u0b4d\u0b4e\u0005\u0162\u0000\u0000\u0b4e\u0b4f"+
		"\u0005}\u0000\u0000\u0b4f\u0b9e\u0003\u0234\u011a\u0000\u0b50\u0b51\u0005"+
		"\u0233\u0000\u0000\u0b51\u0b52\u0005}\u0000\u0000\u0b52\u0b53\u0003\u024e"+
		"\u0127\u0000\u0b53\u0b54\u0005T\u0000\u0000\u0b54\u0b55\u0005\u0463\u0000"+
		"\u0000\u0b55\u0b5a\u0003x<\u0000\u0b56\u0b57\u0005\u0465\u0000\u0000\u0b57"+
		"\u0b59\u0003x<\u0000\u0b58\u0b56\u0001\u0000\u0000\u0000\u0b59\u0b5c\u0001"+
		"\u0000\u0000\u0000\u0b5a\u0b58\u0001\u0000\u0000\u0000\u0b5a\u0b5b\u0001"+
		"\u0000\u0000\u0000\u0b5b\u0b5d\u0001\u0000\u0000\u0000\u0b5c\u0b5a\u0001"+
		"\u0000\u0000\u0000\u0b5d\u0b5e\u0005\u0464\u0000\u0000\u0b5e\u0b9e\u0001"+
		"\u0000\u0000\u0000\u0b5f\u0b60\u0005\u0197\u0000\u0000\u0b60\u0b61\u0005"+
		"}\u0000\u0000\u0b61\u0b62\u0003\u022e\u0117\u0000\u0b62\u0b63\u0005\u00ba"+
		"\u0000\u0000\u0b63\u0b64\u0005\u00a6\u0000\u0000\u0b64\u0b67\u0003\u0214"+
		"\u010a\u0000\u0b65\u0b66\u0007\'\u0000\u0000\u0b66\u0b68\u0005\u028b\u0000"+
		"\u0000\u0b67\u0b65\u0001\u0000\u0000\u0000\u0b67\u0b68\u0001\u0000\u0000"+
		"\u0000\u0b68\u0b9e\u0001\u0000\u0000\u0000\u0b69\u0b6a\u0005\t\u0000\u0000"+
		"\u0b6a\u0b6d\u0005}\u0000\u0000\u0b6b\u0b6e\u0003\u024e\u0127\u0000\u0b6c"+
		"\u0b6e\u0005\u0006\u0000\u0000\u0b6d\u0b6b\u0001\u0000\u0000\u0000\u0b6d"+
		"\u0b6c\u0001\u0000\u0000\u0000\u0b6e\u0b9e\u0001\u0000\u0000\u0000\u0b6f"+
		"\u0b70\u0005\u0019\u0000\u0000\u0b70\u0b73\u0005}\u0000\u0000\u0b71\u0b74"+
		"\u0003\u024e\u0127\u0000\u0b72\u0b74\u0005\u0006\u0000\u0000\u0b73\u0b71"+
		"\u0001\u0000\u0000\u0000\u0b73\u0b72\u0001\u0000\u0000\u0000\u0b74\u0b9e"+
		"\u0001\u0000\u0000\u0000\u0b75\u0b76\u0005s\u0000\u0000\u0b76\u0b79\u0005"+
		"}\u0000\u0000\u0b77\u0b7a\u0003\u024e\u0127\u0000\u0b78\u0b7a\u0005\u0006"+
		"\u0000\u0000\u0b79\u0b77\u0001\u0000\u0000\u0000\u0b79\u0b78\u0001\u0000"+
		"\u0000\u0000\u0b7a\u0b9e\u0001\u0000\u0000\u0000\u0b7b\u0b7c\u0005\u0229"+
		"\u0000\u0000\u0b7c\u0b7f\u0005}\u0000\u0000\u0b7d\u0b80\u0003\u024e\u0127"+
		"\u0000\u0b7e\u0b80\u0005\u0006\u0000\u0000\u0b7f\u0b7d\u0001\u0000\u0000"+
		"\u0000\u0b7f\u0b7e\u0001\u0000\u0000\u0000\u0b80\u0b9e\u0001\u0000\u0000"+
		"\u0000\u0b81\u0b82\u0005\u0234\u0000\u0000\u0b82\u0b85\u0005}\u0000\u0000"+
		"\u0b83\u0b86\u0003\u024e\u0127\u0000\u0b84\u0b86\u0005\u0006\u0000\u0000"+
		"\u0b85\u0b83\u0001\u0000\u0000\u0000\u0b85\u0b84\u0001\u0000\u0000\u0000"+
		"\u0b86\u0b9e\u0001\u0000\u0000\u0000\u0b87\u0b88\u0005\u0232\u0000\u0000"+
		"\u0b88\u0b9e\u0005\u0216\u0000\u0000\u0b89\u0b8a\u0005\u0287\u0000\u0000"+
		"\u0b8a\u0b9e\u0005\u0216\u0000\u0000\u0b8b\u0b8d\u0005\u0005\u0000\u0000"+
		"\u0b8c\u0b8e\u0005\u001b\u0000\u0000\u0b8d\u0b8c\u0001\u0000\u0000\u0000"+
		"\u0b8d\u0b8e\u0001\u0000\u0000\u0000\u0b8e\u0b90\u0001\u0000\u0000\u0000"+
		"\u0b8f\u0b91\u0003\u0266\u0133\u0000\u0b90\u0b8f\u0001\u0000\u0000\u0000"+
		"\u0b90\u0b91\u0001\u0000\u0000\u0000\u0b91\u0b92\u0001\u0000\u0000\u0000"+
		"\u0b92\u0b93\u0005\u0463\u0000\u0000\u0b93\u0b98\u0003\\.\u0000\u0b94"+
		"\u0b95\u0005\u0465\u0000\u0000\u0b95\u0b97\u0003\\.\u0000\u0b96\u0b94"+
		"\u0001\u0000\u0000\u0000\u0b97\u0b9a\u0001\u0000\u0000\u0000\u0b98\u0b96"+
		"\u0001\u0000\u0000\u0000\u0b98\u0b99\u0001\u0000\u0000\u0000\u0b99\u0b9b"+
		"\u0001\u0000\u0000\u0000\u0b9a\u0b98\u0001\u0000\u0000\u0000\u0b9b\u0b9c"+
		"\u0005\u0464\u0000\u0000\u0b9c\u0b9e\u0001\u0000\u0000\u0000\u0b9d\u09f9"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0a03\u0001\u0000\u0000\u0000\u0b9d\u0a11"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0a26\u0001\u0000\u0000\u0000\u0b9d\u0a38"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0a4e\u0001\u0000\u0000\u0000\u0b9d\u0a66"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0a75\u0001\u0000\u0000\u0000\u0b9d\u0a87"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0a93\u0001\u0000\u0000\u0000\u0b9d\u0a98"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0aa4\u0001\u0000\u0000\u0000\u0b9d\u0ab3"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0ab9\u0001\u0000\u0000\u0000\u0b9d\u0abe"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0acc\u0001\u0000\u0000\u0000\u0b9d\u0ad7"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0add\u0001\u0000\u0000\u0000\u0b9d\u0ae0"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0ae6\u0001\u0000\u0000\u0000\u0b9d\u0aeb"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0af1\u0001\u0000\u0000\u0000\u0b9d\u0af8"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0afa\u0001\u0000\u0000\u0000\u0b9d\u0afc"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0b04\u0001\u0000\u0000\u0000\u0b9d\u0b07"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0b11\u0001\u0000\u0000\u0000\u0b9d\u0b1c"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0b1e\u0001\u0000\u0000\u0000\u0b9d\u0b20"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0b21\u0001\u0000\u0000\u0000\u0b9d\u0b23"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0b33\u0001\u0000\u0000\u0000\u0b9d\u0b39"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0b40\u0001\u0000\u0000\u0000\u0b9d\u0b47"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0b4d\u0001\u0000\u0000\u0000\u0b9d\u0b50"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0b5f\u0001\u0000\u0000\u0000\u0b9d\u0b69"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0b6f\u0001\u0000\u0000\u0000\u0b9d\u0b75"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0b7b\u0001\u0000\u0000\u0000\u0b9d\u0b81"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0b87\u0001\u0000\u0000\u0000\u0b9d\u0b89"+
		"\u0001\u0000\u0000\u0000\u0b9d\u0b8b\u0001\u0000\u0000\u0000\u0b9e\u0099"+
		"\u0001\u0000\u0000\u0000\u0b9f\u0ba0\u00051\u0000\u0000\u0ba0\u0ba2\u0007"+
		"\u0000\u0000\u0000\u0ba1\u0ba3\u0003\u0264\u0132\u0000\u0ba2\u0ba1\u0001"+
		"\u0000\u0000\u0000\u0ba2\u0ba3\u0001\u0000\u0000\u0000\u0ba3\u0ba4\u0001"+
		"\u0000\u0000\u0000\u0ba4\u0ba5\u0003\u022e\u0117\u0000\u0ba5\u009b\u0001"+
		"\u0000\u0000\u0000\u0ba6\u0ba7\u00051\u0000\u0000\u0ba7\u0ba9\u0005\u0194"+
		"\u0000\u0000\u0ba8\u0baa\u0003\u0264\u0132\u0000\u0ba9\u0ba8\u0001\u0000"+
		"\u0000\u0000\u0ba9\u0baa\u0001\u0000\u0000\u0000\u0baa\u0bab\u0001\u0000"+
		"\u0000\u0000\u0bab\u0bac\u0003\u0212\u0109\u0000\u0bac\u009d\u0001\u0000"+
		"\u0000\u0000\u0bad\u0bae\u00051\u0000\u0000\u0bae\u0bb0\u0005N\u0000\u0000"+
		"\u0baf\u0bb1\u0007\u0001\u0000\u0000\u0bb0\u0baf\u0001\u0000\u0000\u0000"+
		"\u0bb0\u0bb1\u0001\u0000\u0000\u0000\u0bb1\u0bb2\u0001\u0000\u0000\u0000"+
		"\u0bb2\u0bb3\u0003\u022e\u0117\u0000\u0bb3\u0bb4\u0005r\u0000\u0000\u0bb4"+
		"\u0bc1\u0003\u0214\u010a\u0000\u0bb5\u0bb7\u0005\u0147\u0000\u0000\u0bb6"+
		"\u0bb8\u0005\u045a\u0000\u0000\u0bb7\u0bb6\u0001\u0000\u0000\u0000\u0bb7"+
		"\u0bb8\u0001\u0000\u0000\u0000\u0bb8\u0bb9\u0001\u0000\u0000\u0000\u0bb9"+
		"\u0bc0\u0007(\u0000\u0000\u0bba\u0bbc\u0005c\u0000\u0000\u0bbb\u0bbd\u0005"+
		"\u045a\u0000\u0000\u0bbc\u0bbb\u0001\u0000\u0000\u0000\u0bbc\u0bbd\u0001"+
		"\u0000\u0000\u0000\u0bbd\u0bbe\u0001\u0000\u0000\u0000\u0bbe\u0bc0\u0007"+
		"\u0004\u0000\u0000\u0bbf\u0bb5\u0001\u0000\u0000\u0000\u0bbf\u0bba\u0001"+
		"\u0000\u0000\u0000\u0bc0\u0bc3\u0001\u0000\u0000\u0000\u0bc1\u0bbf\u0001"+
		"\u0000\u0000\u0000\u0bc1\u0bc2\u0001\u0000\u0000\u0000\u0bc2\u0bc5\u0001"+
		"\u0000\u0000\u0000\u0bc3\u0bc1\u0001\u0000\u0000\u0000\u0bc4\u0bc6\u0003"+
		"\u0268\u0134\u0000\u0bc5\u0bc4\u0001\u0000\u0000\u0000\u0bc5\u0bc6\u0001"+
		"\u0000\u0000\u0000\u0bc6\u009f\u0001\u0000\u0000\u0000\u0bc7\u0bc8\u0005"+
		"1\u0000\u0000\u0bc8\u0bc9\u0005\u01ce\u0000\u0000\u0bc9\u0bca\u0005F\u0000"+
		"\u0000\u0bca\u0bcb\u0003\u022e\u0117\u0000\u0bcb\u0bcc\u0005\u018e\u0000"+
		"\u0000\u0bcc\u0bcd\u0005\u045a\u0000\u0000\u0bcd\u0bce\u0003\u0224\u0112"+
		"\u0000\u0bce\u00a1\u0001\u0000\u0000\u0000\u0bcf\u0bd0\u00051\u0000\u0000"+
		"\u0bd0\u0bd2\u0005\u007f\u0000\u0000\u0bd1\u0bd3\u0003\u0264\u0132\u0000"+
		"\u0bd2\u0bd1\u0001\u0000\u0000\u0000\u0bd2\u0bd3\u0001\u0000\u0000\u0000"+
		"\u0bd3\u0bd4\u0001\u0000\u0000\u0000\u0bd4\u0bd5\u0003\u0212\u0109\u0000"+
		"\u0bd5\u00a3\u0001\u0000\u0000\u0000\u0bd6\u0bd7\u00051\u0000\u0000\u0bd7"+
		"\u0bd9\u0005\u01a9\u0000\u0000\u0bd8\u0bda\u0003\u0264\u0132\u0000\u0bd9"+
		"\u0bd8\u0001\u0000\u0000\u0000\u0bd9\u0bda\u0001\u0000\u0000\u0000\u0bda"+
		"\u0bdb\u0001\u0000\u0000\u0000\u0bdb\u0bdc\u0003\u0212\u0109\u0000\u0bdc"+
		"\u00a5\u0001\u0000\u0000\u0000\u0bdd\u0bde\u00051\u0000\u0000\u0bde\u0be0"+
		"\u0005\u024f\u0000\u0000\u0bdf\u0be1\u0003\u0264\u0132\u0000\u0be0\u0bdf"+
		"\u0001\u0000\u0000\u0000\u0be0\u0be1\u0001\u0000\u0000\u0000\u0be1\u0be2"+
		"\u0001\u0000\u0000\u0000\u0be2\u0be3\u0003\u022e\u0117\u0000\u0be3\u00a7"+
		"\u0001\u0000\u0000\u0000\u0be4\u0be6\u00051\u0000\u0000\u0be5\u0be7\u0005"+
		"\u0278\u0000\u0000\u0be6\u0be5\u0001\u0000\u0000\u0000\u0be6\u0be7\u0001"+
		"\u0000\u0000\u0000\u0be7\u0be8\u0001\u0000\u0000\u0000\u0be8\u0bea\u0005"+
		"\u00a6\u0000\u0000\u0be9\u0beb\u0003\u0264\u0132\u0000\u0bea\u0be9\u0001"+
		"\u0000\u0000\u0000\u0bea\u0beb\u0001\u0000\u0000\u0000\u0beb\u0bec\u0001"+
		"\u0000\u0000\u0000\u0bec\u0bee\u0003\u0250\u0128\u0000\u0bed\u0bef\u0003"+
		"\u0268\u0134\u0000\u0bee\u0bed\u0001\u0000\u0000\u0000\u0bee\u0bef\u0001"+
		"\u0000\u0000\u0000\u0bef\u0bf1\u0001\u0000\u0000\u0000\u0bf0\u0bf2\u0007"+
		")\u0000\u0000\u0bf1\u0bf0\u0001\u0000\u0000\u0000\u0bf1\u0bf2\u0001\u0000"+
		"\u0000\u0000\u0bf2\u00a9\u0001\u0000\u0000\u0000\u0bf3\u0bf4\u00051\u0000"+
		"\u0000\u0bf4\u0bf5\u0005\u0276\u0000\u0000\u0bf5\u0bfb\u0003\u022e\u0117"+
		"\u0000\u0bf6\u0bf8\u0005\u018e\u0000\u0000\u0bf7\u0bf9\u0005\u045a\u0000"+
		"\u0000\u0bf8\u0bf7\u0001\u0000\u0000\u0000\u0bf8\u0bf9\u0001\u0000\u0000"+
		"\u0000\u0bf9\u0bfa\u0001\u0000\u0000\u0000\u0bfa\u0bfc\u0003\u0224\u0112"+
		"\u0000\u0bfb\u0bf6\u0001\u0000\u0000\u0000\u0bfb\u0bfc\u0001\u0000\u0000"+
		"\u0000\u0bfc\u00ab\u0001\u0000\u0000\u0000\u0bfd\u0bfe\u00051\u0000\u0000"+
		"\u0bfe\u0c00\u0005\u00ab\u0000\u0000\u0bff\u0c01\u0003\u0264\u0132\u0000"+
		"\u0c00\u0bff\u0001\u0000\u0000\u0000\u0c00\u0c01\u0001\u0000\u0000\u0000"+
		"\u0c01\u0c02\u0001\u0000\u0000\u0000\u0c02\u0c03\u0003\u0212\u0109\u0000"+
		"\u0c03\u00ad\u0001\u0000\u0000\u0000\u0c04\u0c05\u00051\u0000\u0000\u0c05"+
		"\u0c07\u0005\u028e\u0000\u0000\u0c06\u0c08\u0003\u0264\u0132\u0000\u0c07"+
		"\u0c06\u0001\u0000\u0000\u0000\u0c07\u0c08\u0001\u0000\u0000\u0000\u0c08"+
		"\u0c09\u0001\u0000\u0000\u0000\u0c09\u0c0e\u0003\u0212\u0109\u0000\u0c0a"+
		"\u0c0b\u0005\u0465\u0000\u0000\u0c0b\u0c0d\u0003\u0212\u0109\u0000\u0c0c"+
		"\u0c0a\u0001\u0000\u0000\u0000\u0c0d\u0c10\u0001\u0000\u0000\u0000\u0c0e"+
		"\u0c0c\u0001\u0000\u0000\u0000\u0c0e\u0c0f\u0001\u0000\u0000\u0000\u0c0f"+
		"\u0c12\u0001\u0000\u0000\u0000\u0c10\u0c0e\u0001\u0000\u0000\u0000\u0c11"+
		"\u0c13\u0007)\u0000\u0000\u0c12\u0c11\u0001\u0000\u0000\u0000\u0c12\u0c13"+
		"\u0001\u0000\u0000\u0000\u0c13\u00af\u0001\u0000\u0000\u0000\u0c14\u0c15"+
		"\u00051\u0000\u0000\u0c15\u0c17\u0005\u0243\u0000\u0000\u0c16\u0c18\u0003"+
		"\u0264\u0132\u0000\u0c17\u0c16\u0001\u0000\u0000\u0000\u0c17\u0c18\u0001"+
		"\u0000\u0000\u0000\u0c18\u0c19\u0001\u0000\u0000\u0000\u0c19\u0c1e\u0003"+
		"\u0216\u010b\u0000\u0c1a\u0c1b\u0005\u0465\u0000\u0000\u0c1b\u0c1d\u0003"+
		"\u0216\u010b\u0000\u0c1c\u0c1a\u0001\u0000\u0000\u0000\u0c1d\u0c20\u0001"+
		"\u0000\u0000\u0000\u0c1e\u0c1c\u0001\u0000\u0000\u0000\u0c1e\u0c1f\u0001"+
		"\u0000\u0000\u0000\u0c1f\u00b1\u0001\u0000\u0000\u0000\u0c20\u0c1e\u0001"+
		"\u0000\u0000\u0000\u0c21\u0c22\u0005\u0095\u0000\u0000\u0c22\u0c23\u0005"+
		"(\u0000\u0000\u0c23\u0c2e\u0005\u0243\u0000\u0000\u0c24\u0c2f\u0005\u0204"+
		"\u0000\u0000\u0c25\u0c2f\u0005\u0006\u0000\u0000\u0c26\u0c2b\u0003\u0216"+
		"\u010b\u0000\u0c27\u0c28\u0005\u0465\u0000\u0000\u0c28\u0c2a\u0003\u0216"+
		"\u010b\u0000\u0c29\u0c27\u0001\u0000\u0000\u0000\u0c2a\u0c2d\u0001\u0000"+
		"\u0000\u0000\u0c2b\u0c29\u0001\u0000\u0000\u0000\u0c2b\u0c2c\u0001\u0000"+
		"\u0000\u0000\u0c2c\u0c2f\u0001\u0000\u0000\u0000\u0c2d\u0c2b\u0001\u0000"+
		"\u0000\u0000\u0c2e\u0c24\u0001\u0000\u0000\u0000\u0c2e\u0c25\u0001\u0000"+
		"\u0000\u0000\u0c2e\u0c26\u0001\u0000\u0000\u0000\u0c2f\u0c30\u0001\u0000"+
		"\u0000\u0000\u0c30\u0c33\u0005\u00a9\u0000\u0000\u0c31\u0c34\u0003\u021c"+
		"\u010e\u0000\u0c32\u0c34\u0003\u022e\u0117\u0000\u0c33\u0c31\u0001\u0000"+
		"\u0000\u0000\u0c33\u0c32\u0001\u0000\u0000\u0000\u0c34\u0c3c\u0001\u0000"+
		"\u0000\u0000\u0c35\u0c38\u0005\u0465\u0000\u0000\u0c36\u0c39\u0003\u021c"+
		"\u010e\u0000\u0c37\u0c39\u0003\u022e\u0117\u0000\u0c38\u0c36\u0001\u0000"+
		"\u0000\u0000\u0c38\u0c37\u0001\u0000\u0000\u0000\u0c39\u0c3b\u0001\u0000"+
		"\u0000\u0000\u0c3a\u0c35\u0001\u0000\u0000\u0000\u0c3b\u0c3e\u0001\u0000"+
		"\u0000\u0000\u0c3c\u0c3a\u0001\u0000\u0000\u0000\u0c3c\u0c3d\u0001\u0000"+
		"\u0000\u0000\u0c3d\u0c43\u0001\u0000\u0000\u0000\u0c3e\u0c3c\u0001\u0000"+
		"\u0000\u0000\u0c3f\u0c40\u0005\u0095\u0000\u0000\u0c40\u0c41\u0005\u0243"+
		"\u0000\u0000\u0c41\u0c43\u0003\u01a6\u00d3\u0000\u0c42\u0c21\u0001\u0000"+
		"\u0000\u0000\u0c42\u0c3f\u0001\u0000\u0000\u0000\u0c43\u00b3\u0001\u0000"+
		"\u0000\u0000\u0c44\u0c46\u00051\u0000\u0000\u0c45\u0c47\u0005\u0278\u0000"+
		"\u0000\u0c46\u0c45\u0001\u0000\u0000\u0000\u0c46\u0c47\u0001\u0000\u0000"+
		"\u0000\u0c47\u0c48\u0001\u0000\u0000\u0000\u0c48\u0c4a\u0005\u024e\u0000"+
		"\u0000\u0c49\u0c4b\u0003\u0264\u0132\u0000\u0c4a\u0c49\u0001\u0000\u0000"+
		"\u0000\u0c4a\u0c4b\u0001\u0000\u0000\u0000\u0c4b\u0c4d\u0001\u0000\u0000"+
		"\u0000\u0c4c\u0c4e\u0005\u0003\u0000\u0000\u0c4d\u0c4c\u0001\u0000\u0000"+
		"\u0000\u0c4d\u0c4e\u0001\u0000\u0000\u0000\u0c4e\u0c4f\u0001\u0000\u0000"+
		"\u0000\u0c4f\u0c54\u0003\u0212\u0109\u0000\u0c50\u0c51\u0005\u0465\u0000"+
		"\u0000\u0c51\u0c53\u0003\u0212\u0109\u0000\u0c52\u0c50\u0001\u0000\u0000"+
		"\u0000\u0c53\u0c56\u0001\u0000\u0000\u0000\u0c54\u0c52\u0001\u0000\u0000"+
		"\u0000\u0c54\u0c55\u0001\u0000\u0000\u0000\u0c55\u00b5\u0001\u0000\u0000"+
		"\u0000\u0c56\u0c54\u0001\u0000\u0000\u0000\u0c57\u0c58\u0005\u0087\u0000"+
		"\u0000\u0c58\u0c59\u0005\u00a6\u0000\u0000\u0c59\u0c5e\u0003\u00b8\\\u0000"+
		"\u0c5a\u0c5b\u0005\u0465\u0000\u0000\u0c5b\u0c5d\u0003\u00b8\\\u0000\u0c5c"+
		"\u0c5a\u0001\u0000\u0000\u0000\u0c5d\u0c60\u0001\u0000\u0000\u0000\u0c5e"+
		"\u0c5c\u0001\u0000\u0000\u0000\u0c5e\u0c5f\u0001\u0000\u0000\u0000\u0c5f"+
		"\u00b7\u0001\u0000\u0000\u0000\u0c60\u0c5e\u0001\u0000\u0000\u0000\u0c61"+
		"\u0c63\u0003\u0214\u010a\u0000\u0c62\u0c64\u0003\u0268\u0134\u0000\u0c63"+
		"\u0c62\u0001\u0000\u0000\u0000\u0c63\u0c64\u0001\u0000\u0000\u0000\u0c64"+
		"\u0c65\u0001\u0000\u0000\u0000\u0c65\u0c66\u0005\u00a9\u0000\u0000\u0c66"+
		"\u0c67\u0003\u0214\u010a\u0000\u0c67\u00b9\u0001\u0000\u0000\u0000\u0c68"+
		"\u0c6a\u0005\u027f\u0000\u0000\u0c69\u0c6b\u0005\u00a6\u0000\u0000\u0c6a"+
		"\u0c69\u0001\u0000\u0000\u0000\u0c6a\u0c6b\u0001\u0000\u0000\u0000\u0c6b"+
		"\u0c6c\u0001\u0000\u0000\u0000\u0c6c\u0c6e\u0003\u0214\u010a\u0000\u0c6d"+
		"\u0c6f\u0003\u0268\u0134\u0000\u0c6e\u0c6d\u0001\u0000\u0000\u0000\u0c6e"+
		"\u0c6f\u0001\u0000\u0000\u0000\u0c6f\u00bb\u0001\u0000\u0000\u0000\u0c70"+
		"\u0c71\u0005\u0013\u0000\u0000\u0c71\u0c78\u0003\u0212\u0109\u0000\u0c72"+
		"\u0c75\u0005\u0463\u0000\u0000\u0c73\u0c76\u0003\u0258\u012c\u0000\u0c74"+
		"\u0c76\u0003\u0254\u012a\u0000\u0c75\u0c73\u0001\u0000\u0000\u0000\u0c75"+
		"\u0c74\u0001\u0000\u0000\u0000\u0c75\u0c76\u0001\u0000\u0000\u0000\u0c76"+
		"\u0c77\u0001\u0000\u0000\u0000\u0c77\u0c79\u0005\u0464\u0000\u0000\u0c78"+
		"\u0c72\u0001\u0000\u0000\u0000\u0c78\u0c79\u0001\u0000\u0000\u0000\u0c79"+
		"\u00bd\u0001\u0000\u0000\u0000\u0c7a\u0c7d\u0003\u00d8l\u0000\u0c7b\u0c7d"+
		"\u0003\u00dam\u0000\u0c7c\u0c7a\u0001\u0000\u0000\u0000\u0c7c\u0c7b\u0001"+
		"\u0000\u0000\u0000\u0c7d\u00bf\u0001\u0000\u0000\u0000\u0c7e\u0c7f\u0005"+
		"\u0186\u0000\u0000\u0c7f\u0c80\u0003\u0254\u012a\u0000\u0c80\u00c1\u0001"+
		"\u0000\u0000\u0000\u0c81\u0c86\u0003\u00dcn\u0000\u0c82\u0c86\u0003\u00de"+
		"o\u0000\u0c83\u0c86\u0003\u00e0p\u0000\u0c84\u0c86\u0003\u00e2q\u0000"+
		"\u0c85\u0c81\u0001\u0000\u0000\u0000\u0c85\u0c82\u0001\u0000\u0000\u0000"+
		"\u0c85\u0c83\u0001\u0000\u0000\u0000\u0c85\u0c84\u0001\u0000\u0000\u0000"+
		"\u0c86\u00c3\u0001\u0000\u0000\u0000\u0c87\u0c89\u0005R\u0000\u0000\u0c88"+
		"\u0c8a\u0007*\u0000\u0000\u0c89\u0c88\u0001\u0000\u0000\u0000\u0c89\u0c8a"+
		"\u0001\u0000\u0000\u0000\u0c8a\u0c8c\u0001\u0000\u0000\u0000\u0c8b\u0c8d"+
		"\u0005K\u0000\u0000\u0c8c\u0c8b\u0001\u0000\u0000\u0000\u0c8c\u0c8d\u0001"+
		"\u0000\u0000\u0000\u0c8d\u0c8f\u0001\u0000\u0000\u0000\u0c8e\u0c90\u0005"+
		"T\u0000\u0000\u0c8f\u0c8e\u0001\u0000\u0000\u0000\u0c8f\u0c90\u0001\u0000"+
		"\u0000\u0000\u0c90\u0c91\u0001\u0000\u0000\u0000\u0c91\u0c98\u0003\u0214"+
		"\u010a\u0000\u0c92\u0c93\u0005}\u0000\u0000\u0c93\u0c95\u0005\u0463\u0000"+
		"\u0000\u0c94\u0c96\u0003\u024e\u0127\u0000\u0c95\u0c94\u0001\u0000\u0000"+
		"\u0000\u0c95\u0c96\u0001\u0000\u0000\u0000\u0c96\u0c97\u0001\u0000\u0000"+
		"\u0000\u0c97\u0c99\u0005\u0464\u0000\u0000\u0c98\u0c92\u0001\u0000\u0000"+
		"\u0000\u0c98\u0c99\u0001\u0000\u0000\u0000\u0c99\u0caa\u0001\u0000\u0000"+
		"\u0000\u0c9a\u0c9b\u0005\u0463\u0000\u0000\u0c9b\u0c9c\u0003\u024e\u0127"+
		"\u0000\u0c9c\u0c9d\u0005\u0464\u0000\u0000\u0c9d\u0c9f\u0001\u0000\u0000"+
		"\u0000\u0c9e\u0c9a\u0001\u0000\u0000\u0000\u0c9e\u0c9f\u0001\u0000\u0000"+
		"\u0000\u0c9f\u0ca0\u0001\u0000\u0000\u0000\u0ca0\u0cab\u0003\u00d0h\u0000"+
		"\u0ca1\u0ca2\u0005\u0095\u0000\u0000\u0ca2\u0ca7\u0003\u00d2i\u0000\u0ca3"+
		"\u0ca4\u0005\u0465\u0000\u0000\u0ca4\u0ca6\u0003\u00d2i\u0000\u0ca5\u0ca3"+
		"\u0001\u0000\u0000\u0000\u0ca6\u0ca9\u0001\u0000\u0000\u0000\u0ca7\u0ca5"+
		"\u0001\u0000\u0000\u0000\u0ca7\u0ca8\u0001\u0000\u0000\u0000\u0ca8\u0cab"+
		"\u0001\u0000\u0000\u0000\u0ca9\u0ca7\u0001\u0000\u0000\u0000\u0caa\u0c9e"+
		"\u0001\u0000\u0000\u0000\u0caa\u0ca1\u0001\u0000\u0000\u0000\u0cab\u0cb8"+
		"\u0001\u0000\u0000\u0000\u0cac\u0cad\u0005r\u0000\u0000\u0cad\u0cae\u0005"+
		"\u0188\u0000\u0000\u0cae\u0caf\u0005X\u0000\u0000\u0caf\u0cb0\u0005\u00b2"+
		"\u0000\u0000\u0cb0\u0cb5\u0003\u00d2i\u0000\u0cb1\u0cb2\u0005\u0465\u0000"+
		"\u0000\u0cb2\u0cb4\u0003\u00d2i\u0000\u0cb3\u0cb1\u0001\u0000\u0000\u0000"+
		"\u0cb4\u0cb7\u0001\u0000\u0000\u0000\u0cb5\u0cb3\u0001\u0000\u0000\u0000"+
		"\u0cb5\u0cb6\u0001\u0000\u0000\u0000\u0cb6\u0cb9\u0001\u0000\u0000\u0000"+
		"\u0cb7\u0cb5\u0001\u0000\u0000\u0000\u0cb8\u0cac\u0001\u0000\u0000\u0000"+
		"\u0cb8\u0cb9\u0001\u0000\u0000\u0000\u0cb9\u00c5\u0001\u0000\u0000\u0000"+
		"\u0cba\u0cbb\u0005b\u0000\u0000\u0cbb\u0cbd\u0005\u017b\u0000\u0000\u0cbc"+
		"\u0cbe\u0007+\u0000\u0000\u0cbd\u0cbc\u0001\u0000\u0000\u0000\u0cbd\u0cbe"+
		"\u0001\u0000\u0000\u0000\u0cbe\u0cc0\u0001\u0000\u0000\u0000\u0cbf\u0cc1"+
		"\u0005\u01cd\u0000\u0000\u0cc0\u0cbf\u0001\u0000\u0000\u0000\u0cc0\u0cc1"+
		"\u0001\u0000\u0000\u0000\u0cc1\u0cc2\u0001\u0000\u0000\u0000\u0cc2\u0cc3"+
		"\u0005O\u0000\u0000\u0cc3\u0cc5\u0005\u0472\u0000\u0000\u0cc4\u0cc6\u0007"+
		"\u0006\u0000\u0000\u0cc5\u0cc4\u0001\u0000\u0000\u0000\u0cc5\u0cc6\u0001"+
		"\u0000\u0000\u0000\u0cc6\u0cc7\u0001\u0000\u0000\u0000\u0cc7\u0cc8\u0005"+
		"T\u0000\u0000\u0cc8\u0cc9\u0005\u00a6\u0000\u0000\u0cc9\u0ccf\u0003\u0214"+
		"\u010a\u0000\u0cca\u0ccb\u0005}\u0000\u0000\u0ccb\u0ccc\u0005\u0463\u0000"+
		"\u0000\u0ccc\u0ccd\u0003\u024e\u0127\u0000\u0ccd\u0cce\u0005\u0464\u0000"+
		"\u0000\u0cce\u0cd0\u0001\u0000\u0000\u0000\u0ccf\u0cca\u0001\u0000\u0000"+
		"\u0000\u0ccf\u0cd0\u0001\u0000\u0000\u0000\u0cd0\u0cd4\u0001\u0000\u0000"+
		"\u0000\u0cd1\u0cd2\u0005\u0018\u0000\u0000\u0cd2\u0cd3\u0005\u0095\u0000"+
		"\u0000\u0cd3\u0cd5\u0003\u0220\u0110\u0000\u0cd4\u0cd1\u0001\u0000\u0000"+
		"\u0000\u0cd4\u0cd5\u0001\u0000\u0000\u0000\u0cd5\u0cdc\u0001\u0000\u0000"+
		"\u0000\u0cd6\u0cd8\u0007,\u0000\u0000\u0cd7\u0cd9\u0003\u010c\u0086\u0000"+
		"\u0cd8\u0cd7\u0001\u0000\u0000\u0000\u0cd9\u0cda\u0001\u0000\u0000\u0000"+
		"\u0cda\u0cd8\u0001\u0000\u0000\u0000\u0cda\u0cdb\u0001\u0000\u0000\u0000"+
		"\u0cdb\u0cdd\u0001\u0000\u0000\u0000\u0cdc\u0cd6\u0001\u0000\u0000\u0000"+
		"\u0cdc\u0cdd\u0001\u0000\u0000\u0000\u0cdd\u0ce4\u0001\u0000\u0000\u0000"+
		"\u0cde\u0ce0\u0005a\u0000\u0000\u0cdf\u0ce1\u0003\u010e\u0087\u0000\u0ce0"+
		"\u0cdf\u0001\u0000\u0000\u0000\u0ce1\u0ce2\u0001\u0000\u0000\u0000\u0ce2"+
		"\u0ce0\u0001\u0000\u0000\u0000\u0ce2\u0ce3\u0001\u0000\u0000\u0000\u0ce3"+
		"\u0ce5\u0001\u0000\u0000\u0000\u0ce4\u0cde\u0001\u0000\u0000\u0000\u0ce4"+
		"\u0ce5\u0001\u0000\u0000\u0000\u0ce5\u0cea\u0001\u0000\u0000\u0000\u0ce6"+
		"\u0ce7\u0005K\u0000\u0000\u0ce7\u0ce8\u0003\u0234\u011a\u0000\u0ce8\u0ce9"+
		"\u0007-\u0000\u0000\u0ce9\u0ceb\u0001\u0000\u0000\u0000\u0cea\u0ce6\u0001"+
		"\u0000\u0000\u0000\u0cea\u0ceb\u0001\u0000\u0000\u0000\u0ceb\u0cf7\u0001"+
		"\u0000\u0000\u0000\u0cec\u0ced\u0005\u0463\u0000\u0000\u0ced\u0cf2\u0003"+
		"\u00d4j\u0000\u0cee\u0cef\u0005\u0465\u0000\u0000\u0cef\u0cf1\u0003\u00d4"+
		"j\u0000\u0cf0\u0cee\u0001\u0000\u0000\u0000\u0cf1\u0cf4\u0001\u0000\u0000"+
		"\u0000\u0cf2\u0cf0\u0001\u0000\u0000\u0000\u0cf2\u0cf3\u0001\u0000\u0000"+
		"\u0000\u0cf3\u0cf5\u0001\u0000\u0000\u0000\u0cf4\u0cf2\u0001\u0000\u0000"+
		"\u0000\u0cf5\u0cf6\u0005\u0464\u0000\u0000\u0cf6\u0cf8\u0001\u0000\u0000"+
		"\u0000\u0cf7\u0cec\u0001\u0000\u0000\u0000\u0cf7\u0cf8\u0001\u0000\u0000"+
		"\u0000\u0cf8\u0d02\u0001\u0000\u0000\u0000\u0cf9\u0cfa\u0005\u0095\u0000"+
		"\u0000\u0cfa\u0cff\u0003\u00d2i\u0000\u0cfb\u0cfc\u0005\u0465\u0000\u0000"+
		"\u0cfc\u0cfe\u0003\u00d2i\u0000\u0cfd\u0cfb\u0001\u0000\u0000\u0000\u0cfe"+
		"\u0d01\u0001\u0000\u0000\u0000\u0cff\u0cfd\u0001\u0000\u0000\u0000\u0cff"+
		"\u0d00\u0001\u0000\u0000\u0000\u0d00\u0d03\u0001\u0000\u0000\u0000\u0d01"+
		"\u0cff\u0001\u0000\u0000\u0000\u0d02\u0cf9\u0001\u0000\u0000\u0000\u0d02"+
		"\u0d03\u0001\u0000\u0000\u0000\u0d03\u00c7\u0001\u0000\u0000\u0000\u0d04"+
		"\u0d05\u0005b\u0000\u0000\u0d05\u0d07\u0005\u0299\u0000\u0000\u0d06\u0d08"+
		"\u0007+\u0000\u0000\u0d07\u0d06\u0001\u0000\u0000\u0000\u0d07\u0d08\u0001"+
		"\u0000\u0000\u0000\u0d08\u0d0a\u0001\u0000\u0000\u0000\u0d09\u0d0b\u0005"+
		"\u01cd\u0000\u0000\u0d0a\u0d09\u0001\u0000\u0000\u0000\u0d0a\u0d0b\u0001"+
		"\u0000\u0000\u0000\u0d0b\u0d0c\u0001\u0000\u0000\u0000\u0d0c\u0d0d\u0005"+
		"O\u0000\u0000\u0d0d\u0d0f\u0005\u0472\u0000\u0000\u0d0e\u0d10\u0007\u0006"+
		"\u0000\u0000\u0d0f\u0d0e\u0001\u0000\u0000\u0000\u0d0f\u0d10\u0001\u0000"+
		"\u0000\u0000\u0d10\u0d11\u0001\u0000\u0000\u0000\u0d11\u0d12\u0005T\u0000"+
		"\u0000\u0d12\u0d13\u0005\u00a6\u0000\u0000\u0d13\u0d17\u0003\u0214\u010a"+
		"\u0000\u0d14\u0d15\u0005\u0018\u0000\u0000\u0d15\u0d16\u0005\u0095\u0000"+
		"\u0000\u0d16\u0d18\u0003\u0220\u0110\u0000\u0d17\u0d14\u0001\u0000\u0000"+
		"\u0000\u0d17\u0d18\u0001\u0000\u0000\u0000\u0d18\u0d1f\u0001\u0000\u0000"+
		"\u0000\u0d19\u0d1a\u0005\u0248\u0000\u0000\u0d1a\u0d1b\u0005\u01b3\u0000"+
		"\u0000\u0d1b\u0d1c\u0005\u0012\u0000\u0000\u0d1c\u0d1d\u0005\u045c\u0000"+
		"\u0000\u0d1d\u0d1e\u0005\u0472\u0000\u0000\u0d1e\u0d20\u0005\u045b\u0000"+
		"\u0000\u0d1f\u0d19\u0001\u0000\u0000\u0000\u0d1f\u0d20\u0001\u0000\u0000"+
		"\u0000\u0d20\u0d25\u0001\u0000\u0000\u0000\u0d21\u0d22\u0005K\u0000\u0000"+
		"\u0d22\u0d23\u0003\u0234\u011a\u0000\u0d23\u0d24\u0007-\u0000\u0000\u0d24"+
		"\u0d26\u0001\u0000\u0000\u0000\u0d25\u0d21\u0001\u0000\u0000\u0000\u0d25"+
		"\u0d26\u0001\u0000\u0000\u0000\u0d26\u0d32\u0001\u0000\u0000\u0000\u0d27"+
		"\u0d28\u0005\u0463\u0000\u0000\u0d28\u0d2d\u0003\u00d4j\u0000\u0d29\u0d2a"+
		"\u0005\u0465\u0000\u0000\u0d2a\u0d2c\u0003\u00d4j\u0000\u0d2b\u0d29\u0001"+
		"\u0000\u0000\u0000\u0d2c\u0d2f\u0001\u0000\u0000\u0000\u0d2d\u0d2b\u0001"+
		"\u0000\u0000\u0000\u0d2d\u0d2e\u0001\u0000\u0000\u0000\u0d2e\u0d30\u0001"+
		"\u0000\u0000\u0000\u0d2f\u0d2d\u0001\u0000\u0000\u0000\u0d30\u0d31\u0005"+
		"\u0464\u0000\u0000\u0d31\u0d33\u0001\u0000\u0000\u0000\u0d32\u0d27\u0001"+
		"\u0000\u0000\u0000\u0d32\u0d33\u0001\u0000\u0000\u0000\u0d33\u0d3d\u0001"+
		"\u0000\u0000\u0000\u0d34\u0d35\u0005\u0095\u0000\u0000\u0d35\u0d3a\u0003"+
		"\u00d2i\u0000\u0d36\u0d37\u0005\u0465\u0000\u0000\u0d37\u0d39\u0003\u00d2"+
		"i\u0000\u0d38\u0d36\u0001\u0000\u0000\u0000\u0d39\u0d3c\u0001\u0000\u0000"+
		"\u0000\u0d3a\u0d38\u0001\u0000\u0000\u0000\u0d3a\u0d3b\u0001\u0000\u0000"+
		"\u0000\u0d3b\u0d3e\u0001\u0000\u0000\u0000\u0d3c\u0d3a\u0001\u0000\u0000"+
		"\u0000\u0d3d\u0d34\u0001\u0000\u0000\u0000\u0d3d\u0d3e\u0001\u0000\u0000"+
		"\u0000\u0d3e\u00c9\u0001\u0000\u0000\u0000\u0d3f\u0d41\u0005\u0089\u0000"+
		"\u0000\u0d40\u0d42\u0007.\u0000\u0000\u0d41\u0d40\u0001\u0000\u0000\u0000"+
		"\u0d41\u0d42\u0001\u0000\u0000\u0000\u0d42\u0d44\u0001\u0000\u0000\u0000"+
		"\u0d43\u0d45\u0005T\u0000\u0000\u0d44\u0d43\u0001\u0000\u0000\u0000\u0d44"+
		"\u0d45\u0001\u0000\u0000\u0000\u0d45\u0d46\u0001\u0000\u0000\u0000\u0d46"+
		"\u0d4c\u0003\u0214\u010a\u0000\u0d47\u0d48\u0005}\u0000\u0000\u0d48\u0d49"+
		"\u0005\u0463\u0000\u0000\u0d49\u0d4a\u0003\u024e\u0127\u0000\u0d4a\u0d4b"+
		"\u0005\u0464\u0000\u0000\u0d4b\u0d4d\u0001\u0000\u0000\u0000\u0d4c\u0d47"+
		"\u0001\u0000\u0000\u0000\u0d4c\u0d4d\u0001\u0000\u0000\u0000\u0d4d\u0d5e"+
		"\u0001\u0000\u0000\u0000\u0d4e\u0d4f\u0005\u0463\u0000\u0000\u0d4f\u0d50"+
		"\u0003\u024e\u0127\u0000\u0d50\u0d51\u0005\u0464\u0000\u0000\u0d51\u0d53"+
		"\u0001\u0000\u0000\u0000\u0d52\u0d4e\u0001\u0000\u0000\u0000\u0d52\u0d53"+
		"\u0001\u0000\u0000\u0000\u0d53\u0d54\u0001\u0000\u0000\u0000\u0d54\u0d5f"+
		"\u0003\u00d0h\u0000\u0d55\u0d56\u0005\u0095\u0000\u0000\u0d56\u0d5b\u0003"+
		"\u00d2i\u0000\u0d57\u0d58\u0005\u0465\u0000\u0000\u0d58\u0d5a\u0003\u00d2"+
		"i\u0000\u0d59\u0d57\u0001\u0000\u0000\u0000\u0d5a\u0d5d\u0001\u0000\u0000"+
		"\u0000\u0d5b\u0d59\u0001\u0000\u0000\u0000\u0d5b\u0d5c\u0001\u0000\u0000"+
		"\u0000\u0d5c\u0d5f\u0001\u0000\u0000\u0000\u0d5d\u0d5b\u0001\u0000\u0000"+
		"\u0000\u0d5e\u0d52\u0001\u0000\u0000\u0000\u0d5e\u0d55\u0001\u0000\u0000"+
		"\u0000\u0d5f\u00cb\u0001\u0000\u0000\u0000\u0d60\u0d62\u0003\u00fc~\u0000"+
		"\u0d61\u0d63\u0003\u00d6k\u0000\u0d62\u0d61\u0001\u0000\u0000\u0000\u0d62"+
		"\u0d63\u0001\u0000\u0000\u0000\u0d63\u0d98\u0001\u0000\u0000\u0000\u0d64"+
		"\u0d66\u0003\u00f8|\u0000\u0d65\u0d67\u0003\u00d6k\u0000\u0d66\u0d65\u0001"+
		"\u0000\u0000\u0000\u0d66\u0d67\u0001\u0000\u0000\u0000\u0d67\u0d98\u0001"+
		"\u0000\u0000\u0000\u0d68\u0d6a\u0003\u00fe\u007f\u0000\u0d69\u0d6b\u0003"+
		"\u0102\u0081\u0000\u0d6a\u0d69\u0001\u0000\u0000\u0000\u0d6b\u0d6c\u0001"+
		"\u0000\u0000\u0000\u0d6c\u0d6a\u0001\u0000\u0000\u0000\u0d6c\u0d6d\u0001"+
		"\u0000\u0000\u0000\u0d6d\u0d76\u0001\u0000\u0000\u0000\u0d6e\u0d70\u0005"+
		"\u00ae\u0000\u0000\u0d6f\u0d71\u0007/\u0000\u0000\u0d70\u0d6f\u0001\u0000"+
		"\u0000\u0000\u0d70\u0d71\u0001\u0000\u0000\u0000\u0d71\u0d74\u0001\u0000"+
		"\u0000\u0000\u0d72\u0d75\u0003\u00fc~\u0000\u0d73\u0d75\u0003\u00f8|\u0000"+
		"\u0d74\u0d72\u0001\u0000\u0000\u0000\u0d74\u0d73\u0001\u0000\u0000\u0000"+
		"\u0d75\u0d77\u0001\u0000\u0000\u0000\u0d76\u0d6e\u0001\u0000\u0000\u0000"+
		"\u0d76\u0d77\u0001\u0000\u0000\u0000\u0d77\u0d79\u0001\u0000\u0000\u0000"+
		"\u0d78\u0d7a\u0003\u00e8t\u0000\u0d79\u0d78\u0001\u0000\u0000\u0000\u0d79"+
		"\u0d7a\u0001\u0000\u0000\u0000\u0d7a\u0d7c\u0001\u0000\u0000\u0000\u0d7b"+
		"\u0d7d\u0003\u011a\u008d\u0000\u0d7c\u0d7b\u0001\u0000\u0000\u0000\u0d7c"+
		"\u0d7d\u0001\u0000\u0000\u0000\u0d7d\u0d7f\u0001\u0000\u0000\u0000\u0d7e"+
		"\u0d80\u0003\u00d6k\u0000\u0d7f\u0d7e\u0001\u0000\u0000\u0000\u0d7f\u0d80"+
		"\u0001\u0000\u0000\u0000\u0d80\u0d98\u0001\u0000\u0000\u0000\u0d81\u0d83"+
		"\u0003\u00fa}\u0000\u0d82\u0d84\u0003\u0100\u0080\u0000\u0d83\u0d82\u0001"+
		"\u0000\u0000\u0000\u0d84\u0d85\u0001\u0000\u0000\u0000\u0d85\u0d83\u0001"+
		"\u0000\u0000\u0000\u0d85\u0d86\u0001\u0000\u0000\u0000\u0d86\u0d8c\u0001"+
		"\u0000\u0000\u0000\u0d87\u0d89\u0005\u00ae\u0000\u0000\u0d88\u0d8a\u0007"+
		"/\u0000\u0000\u0d89\u0d88\u0001\u0000\u0000\u0000\u0d89\u0d8a\u0001\u0000"+
		"\u0000\u0000\u0d8a\u0d8b\u0001\u0000\u0000\u0000\u0d8b\u0d8d\u0003\u00f8"+
		"|\u0000\u0d8c\u0d87\u0001\u0000\u0000\u0000\u0d8c\u0d8d\u0001\u0000\u0000"+
		"\u0000\u0d8d\u0d8f\u0001\u0000\u0000\u0000\u0d8e\u0d90\u0003\u00e8t\u0000"+
		"\u0d8f\u0d8e\u0001\u0000\u0000\u0000\u0d8f\u0d90\u0001\u0000\u0000\u0000"+
		"\u0d90\u0d92\u0001\u0000\u0000\u0000\u0d91\u0d93\u0003\u011a\u008d\u0000"+
		"\u0d92\u0d91\u0001\u0000\u0000\u0000\u0d92\u0d93\u0001\u0000\u0000\u0000"+
		"\u0d93\u0d95\u0001\u0000\u0000\u0000\u0d94\u0d96\u0003\u00d6k\u0000\u0d95"+
		"\u0d94\u0001\u0000\u0000\u0000\u0d95\u0d96\u0001\u0000\u0000\u0000\u0d96"+
		"\u0d98\u0001\u0000\u0000\u0000\u0d97\u0d60\u0001\u0000\u0000\u0000\u0d97"+
		"\u0d64\u0001\u0000\u0000\u0000\u0d97\u0d68\u0001\u0000\u0000\u0000\u0d97"+
		"\u0d81\u0001\u0000\u0000\u0000\u0d98\u00cd\u0001\u0000\u0000\u0000\u0d99"+
		"\u0d9c\u0003\u00e4r\u0000\u0d9a\u0d9c\u0003\u00e6s\u0000\u0d9b\u0d99\u0001"+
		"\u0000\u0000\u0000\u0d9b\u0d9a\u0001\u0000\u0000\u0000\u0d9c\u00cf\u0001"+
		"\u0000\u0000\u0000\u0d9d\u0db0\u0003\u00ccf\u0000\u0d9e\u0d9f\u00070\u0000"+
		"\u0000\u0d9f\u0da1\u0005\u0463\u0000\u0000\u0da0\u0da2\u0003\u0256\u012b"+
		"\u0000\u0da1\u0da0\u0001\u0000\u0000\u0000\u0da1\u0da2\u0001\u0000\u0000"+
		"\u0000\u0da2\u0da3\u0001\u0000\u0000\u0000\u0da3\u0dac\u0005\u0464\u0000"+
		"\u0000\u0da4\u0da5\u0005\u0465\u0000\u0000\u0da5\u0da7\u0005\u0463\u0000"+
		"\u0000\u0da6\u0da8\u0003\u0256\u012b\u0000\u0da7\u0da6\u0001\u0000\u0000"+
		"\u0000\u0da7\u0da8\u0001\u0000\u0000\u0000\u0da8\u0da9\u0001\u0000\u0000"+
		"\u0000\u0da9\u0dab\u0005\u0464\u0000\u0000\u0daa\u0da4\u0001\u0000\u0000"+
		"\u0000\u0dab\u0dae\u0001\u0000\u0000\u0000\u0dac\u0daa\u0001\u0000\u0000"+
		"\u0000\u0dac\u0dad\u0001\u0000\u0000\u0000\u0dad\u0db0\u0001\u0000\u0000"+
		"\u0000\u0dae\u0dac\u0001\u0000\u0000\u0000\u0daf\u0d9d\u0001\u0000\u0000"+
		"\u0000\u0daf\u0d9e\u0001\u0000\u0000\u0000\u0db0\u00d1\u0001\u0000\u0000"+
		"\u0000\u0db1\u0db2\u0003\u0218\u010c\u0000\u0db2\u0db5\u0005\u045a\u0000"+
		"\u0000\u0db3\u0db6\u0003\u0294\u014a\u0000\u0db4\u0db6\u0005(\u0000\u0000"+
		"\u0db5\u0db3\u0001\u0000\u0000\u0000\u0db5\u0db4\u0001\u0000\u0000\u0000"+
		"\u0db6\u00d3\u0001\u0000\u0000\u0000\u0db7\u0dba\u0003\u022e\u0117\u0000"+
		"\u0db8\u0dba\u0005\u047f\u0000\u0000\u0db9\u0db7\u0001\u0000\u0000\u0000"+
		"\u0db9\u0db8\u0001\u0000\u0000\u0000\u0dba\u00d5\u0001\u0000\u0000\u0000"+
		"\u0dbb\u0dbc\u0005>\u0000\u0000\u0dbc\u0dc2\u0005\u00b2\u0000\u0000\u0dbd"+
		"\u0dbe\u0005c\u0000\u0000\u0dbe\u0dbf\u0005M\u0000\u0000\u0dbf\u0dc0\u0005"+
		"\u0251\u0000\u0000\u0dc0\u0dc2\u0005\u01f2\u0000\u0000\u0dc1\u0dbb\u0001"+
		"\u0000\u0000\u0000\u0dc1\u0dbd\u0001\u0000\u0000\u0000\u0dc2\u0dc4\u0001"+
		"\u0000\u0000\u0000\u0dc3\u0dc5\u0003\u026a\u0135\u0000\u0dc4\u0dc3\u0001"+
		"\u0000\u0000\u0000\u0dc4\u0dc5\u0001\u0000\u0000\u0000\u0dc5\u00d7\u0001"+
		"\u0000\u0000\u0000\u0dc6\u0dc8\u0005*\u0000\u0000\u0dc7\u0dc9\u0005f\u0000"+
		"\u0000\u0dc8\u0dc7\u0001\u0000\u0000\u0000\u0dc8\u0dc9\u0001\u0000\u0000"+
		"\u0000\u0dc9\u0dcb\u0001\u0000\u0000\u0000\u0dca\u0dcc\u0005\u0228\u0000"+
		"\u0000\u0dcb\u0dca\u0001\u0000\u0000\u0000\u0dcb\u0dcc\u0001\u0000\u0000"+
		"\u0000\u0dcc\u0dce\u0001\u0000\u0000\u0000\u0dcd\u0dcf\u0005K\u0000\u0000"+
		"\u0dce\u0dcd\u0001\u0000\u0000\u0000\u0dce\u0dcf\u0001\u0000\u0000\u0000"+
		"\u0dcf\u0dd0\u0001\u0000\u0000\u0000\u0dd0\u0dd1\u0005A\u0000\u0000\u0dd1"+
		"\u0dd7\u0003\u0214\u010a\u0000\u0dd2\u0dd3\u0005}\u0000\u0000\u0dd3\u0dd4"+
		"\u0005\u0463\u0000\u0000\u0dd4\u0dd5\u0003\u024e\u0127\u0000\u0dd5\u0dd6"+
		"\u0005\u0464\u0000\u0000\u0dd6\u0dd8\u0001\u0000\u0000\u0000\u0dd7\u0dd2"+
		"\u0001\u0000\u0000\u0000\u0dd7\u0dd8\u0001\u0000\u0000\u0000\u0dd8\u0ddb"+
		"\u0001\u0000\u0000\u0000\u0dd9\u0dda\u0005\u00b8\u0000\u0000\u0dda\u0ddc"+
		"\u0003\u0294\u014a\u0000\u0ddb\u0dd9\u0001\u0000\u0000\u0000\u0ddb\u0ddc"+
		"\u0001\u0000\u0000\u0000\u0ddc\u0dde\u0001\u0000\u0000\u0000\u0ddd\u0ddf"+
		"\u0003\u00e8t\u0000\u0dde\u0ddd\u0001\u0000\u0000\u0000\u0dde\u0ddf\u0001"+
		"\u0000\u0000\u0000\u0ddf\u0de2\u0001\u0000\u0000\u0000\u0de0\u0de1\u0005"+
		"_\u0000\u0000\u0de1\u0de3\u0003\u011c\u008e\u0000\u0de2\u0de0\u0001\u0000"+
		"\u0000\u0000\u0de2\u0de3\u0001\u0000\u0000\u0000\u0de3\u00d9\u0001\u0000"+
		"\u0000\u0000\u0de4\u0de6\u0005*\u0000\u0000\u0de5\u0de7\u0005f\u0000\u0000"+
		"\u0de6\u0de5\u0001\u0000\u0000\u0000\u0de6\u0de7\u0001\u0000\u0000\u0000"+
		"\u0de7\u0de9\u0001\u0000\u0000\u0000\u0de8\u0dea\u0005\u0228\u0000\u0000"+
		"\u0de9\u0de8\u0001\u0000\u0000\u0000\u0de9\u0dea\u0001\u0000\u0000\u0000"+
		"\u0dea\u0dec\u0001\u0000\u0000\u0000\u0deb\u0ded\u0005K\u0000\u0000\u0dec"+
		"\u0deb\u0001\u0000\u0000\u0000\u0dec\u0ded\u0001\u0000\u0000\u0000\u0ded"+
		"\u0e15\u0001\u0000\u0000\u0000\u0dee\u0df1\u0003\u0214\u010a\u0000\u0def"+
		"\u0df0\u0005\u0462\u0000\u0000\u0df0\u0df2\u0005\u0453\u0000\u0000\u0df1"+
		"\u0def\u0001\u0000\u0000\u0000\u0df1\u0df2\u0001\u0000\u0000\u0000\u0df2"+
		"\u0dfb\u0001\u0000\u0000\u0000\u0df3\u0df4\u0005\u0465\u0000\u0000\u0df4"+
		"\u0df7\u0003\u0214\u010a\u0000\u0df5\u0df6\u0005\u0462\u0000\u0000\u0df6"+
		"\u0df8\u0005\u0453\u0000\u0000\u0df7\u0df5\u0001\u0000\u0000\u0000\u0df7"+
		"\u0df8\u0001\u0000\u0000\u0000\u0df8\u0dfa\u0001\u0000\u0000\u0000\u0df9"+
		"\u0df3\u0001\u0000\u0000\u0000\u0dfa\u0dfd\u0001\u0000\u0000\u0000\u0dfb"+
		"\u0df9\u0001\u0000\u0000\u0000\u0dfb\u0dfc\u0001\u0000\u0000\u0000\u0dfc"+
		"\u0dfe\u0001\u0000\u0000\u0000\u0dfd\u0dfb\u0001\u0000\u0000\u0000\u0dfe"+
		"\u0dff\u0005A\u0000\u0000\u0dff\u0e00\u0003\u00ecv\u0000\u0e00\u0e16\u0001"+
		"\u0000\u0000\u0000\u0e01\u0e02\u0005A\u0000\u0000\u0e02\u0e05\u0003\u0214"+
		"\u010a\u0000\u0e03\u0e04\u0005\u0462\u0000\u0000\u0e04\u0e06\u0005\u0453"+
		"\u0000\u0000\u0e05\u0e03\u0001\u0000\u0000\u0000\u0e05\u0e06\u0001\u0000"+
		"\u0000\u0000\u0e06\u0e0f\u0001\u0000\u0000\u0000\u0e07\u0e08\u0005\u0465"+
		"\u0000\u0000\u0e08\u0e0b\u0003\u0214\u010a\u0000\u0e09\u0e0a\u0005\u0462"+
		"\u0000\u0000\u0e0a\u0e0c\u0005\u0453\u0000\u0000\u0e0b\u0e09\u0001\u0000"+
		"\u0000\u0000\u0e0b\u0e0c\u0001\u0000\u0000\u0000\u0e0c\u0e0e\u0001\u0000"+
		"\u0000\u0000\u0e0d\u0e07\u0001\u0000\u0000\u0000\u0e0e\u0e11\u0001\u0000"+
		"\u0000\u0000\u0e0f\u0e0d\u0001\u0000\u0000\u0000\u0e0f\u0e10\u0001\u0000"+
		"\u0000\u0000\u0e10\u0e12\u0001\u0000\u0000\u0000\u0e11\u0e0f\u0001\u0000"+
		"\u0000\u0000\u0e12\u0e13\u0005\u00b5\u0000\u0000\u0e13\u0e14\u0003\u00ec"+
		"v\u0000\u0e14\u0e16\u0001\u0000\u0000\u0000\u0e15\u0dee\u0001\u0000\u0000"+
		"\u0000\u0e15\u0e01\u0001\u0000\u0000\u0000\u0e16\u0e19\u0001\u0000\u0000"+
		"\u0000\u0e17\u0e18\u0005\u00b8\u0000\u0000\u0e18\u0e1a\u0003\u0294\u014a"+
		"\u0000\u0e19\u0e17\u0001\u0000\u0000\u0000\u0e19\u0e1a\u0001\u0000\u0000"+
		"\u0000\u0e1a\u00db\u0001\u0000\u0000\u0000\u0e1b\u0e1c\u0005\u01ae\u0000"+
		"\u0000\u0e1c\u0e1d\u0003\u0214\u010a\u0000\u0e1d\u0e22\u0005\u020e\u0000"+
		"\u0000\u0e1e\u0e20\u0005\f\u0000\u0000\u0e1f\u0e1e\u0001\u0000\u0000\u0000"+
		"\u0e1f\u0e20\u0001\u0000\u0000\u0000\u0e20\u0e21\u0001\u0000\u0000\u0000"+
		"\u0e21\u0e23\u0003\u022e\u0117\u0000\u0e22\u0e1f\u0001\u0000\u0000\u0000"+
		"\u0e22\u0e23\u0001\u0000\u0000\u0000\u0e23\u00dd\u0001\u0000\u0000\u0000"+
		"\u0e24\u0e25\u0005\u01ae\u0000\u0000\u0e25\u0e26\u0003\u0214\u010a\u0000"+
		"\u0e26\u0e27\u0005\u0082\u0000\u0000\u0e27\u0e2e\u0003\u022e\u0117\u0000"+
		"\u0e28\u0e29\u0003\u029c\u014e\u0000\u0e29\u0e2a\u0005\u0463\u0000\u0000"+
		"\u0e2a\u0e2b\u0003\u0258\u012c\u0000\u0e2b\u0e2c\u0005\u0464\u0000\u0000"+
		"\u0e2c\u0e2f\u0001\u0000\u0000\u0000\u0e2d\u0e2f\u00071\u0000\u0000\u0e2e"+
		"\u0e28\u0001\u0000\u0000\u0000\u0e2e\u0e2d\u0001\u0000\u0000\u0000\u0e2f"+
		"\u0e32\u0001\u0000\u0000\u0000\u0e30\u0e31\u0005\u00b8\u0000\u0000\u0e31"+
		"\u0e33\u0003\u0294\u014a\u0000\u0e32\u0e30\u0001\u0000\u0000\u0000\u0e32"+
		"\u0e33\u0001\u0000\u0000\u0000\u0e33\u0e36\u0001\u0000\u0000\u0000\u0e34"+
		"\u0e35\u0005_\u0000\u0000\u0e35\u0e37\u0003\u011c\u008e\u0000\u0e36\u0e34"+
		"\u0001\u0000\u0000\u0000\u0e36\u0e37\u0001\u0000\u0000\u0000\u0e37\u00df"+
		"\u0001\u0000\u0000\u0000\u0e38\u0e39\u0005\u01ae\u0000\u0000\u0e39\u0e3a"+
		"\u0003\u0214\u010a\u0000\u0e3a\u0e3b\u0005\u0082\u0000\u0000\u0e3b\u0e3e"+
		"\u00072\u0000\u0000\u0e3c\u0e3d\u0005\u00b8\u0000\u0000\u0e3d\u0e3f\u0003"+
		"\u0294\u014a\u0000\u0e3e\u0e3c\u0001\u0000\u0000\u0000\u0e3e\u0e3f\u0001"+
		"\u0000\u0000\u0000\u0e3f\u0e42\u0001\u0000\u0000\u0000\u0e40\u0e41\u0005"+
		"_\u0000\u0000\u0e41\u0e43\u0003\u011c\u008e\u0000\u0e42\u0e40\u0001\u0000"+
		"\u0000\u0000\u0e42\u0e43\u0001\u0000\u0000\u0000\u0e43\u00e1\u0001\u0000"+
		"\u0000\u0000\u0e44\u0e45\u0005\u01ae\u0000\u0000\u0e45\u0e46\u0003\u0214"+
		"\u010a\u0000\u0e46\u0e47\u0005\u0160\u0000\u0000\u0e47\u00e3\u0001\u0000"+
		"\u0000\u0000\u0e48\u0e4a\u0005\u00b2\u0000\u0000\u0e49\u0e4b\u0005f\u0000"+
		"\u0000\u0e4a\u0e49\u0001\u0000\u0000\u0000\u0e4a\u0e4b\u0001\u0000\u0000"+
		"\u0000\u0e4b\u0e4d\u0001\u0000\u0000\u0000\u0e4c\u0e4e\u0005K\u0000\u0000"+
		"\u0e4d\u0e4c\u0001\u0000\u0000\u0000\u0e4d\u0e4e\u0001\u0000\u0000\u0000"+
		"\u0e4e\u0e4f\u0001\u0000\u0000\u0000\u0e4f\u0e54\u0003\u0214\u010a\u0000"+
		"\u0e50\u0e52\u0005\f\u0000\u0000\u0e51\u0e50\u0001\u0000\u0000\u0000\u0e51"+
		"\u0e52\u0001\u0000\u0000\u0000\u0e52\u0e53\u0001\u0000\u0000\u0000\u0e53"+
		"\u0e55\u0003\u022e\u0117\u0000\u0e54\u0e51\u0001\u0000\u0000\u0000\u0e54"+
		"\u0e55\u0001\u0000\u0000\u0000\u0e55\u0e56\u0001\u0000\u0000\u0000\u0e56"+
		"\u0e57\u0005\u0095\u0000\u0000\u0e57\u0e5c\u0003\u00d2i\u0000\u0e58\u0e59"+
		"\u0005\u0465\u0000\u0000\u0e59\u0e5b\u0003\u00d2i\u0000\u0e5a\u0e58\u0001"+
		"\u0000\u0000\u0000\u0e5b\u0e5e\u0001\u0000\u0000\u0000\u0e5c\u0e5a\u0001"+
		"\u0000\u0000\u0000\u0e5c\u0e5d\u0001\u0000\u0000\u0000\u0e5d\u0e61\u0001"+
		"\u0000\u0000\u0000\u0e5e\u0e5c\u0001\u0000\u0000\u0000\u0e5f\u0e60\u0005"+
		"\u00b8\u0000\u0000\u0e60\u0e62\u0003\u0294\u014a\u0000\u0e61\u0e5f\u0001"+
		"\u0000\u0000\u0000\u0e61\u0e62\u0001\u0000\u0000\u0000\u0e62\u0e64\u0001"+
		"\u0000\u0000\u0000\u0e63\u0e65\u0003\u00e8t\u0000\u0e64\u0e63\u0001\u0000"+
		"\u0000\u0000\u0e64\u0e65\u0001\u0000\u0000\u0000\u0e65\u0e67\u0001\u0000"+
		"\u0000\u0000\u0e66\u0e68\u0003\u011a\u008d\u0000\u0e67\u0e66\u0001\u0000"+
		"\u0000\u0000\u0e67\u0e68\u0001\u0000\u0000\u0000\u0e68\u00e5\u0001\u0000"+
		"\u0000\u0000\u0e69\u0e6b\u0005\u00b2\u0000\u0000\u0e6a\u0e6c\u0005f\u0000"+
		"\u0000\u0e6b\u0e6a\u0001\u0000\u0000\u0000\u0e6b\u0e6c\u0001\u0000\u0000"+
		"\u0000\u0e6c\u0e6e\u0001\u0000\u0000\u0000\u0e6d\u0e6f\u0005K\u0000\u0000"+
		"\u0e6e\u0e6d\u0001\u0000\u0000\u0000\u0e6e\u0e6f\u0001\u0000\u0000\u0000"+
		"\u0e6f\u0e70\u0001\u0000\u0000\u0000\u0e70\u0e71\u0003\u00ecv\u0000\u0e71"+
		"\u0e72\u0005\u0095\u0000\u0000\u0e72\u0e77\u0003\u00d2i\u0000\u0e73\u0e74"+
		"\u0005\u0465\u0000\u0000\u0e74\u0e76\u0003\u00d2i\u0000\u0e75\u0e73\u0001"+
		"\u0000\u0000\u0000\u0e76\u0e79\u0001\u0000\u0000\u0000\u0e77\u0e75\u0001"+
		"\u0000\u0000\u0000\u0e77\u0e78\u0001\u0000\u0000\u0000\u0e78\u0e7c\u0001"+
		"\u0000\u0000\u0000\u0e79\u0e77\u0001\u0000\u0000\u0000\u0e7a\u0e7b\u0005"+
		"\u00b8\u0000\u0000\u0e7b\u0e7d\u0003\u0294\u014a\u0000\u0e7c\u0e7a\u0001"+
		"\u0000\u0000\u0000\u0e7c\u0e7d\u0001\u0000\u0000\u0000\u0e7d\u00e7\u0001"+
		"\u0000\u0000\u0000\u0e7e\u0e7f\u0005x\u0000\u0000\u0e7f\u0e80\u0005\u0012"+
		"\u0000\u0000\u0e80\u0e85\u0003\u00eau\u0000\u0e81\u0e82\u0005\u0465\u0000"+
		"\u0000\u0e82\u0e84\u0003\u00eau\u0000\u0e83\u0e81\u0001\u0000\u0000\u0000"+
		"\u0e84\u0e87\u0001\u0000\u0000\u0000\u0e85\u0e83\u0001\u0000\u0000\u0000"+
		"\u0e85\u0e86\u0001\u0000\u0000\u0000\u0e86\u00e9\u0001\u0000\u0000\u0000"+
		"\u0e87\u0e85\u0001\u0000\u0000\u0000\u0e88\u0e8a\u0003\u0294\u014a\u0000"+
		"\u0e89\u0e8b\u00073\u0000\u0000\u0e8a\u0e89\u0001\u0000\u0000\u0000\u0e8a"+
		"\u0e8b\u0001\u0000\u0000\u0000\u0e8b\u00eb\u0001\u0000\u0000\u0000\u0e8c"+
		"\u0e91\u0003\u00eew\u0000\u0e8d\u0e8e\u0005\u0465\u0000\u0000\u0e8e\u0e90"+
		"\u0003\u00eew\u0000\u0e8f\u0e8d\u0001\u0000\u0000\u0000\u0e90\u0e93\u0001"+
		"\u0000\u0000\u0000\u0e91\u0e8f\u0001\u0000\u0000\u0000\u0e91\u0e92\u0001"+
		"\u0000\u0000\u0000\u0e92\u00ed\u0001\u0000\u0000\u0000\u0e93\u0e91\u0001"+
		"\u0000\u0000\u0000\u0e94\u0e98\u0003\u00f0x\u0000\u0e95\u0e97\u0003\u00f6"+
		"{\u0000\u0e96\u0e95\u0001\u0000\u0000\u0000\u0e97\u0e9a\u0001\u0000\u0000"+
		"\u0000\u0e98\u0e96\u0001\u0000\u0000\u0000\u0e98\u0e99\u0001\u0000\u0000"+
		"\u0000\u0e99\u0ea6\u0001\u0000\u0000\u0000\u0e9a\u0e98\u0001\u0000\u0000"+
		"\u0000\u0e9b\u0e9c\u0005\u0463\u0000\u0000\u0e9c\u0ea0\u0003\u00f0x\u0000"+
		"\u0e9d\u0e9f\u0003\u00f6{\u0000\u0e9e\u0e9d\u0001\u0000\u0000\u0000\u0e9f"+
		"\u0ea2\u0001\u0000\u0000\u0000\u0ea0\u0e9e\u0001\u0000\u0000\u0000\u0ea0"+
		"\u0ea1\u0001\u0000\u0000\u0000\u0ea1\u0ea3\u0001\u0000\u0000\u0000\u0ea2"+
		"\u0ea0\u0001\u0000\u0000\u0000\u0ea3\u0ea4\u0005\u0464\u0000\u0000\u0ea4"+
		"\u0ea6\u0001\u0000\u0000\u0000\u0ea5\u0e94\u0001\u0000\u0000\u0000\u0ea5"+
		"\u0e9b\u0001\u0000\u0000\u0000\u0ea6\u00ef\u0001\u0000\u0000\u0000\u0ea7"+
		"\u0ead\u0003\u0214\u010a\u0000\u0ea8\u0ea9\u0005}\u0000\u0000\u0ea9\u0eaa"+
		"\u0005\u0463\u0000\u0000\u0eaa\u0eab\u0003\u024e\u0127\u0000\u0eab\u0eac"+
		"\u0005\u0464\u0000\u0000\u0eac\u0eae\u0001\u0000\u0000\u0000\u0ead\u0ea8"+
		"\u0001\u0000\u0000\u0000\u0ead\u0eae\u0001\u0000\u0000\u0000\u0eae\u0eb3"+
		"\u0001\u0000\u0000\u0000\u0eaf\u0eb1\u0005\f\u0000\u0000\u0eb0\u0eaf\u0001"+
		"\u0000\u0000\u0000\u0eb0\u0eb1\u0001\u0000\u0000\u0000\u0eb1\u0eb2\u0001"+
		"\u0000\u0000\u0000\u0eb2\u0eb4\u0003\u022e\u0117\u0000\u0eb3\u0eb0\u0001"+
		"\u0000\u0000\u0000\u0eb3\u0eb4\u0001\u0000\u0000\u0000\u0eb4\u0ebd\u0001"+
		"\u0000\u0000\u0000\u0eb5\u0eba\u0003\u00f2y\u0000\u0eb6\u0eb7\u0005\u0465"+
		"\u0000\u0000\u0eb7\u0eb9\u0003\u00f2y\u0000\u0eb8\u0eb6\u0001\u0000\u0000"+
		"\u0000\u0eb9\u0ebc\u0001\u0000\u0000\u0000\u0eba\u0eb8\u0001\u0000\u0000"+
		"\u0000\u0eba\u0ebb\u0001\u0000\u0000\u0000\u0ebb\u0ebe\u0001\u0000\u0000"+
		"\u0000\u0ebc\u0eba\u0001\u0000\u0000\u0000\u0ebd\u0eb5\u0001\u0000\u0000"+
		"\u0000\u0ebd\u0ebe\u0001\u0000\u0000\u0000\u0ebe\u0ed0\u0001\u0000\u0000"+
		"\u0000\u0ebf\u0ec5\u0003\u00ccf\u0000\u0ec0\u0ec1\u0005\u0463\u0000\u0000"+
		"\u0ec1\u0ec2\u0003\u00ccf\u0000\u0ec2\u0ec3\u0005\u0464\u0000\u0000\u0ec3"+
		"\u0ec5\u0001\u0000\u0000\u0000\u0ec4\u0ebf\u0001\u0000\u0000\u0000\u0ec4"+
		"\u0ec0\u0001\u0000\u0000\u0000\u0ec5\u0ec7\u0001\u0000\u0000\u0000\u0ec6"+
		"\u0ec8\u0005\f\u0000\u0000\u0ec7\u0ec6\u0001\u0000\u0000\u0000\u0ec7\u0ec8"+
		"\u0001\u0000\u0000\u0000\u0ec8\u0ec9\u0001\u0000\u0000\u0000\u0ec9\u0eca"+
		"\u0003\u022e\u0117\u0000\u0eca\u0ed0\u0001\u0000\u0000\u0000\u0ecb\u0ecc"+
		"\u0005\u0463\u0000\u0000\u0ecc\u0ecd\u0003\u00ecv\u0000\u0ecd\u0ece\u0005"+
		"\u0464\u0000\u0000\u0ece\u0ed0\u0001\u0000\u0000\u0000\u0ecf\u0ea7\u0001"+
		"\u0000\u0000\u0000\u0ecf\u0ec4\u0001\u0000\u0000\u0000\u0ecf\u0ecb\u0001"+
		"\u0000\u0000\u0000\u0ed0\u00f1\u0001\u0000\u0000\u0000\u0ed1\u0ed2\u0007"+
		"4\u0000\u0000\u0ed2\u0ed5\u0007\u0017\u0000\u0000\u0ed3\u0ed4\u0005>\u0000"+
		"\u0000\u0ed4\u0ed6\u0003\u00f4z\u0000\u0ed5\u0ed3\u0001\u0000\u0000\u0000"+
		"\u0ed5\u0ed6\u0001\u0000\u0000\u0000\u0ed6\u0ed7\u0001\u0000\u0000\u0000"+
		"\u0ed7\u0ed8\u0005\u0463\u0000\u0000\u0ed8\u0ed9\u0003\u024e\u0127\u0000"+
		"\u0ed9\u0eda\u0005\u0464\u0000\u0000\u0eda\u00f3\u0001\u0000\u0000\u0000"+
		"\u0edb\u0ee1\u0005W\u0000\u0000\u0edc\u0edd\u0005x\u0000\u0000\u0edd\u0ee1"+
		"\u0005\u0012\u0000\u0000\u0ede\u0edf\u0005F\u0000\u0000\u0edf\u0ee1\u0005"+
		"\u0012\u0000\u0000\u0ee0\u0edb\u0001\u0000\u0000\u0000\u0ee0\u0edc\u0001"+
		"\u0000\u0000\u0000\u0ee0\u0ede\u0001\u0000\u0000\u0000\u0ee1\u00f5\u0001"+
		"\u0000\u0000\u0000\u0ee2\u0ee4\u00075\u0000\u0000\u0ee3\u0ee2\u0001\u0000"+
		"\u0000\u0000\u0ee3\u0ee4\u0001\u0000\u0000\u0000\u0ee4\u0ee5\u0001\u0000"+
		"\u0000\u0000\u0ee5\u0ee6\u0005W\u0000\u0000\u0ee6\u0eee\u0003\u00f0x\u0000"+
		"\u0ee7\u0ee8\u0005r\u0000\u0000\u0ee8\u0eef\u0003\u0294\u014a\u0000\u0ee9"+
		"\u0eea\u0005\u00b5\u0000\u0000\u0eea\u0eeb\u0005\u0463\u0000\u0000\u0eeb"+
		"\u0eec\u0003\u024e\u0127\u0000\u0eec\u0eed\u0005\u0464\u0000\u0000\u0eed"+
		"\u0eef\u0001\u0000\u0000\u0000\u0eee\u0ee7\u0001\u0000\u0000\u0000\u0eee"+
		"\u0ee9\u0001\u0000\u0000\u0000\u0eee\u0eef\u0001\u0000\u0000\u0000\u0eef"+
		"\u0f0f\u0001\u0000\u0000\u0000\u0ef0\u0ef1\u0005\u00a5\u0000\u0000\u0ef1"+
		"\u0ef4\u0003\u00f0x\u0000\u0ef2\u0ef3\u0005r\u0000\u0000\u0ef3\u0ef5\u0003"+
		"\u0294\u014a\u0000\u0ef4\u0ef2\u0001\u0000\u0000\u0000\u0ef4\u0ef5\u0001"+
		"\u0000\u0000\u0000\u0ef5\u0f0f\u0001\u0000\u0000\u0000\u0ef6\u0ef8\u0007"+
		"6\u0000\u0000\u0ef7\u0ef9\u0005{\u0000\u0000\u0ef8\u0ef7\u0001\u0000\u0000"+
		"\u0000\u0ef8\u0ef9\u0001\u0000\u0000\u0000\u0ef9\u0efa\u0001\u0000\u0000"+
		"\u0000\u0efa\u0efb\u0005W\u0000\u0000\u0efb\u0f03\u0003\u00f0x\u0000\u0efc"+
		"\u0efd\u0005r\u0000\u0000\u0efd\u0f04\u0003\u0294\u014a\u0000\u0efe\u0eff"+
		"\u0005\u00b5\u0000\u0000\u0eff\u0f00\u0005\u0463\u0000\u0000\u0f00\u0f01"+
		"\u0003\u024e\u0127\u0000\u0f01\u0f02\u0005\u0464\u0000\u0000\u0f02\u0f04"+
		"\u0001\u0000\u0000\u0000\u0f03\u0efc\u0001\u0000\u0000\u0000\u0f03\u0efe"+
		"\u0001\u0000\u0000\u0000\u0f04\u0f0f\u0001\u0000\u0000\u0000\u0f05\u0f0a"+
		"\u0005m\u0000\u0000\u0f06\u0f08\u00076\u0000\u0000\u0f07\u0f09\u0005{"+
		"\u0000\u0000\u0f08\u0f07\u0001\u0000\u0000\u0000\u0f08\u0f09\u0001\u0000"+
		"\u0000\u0000\u0f09\u0f0b\u0001\u0000\u0000\u0000\u0f0a\u0f06\u0001\u0000"+
		"\u0000\u0000\u0f0a\u0f0b\u0001\u0000\u0000\u0000\u0f0b\u0f0c\u0001\u0000"+
		"\u0000\u0000\u0f0c\u0f0d\u0005W\u0000\u0000\u0f0d\u0f0f\u0003\u00f0x\u0000"+
		"\u0f0e\u0ee3\u0001\u0000\u0000\u0000\u0f0e\u0ef0\u0001\u0000\u0000\u0000"+
		"\u0f0e\u0ef6\u0001\u0000\u0000\u0000\u0f0e\u0f05\u0001\u0000\u0000\u0000"+
		"\u0f0f\u00f7\u0001\u0000\u0000\u0000\u0f10\u0f11\u0005\u0463\u0000\u0000"+
		"\u0f11\u0f12\u0003\u00fc~\u0000\u0f12\u0f13\u0005\u0464\u0000\u0000\u0f13"+
		"\u0f19\u0001\u0000\u0000\u0000\u0f14\u0f15\u0005\u0463\u0000\u0000\u0f15"+
		"\u0f16\u0003\u00f8|\u0000\u0f16\u0f17\u0005\u0464\u0000\u0000\u0f17\u0f19"+
		"\u0001\u0000\u0000\u0000\u0f18\u0f10\u0001\u0000\u0000\u0000\u0f18\u0f14"+
		"\u0001\u0000\u0000\u0000\u0f19\u00f9\u0001\u0000\u0000\u0000\u0f1a\u0f1b"+
		"\u0005\u0463\u0000\u0000\u0f1b\u0f1c\u0003\u00fe\u007f\u0000\u0f1c\u0f1d"+
		"\u0005\u0464\u0000\u0000\u0f1d\u0f23\u0001\u0000\u0000\u0000\u0f1e\u0f1f"+
		"\u0005\u0463\u0000\u0000\u0f1f\u0f20\u0003\u00fa}\u0000\u0f20\u0f21\u0005"+
		"\u0464\u0000\u0000\u0f21\u0f23\u0001\u0000\u0000\u0000\u0f22\u0f1a\u0001"+
		"\u0000\u0000\u0000\u0f22\u0f1e\u0001\u0000\u0000\u0000\u0f23\u00fb\u0001"+
		"\u0000\u0000\u0000\u0f24\u0f28\u0005\u0094\u0000\u0000\u0f25\u0f27\u0003"+
		"\u0104\u0082\u0000\u0f26\u0f25\u0001\u0000\u0000\u0000\u0f27\u0f2a\u0001"+
		"\u0000\u0000\u0000\u0f28\u0f26\u0001\u0000\u0000\u0000\u0f28\u0f29\u0001"+
		"\u0000\u0000\u0000\u0f29\u0f2b\u0001\u0000\u0000\u0000\u0f2a\u0f28\u0001"+
		"\u0000\u0000\u0000\u0f2b\u0f2d\u0003\u0106\u0083\u0000\u0f2c\u0f2e\u0003"+
		"\u010a\u0085\u0000\u0f2d\u0f2c\u0001\u0000\u0000\u0000\u0f2d\u0f2e\u0001"+
		"\u0000\u0000\u0000\u0f2e\u0f30\u0001\u0000\u0000\u0000\u0f2f\u0f31\u0003"+
		"\u0110\u0088\u0000\u0f30\u0f2f\u0001\u0000\u0000\u0000\u0f30\u0f31\u0001"+
		"\u0000\u0000\u0000\u0f31\u0f33\u0001\u0000\u0000\u0000\u0f32\u0f34\u0003"+
		"\u0112\u0089\u0000\u0f33\u0f32\u0001\u0000\u0000\u0000\u0f33\u0f34\u0001"+
		"\u0000\u0000\u0000\u0f34\u0f36\u0001\u0000\u0000\u0000\u0f35\u0f37\u0003"+
		"\u0114\u008a\u0000\u0f36\u0f35\u0001\u0000\u0000\u0000\u0f36\u0f37\u0001"+
		"\u0000\u0000\u0000\u0f37\u0f39\u0001\u0000\u0000\u0000\u0f38\u0f3a\u0003"+
		"\u0116\u008b\u0000\u0f39\u0f38\u0001\u0000\u0000\u0000\u0f39\u0f3a\u0001"+
		"\u0000\u0000\u0000\u0f3a\u0f3c\u0001\u0000\u0000\u0000\u0f3b\u0f3d\u0003"+
		"\u00e8t\u0000\u0f3c\u0f3b\u0001\u0000\u0000\u0000\u0f3c\u0f3d\u0001\u0000"+
		"\u0000\u0000\u0f3d\u0f3f\u0001\u0000\u0000\u0000\u0f3e\u0f40\u0003\u011a"+
		"\u008d\u0000\u0f3f\u0f3e\u0001\u0000\u0000\u0000\u0f3f\u0f40\u0001\u0000"+
		"\u0000\u0000\u0f40\u0f5f\u0001\u0000\u0000\u0000\u0f41\u0f45\u0005\u0094"+
		"\u0000\u0000\u0f42\u0f44\u0003\u0104\u0082\u0000\u0f43\u0f42\u0001\u0000"+
		"\u0000\u0000\u0f44\u0f47\u0001\u0000\u0000\u0000\u0f45\u0f43\u0001\u0000"+
		"\u0000\u0000\u0f45\u0f46\u0001\u0000\u0000\u0000\u0f46\u0f48\u0001\u0000"+
		"\u0000\u0000\u0f47\u0f45\u0001\u0000\u0000\u0000\u0f48\u0f4a\u0003\u0106"+
		"\u0083\u0000\u0f49\u0f4b\u0003\u0110\u0088\u0000\u0f4a\u0f49\u0001\u0000"+
		"\u0000\u0000\u0f4a\u0f4b\u0001\u0000\u0000\u0000\u0f4b\u0f4d\u0001\u0000"+
		"\u0000\u0000\u0f4c\u0f4e\u0003\u0112\u0089\u0000\u0f4d\u0f4c\u0001\u0000"+
		"\u0000\u0000\u0f4d\u0f4e\u0001\u0000\u0000\u0000\u0f4e\u0f50\u0001\u0000"+
		"\u0000\u0000\u0f4f\u0f51\u0003\u0114\u008a\u0000\u0f50\u0f4f\u0001\u0000"+
		"\u0000\u0000\u0f50\u0f51\u0001\u0000\u0000\u0000\u0f51\u0f53\u0001\u0000"+
		"\u0000\u0000\u0f52\u0f54\u0003\u0116\u008b\u0000\u0f53\u0f52\u0001\u0000"+
		"\u0000\u0000\u0f53\u0f54\u0001\u0000\u0000";
	private static final String _serializedATNSegment2 =
		"\u0000\u0f54\u0f56\u0001\u0000\u0000\u0000\u0f55\u0f57\u0003\u00e8t\u0000"+
		"\u0f56\u0f55\u0001\u0000\u0000\u0000\u0f56\u0f57\u0001\u0000\u0000\u0000"+
		"\u0f57\u0f59\u0001\u0000\u0000\u0000\u0f58\u0f5a\u0003\u011a\u008d\u0000"+
		"\u0f59\u0f58\u0001\u0000\u0000\u0000\u0f59\u0f5a\u0001\u0000\u0000\u0000"+
		"\u0f5a\u0f5c\u0001\u0000\u0000\u0000\u0f5b\u0f5d\u0003\u010a\u0085\u0000"+
		"\u0f5c\u0f5b\u0001\u0000\u0000\u0000\u0f5c\u0f5d\u0001\u0000\u0000\u0000"+
		"\u0f5d\u0f5f\u0001\u0000\u0000\u0000\u0f5e\u0f24\u0001\u0000\u0000\u0000"+
		"\u0f5e\u0f41\u0001\u0000\u0000\u0000\u0f5f\u00fd\u0001\u0000\u0000\u0000"+
		"\u0f60\u0f64\u0005\u0094\u0000\u0000\u0f61\u0f63\u0003\u0104\u0082\u0000"+
		"\u0f62\u0f61\u0001\u0000\u0000\u0000\u0f63\u0f66\u0001\u0000\u0000\u0000"+
		"\u0f64\u0f62\u0001\u0000\u0000\u0000\u0f64\u0f65\u0001\u0000\u0000\u0000"+
		"\u0f65\u0f67\u0001\u0000\u0000\u0000\u0f66\u0f64\u0001\u0000\u0000\u0000"+
		"\u0f67\u0f69\u0003\u0106\u0083\u0000\u0f68\u0f6a\u0003\u0110\u0088\u0000"+
		"\u0f69\u0f68\u0001\u0000\u0000\u0000\u0f69\u0f6a\u0001\u0000\u0000\u0000"+
		"\u0f6a\u0f6c\u0001\u0000\u0000\u0000\u0f6b\u0f6d\u0003\u0112\u0089\u0000"+
		"\u0f6c\u0f6b\u0001\u0000\u0000\u0000\u0f6c\u0f6d\u0001\u0000\u0000\u0000"+
		"\u0f6d\u0f6f\u0001\u0000\u0000\u0000\u0f6e\u0f70\u0003\u0114\u008a\u0000"+
		"\u0f6f\u0f6e\u0001\u0000\u0000\u0000\u0f6f\u0f70\u0001\u0000\u0000\u0000"+
		"\u0f70\u0f72\u0001\u0000\u0000\u0000\u0f71\u0f73\u0003\u0116\u008b\u0000"+
		"\u0f72\u0f71\u0001\u0000\u0000\u0000\u0f72\u0f73\u0001\u0000\u0000\u0000"+
		"\u0f73\u0f75\u0001\u0000\u0000\u0000\u0f74\u0f76\u0003\u00e8t\u0000\u0f75"+
		"\u0f74\u0001\u0000\u0000\u0000\u0f75\u0f76\u0001\u0000\u0000\u0000\u0f76"+
		"\u0f78\u0001\u0000\u0000\u0000\u0f77\u0f79\u0003\u011a\u008d\u0000\u0f78"+
		"\u0f77\u0001\u0000\u0000\u0000\u0f78\u0f79\u0001\u0000\u0000\u0000\u0f79"+
		"\u00ff\u0001\u0000\u0000\u0000\u0f7a\u0f7c\u0005\u00ae\u0000\u0000\u0f7b"+
		"\u0f7d\u0007/\u0000\u0000\u0f7c\u0f7b\u0001\u0000\u0000\u0000\u0f7c\u0f7d"+
		"\u0001\u0000\u0000\u0000\u0f7d\u0f7e\u0001\u0000\u0000\u0000\u0f7e\u0f7f"+
		"\u0003\u00fa}\u0000\u0f7f\u0101\u0001\u0000\u0000\u0000\u0f80\u0f82\u0005"+
		"\u00ae\u0000\u0000\u0f81\u0f83\u0007/\u0000\u0000\u0f82\u0f81\u0001\u0000"+
		"\u0000\u0000\u0f82\u0f83\u0001\u0000\u0000\u0000\u0f83\u0f86\u0001\u0000"+
		"\u0000\u0000\u0f84\u0f87\u0003\u00fe\u007f\u0000\u0f85\u0f87\u0003\u00fa"+
		"}\u0000\u0f86\u0f84\u0001\u0000\u0000\u0000\u0f86\u0f85\u0001\u0000\u0000"+
		"\u0000\u0f87\u0103\u0001\u0000\u0000\u0000\u0f88\u0f91\u00077\u0000\u0000"+
		"\u0f89\u0f91\u0005H\u0000\u0000\u0f8a\u0f91\u0005\u00a5\u0000\u0000\u0f8b"+
		"\u0f91\u0005\u00a1\u0000\u0000\u0f8c\u0f91\u0005\u009f\u0000\u0000\u0f8d"+
		"\u0f91\u0005\u0260\u0000\u0000\u0f8e\u0f91\u00078\u0000\u0000\u0f8f\u0f91"+
		"\u0005\u00a0\u0000\u0000\u0f90\u0f88\u0001\u0000\u0000\u0000\u0f90\u0f89"+
		"\u0001\u0000\u0000\u0000\u0f90\u0f8a\u0001\u0000\u0000\u0000\u0f90\u0f8b"+
		"\u0001\u0000\u0000\u0000\u0f90\u0f8c\u0001\u0000\u0000\u0000\u0f90\u0f8d"+
		"\u0001\u0000\u0000\u0000\u0f90\u0f8e\u0001\u0000\u0000\u0000\u0f90\u0f8f"+
		"\u0001\u0000\u0000\u0000\u0f91\u0105\u0001\u0000\u0000\u0000\u0f92\u0f95"+
		"\u0005\u0453\u0000\u0000\u0f93\u0f95\u0003\u0108\u0084\u0000\u0f94\u0f92"+
		"\u0001\u0000\u0000\u0000\u0f94\u0f93\u0001\u0000\u0000\u0000\u0f95\u0f9a"+
		"\u0001\u0000\u0000\u0000\u0f96\u0f97\u0005\u0465\u0000\u0000\u0f97\u0f99"+
		"\u0003\u0108\u0084\u0000\u0f98\u0f96\u0001\u0000\u0000\u0000\u0f99\u0f9c"+
		"\u0001\u0000\u0000\u0000\u0f9a\u0f98\u0001\u0000\u0000\u0000\u0f9a\u0f9b"+
		"\u0001\u0000\u0000\u0000\u0f9b\u0107\u0001\u0000\u0000\u0000\u0f9c\u0f9a"+
		"\u0001\u0000\u0000\u0000\u0f9d\u0f9e\u0003\u0212\u0109\u0000\u0f9e\u0f9f"+
		"\u0005\u0462\u0000\u0000\u0f9f\u0fa0\u0005\u0453\u0000\u0000\u0fa0\u0fbb"+
		"\u0001\u0000\u0000\u0000\u0fa1\u0fa6\u0003\u0218\u010c\u0000\u0fa2\u0fa4"+
		"\u0005\f\u0000\u0000\u0fa3\u0fa2\u0001\u0000\u0000\u0000\u0fa3\u0fa4\u0001"+
		"\u0000\u0000\u0000\u0fa4\u0fa5\u0001\u0000\u0000\u0000\u0fa5\u0fa7\u0003"+
		"\u022e\u0117\u0000\u0fa6\u0fa3\u0001\u0000\u0000\u0000\u0fa6\u0fa7\u0001"+
		"\u0000\u0000\u0000\u0fa7\u0fbb\u0001\u0000\u0000\u0000\u0fa8\u0fad\u0003"+
		"\u026c\u0136\u0000\u0fa9\u0fab\u0005\f\u0000\u0000\u0faa\u0fa9\u0001\u0000"+
		"\u0000\u0000\u0faa\u0fab\u0001\u0000\u0000\u0000\u0fab\u0fac\u0001\u0000"+
		"\u0000\u0000\u0fac\u0fae\u0003\u022e\u0117\u0000\u0fad\u0faa\u0001\u0000"+
		"\u0000\u0000\u0fad\u0fae\u0001\u0000\u0000\u0000\u0fae\u0fbb\u0001\u0000"+
		"\u0000\u0000\u0faf\u0fb0\u0005\u047f\u0000\u0000\u0fb0\u0fb2\u0005\u044a"+
		"\u0000\u0000\u0fb1\u0faf\u0001\u0000\u0000\u0000\u0fb1\u0fb2\u0001\u0000"+
		"\u0000\u0000\u0fb2\u0fb3\u0001\u0000\u0000\u0000\u0fb3\u0fb8\u0003\u0294"+
		"\u014a\u0000\u0fb4\u0fb6\u0005\f\u0000\u0000\u0fb5\u0fb4\u0001\u0000\u0000"+
		"\u0000\u0fb5\u0fb6\u0001\u0000\u0000\u0000\u0fb6\u0fb7\u0001\u0000\u0000"+
		"\u0000\u0fb7\u0fb9\u0003\u022e\u0117\u0000\u0fb8\u0fb5\u0001\u0000\u0000"+
		"\u0000\u0fb8\u0fb9\u0001\u0000\u0000\u0000\u0fb9\u0fbb\u0001\u0000\u0000"+
		"\u0000\u0fba\u0f9d\u0001\u0000\u0000\u0000\u0fba\u0fa1\u0001\u0000\u0000"+
		"\u0000\u0fba\u0fa8\u0001\u0000\u0000\u0000\u0fba\u0fb1\u0001\u0000\u0000"+
		"\u0000\u0fbb\u0109\u0001\u0000\u0000\u0000\u0fbc\u0fbd\u0005T\u0000\u0000"+
		"\u0fbd\u0fc2\u0003\u00d4j\u0000\u0fbe\u0fbf\u0005\u0465\u0000\u0000\u0fbf"+
		"\u0fc1\u0003\u00d4j\u0000\u0fc0\u0fbe\u0001\u0000\u0000\u0000\u0fc1\u0fc4"+
		"\u0001\u0000\u0000\u0000\u0fc2\u0fc0\u0001\u0000\u0000\u0000\u0fc2\u0fc3"+
		"\u0001\u0000\u0000\u0000\u0fc3\u0fe1\u0001\u0000\u0000\u0000\u0fc4\u0fc2"+
		"\u0001\u0000\u0000\u0000\u0fc5\u0fc6\u0005T\u0000\u0000\u0fc6\u0fc7\u0005"+
		"\u0187\u0000\u0000\u0fc7\u0fe1\u0005\u0472\u0000\u0000\u0fc8\u0fc9\u0005"+
		"T\u0000\u0000\u0fc9\u0fca\u0005|\u0000\u0000\u0fca\u0fce\u0005\u0472\u0000"+
		"\u0000\u0fcb\u0fcc\u0005\u0018\u0000\u0000\u0fcc\u0fcd\u0005\u0095\u0000"+
		"\u0000\u0fcd\u0fcf\u0003\u0220\u0110\u0000\u0fce\u0fcb\u0001\u0000\u0000"+
		"\u0000\u0fce\u0fcf\u0001\u0000\u0000\u0000\u0fcf\u0fd6\u0001\u0000\u0000"+
		"\u0000\u0fd0\u0fd2\u0007,\u0000\u0000\u0fd1\u0fd3\u0003\u010c\u0086\u0000"+
		"\u0fd2\u0fd1\u0001\u0000\u0000\u0000\u0fd3\u0fd4\u0001\u0000\u0000\u0000"+
		"\u0fd4\u0fd2\u0001\u0000\u0000\u0000\u0fd4\u0fd5\u0001\u0000\u0000\u0000"+
		"\u0fd5\u0fd7\u0001\u0000\u0000\u0000\u0fd6\u0fd0\u0001\u0000\u0000\u0000"+
		"\u0fd6\u0fd7\u0001\u0000\u0000\u0000\u0fd7\u0fde\u0001\u0000\u0000\u0000"+
		"\u0fd8\u0fda\u0005a\u0000\u0000\u0fd9\u0fdb\u0003\u010e\u0087\u0000\u0fda"+
		"\u0fd9\u0001\u0000\u0000\u0000\u0fdb\u0fdc\u0001\u0000\u0000\u0000\u0fdc"+
		"\u0fda\u0001\u0000\u0000\u0000\u0fdc\u0fdd\u0001\u0000\u0000\u0000\u0fdd"+
		"\u0fdf\u0001\u0000\u0000\u0000\u0fde\u0fd8\u0001\u0000\u0000\u0000\u0fde"+
		"\u0fdf\u0001\u0000\u0000\u0000\u0fdf\u0fe1\u0001\u0000\u0000\u0000\u0fe0"+
		"\u0fbc\u0001\u0000\u0000\u0000\u0fe0\u0fc5\u0001\u0000\u0000\u0000\u0fe0"+
		"\u0fc8\u0001\u0000\u0000\u0000\u0fe1\u010b\u0001\u0000\u0000\u0000\u0fe2"+
		"\u0fe3\u0005\u00a7\u0000\u0000\u0fe3\u0fe4\u0005\u0012\u0000\u0000\u0fe4"+
		"\u0fef\u0005\u0472\u0000\u0000\u0fe5\u0fe7\u0005v\u0000\u0000\u0fe6\u0fe5"+
		"\u0001\u0000\u0000\u0000\u0fe6\u0fe7\u0001\u0000\u0000\u0000\u0fe7\u0fe8"+
		"\u0001\u0000\u0000\u0000\u0fe8\u0fe9\u00056\u0000\u0000\u0fe9\u0fea\u0005"+
		"\u0012\u0000\u0000\u0fea\u0fef\u0005\u0472\u0000\u0000\u0feb\u0fec\u0005"+
		"7\u0000\u0000\u0fec\u0fed\u0005\u0012\u0000\u0000\u0fed\u0fef\u0005\u0472"+
		"\u0000\u0000\u0fee\u0fe2\u0001\u0000\u0000\u0000\u0fee\u0fe6\u0001\u0000"+
		"\u0000\u0000\u0fee\u0feb\u0001\u0000\u0000\u0000\u0fef\u010d\u0001\u0000"+
		"\u0000\u0000\u0ff0\u0ff1\u0005\u00a4\u0000\u0000\u0ff1\u0ff2\u0005\u0012"+
		"\u0000\u0000\u0ff2\u0ff7\u0005\u0472\u0000\u0000\u0ff3\u0ff4\u0005\u00a7"+
		"\u0000\u0000\u0ff4\u0ff5\u0005\u0012\u0000\u0000\u0ff5\u0ff7\u0005\u0472"+
		"\u0000\u0000\u0ff6\u0ff0\u0001\u0000\u0000\u0000\u0ff6\u0ff3\u0001\u0000"+
		"\u0000\u0000\u0ff7\u010f\u0001\u0000\u0000\u0000\u0ff8\u0ff9\u0005A\u0000"+
		"\u0000\u0ff9\u0ffb\u0003\u00ecv\u0000\u0ffa\u0ff8\u0001\u0000\u0000\u0000"+
		"\u0ffa\u0ffb\u0001\u0000\u0000\u0000\u0ffb\u0ffe\u0001\u0000\u0000\u0000"+
		"\u0ffc\u0ffd\u0005\u00b8\u0000\u0000\u0ffd\u0fff\u0003\u0294\u014a\u0000"+
		"\u0ffe\u0ffc\u0001\u0000\u0000\u0000\u0ffe\u0fff\u0001\u0000\u0000\u0000"+
		"\u0fff\u0111\u0001\u0000\u0000\u0000\u1000\u1001\u0005F\u0000\u0000\u1001"+
		"\u1002\u0005\u0012\u0000\u0000\u1002\u1007\u0003\u0118\u008c\u0000\u1003"+
		"\u1004\u0005\u0465\u0000\u0000\u1004\u1006\u0003\u0118\u008c\u0000\u1005"+
		"\u1003\u0001\u0000\u0000\u0000\u1006\u1009\u0001\u0000\u0000\u0000\u1007"+
		"\u1005\u0001\u0000\u0000\u0000\u1007\u1008\u0001\u0000\u0000\u0000\u1008"+
		"\u100c\u0001\u0000\u0000\u0000\u1009\u1007\u0001\u0000\u0000\u0000\u100a"+
		"\u100b\u0005\u00ba\u0000\u0000\u100b\u100d\u0005\u0245\u0000\u0000\u100c"+
		"\u100a\u0001\u0000\u0000\u0000\u100c\u100d\u0001\u0000\u0000\u0000\u100d"+
		"\u0113\u0001\u0000\u0000\u0000\u100e\u100f\u0005G\u0000\u0000\u100f\u1010"+
		"\u0003\u0294\u014a\u0000\u1010\u0115\u0001\u0000\u0000\u0000\u1011\u1012"+
		"\u0005\u0293\u0000\u0000\u1012\u1013\u0003\u027e\u013f\u0000\u1013\u1014"+
		"\u0005\f\u0000\u0000\u1014\u1015\u0005\u0463\u0000\u0000\u1015\u1016\u0003"+
		"\u027c\u013e\u0000\u1016\u1020\u0005\u0464\u0000\u0000\u1017\u1018\u0005"+
		"\u0465\u0000\u0000\u1018\u1019\u0003\u027e\u013f\u0000\u1019\u101a\u0005"+
		"\f\u0000\u0000\u101a\u101b\u0005\u0463\u0000\u0000\u101b\u101c\u0003\u027c"+
		"\u013e\u0000\u101c\u101d\u0005\u0464\u0000\u0000\u101d\u101f\u0001\u0000"+
		"\u0000\u0000\u101e\u1017\u0001\u0000\u0000\u0000\u101f\u1022\u0001\u0000"+
		"\u0000\u0000\u1020\u101e\u0001\u0000\u0000\u0000\u1020\u1021\u0001\u0000"+
		"\u0000\u0000\u1021\u0117\u0001\u0000\u0000\u0000\u1022\u1020\u0001\u0000"+
		"\u0000\u0000\u1023\u1025\u0003\u0294\u014a\u0000\u1024\u1026\u00073\u0000"+
		"\u0000\u1025\u1024\u0001\u0000\u0000\u0000\u1025\u1026\u0001\u0000\u0000"+
		"\u0000\u1026\u0119\u0001\u0000\u0000\u0000\u1027\u1032\u0005_\u0000\u0000"+
		"\u1028\u1029\u0003\u011c\u008e\u0000\u1029\u102a\u0005\u0465\u0000\u0000"+
		"\u102a\u102c\u0001\u0000\u0000\u0000\u102b\u1028\u0001\u0000\u0000\u0000"+
		"\u102b\u102c\u0001\u0000\u0000\u0000\u102c\u102d\u0001\u0000\u0000\u0000"+
		"\u102d\u1033\u0003\u011c\u008e\u0000\u102e\u102f\u0003\u011c\u008e\u0000"+
		"\u102f\u1030\u0005\u0207\u0000\u0000\u1030\u1031\u0003\u011c\u008e\u0000"+
		"\u1031\u1033\u0001\u0000\u0000\u0000\u1032\u102b\u0001\u0000\u0000\u0000"+
		"\u1032\u102e\u0001\u0000\u0000\u0000\u1033\u011b\u0001\u0000\u0000\u0000"+
		"\u1034\u1038\u0003\u0234\u011a\u0000\u1035\u1038\u0003\u021e\u010f\u0000"+
		"\u1036\u1038\u0003\u0230\u0118\u0000\u1037\u1034\u0001\u0000\u0000\u0000"+
		"\u1037\u1035\u0001\u0000\u0000\u0000\u1037\u1036\u0001\u0000\u0000\u0000"+
		"\u1038\u011d\u0001\u0000\u0000\u0000\u1039\u103a\u0005\u0264\u0000\u0000"+
		"\u103a\u1043\u0005\u027c\u0000\u0000\u103b\u1040\u0003\u0134\u009a\u0000"+
		"\u103c\u103d\u0005\u0465\u0000\u0000\u103d\u103f\u0003\u0134\u009a\u0000"+
		"\u103e\u103c\u0001\u0000\u0000\u0000\u103f\u1042\u0001\u0000\u0000\u0000"+
		"\u1040\u103e\u0001\u0000\u0000\u0000\u1040\u1041\u0001\u0000\u0000\u0000"+
		"\u1041\u1044\u0001\u0000\u0000\u0000\u1042\u1040\u0001\u0000\u0000\u0000"+
		"\u1043\u103b\u0001\u0000\u0000\u0000\u1043\u1044\u0001\u0000\u0000\u0000"+
		"\u1044\u011f\u0001\u0000\u0000\u0000\u1045\u1047\u0005\u014f\u0000\u0000"+
		"\u1046\u1048\u0005\u0295\u0000\u0000\u1047\u1046\u0001\u0000\u0000\u0000"+
		"\u1047\u1048\u0001\u0000\u0000\u0000\u1048\u0121\u0001\u0000\u0000\u0000"+
		"\u1049\u104b\u0005\u0168\u0000\u0000\u104a\u104c\u0005\u0295\u0000\u0000"+
		"\u104b\u104a\u0001\u0000\u0000\u0000\u104b\u104c\u0001\u0000\u0000\u0000"+
		"\u104c\u1052\u0001\u0000\u0000\u0000\u104d\u104f\u0005\n\u0000\u0000\u104e"+
		"\u1050\u0005\u01fc\u0000\u0000\u104f\u104e\u0001\u0000\u0000\u0000\u104f"+
		"\u1050\u0001\u0000\u0000\u0000\u1050\u1051\u0001\u0000\u0000\u0000\u1051"+
		"\u1053\u0005\u0158\u0000\u0000\u1052\u104d\u0001\u0000\u0000\u0000\u1052"+
		"\u1053\u0001\u0000\u0000\u0000\u1053\u1058\u0001\u0000\u0000\u0000\u1054"+
		"\u1056\u0005\u01fc\u0000\u0000\u1055\u1054\u0001\u0000\u0000\u0000\u1055"+
		"\u1056\u0001\u0000\u0000\u0000\u1056\u1057\u0001\u0000\u0000\u0000\u1057"+
		"\u1059\u0005\u0086\u0000\u0000\u1058\u1055\u0001\u0000\u0000\u0000\u1058"+
		"\u1059\u0001\u0000\u0000\u0000\u1059\u0123\u0001\u0000\u0000\u0000\u105a"+
		"\u105c\u0005\u0244\u0000\u0000\u105b\u105d\u0005\u0295\u0000\u0000\u105c"+
		"\u105b\u0001\u0000\u0000\u0000\u105c\u105d\u0001\u0000\u0000\u0000\u105d"+
		"\u1063\u0001\u0000\u0000\u0000\u105e\u1060\u0005\n\u0000\u0000\u105f\u1061"+
		"\u0005\u01fc\u0000\u0000\u1060\u105f\u0001\u0000\u0000\u0000\u1060\u1061"+
		"\u0001\u0000\u0000\u0000\u1061\u1062\u0001\u0000\u0000\u0000\u1062\u1064"+
		"\u0005\u0158\u0000\u0000\u1063\u105e\u0001\u0000\u0000\u0000\u1063\u1064"+
		"\u0001\u0000\u0000\u0000\u1064\u1069\u0001\u0000\u0000\u0000\u1065\u1067"+
		"\u0005\u01fc\u0000\u0000\u1066\u1065\u0001\u0000\u0000\u0000\u1066\u1067"+
		"\u0001\u0000\u0000\u0000\u1067\u1068\u0001\u0000\u0000\u0000\u1068\u106a"+
		"\u0005\u0086\u0000\u0000\u1069\u1066\u0001\u0000\u0000\u0000\u1069\u106a"+
		"\u0001\u0000\u0000\u0000\u106a\u0125\u0001\u0000\u0000\u0000\u106b\u106c"+
		"\u0005\u024b\u0000\u0000\u106c\u106d\u0003\u022e\u0117\u0000\u106d\u0127"+
		"\u0001\u0000\u0000\u0000\u106e\u1070\u0005\u0244\u0000\u0000\u106f\u1071"+
		"\u0005\u0295\u0000\u0000\u1070\u106f\u0001\u0000\u0000\u0000\u1070\u1071"+
		"\u0001\u0000\u0000\u0000\u1071\u1072\u0001\u0000\u0000\u0000\u1072\u1074"+
		"\u0005\u00a9\u0000\u0000\u1073\u1075\u0005\u024b\u0000\u0000\u1074\u1073"+
		"\u0001\u0000\u0000\u0000\u1074\u1075\u0001\u0000\u0000\u0000\u1075\u1076"+
		"\u0001\u0000\u0000\u0000\u1076\u1077\u0003\u022e\u0117\u0000\u1077\u0129"+
		"\u0001\u0000\u0000\u0000\u1078\u1079\u0005\u0086\u0000\u0000\u1079\u107a"+
		"\u0005\u024b\u0000\u0000\u107a\u107b\u0003\u022e\u0117\u0000\u107b\u012b"+
		"\u0001\u0000\u0000\u0000\u107c\u107d\u0005c\u0000\u0000\u107d\u107e\u0007"+
		"9\u0000\u0000\u107e\u1083\u0003\u0136\u009b\u0000\u107f\u1080\u0005\u0465"+
		"\u0000\u0000\u1080\u1082\u0003\u0136\u009b\u0000\u1081\u107f\u0001\u0000"+
		"\u0000\u0000\u1082\u1085\u0001\u0000\u0000\u0000\u1083\u1081\u0001\u0000"+
		"\u0000\u0000\u1083\u1084\u0001\u0000\u0000\u0000\u1084\u1087\u0001\u0000"+
		"\u0000\u0000\u1085\u1083\u0001\u0000\u0000\u0000\u1086\u1088\u0003\u0268"+
		"\u0134\u0000\u1087\u1086\u0001\u0000\u0000\u0000\u1087\u1088\u0001\u0000"+
		"\u0000\u0000\u1088\u012d\u0001\u0000\u0000\u0000\u1089\u108a\u0005\u00b0"+
		"\u0000\u0000\u108a\u108b\u0005\u02a8\u0000\u0000\u108b\u012f\u0001\u0000"+
		"\u0000\u0000\u108c\u108d\u0005\u0095\u0000\u0000\u108d\u108e\u0005\u014b"+
		"\u0000\u0000\u108e\u108f\u0005\u045a\u0000\u0000\u108f\u1090\u0007\u001b"+
		"\u0000\u0000\u1090\u0131\u0001\u0000\u0000\u0000\u1091\u1093\u0005\u0095"+
		"\u0000\u0000\u1092\u1094\u0007:\u0000\u0000\u1093\u1092\u0001\u0000\u0000"+
		"\u0000\u1093\u1094\u0001\u0000\u0000\u0000\u1094\u1095\u0001\u0000\u0000"+
		"\u0000\u1095\u1096\u0005\u027c\u0000\u0000\u1096\u109b\u0003\u013a\u009d"+
		"\u0000\u1097\u1098\u0005\u0465\u0000\u0000\u1098\u109a\u0003\u013a\u009d"+
		"\u0000\u1099\u1097\u0001\u0000\u0000\u0000\u109a\u109d\u0001\u0000\u0000"+
		"\u0000\u109b\u1099\u0001\u0000\u0000\u0000\u109b\u109c\u0001\u0000\u0000"+
		"\u0000\u109c\u0133\u0001\u0000\u0000\u0000\u109d\u109b\u0001\u0000\u0000"+
		"\u0000\u109e\u109f\u0005\u00ba\u0000\u0000\u109f\u10a0\u0005\u0170\u0000"+
		"\u0000\u10a0\u10a6\u0005\u0257\u0000\u0000\u10a1\u10a2\u0005\u0082\u0000"+
		"\u0000\u10a2\u10a6\u0005\u00bb\u0000\u0000\u10a3\u10a4\u0005\u0082\u0000"+
		"\u0000\u10a4\u10a6\u0005\u020d\u0000\u0000\u10a5\u109e\u0001\u0000\u0000"+
		"\u0000\u10a5\u10a1\u0001\u0000\u0000\u0000\u10a5\u10a3\u0001\u0000\u0000"+
		"\u0000\u10a6\u0135\u0001\u0000\u0000\u0000\u10a7\u10ac\u0003\u0214\u010a"+
		"\u0000\u10a8\u10aa\u0005\f\u0000\u0000\u10a9\u10a8\u0001\u0000\u0000\u0000"+
		"\u10a9\u10aa\u0001\u0000\u0000\u0000\u10aa\u10ab\u0001\u0000\u0000\u0000"+
		"\u10ab\u10ad\u0003\u022e\u0117\u0000\u10ac\u10a9\u0001\u0000\u0000\u0000"+
		"\u10ac\u10ad\u0001\u0000\u0000\u0000\u10ad\u10ae\u0001\u0000\u0000\u0000"+
		"\u10ae\u10af\u0003\u0138\u009c\u0000\u10af\u0137\u0001\u0000\u0000\u0000"+
		"\u10b0\u10b2\u0005\u0082\u0000\u0000\u10b1\u10b3\u0005\u01cd\u0000\u0000"+
		"\u10b2\u10b1\u0001\u0000\u0000\u0000\u10b2\u10b3\u0001\u0000\u0000\u0000"+
		"\u10b3\u10b9\u0001\u0000\u0000\u0000\u10b4\u10b6\u0005f\u0000\u0000\u10b5"+
		"\u10b4\u0001\u0000\u0000\u0000\u10b5\u10b6\u0001\u0000\u0000\u0000\u10b6"+
		"\u10b7\u0001\u0000\u0000\u0000\u10b7\u10b9\u0005\u00bb\u0000\u0000\u10b8"+
		"\u10b0\u0001\u0000\u0000\u0000\u10b8\u10b5\u0001\u0000\u0000\u0000\u10b9"+
		"\u0139\u0001\u0000\u0000\u0000\u10ba\u10bb\u0005\u01c3\u0000\u0000\u10bb"+
		"\u10bc\u0005\u01cb\u0000\u0000\u10bc\u10c2\u0003\u013c\u009e\u0000\u10bd"+
		"\u10be\u0005\u0082\u0000\u0000\u10be\u10c2\u0005\u00bb\u0000\u0000\u10bf"+
		"\u10c0\u0005\u0082\u0000\u0000\u10c0\u10c2\u0005\u020d\u0000\u0000\u10c1"+
		"\u10ba\u0001\u0000\u0000\u0000\u10c1\u10bd\u0001\u0000\u0000\u0000\u10c1"+
		"\u10bf\u0001\u0000\u0000\u0000\u10c2\u013b\u0001\u0000\u0000\u0000\u10c3"+
		"\u10c4\u0005\u030b\u0000\u0000\u10c4\u10cb\u0005\u0082\u0000\u0000\u10c5"+
		"\u10c6\u0005\u0082\u0000\u0000\u10c6\u10cb\u0005\u030c\u0000\u0000\u10c7"+
		"\u10c8\u0005\u0082\u0000\u0000\u10c8\u10cb\u0005\u030d\u0000\u0000\u10c9"+
		"\u10cb\u0005\u030e\u0000\u0000\u10ca\u10c3\u0001\u0000\u0000\u0000\u10ca"+
		"\u10c5\u0001\u0000\u0000\u0000\u10ca\u10c7\u0001\u0000\u0000\u0000\u10ca"+
		"\u10c9\u0001\u0000\u0000\u0000\u10cb\u013d\u0001\u0000\u0000\u0000\u10cc"+
		"\u10cd\u0005\u0017\u0000\u0000\u10cd\u10ce\u0005\u01d0\u0000\u0000\u10ce"+
		"\u10cf\u0005\u00a9\u0000\u0000\u10cf\u10d4\u0003\u0150\u00a8\u0000\u10d0"+
		"\u10d1\u0005\u0465\u0000\u0000\u10d1\u10d3\u0003\u0150\u00a8\u0000\u10d2"+
		"\u10d0\u0001\u0000\u0000\u0000\u10d3\u10d6\u0001\u0000\u0000\u0000\u10d4"+
		"\u10d2\u0001\u0000\u0000\u0000\u10d4\u10d5\u0001\u0000\u0000\u0000\u10d5"+
		"\u10d8\u0001\u0000\u0000\u0000\u10d6\u10d4\u0001\u0000\u0000\u0000\u10d7"+
		"\u10d9\u0003\u0158\u00ac\u0000\u10d8\u10d7\u0001\u0000\u0000\u0000\u10d8"+
		"\u10d9\u0001\u0000\u0000\u0000\u10d9\u013f\u0001\u0000\u0000\u0000\u10da"+
		"\u10db\u0005\u0017\u0000\u0000\u10db\u10dc\u0005\u023c\u0000\u0000\u10dc"+
		"\u10dd\u0005\u01a1\u0000\u0000\u10dd\u10e2\u0003\u015a\u00ad\u0000\u10de"+
		"\u10df\u0005\u0465\u0000\u0000\u10df\u10e1\u0003\u015a\u00ad\u0000\u10e0"+
		"\u10de\u0001\u0000\u0000\u0000\u10e1\u10e4\u0001\u0000\u0000\u0000\u10e2"+
		"\u10e0\u0001\u0000\u0000\u0000\u10e2\u10e3\u0001\u0000\u0000\u0000\u10e3"+
		"\u0141\u0001\u0000\u0000\u0000\u10e4\u10e2\u0001\u0000\u0000\u0000\u10e5"+
		"\u10e6\u0005\u0080\u0000\u0000\u10e6\u10e7\u0007;\u0000\u0000\u10e7\u10ec"+
		"\u0005\u01cf\u0000\u0000\u10e8\u10e9\u0005\u00a9\u0000\u0000\u10e9\u10ed"+
		"\u0005\u0472\u0000\u0000\u10ea\u10eb\u0005\u000e\u0000\u0000\u10eb\u10ed"+
		"\u0005\u0472\u0000\u0000\u10ec\u10e8\u0001\u0000\u0000\u0000\u10ec\u10ea"+
		"\u0001\u0000\u0000\u0000\u10ed\u0143\u0001\u0000\u0000\u0000\u10ee\u10ef"+
		"\u0005\u023d\u0000\u0000\u10ef\u10f0\u0005\u01d0\u0000\u0000\u10f0\u0145"+
		"\u0001\u0000\u0000\u0000\u10f1\u10f2\u0005\u023d\u0000\u0000\u10f2\u10f4"+
		"\u0005\u0255\u0000\u0000\u10f3\u10f5\u0005\u0006\u0000\u0000\u10f4\u10f3"+
		"\u0001\u0000\u0000\u0000\u10f4\u10f5\u0001\u0000\u0000\u0000\u10f5\u10f7"+
		"\u0001\u0000\u0000\u0000\u10f6\u10f8\u0003\u0158\u00ac\u0000\u10f7\u10f6"+
		"\u0001\u0000\u0000\u0000\u10f7\u10f8\u0001\u0000\u0000\u0000\u10f8\u0147"+
		"\u0001\u0000\u0000\u0000\u10f9\u10fa\u0005\u0264\u0000\u0000\u10fa\u1103"+
		"\u0005\u0255\u0000\u0000\u10fb\u1100\u0003\u015e\u00af\u0000\u10fc\u10fd"+
		"\u0005\u0465\u0000\u0000\u10fd\u10ff\u0003\u015e\u00af\u0000\u10fe\u10fc"+
		"\u0001\u0000\u0000\u0000\u10ff\u1102\u0001\u0000\u0000\u0000\u1100\u10fe"+
		"\u0001\u0000\u0000\u0000\u1100\u1101\u0001\u0000\u0000\u0000\u1101\u1104"+
		"\u0001\u0000\u0000\u0000\u1102\u1100\u0001\u0000\u0000\u0000\u1103\u10fb"+
		"\u0001\u0000\u0000\u0000\u1103\u1104\u0001\u0000\u0000\u0000\u1104\u1107"+
		"\u0001\u0000\u0000\u0000\u1105\u1106\u0005\u0286\u0000\u0000\u1106\u1108"+
		"\u0003\u0160\u00b0\u0000\u1107\u1105\u0001\u0000\u0000\u0000\u1107\u1108"+
		"\u0001\u0000\u0000\u0000\u1108\u110c\u0001\u0000\u0000\u0000\u1109\u110b"+
		"\u0003\u0162\u00b1\u0000\u110a\u1109\u0001\u0000\u0000\u0000\u110b\u110e"+
		"\u0001\u0000\u0000\u0000\u110c\u110a\u0001\u0000\u0000\u0000\u110c\u110d"+
		"\u0001\u0000\u0000\u0000\u110d\u1110\u0001\u0000\u0000\u0000\u110e\u110c"+
		"\u0001\u0000\u0000\u0000\u110f\u1111\u0003\u0158\u00ac\u0000\u1110\u110f"+
		"\u0001\u0000\u0000\u0000\u1110\u1111\u0001\u0000\u0000\u0000\u1111\u0149"+
		"\u0001\u0000\u0000\u0000\u1112\u1113\u0005\u026a\u0000\u0000\u1113\u111c"+
		"\u0005\u0255\u0000\u0000\u1114\u1119\u0003\u015e\u00af\u0000\u1115\u1116"+
		"\u0005\u0465\u0000\u0000\u1116\u1118\u0003\u015e\u00af\u0000\u1117\u1115"+
		"\u0001\u0000\u0000\u0000\u1118\u111b\u0001\u0000\u0000\u0000\u1119\u1117"+
		"\u0001\u0000\u0000\u0000\u1119\u111a\u0001\u0000\u0000\u0000\u111a\u111d"+
		"\u0001\u0000\u0000\u0000\u111b\u1119\u0001\u0000\u0000\u0000\u111c\u1114"+
		"\u0001\u0000\u0000\u0000\u111c\u111d\u0001\u0000\u0000\u0000\u111d\u014b"+
		"\u0001\u0000\u0000\u0000\u111e\u111f\u0005\u0264\u0000\u0000\u111f\u1120"+
		"\u0005\u01ad\u0000\u0000\u1120\u014d\u0001\u0000\u0000\u0000\u1121\u1122"+
		"\u0005\u026a\u0000\u0000\u1122\u1123\u0005\u01ad\u0000\u0000\u1123\u014f"+
		"\u0001\u0000\u0000\u0000\u1124\u1125\u0003\u0152\u00a9\u0000\u1125\u1126"+
		"\u0005\u045a\u0000\u0000\u1126\u1127\u0005\u0472\u0000\u0000\u1127\u1142"+
		"\u0001\u0000\u0000\u0000\u1128\u1129\u0003\u0154\u00aa\u0000\u1129\u112a"+
		"\u0005\u045a\u0000\u0000\u112a\u112b\u0003\u0234\u011a\u0000\u112b\u1142"+
		"\u0001\u0000\u0000\u0000\u112c\u112d\u0003\u0156\u00ab\u0000\u112d\u112e"+
		"\u0005\u045a\u0000\u0000\u112e\u112f\u0007\u001b\u0000\u0000\u112f\u1142"+
		"\u0001\u0000\u0000\u0000\u1130\u1131\u0005\u01d4\u0000\u0000\u1131\u1132"+
		"\u0005\u045a\u0000\u0000\u1132\u1142\u0005\u0475\u0000\u0000\u1133\u1134"+
		"\u0005\u01b4\u0000\u0000\u1134\u1135\u0005\u045a\u0000\u0000\u1135\u113e"+
		"\u0005\u0463\u0000\u0000\u1136\u113b\u0003\u022e\u0117\u0000\u1137\u1138"+
		"\u0005\u0465\u0000\u0000\u1138\u113a\u0003\u022e\u0117\u0000\u1139\u1137"+
		"\u0001\u0000\u0000\u0000\u113a\u113d\u0001\u0000\u0000\u0000\u113b\u1139"+
		"\u0001\u0000\u0000\u0000\u113b\u113c\u0001\u0000\u0000\u0000\u113c\u113f"+
		"\u0001\u0000\u0000\u0000\u113d\u113b\u0001\u0000\u0000\u0000\u113e\u1136"+
		"\u0001\u0000\u0000\u0000\u113e\u113f\u0001\u0000\u0000\u0000\u113f\u1140"+
		"\u0001\u0000\u0000\u0000\u1140\u1142\u0005\u0464\u0000\u0000\u1141\u1124"+
		"\u0001\u0000\u0000\u0000\u1141\u1128\u0001\u0000\u0000\u0000\u1141\u112c"+
		"\u0001\u0000\u0000\u0000\u1141\u1130\u0001\u0000\u0000\u0000\u1141\u1133"+
		"\u0001\u0000\u0000\u0000\u1142\u0151\u0001\u0000\u0000\u0000\u1143\u1144"+
		"\u0007<\u0000\u0000\u1144\u0153\u0001\u0000\u0000\u0000\u1145\u1146\u0007"+
		"=\u0000\u0000\u1146\u0155\u0001\u0000\u0000\u0000\u1147\u1148\u0007>\u0000"+
		"\u0000\u1148\u0157\u0001\u0000\u0000\u0000\u1149\u114a\u0005>\u0000\u0000"+
		"\u114a\u114b\u0005\u015a\u0000\u0000\u114b\u114c\u0005\u0472\u0000\u0000"+
		"\u114c\u0159\u0001\u0000\u0000\u0000\u114d\u114e\u0005\u0235\u0000\u0000"+
		"\u114e\u114f\u0005\u045a\u0000\u0000\u114f\u1150\u0005\u0463\u0000\u0000"+
		"\u1150\u1151\u0003\u024e\u0127\u0000\u1151\u1152\u0005\u0464\u0000\u0000"+
		"\u1152\u117f\u0001\u0000\u0000\u0000\u1153\u1154\u0005\u0237\u0000\u0000"+
		"\u1154\u1155\u0005\u045a\u0000\u0000\u1155\u1156\u0005\u0463\u0000\u0000"+
		"\u1156\u1157\u0003\u024e\u0127\u0000\u1157\u1158\u0005\u0464\u0000\u0000"+
		"\u1158\u117f\u0001\u0000\u0000\u0000\u1159\u115a\u0005\u0236\u0000\u0000"+
		"\u115a\u115b\u0005\u045a\u0000\u0000\u115b\u115c\u0005\u0463\u0000\u0000"+
		"\u115c\u115d\u0003\u0250\u0128\u0000\u115d\u115e\u0005\u0464\u0000\u0000"+
		"\u115e\u117f\u0001\u0000\u0000\u0000\u115f\u1160\u0005\u0238\u0000\u0000"+
		"\u1160\u1161\u0005\u045a\u0000\u0000\u1161\u1162\u0005\u0463\u0000\u0000"+
		"\u1162\u1163\u0003\u0250\u0128\u0000\u1163\u1164\u0005\u0464\u0000\u0000"+
		"\u1164\u117f\u0001\u0000\u0000\u0000\u1165\u1166\u0005\u023a\u0000\u0000"+
		"\u1166\u1167\u0005\u045a\u0000\u0000\u1167\u1168\u0005\u0463\u0000\u0000"+
		"\u1168\u1169\u0003\u025a\u012d\u0000\u1169\u116a\u0005\u0464\u0000\u0000"+
		"\u116a\u117f\u0001\u0000\u0000\u0000\u116b\u116c\u0005\u023b\u0000\u0000"+
		"\u116c\u116d\u0005\u045a\u0000\u0000\u116d\u116e\u0005\u0463\u0000\u0000"+
		"\u116e\u116f\u0003\u025a\u012d\u0000\u116f\u1170\u0005\u0464\u0000\u0000"+
		"\u1170\u117f\u0001\u0000\u0000\u0000\u1171\u1172\u0005\u0239\u0000\u0000"+
		"\u1172\u1173\u0005\u045a\u0000\u0000\u1173\u1174\u0005\u0463\u0000\u0000"+
		"\u1174\u1179\u0003\u015c\u00ae\u0000\u1175\u1176\u0005\u0465\u0000\u0000"+
		"\u1176\u1178\u0003\u015c\u00ae\u0000\u1177\u1175\u0001\u0000\u0000\u0000"+
		"\u1178\u117b\u0001\u0000\u0000\u0000\u1179\u1177\u0001\u0000\u0000\u0000"+
		"\u1179\u117a\u0001\u0000\u0000\u0000\u117a\u117c\u0001\u0000\u0000\u0000"+
		"\u117b\u1179\u0001\u0000\u0000\u0000\u117c\u117d\u0005\u0464\u0000\u0000"+
		"\u117d\u117f\u0001\u0000\u0000\u0000\u117e\u114d\u0001\u0000\u0000\u0000"+
		"\u117e\u1153\u0001\u0000\u0000\u0000\u117e\u1159\u0001\u0000\u0000\u0000"+
		"\u117e\u115f\u0001\u0000\u0000\u0000\u117e\u1165\u0001\u0000\u0000\u0000"+
		"\u117e\u116b\u0001\u0000\u0000\u0000\u117e\u1171\u0001\u0000\u0000\u0000"+
		"\u117f\u015b\u0001\u0000\u0000\u0000\u1180\u1181\u0005\u0463\u0000\u0000"+
		"\u1181\u1182\u0003\u0214\u010a\u0000\u1182\u1183\u0005\u0465\u0000\u0000"+
		"\u1183\u1184\u0003\u0214\u010a\u0000\u1184\u1185\u0005\u0464\u0000\u0000"+
		"\u1185\u015d\u0001\u0000\u0000\u0000\u1186\u1187\u0007?\u0000\u0000\u1187"+
		"\u015f\u0001\u0000\u0000\u0000\u1188\u1189\u0007@\u0000\u0000\u1189\u118a"+
		"\u0005\u045a\u0000\u0000\u118a\u119b\u0003\u0164\u00b2\u0000\u118b\u118c"+
		"\u0005\u01d6\u0000\u0000\u118c\u118d\u0005\u045a\u0000\u0000\u118d\u118e"+
		"\u0005\u0472\u0000\u0000\u118e\u118f\u0005\u0465\u0000\u0000\u118f\u1190"+
		"\u0005\u01d7\u0000\u0000\u1190\u1191\u0005\u045a\u0000\u0000\u1191\u119b"+
		"\u0003\u0234\u011a\u0000\u1192\u1193\u0005\u022f\u0000\u0000\u1193\u1194"+
		"\u0005\u045a\u0000\u0000\u1194\u1195\u0005\u0472\u0000\u0000\u1195\u1196"+
		"\u0005\u0465\u0000\u0000\u1196\u1197\u0005\u0230\u0000\u0000\u1197\u1198"+
		"\u0005\u045a\u0000\u0000\u1198\u119b\u0003\u0234\u011a\u0000\u1199\u119b"+
		"\u0005\u025e\u0000\u0000\u119a\u1188\u0001\u0000\u0000\u0000\u119a\u118b"+
		"\u0001\u0000\u0000\u0000\u119a\u1192\u0001\u0000\u0000\u0000\u119a\u1199"+
		"\u0001\u0000\u0000\u0000\u119b\u0161\u0001\u0000\u0000\u0000\u119c\u119d"+
		"\u0005\u0288\u0000\u0000\u119d\u119e\u0005\u045a\u0000\u0000\u119e\u11a9"+
		"\u0005\u0472\u0000\u0000\u119f\u11a0\u0005\u0218\u0000\u0000\u11a0\u11a1"+
		"\u0005\u045a\u0000\u0000\u11a1\u11a9\u0005\u0472\u0000\u0000\u11a2\u11a3"+
		"\u0005\u017e\u0000\u0000\u11a3\u11a4\u0005\u045a\u0000\u0000\u11a4\u11a9"+
		"\u0005\u0472\u0000\u0000\u11a5\u11a6\u0005\u021b\u0000\u0000\u11a6\u11a7"+
		"\u0005\u045a\u0000\u0000\u11a7\u11a9\u0005\u0472\u0000\u0000\u11a8\u119c"+
		"\u0001\u0000\u0000\u0000\u11a8\u119f\u0001\u0000\u0000\u0000\u11a8\u11a2"+
		"\u0001\u0000\u0000\u0000\u11a8\u11a5\u0001\u0000\u0000\u0000\u11a9\u0163"+
		"\u0001\u0000\u0000\u0000\u11aa\u11af\u0003\u0226\u0113\u0000\u11ab\u11ac"+
		"\u0005\u0465\u0000\u0000\u11ac\u11ae\u0003\u0226\u0113\u0000\u11ad\u11ab"+
		"\u0001\u0000\u0000\u0000\u11ae\u11b1\u0001\u0000\u0000\u0000\u11af\u11ad"+
		"\u0001\u0000\u0000\u0000\u11af\u11b0\u0001\u0000\u0000\u0000\u11b0\u11b4"+
		"\u0001\u0000\u0000\u0000\u11b1\u11af\u0001\u0000\u0000\u0000\u11b2\u11b4"+
		"\u0005\u0472\u0000\u0000\u11b3\u11aa\u0001\u0000\u0000\u0000\u11b3\u11b2"+
		"\u0001\u0000\u0000\u0000\u11b4\u0165\u0001\u0000\u0000\u0000\u11b5\u11b6"+
		"\u0005\u0298\u0000\u0000\u11b6\u11b7\u0007A\u0000\u0000\u11b7\u11b9\u0003"+
		"\u0228\u0114\u0000\u11b8\u11ba\u0007B\u0000\u0000\u11b9\u11b8\u0001\u0000"+
		"\u0000\u0000\u11b9\u11ba\u0001\u0000\u0000\u0000\u11ba\u0167\u0001\u0000"+
		"\u0000\u0000\u11bb\u11bc\u0005\u0298\u0000\u0000\u11bc\u11bd\u0005\u018c"+
		"\u0000\u0000\u11bd\u11c3\u0003\u0228\u0114\u0000\u11be\u11c1\u0005\u0272"+
		"\u0000\u0000\u11bf\u11c0\u0005>\u0000\u0000\u11c0\u11c2\u0005\u01f0\u0000"+
		"\u0000\u11c1\u11bf\u0001\u0000\u0000\u0000\u11c1\u11c2\u0001\u0000\u0000"+
		"\u0000\u11c2\u11c4\u0001\u0000\u0000\u0000\u11c3\u11be\u0001\u0000\u0000"+
		"\u0000\u11c3\u11c4\u0001\u0000\u0000\u0000\u11c4\u0169\u0001\u0000\u0000"+
		"\u0000\u11c5\u11c6\u0005\u0298\u0000\u0000\u11c6\u11c7\u0005\u0220\u0000"+
		"\u0000\u11c7\u11c8\u0003\u0228\u0114\u0000\u11c8\u016b\u0001\u0000\u0000"+
		"\u0000\u11c9\u11ca\u0005\u0298\u0000\u0000\u11ca\u11cb\u0005\u0168\u0000"+
		"\u0000\u11cb\u11ce\u0003\u0228\u0114\u0000\u11cc\u11cd\u0005\u020b\u0000"+
		"\u0000\u11cd\u11cf\u0005\u0219\u0000\u0000\u11ce\u11cc\u0001\u0000\u0000"+
		"\u0000\u11ce\u11cf\u0001\u0000\u0000\u0000\u11cf\u016d\u0001\u0000\u0000"+
		"\u0000\u11d0\u11d1\u0005\u0298\u0000\u0000\u11d1\u11d2\u0005\u0244\u0000"+
		"\u0000\u11d2\u11d3\u0003\u0228\u0114\u0000\u11d3\u016f\u0001\u0000\u0000"+
		"\u0000\u11d4\u11d5\u0005\u0298\u0000\u0000\u11d5\u11d8\u0005\u022a\u0000"+
		"\u0000\u11d6\u11d7\u0005\u001f\u0000\u0000\u11d7\u11d9\u0003\u0228\u0114"+
		"\u0000\u11d8\u11d6\u0001\u0000\u0000\u0000\u11d8\u11d9\u0001\u0000\u0000"+
		"\u0000\u11d9\u0171\u0001\u0000\u0000\u0000\u11da\u11db\u0005\u0220\u0000"+
		"\u0000\u11db\u11dc\u0003\u022e\u0117\u0000\u11dc\u11df\u0005A\u0000\u0000"+
		"\u11dd\u11e0\u0005\u0472\u0000\u0000\u11de\u11e0\u0005\u047f\u0000\u0000"+
		"\u11df\u11dd\u0001\u0000\u0000\u0000\u11df\u11de\u0001\u0000\u0000\u0000"+
		"\u11e0\u0173\u0001\u0000\u0000\u0000\u11e1\u11e2\u0005\u02aa\u0000\u0000"+
		"\u11e2\u11e5\u0003\u022e\u0117\u0000\u11e3\u11e4\u0005\u00b5\u0000\u0000"+
		"\u11e4\u11e6\u0003\u025c\u012e\u0000\u11e5\u11e3\u0001\u0000\u0000\u0000"+
		"\u11e5\u11e6\u0001\u0000\u0000\u0000\u11e6\u0175\u0001\u0000\u0000\u0000"+
		"\u11e7\u11e8\u0007C\u0000\u0000\u11e8\u11e9\u0005\u0220\u0000\u0000\u11e9"+
		"\u11ea\u0003\u022e\u0117\u0000\u11ea\u0177\u0001\u0000\u0000\u0000\u11eb"+
		"\u11ee\u0003\u017a\u00bd\u0000\u11ec\u11ee\u0003\u0004\u0002\u0000\u11ed"+
		"\u11eb\u0001\u0000\u0000\u0000\u11ed\u11ec\u0001\u0000\u0000\u0000\u11ee"+
		"\u0179\u0001\u0000\u0000\u0000\u11ef\u11f0\u0003\u022e\u0117\u0000\u11f0"+
		"\u11f1\u0005\u046e\u0000\u0000\u11f1\u11f3\u0001\u0000\u0000\u0000\u11f2"+
		"\u11ef\u0001\u0000\u0000\u0000\u11f2\u11f3\u0001\u0000\u0000\u0000\u11f3"+
		"\u11f4\u0001\u0000\u0000\u0000\u11f4\u121b\u0005\u014f\u0000\u0000\u11f5"+
		"\u11f6\u0003\u018e\u00c7\u0000\u11f6\u11f7\u0005\u0466\u0000\u0000\u11f7"+
		"\u11f9\u0001\u0000\u0000\u0000\u11f8\u11f5\u0001\u0000\u0000\u0000\u11f9"+
		"\u11fc\u0001\u0000\u0000\u0000\u11fa\u11f8\u0001\u0000\u0000\u0000\u11fa"+
		"\u11fb\u0001\u0000\u0000\u0000\u11fb\u1202\u0001\u0000\u0000\u0000\u11fc"+
		"\u11fa\u0001\u0000\u0000\u0000\u11fd\u11fe\u0003\u0190\u00c8\u0000\u11fe"+
		"\u11ff\u0005\u0466\u0000\u0000\u11ff\u1201\u0001\u0000\u0000\u0000\u1200"+
		"\u11fd\u0001\u0000\u0000\u0000\u1201\u1204\u0001\u0000\u0000\u0000\u1202"+
		"\u1200\u0001\u0000\u0000\u0000\u1202\u1203\u0001\u0000\u0000\u0000\u1203"+
		"\u120a\u0001\u0000\u0000\u0000\u1204\u1202\u0001\u0000\u0000\u0000\u1205"+
		"\u1206\u0003\u0192\u00c9\u0000\u1206\u1207\u0005\u0466\u0000\u0000\u1207"+
		"\u1209\u0001\u0000\u0000\u0000\u1208\u1205\u0001\u0000\u0000\u0000\u1209"+
		"\u120c\u0001\u0000\u0000\u0000\u120a\u1208\u0001\u0000\u0000\u0000\u120a"+
		"\u120b\u0001\u0000\u0000\u0000\u120b\u1212\u0001\u0000\u0000\u0000\u120c"+
		"\u120a\u0001\u0000\u0000\u0000\u120d\u120e\u0003\u0194\u00ca\u0000\u120e"+
		"\u120f\u0005\u0466\u0000\u0000\u120f\u1211\u0001\u0000\u0000\u0000\u1210"+
		"\u120d\u0001\u0000\u0000\u0000\u1211\u1214\u0001\u0000\u0000\u0000\u1212"+
		"\u1210\u0001\u0000\u0000\u0000\u1212\u1213\u0001\u0000\u0000\u0000\u1213"+
		"\u1218\u0001\u0000\u0000\u0000\u1214\u1212\u0001\u0000\u0000\u0000\u1215"+
		"\u1217\u0003\u0198\u00cc\u0000\u1216\u1215\u0001\u0000\u0000\u0000\u1217"+
		"\u121a\u0001\u0000\u0000\u0000\u1218\u1216\u0001\u0000\u0000\u0000\u1218"+
		"\u1219\u0001\u0000\u0000\u0000\u1219\u121c\u0001\u0000\u0000\u0000\u121a"+
		"\u1218\u0001\u0000\u0000\u0000\u121b\u11fa\u0001\u0000\u0000\u0000\u121b"+
		"\u121c\u0001\u0000\u0000\u0000\u121c\u121d\u0001\u0000\u0000\u0000\u121d"+
		"\u121f\u0005\u018c\u0000\u0000\u121e\u1220\u0003\u022e\u0117\u0000\u121f"+
		"\u121e\u0001\u0000\u0000\u0000\u121f\u1220\u0001\u0000\u0000\u0000\u1220"+
		"\u017b\u0001\u0000\u0000\u0000\u1221\u1224\u0005\u0015\u0000\u0000\u1222"+
		"\u1225\u0003\u022e\u0117\u0000\u1223\u1225\u0003\u0294\u014a\u0000\u1224"+
		"\u1222\u0001\u0000\u0000\u0000\u1224\u1223\u0001\u0000\u0000\u0000\u1224"+
		"\u1225\u0001\u0000\u0000\u0000\u1225\u1227\u0001\u0000\u0000\u0000\u1226"+
		"\u1228\u0003\u019a\u00cd\u0000\u1227\u1226\u0001\u0000\u0000\u0000\u1228"+
		"\u1229\u0001\u0000\u0000\u0000\u1229\u1227\u0001\u0000\u0000\u0000\u1229"+
		"\u122a\u0001\u0000\u0000\u0000\u122a\u1231\u0001\u0000\u0000\u0000\u122b"+
		"\u122d\u00053\u0000\u0000\u122c\u122e\u0003\u0198\u00cc\u0000\u122d\u122c"+
		"\u0001\u0000\u0000\u0000\u122e\u122f\u0001\u0000\u0000\u0000\u122f\u122d"+
		"\u0001\u0000\u0000\u0000\u122f\u1230\u0001\u0000\u0000\u0000\u1230\u1232"+
		"\u0001\u0000\u0000\u0000\u1231\u122b\u0001\u0000\u0000\u0000\u1231\u1232"+
		"\u0001\u0000\u0000\u0000\u1232\u1233\u0001\u0000\u0000\u0000\u1233\u1234"+
		"\u0005\u018c\u0000\u0000\u1234\u1235\u0005\u0015\u0000\u0000\u1235\u017d"+
		"\u0001\u0000\u0000\u0000\u1236\u1237\u0005J\u0000\u0000\u1237\u1238\u0003"+
		"\u0294\u014a\u0000\u1238\u123a\u0005\u00a8\u0000\u0000\u1239\u123b\u0003"+
		"\u0198\u00cc\u0000\u123a\u1239\u0001\u0000\u0000\u0000\u123b\u123c\u0001"+
		"\u0000\u0000\u0000\u123c\u123a\u0001\u0000\u0000\u0000\u123c\u123d\u0001"+
		"\u0000\u0000\u0000\u123d\u1241\u0001\u0000\u0000\u0000\u123e\u1240\u0003"+
		"\u019c\u00ce\u0000\u123f\u123e\u0001\u0000\u0000\u0000\u1240\u1243\u0001"+
		"\u0000\u0000\u0000\u1241\u123f\u0001\u0000\u0000\u0000\u1241\u1242\u0001"+
		"\u0000\u0000\u0000\u1242\u124a\u0001\u0000\u0000\u0000\u1243\u1241\u0001"+
		"\u0000\u0000\u0000\u1244\u1246\u00053\u0000\u0000\u1245\u1247\u0003\u0198"+
		"\u00cc\u0000\u1246\u1245\u0001\u0000\u0000\u0000\u1247\u1248\u0001\u0000"+
		"\u0000\u0000\u1248\u1246\u0001\u0000\u0000\u0000\u1248\u1249\u0001\u0000"+
		"\u0000\u0000\u1249\u124b\u0001\u0000\u0000\u0000\u124a\u1244\u0001\u0000"+
		"\u0000\u0000\u124a\u124b\u0001\u0000\u0000\u0000\u124b\u124c\u0001\u0000"+
		"\u0000\u0000\u124c\u124d\u0005\u018c\u0000\u0000\u124d\u124e\u0005J\u0000"+
		"\u0000\u124e\u017f\u0001\u0000\u0000\u0000\u124f\u1250\u0005V\u0000\u0000"+
		"\u1250\u1251\u0003\u022e\u0117\u0000\u1251\u0181\u0001\u0000\u0000\u0000"+
		"\u1252\u1253\u0005\\\u0000\u0000\u1253\u1254\u0003\u022e\u0117\u0000\u1254"+
		"\u0183\u0001\u0000\u0000\u0000\u1255\u1256\u0003\u022e\u0117\u0000\u1256"+
		"\u1257\u0005\u046e\u0000\u0000\u1257\u1259\u0001\u0000\u0000\u0000\u1258"+
		"\u1255\u0001\u0000\u0000\u0000\u1258\u1259\u0001\u0000\u0000\u0000\u1259"+
		"\u125a\u0001\u0000\u0000\u0000\u125a\u125c\u0005e\u0000\u0000\u125b\u125d"+
		"\u0003\u0198\u00cc\u0000\u125c\u125b\u0001\u0000\u0000\u0000\u125d\u125e"+
		"\u0001\u0000\u0000\u0000\u125e\u125c\u0001\u0000\u0000\u0000\u125e\u125f"+
		"\u0001\u0000\u0000\u0000\u125f\u1260\u0001\u0000\u0000\u0000\u1260\u1261"+
		"\u0005\u018c\u0000\u0000\u1261\u1263\u0005e\u0000\u0000\u1262\u1264\u0003"+
		"\u022e\u0117\u0000\u1263\u1262\u0001\u0000\u0000\u0000\u1263\u1264\u0001"+
		"\u0000\u0000\u0000\u1264\u0185\u0001\u0000\u0000\u0000\u1265\u1266\u0003"+
		"\u022e\u0117\u0000\u1266\u1267\u0005\u046e\u0000\u0000\u1267\u1269\u0001"+
		"\u0000\u0000\u0000\u1268\u1265\u0001\u0000\u0000\u0000\u1268\u1269\u0001"+
		"\u0000\u0000\u0000\u1269\u126a\u0001\u0000\u0000\u0000\u126a\u126c\u0005"+
		"\u0088\u0000\u0000\u126b\u126d\u0003\u0198\u00cc\u0000\u126c\u126b\u0001"+
		"\u0000\u0000\u0000\u126d\u126e\u0001\u0000\u0000\u0000\u126e\u126c\u0001"+
		"\u0000\u0000\u0000\u126e\u126f\u0001\u0000\u0000\u0000\u126f\u1270\u0001"+
		"\u0000\u0000\u0000\u1270\u1271\u0005\u0286\u0000\u0000\u1271\u1272\u0003"+
		"\u0294\u014a\u0000\u1272\u1273\u0005\u018c\u0000\u0000\u1273\u1275\u0005"+
		"\u0088\u0000\u0000\u1274\u1276\u0003\u022e\u0117\u0000\u1275\u1274\u0001"+
		"\u0000\u0000\u0000\u1275\u1276\u0001\u0000\u0000\u0000\u1276\u0187\u0001"+
		"\u0000\u0000\u0000\u1277\u1278\u0005\u008e\u0000\u0000\u1278\u1279\u0003"+
		"\u0294\u014a\u0000\u1279\u0189\u0001\u0000\u0000\u0000\u127a\u127b\u0003"+
		"\u022e\u0117\u0000\u127b\u127c\u0005\u046e\u0000\u0000\u127c\u127e\u0001"+
		"\u0000\u0000\u0000\u127d\u127a\u0001\u0000\u0000\u0000\u127d\u127e\u0001"+
		"\u0000\u0000\u0000\u127e\u127f\u0001\u0000\u0000\u0000\u127f\u1280\u0005"+
		"\u00b9\u0000\u0000\u1280\u1281\u0003\u0294\u014a\u0000\u1281\u1283\u0005"+
		"\u0186\u0000\u0000\u1282\u1284\u0003\u0198\u00cc\u0000\u1283\u1282\u0001"+
		"\u0000\u0000\u0000\u1284\u1285\u0001\u0000\u0000\u0000\u1285\u1283\u0001"+
		"\u0000\u0000\u0000\u1285\u1286\u0001\u0000\u0000\u0000\u1286\u1287\u0001"+
		"\u0000\u0000\u0000\u1287\u1288\u0005\u018c\u0000\u0000\u1288\u128a\u0005"+
		"\u00b9\u0000\u0000\u1289\u128b\u0003\u022e\u0117\u0000\u128a\u1289\u0001"+
		"\u0000\u0000\u0000\u128a\u128b\u0001\u0000\u0000\u0000\u128b\u018b\u0001"+
		"\u0000\u0000\u0000\u128c\u128d\u0005\u0160\u0000\u0000\u128d\u129c\u0003"+
		"\u022e\u0117\u0000\u128e\u1293\u0005=\u0000\u0000\u128f\u1291\u0005\u01fb"+
		"\u0000\u0000\u1290\u128f\u0001\u0000\u0000\u0000\u1290\u1291\u0001\u0000"+
		"\u0000\u0000\u1291\u1292\u0001\u0000\u0000\u0000\u1292\u1294\u0005A\u0000"+
		"\u0000\u1293\u1290\u0001\u0000\u0000\u0000\u1293\u1294\u0001\u0000\u0000"+
		"\u0000\u1294\u1295\u0001\u0000\u0000\u0000\u1295\u1296\u0003\u022e\u0117"+
		"\u0000\u1296\u1297\u0005T\u0000\u0000\u1297\u1298\u0003\u024e\u0127\u0000"+
		"\u1298\u129c\u0001\u0000\u0000\u0000\u1299\u129a\u0005\u020e\u0000\u0000"+
		"\u129a\u129c\u0003\u022e\u0117\u0000\u129b\u128c\u0001\u0000\u0000\u0000"+
		"\u129b\u128e\u0001\u0000\u0000\u0000\u129b\u1299\u0001\u0000\u0000\u0000"+
		"\u129c\u018d\u0001\u0000\u0000\u0000\u129d\u129e\u0005\'\u0000\u0000\u129e"+
		"\u129f\u0003\u024e\u0127\u0000\u129f\u12a2\u0003\u0242\u0121\u0000\u12a0"+
		"\u12a1\u0005(\u0000\u0000\u12a1\u12a3\u0003\u0294\u014a\u0000\u12a2\u12a0"+
		"\u0001\u0000\u0000\u0000\u12a2\u12a3\u0001\u0000\u0000\u0000\u12a3\u018f"+
		"\u0001\u0000\u0000\u0000\u12a4\u12a5\u0005\'\u0000\u0000\u12a5\u12a6\u0003"+
		"\u022e\u0117\u0000\u12a6\u12a7\u0005\u001c\u0000\u0000\u12a7\u12ae\u0005"+
		">\u0000\u0000\u12a8\u12af\u0003\u0234\u011a\u0000\u12a9\u12ab\u0005\u009d"+
		"\u0000\u0000\u12aa\u12ac\u0005\u028c\u0000\u0000\u12ab\u12aa\u0001\u0000"+
		"\u0000\u0000\u12ab\u12ac\u0001\u0000\u0000\u0000\u12ac\u12ad\u0001\u0000"+
		"\u0000\u0000\u12ad\u12af\u0005\u0472\u0000\u0000\u12ae\u12a8\u0001\u0000"+
		"\u0000\u0000\u12ae\u12a9\u0001\u0000\u0000\u0000\u12af\u0191\u0001\u0000"+
		"\u0000\u0000\u12b0\u12b1\u0005\'\u0000\u0000\u12b1\u12b2\u0003\u022e\u0117"+
		"\u0000\u12b2\u12b3\u0005$\u0000\u0000\u12b3\u12b4\u0005>\u0000\u0000\u12b4"+
		"\u12b5\u0003\u00ccf\u0000\u12b5\u0193\u0001\u0000\u0000\u0000\u12b6\u12b7"+
		"\u0005\'\u0000\u0000\u12b7\u12b8\u0007D\u0000\u0000\u12b8\u12b9\u0005"+
		"\u01ae\u0000\u0000\u12b9\u12ba\u0005>\u0000\u0000\u12ba\u12bf\u0003\u0196"+
		"\u00cb\u0000\u12bb\u12bc\u0005\u0465\u0000\u0000\u12bc\u12be\u0003\u0196"+
		"\u00cb\u0000\u12bd\u12bb\u0001\u0000\u0000\u0000\u12be\u12c1\u0001\u0000"+
		"\u0000\u0000\u12bf\u12bd\u0001\u0000\u0000\u0000\u12bf\u12c0\u0001\u0000"+
		"\u0000\u0000\u12c0\u12c2\u0001\u0000\u0000\u0000\u12c1\u12bf\u0001\u0000"+
		"\u0000\u0000\u12c2\u12c3\u0003\u0178\u00bc\u0000\u12c3\u0195\u0001\u0000"+
		"\u0000\u0000\u12c4\u12d0\u0003\u0234\u011a\u0000\u12c5\u12c7\u0005\u009d"+
		"\u0000\u0000\u12c6\u12c8\u0005\u028c\u0000\u0000\u12c7\u12c6\u0001\u0000"+
		"\u0000\u0000\u12c7\u12c8\u0001\u0000\u0000\u0000\u12c8\u12c9\u0001\u0000"+
		"\u0000\u0000\u12c9\u12d0\u0005\u0472\u0000\u0000\u12ca\u12d0\u0003\u022e"+
		"\u0117\u0000\u12cb\u12d0\u0005\u009e\u0000\u0000\u12cc\u12cd\u0005n\u0000"+
		"\u0000\u12cd\u12d0\u0005\u01a7\u0000\u0000\u12ce\u12d0\u0005\u009c\u0000"+
		"\u0000\u12cf\u12c4\u0001\u0000\u0000\u0000\u12cf\u12c5\u0001\u0000\u0000"+
		"\u0000\u12cf\u12ca\u0001\u0000\u0000\u0000\u12cf\u12cb\u0001\u0000\u0000"+
		"\u0000\u12cf\u12cc\u0001\u0000\u0000\u0000\u12cf\u12ce\u0001\u0000\u0000"+
		"\u0000\u12d0\u0197\u0001\u0000\u0000\u0000\u12d1\u12d4\u0003\u0012\t\u0000"+
		"\u12d2\u12d4\u0003\u0004\u0002\u0000\u12d3\u12d1\u0001\u0000\u0000\u0000"+
		"\u12d3\u12d2\u0001\u0000\u0000\u0000\u12d4\u12d5\u0001\u0000\u0000\u0000"+
		"\u12d5\u12d6\u0005\u0466\u0000\u0000\u12d6\u0199\u0001\u0000\u0000\u0000"+
		"\u12d7\u12da\u0005\u00b7\u0000\u0000\u12d8\u12db\u0003\u0240\u0120\u0000"+
		"\u12d9\u12db\u0003\u0294\u014a\u0000\u12da\u12d8\u0001\u0000\u0000\u0000"+
		"\u12da\u12d9\u0001\u0000\u0000\u0000\u12db\u12dc\u0001\u0000\u0000\u0000"+
		"\u12dc\u12de\u0005\u00a8\u0000\u0000\u12dd\u12df\u0003\u0198\u00cc\u0000"+
		"\u12de\u12dd\u0001\u0000\u0000\u0000\u12df\u12e0\u0001\u0000\u0000\u0000"+
		"\u12e0\u12de\u0001\u0000\u0000\u0000\u12e0\u12e1\u0001\u0000\u0000\u0000"+
		"\u12e1\u019b\u0001\u0000\u0000\u0000\u12e2\u12e3\u00054\u0000\u0000\u12e3"+
		"\u12e4\u0003\u0294\u014a\u0000\u12e4\u12e6\u0005\u00a8\u0000\u0000\u12e5"+
		"\u12e7\u0003\u0198\u00cc\u0000\u12e6\u12e5\u0001\u0000\u0000\u0000\u12e7"+
		"\u12e8\u0001\u0000\u0000\u0000\u12e8\u12e6\u0001\u0000\u0000\u0000\u12e8"+
		"\u12e9\u0001\u0000\u0000\u0000\u12e9\u019d\u0001\u0000\u0000\u0000\u12ea"+
		"\u12eb\u0005\u0007\u0000\u0000\u12eb\u12ec\u0005\u0288\u0000\u0000\u12ec"+
		"\u12f1\u0003\u01b2\u00d9\u0000\u12ed\u12ee\u0005\u0465\u0000\u0000\u12ee"+
		"\u12f0\u0003\u01b2\u00d9\u0000\u12ef\u12ed\u0001\u0000\u0000\u0000\u12f0"+
		"\u12f3\u0001\u0000\u0000\u0000\u12f1\u12ef\u0001\u0000\u0000\u0000\u12f1"+
		"\u12f2\u0001\u0000\u0000\u0000\u12f2\u1321\u0001\u0000\u0000\u0000\u12f3"+
		"\u12f1\u0001\u0000\u0000\u0000\u12f4\u12f5\u0005\u0007\u0000\u0000\u12f5"+
		"\u12f7\u0005\u0288\u0000\u0000\u12f6\u12f8\u0003\u0264\u0132\u0000\u12f7"+
		"\u12f6\u0001\u0000\u0000\u0000\u12f7\u12f8\u0001\u0000\u0000\u0000\u12f8"+
		"\u12f9\u0001\u0000\u0000\u0000\u12f9\u12fe\u0003\u01b4\u00da\u0000\u12fa"+
		"\u12fb\u0005\u0465\u0000\u0000\u12fb\u12fd\u0003\u01b4\u00da\u0000\u12fc"+
		"\u12fa\u0001\u0000\u0000\u0000\u12fd\u1300\u0001\u0000\u0000\u0000\u12fe"+
		"\u12fc\u0001\u0000\u0000\u0000\u12fe\u12ff\u0001\u0000\u0000\u0000\u12ff"+
		"\u130f\u0001\u0000\u0000\u0000\u1300\u12fe\u0001\u0000\u0000\u0000\u1301"+
		"\u130d\u0005\u008a\u0000\u0000\u1302\u130e\u0005\u0204\u0000\u0000\u1303"+
		"\u130a\u0003\u01b6\u00db\u0000\u1304\u1306\u0005\n\u0000\u0000\u1305\u1304"+
		"\u0001\u0000\u0000\u0000\u1305\u1306\u0001\u0000\u0000\u0000\u1306\u1307"+
		"\u0001\u0000\u0000\u0000\u1307\u1309\u0003\u01b6\u00db\u0000\u1308\u1305"+
		"\u0001\u0000\u0000\u0000\u1309\u130c\u0001\u0000\u0000\u0000\u130a\u1308"+
		"\u0001\u0000\u0000\u0000\u130a\u130b\u0001\u0000\u0000\u0000\u130b\u130e"+
		"\u0001\u0000\u0000\u0000\u130c\u130a\u0001\u0000\u0000\u0000\u130d\u1302"+
		"\u0001\u0000\u0000\u0000\u130d\u1303\u0001\u0000\u0000\u0000\u130e\u1310"+
		"\u0001\u0000\u0000\u0000\u130f\u1301\u0001\u0000\u0000\u0000\u130f\u1310"+
		"\u0001\u0000\u0000\u0000\u1310\u1317\u0001\u0000\u0000\u0000\u1311\u1313"+
		"\u0005\u00ba\u0000\u0000\u1312\u1314\u0003\u01b8\u00dc\u0000\u1313\u1312"+
		"\u0001\u0000\u0000\u0000\u1314\u1315\u0001\u0000\u0000\u0000\u1315\u1313"+
		"\u0001\u0000\u0000\u0000\u1315\u1316\u0001\u0000\u0000\u0000\u1316\u1318"+
		"\u0001\u0000\u0000\u0000\u1317\u1311\u0001\u0000\u0000\u0000\u1317\u1318"+
		"\u0001\u0000\u0000\u0000\u1318\u131d\u0001\u0000\u0000\u0000\u1319\u131c"+
		"\u0003\u01ba\u00dd\u0000\u131a\u131c\u0003\u01bc\u00de\u0000\u131b\u1319"+
		"\u0001\u0000\u0000\u0000\u131b\u131a\u0001\u0000\u0000\u0000\u131c\u131f"+
		"\u0001\u0000\u0000\u0000\u131d\u131b\u0001\u0000\u0000\u0000\u131d\u131e"+
		"\u0001\u0000\u0000\u0000\u131e\u1321\u0001\u0000\u0000\u0000\u131f\u131d"+
		"\u0001\u0000\u0000\u0000\u1320\u12ea\u0001\u0000\u0000\u0000\u1320\u12f4"+
		"\u0001\u0000\u0000\u0000\u1321\u019f\u0001\u0000\u0000\u0000\u1322\u1323"+
		"\u0005 \u0000\u0000\u1323\u1324\u0005\u0288\u0000\u0000\u1324\u1329\u0003"+
		"\u01b4\u00da\u0000\u1325\u1326\u0005\u0465\u0000\u0000\u1326\u1328\u0003"+
		"\u01b4\u00da\u0000\u1327\u1325\u0001\u0000\u0000\u0000\u1328\u132b\u0001"+
		"\u0000\u0000\u0000\u1329\u1327\u0001\u0000\u0000\u0000\u1329\u132a\u0001"+
		"\u0000\u0000\u0000\u132a\u1359\u0001\u0000\u0000\u0000\u132b\u1329\u0001"+
		"\u0000\u0000\u0000\u132c\u132d\u0005 \u0000\u0000\u132d\u132f\u0005\u0288"+
		"\u0000\u0000\u132e\u1330\u0003\u0266\u0133\u0000\u132f\u132e\u0001\u0000"+
		"\u0000\u0000\u132f\u1330\u0001\u0000\u0000\u0000\u1330\u1331\u0001\u0000"+
		"\u0000\u0000\u1331\u1336\u0003\u01b4\u00da\u0000\u1332\u1333\u0005\u0465"+
		"\u0000\u0000\u1333\u1335\u0003\u01b4\u00da\u0000\u1334\u1332\u0001\u0000"+
		"\u0000\u0000\u1335\u1338\u0001\u0000\u0000\u0000\u1336\u1334\u0001\u0000"+
		"\u0000\u0000\u1336\u1337\u0001\u0000\u0000\u0000\u1337\u1347\u0001\u0000"+
		"\u0000\u0000\u1338\u1336\u0001\u0000\u0000\u0000\u1339\u1345\u0005\u008a"+
		"\u0000\u0000\u133a\u1346\u0005\u0204\u0000\u0000\u133b\u1342\u0003\u01b6"+
		"\u00db\u0000\u133c\u133e\u0005\n\u0000\u0000\u133d\u133c\u0001\u0000\u0000"+
		"\u0000\u133d\u133e\u0001\u0000\u0000\u0000\u133e\u133f\u0001\u0000\u0000"+
		"\u0000\u133f\u1341\u0003\u01b6\u00db\u0000\u1340\u133d\u0001\u0000\u0000"+
		"\u0000\u1341\u1344\u0001\u0000\u0000\u0000\u1342\u1340\u0001\u0000\u0000"+
		"\u0000\u1342\u1343\u0001\u0000\u0000\u0000\u1343\u1346\u0001\u0000\u0000"+
		"\u0000\u1344\u1342\u0001\u0000\u0000\u0000\u1345\u133a\u0001\u0000\u0000"+
		"\u0000\u1345\u133b\u0001\u0000\u0000\u0000\u1346\u1348\u0001\u0000\u0000"+
		"\u0000\u1347\u1339\u0001\u0000\u0000\u0000\u1347\u1348\u0001\u0000\u0000"+
		"\u0000\u1348\u134f\u0001\u0000\u0000\u0000\u1349\u134b\u0005\u00ba\u0000"+
		"\u0000\u134a\u134c\u0003\u01b8\u00dc\u0000\u134b\u134a\u0001\u0000\u0000"+
		"\u0000\u134c\u134d\u0001\u0000\u0000\u0000\u134d\u134b\u0001\u0000\u0000"+
		"\u0000\u134d\u134e\u0001\u0000\u0000\u0000\u134e\u1350\u0001\u0000\u0000"+
		"\u0000\u134f\u1349\u0001\u0000\u0000\u0000\u134f\u1350\u0001\u0000\u0000"+
		"\u0000\u1350\u1355\u0001\u0000\u0000\u0000\u1351\u1354\u0003\u01ba\u00dd"+
		"\u0000\u1352\u1354\u0003\u01bc\u00de\u0000\u1353\u1351\u0001\u0000\u0000"+
		"\u0000\u1353\u1352\u0001\u0000\u0000\u0000\u1354\u1357\u0001\u0000\u0000"+
		"\u0000\u1355\u1353\u0001\u0000\u0000\u0000\u1355\u1356\u0001\u0000\u0000"+
		"\u0000\u1356\u1359\u0001\u0000\u0000\u0000\u1357\u1355\u0001\u0000\u0000"+
		"\u0000\u1358\u1322\u0001\u0000\u0000\u0000\u1358\u132c\u0001\u0000\u0000"+
		"\u0000\u1359\u01a1\u0001\u0000\u0000\u0000\u135a\u135b\u00051\u0000\u0000"+
		"\u135b\u135d\u0005\u0288\u0000\u0000\u135c\u135e\u0003\u0264\u0132\u0000"+
		"\u135d\u135c\u0001\u0000\u0000\u0000\u135d\u135e\u0001\u0000\u0000\u0000"+
		"\u135e\u135f\u0001\u0000\u0000\u0000\u135f\u1364\u0003\u021c\u010e\u0000"+
		"\u1360\u1361\u0005\u0465\u0000\u0000\u1361\u1363\u0003\u021c\u010e\u0000"+
		"\u1362\u1360\u0001\u0000\u0000\u0000\u1363\u1366\u0001\u0000\u0000\u0000"+
		"\u1364\u1362\u0001\u0000\u0000\u0000\u1364\u1365\u0001\u0000\u0000\u0000"+
		"\u1365\u01a3\u0001\u0000\u0000\u0000\u1366\u1364\u0001\u0000\u0000\u0000"+
		"\u1367\u1368\u0005E\u0000\u0000\u1368\u136d\u0003\u01be\u00df\u0000\u1369"+
		"\u136a\u0005\u0465\u0000\u0000\u136a\u136c\u0003\u01be\u00df\u0000\u136b"+
		"\u1369\u0001\u0000\u0000\u0000\u136c\u136f\u0001\u0000\u0000\u0000\u136d"+
		"\u136b\u0001\u0000\u0000\u0000\u136d\u136e\u0001\u0000\u0000\u0000\u136e"+
		"\u1370\u0001\u0000\u0000\u0000\u136f\u136d\u0001\u0000\u0000\u0000\u1370"+
		"\u1372\u0005r\u0000\u0000\u1371\u1373\u0007E\u0000\u0000\u1372\u1371\u0001"+
		"\u0000\u0000\u0000\u1372\u1373\u0001\u0000\u0000\u0000\u1373\u1374\u0001"+
		"\u0000\u0000\u0000\u1374\u1375\u0003\u01c2\u00e1\u0000\u1375\u1376\u0005"+
		"\u00a9\u0000\u0000\u1376\u137b\u0003\u01b4\u00da\u0000\u1377\u1378\u0005"+
		"\u0465\u0000\u0000\u1378\u137a\u0003\u01b4\u00da\u0000\u1379\u1377\u0001"+
		"\u0000\u0000\u0000\u137a\u137d\u0001\u0000\u0000\u0000\u137b\u1379\u0001"+
		"\u0000\u0000\u0000\u137b\u137c\u0001\u0000\u0000\u0000\u137c\u138c\u0001"+
		"\u0000\u0000\u0000\u137d\u137b\u0001\u0000\u0000\u0000\u137e\u138a\u0005"+
		"\u008a\u0000\u0000\u137f\u138b\u0005\u0204\u0000\u0000\u1380\u1387\u0003"+
		"\u01b6\u00db\u0000\u1381\u1383\u0005\n\u0000\u0000\u1382\u1381\u0001\u0000"+
		"\u0000\u0000\u1382\u1383\u0001\u0000\u0000\u0000\u1383\u1384\u0001\u0000"+
		"\u0000\u0000\u1384\u1386\u0003\u01b6\u00db\u0000\u1385\u1382\u0001\u0000"+
		"\u0000\u0000\u1386\u1389\u0001\u0000\u0000\u0000\u1387\u1385\u0001\u0000"+
		"\u0000\u0000\u1387\u1388\u0001\u0000\u0000\u0000\u1388\u138b\u0001\u0000"+
		"\u0000\u0000\u1389\u1387\u0001\u0000\u0000\u0000\u138a\u137f\u0001\u0000"+
		"\u0000\u0000\u138a\u1380\u0001\u0000\u0000\u0000\u138b\u138d\u0001\u0000"+
		"\u0000\u0000\u138c\u137e\u0001\u0000\u0000\u0000\u138c\u138d\u0001\u0000"+
		"\u0000\u0000\u138d\u1397\u0001\u0000\u0000\u0000\u138e\u1394\u0005\u00ba"+
		"\u0000\u0000\u138f\u1390\u0005E\u0000\u0000\u1390\u1393\u0005t\u0000\u0000"+
		"\u1391\u1393\u0003\u01b8\u00dc\u0000\u1392\u138f\u0001\u0000\u0000\u0000"+
		"\u1392\u1391\u0001\u0000\u0000\u0000\u1393\u1396\u0001\u0000\u0000\u0000"+
		"\u1394\u1392\u0001\u0000\u0000\u0000\u1394\u1395\u0001\u0000\u0000\u0000"+
		"\u1395\u1398\u0001\u0000\u0000\u0000\u1396\u1394\u0001\u0000\u0000\u0000"+
		"\u1397\u138e\u0001\u0000\u0000\u0000\u1397\u1398\u0001\u0000\u0000\u0000"+
		"\u1398\u139f\u0001\u0000\u0000\u0000\u1399\u139a\u0005\f\u0000\u0000\u139a"+
		"\u139b\u0003\u021c\u010e\u0000\u139b\u139c\u0005\u00ba\u0000\u0000\u139c"+
		"\u139d\u0005\u0243\u0000\u0000\u139d\u139e\u0003\u01a6\u00d3\u0000\u139e"+
		"\u13a0\u0001\u0000\u0000\u0000\u139f\u1399\u0001\u0000\u0000\u0000\u139f"+
		"\u13a0\u0001\u0000\u0000\u0000\u13a0\u13c5\u0001\u0000\u0000\u0000\u13a1"+
		"\u13a4\u0005E\u0000\u0000\u13a2\u13a5\u0003\u021c\u010e\u0000\u13a3\u13a5"+
		"\u0003\u022e\u0117\u0000\u13a4\u13a2\u0001\u0000\u0000\u0000\u13a4\u13a3"+
		"\u0001\u0000\u0000\u0000\u13a5\u13ad\u0001\u0000\u0000\u0000\u13a6\u13a9"+
		"\u0005\u0465\u0000\u0000\u13a7\u13aa\u0003\u021c\u010e\u0000\u13a8\u13aa"+
		"\u0003\u022e\u0117\u0000\u13a9\u13a7\u0001\u0000\u0000\u0000\u13a9\u13a8"+
		"\u0001\u0000\u0000\u0000\u13aa\u13ac\u0001\u0000\u0000\u0000\u13ab\u13a6"+
		"\u0001\u0000\u0000\u0000\u13ac\u13af\u0001\u0000\u0000\u0000\u13ad\u13ab"+
		"\u0001\u0000\u0000\u0000\u13ad\u13ae\u0001\u0000\u0000\u0000\u13ae\u13b0"+
		"\u0001\u0000\u0000\u0000\u13af\u13ad\u0001\u0000\u0000\u0000\u13b0\u13b3"+
		"\u0005\u00a9\u0000\u0000\u13b1\u13b4\u0003\u021c\u010e\u0000\u13b2\u13b4"+
		"\u0003\u022e\u0117\u0000\u13b3\u13b1\u0001\u0000\u0000\u0000\u13b3\u13b2"+
		"\u0001\u0000\u0000\u0000\u13b4\u13bc\u0001\u0000\u0000\u0000\u13b5\u13b8"+
		"\u0005\u0465\u0000\u0000\u13b6\u13b9\u0003\u021c\u010e\u0000\u13b7\u13b9"+
		"\u0003\u022e\u0117\u0000\u13b8\u13b6\u0001\u0000\u0000\u0000\u13b8\u13b7"+
		"\u0001\u0000\u0000\u0000\u13b9\u13bb\u0001\u0000\u0000\u0000\u13ba\u13b5"+
		"\u0001\u0000\u0000\u0000\u13bb\u13be\u0001\u0000\u0000\u0000\u13bc\u13ba"+
		"\u0001\u0000\u0000\u0000\u13bc\u13bd\u0001\u0000\u0000\u0000\u13bd\u13c2"+
		"\u0001\u0000\u0000\u0000\u13be\u13bc\u0001\u0000\u0000\u0000\u13bf\u13c0"+
		"\u0005\u00ba\u0000\u0000\u13c0\u13c1\u0005\u02bf\u0000\u0000\u13c1\u13c3"+
		"\u0005t\u0000\u0000\u13c2\u13bf\u0001\u0000\u0000\u0000\u13c2\u13c3\u0001"+
		"\u0000\u0000\u0000\u13c3\u13c5\u0001\u0000\u0000\u0000\u13c4\u1367\u0001"+
		"\u0000\u0000\u0000\u13c4\u13a1\u0001\u0000\u0000\u0000\u13c5\u01a5\u0001"+
		"\u0000\u0000\u0000\u13c6\u13dd\u0005(\u0000\u0000\u13c7\u13dd\u0005\u0204"+
		"\u0000\u0000\u13c8\u13d2\u0005\u0006\u0000\u0000\u13c9\u13ca\u00058\u0000"+
		"\u0000\u13ca\u13cf\u0003\u021c\u010e\u0000\u13cb\u13cc\u0005\u0465\u0000"+
		"\u0000\u13cc\u13ce\u0003\u021c\u010e\u0000\u13cd\u13cb\u0001\u0000\u0000"+
		"\u0000\u13ce\u13d1\u0001\u0000\u0000\u0000\u13cf\u13cd\u0001\u0000\u0000"+
		"\u0000\u13cf\u13d0\u0001\u0000\u0000\u0000\u13d0\u13d3\u0001\u0000\u0000"+
		"\u0000\u13d1\u13cf\u0001\u0000\u0000\u0000\u13d2\u13c9\u0001\u0000\u0000"+
		"\u0000\u13d2\u13d3\u0001\u0000\u0000\u0000\u13d3\u13dd\u0001\u0000\u0000"+
		"\u0000\u13d4\u13d9\u0003\u021c\u010e\u0000\u13d5\u13d6\u0005\u0465\u0000"+
		"\u0000\u13d6\u13d8\u0003\u021c\u010e\u0000\u13d7\u13d5\u0001\u0000\u0000"+
		"\u0000\u13d8\u13db\u0001\u0000\u0000\u0000\u13d9\u13d7\u0001\u0000\u0000"+
		"\u0000\u13d9\u13da\u0001\u0000\u0000\u0000\u13da\u13dd\u0001\u0000\u0000"+
		"\u0000\u13db\u13d9\u0001\u0000\u0000\u0000\u13dc\u13c6\u0001\u0000\u0000"+
		"\u0000\u13dc\u13c7\u0001\u0000\u0000\u0000\u13dc\u13c8\u0001\u0000\u0000"+
		"\u0000\u13dc\u13d4\u0001\u0000\u0000\u0000\u13dd\u01a7\u0001\u0000\u0000"+
		"\u0000\u13de\u13df\u0005E\u0000\u0000\u13df\u13e0\u0005\u0226\u0000\u0000"+
		"\u13e0\u13e1\u0005r\u0000\u0000\u13e1\u13e2\u0003\u021c\u010e\u0000\u13e2"+
		"\u13e3\u0005\u00a9\u0000\u0000\u13e3\u13e8\u0003\u021c\u010e\u0000\u13e4"+
		"\u13e5\u0005\u0465\u0000\u0000\u13e5\u13e7\u0003\u021c\u010e\u0000\u13e6"+
		"\u13e4\u0001\u0000\u0000\u0000\u13e7\u13ea\u0001\u0000\u0000\u0000\u13e8"+
		"\u13e6\u0001\u0000\u0000\u0000\u13e8\u13e9\u0001\u0000\u0000\u0000\u13e9"+
		"\u13ee\u0001\u0000\u0000\u0000\u13ea\u13e8\u0001\u0000\u0000\u0000\u13eb"+
		"\u13ec\u0005\u00ba\u0000\u0000\u13ec\u13ed\u0005E\u0000\u0000\u13ed\u13ef"+
		"\u0005t\u0000\u0000\u13ee\u13eb\u0001\u0000\u0000\u0000\u13ee\u13ef\u0001"+
		"\u0000\u0000\u0000\u13ef\u01a9\u0001\u0000\u0000\u0000\u13f0\u13f1\u0005"+
		"\u0087\u0000\u0000\u13f1\u13f2\u0005\u0288\u0000\u0000\u13f2\u13f7\u0003"+
		"\u01c4\u00e2\u0000\u13f3\u13f4\u0005\u0465\u0000\u0000\u13f4\u13f6\u0003"+
		"\u01c4\u00e2\u0000\u13f5\u13f3\u0001\u0000\u0000\u0000\u13f6\u13f9\u0001"+
		"\u0000\u0000\u0000\u13f7\u13f5\u0001\u0000\u0000\u0000\u13f7\u13f8\u0001"+
		"\u0000\u0000\u0000\u13f8\u01ab\u0001\u0000\u0000\u0000\u13f9\u13f7\u0001"+
		"\u0000\u0000\u0000\u13fa\u13fb\u0005\u008f\u0000\u0000\u13fb\u1400\u0003"+
		"\u01be\u00df\u0000\u13fc\u13fd\u0005\u0465\u0000\u0000\u13fd\u13ff\u0003"+
		"\u01be\u00df\u0000\u13fe\u13fc\u0001\u0000\u0000\u0000\u13ff\u1402\u0001"+
		"\u0000\u0000\u0000\u1400\u13fe\u0001\u0000\u0000\u0000\u1400\u1401\u0001"+
		"\u0000\u0000\u0000\u1401\u1403\u0001\u0000\u0000\u0000\u1402\u1400\u0001"+
		"\u0000\u0000\u0000\u1403\u1405\u0005r\u0000\u0000\u1404\u1406\u0007E\u0000"+
		"\u0000\u1405\u1404\u0001\u0000\u0000\u0000\u1405\u1406\u0001\u0000\u0000"+
		"\u0000\u1406\u1407\u0001\u0000\u0000\u0000\u1407\u1408\u0003\u01c2\u00e1"+
		"\u0000\u1408\u1409\u0005A\u0000\u0000\u1409\u140e\u0003\u021c\u010e\u0000"+
		"\u140a\u140b\u0005\u0465\u0000\u0000\u140b\u140d\u0003\u021c\u010e\u0000"+
		"\u140c\u140a\u0001\u0000\u0000\u0000\u140d\u1410\u0001\u0000\u0000\u0000"+
		"\u140e\u140c\u0001\u0000\u0000\u0000\u140e\u140f\u0001\u0000\u0000\u0000"+
		"\u140f\u143b\u0001\u0000\u0000\u0000\u1410\u140e\u0001\u0000\u0000\u0000"+
		"\u1411\u1412\u0005\u008f\u0000\u0000\u1412\u1414\u0005\u0006\u0000\u0000"+
		"\u1413\u1415\u0005\u02b0\u0000\u0000\u1414\u1413\u0001\u0000\u0000\u0000"+
		"\u1414\u1415\u0001\u0000\u0000\u0000\u1415\u1416\u0001\u0000\u0000\u0000"+
		"\u1416\u1417\u0005\u0465\u0000\u0000\u1417\u1418\u0005E\u0000\u0000\u1418"+
		"\u1419\u0005t\u0000\u0000\u1419\u141a\u0005A\u0000\u0000\u141a\u141f\u0003"+
		"\u021c\u010e\u0000\u141b\u141c\u0005\u0465\u0000\u0000\u141c\u141e\u0003"+
		"\u021c\u010e\u0000\u141d\u141b\u0001\u0000\u0000\u0000\u141e\u1421\u0001"+
		"\u0000\u0000\u0000\u141f\u141d\u0001\u0000\u0000\u0000\u141f\u1420\u0001"+
		"\u0000\u0000\u0000\u1420\u143b\u0001\u0000\u0000\u0000\u1421\u141f\u0001"+
		"\u0000\u0000\u0000\u1422\u1423\u0005\u008f\u0000\u0000\u1423\u1428\u0003"+
		"\u022e\u0117\u0000\u1424\u1425\u0005\u0465\u0000\u0000\u1425\u1427\u0003"+
		"\u022e\u0117\u0000\u1426\u1424\u0001\u0000\u0000\u0000\u1427\u142a\u0001"+
		"\u0000\u0000\u0000\u1428\u1426\u0001\u0000\u0000\u0000\u1428\u1429\u0001"+
		"\u0000\u0000\u0000\u1429\u142b\u0001\u0000\u0000\u0000\u142a\u1428\u0001"+
		"\u0000\u0000\u0000\u142b\u142e\u0005A\u0000\u0000\u142c\u142f\u0003\u021c"+
		"\u010e\u0000\u142d\u142f\u0003\u022e\u0117\u0000\u142e\u142c\u0001\u0000"+
		"\u0000\u0000\u142e\u142d\u0001\u0000\u0000\u0000\u142f\u1437\u0001\u0000"+
		"\u0000\u0000\u1430\u1433\u0005\u0465\u0000\u0000\u1431\u1434\u0003\u021c"+
		"\u010e\u0000\u1432\u1434\u0003\u022e\u0117\u0000\u1433\u1431\u0001\u0000"+
		"\u0000\u0000\u1433\u1432\u0001\u0000\u0000\u0000\u1434\u1436\u0001\u0000"+
		"\u0000\u0000\u1435\u1430\u0001\u0000\u0000\u0000\u1436\u1439\u0001\u0000"+
		"\u0000\u0000\u1437\u1435\u0001\u0000\u0000\u0000\u1437\u1438\u0001\u0000"+
		"\u0000\u0000\u1438\u143b\u0001\u0000\u0000\u0000\u1439\u1437\u0001\u0000"+
		"\u0000\u0000\u143a\u13fa\u0001\u0000\u0000\u0000\u143a\u1411\u0001\u0000"+
		"\u0000\u0000\u143a\u1422\u0001\u0000\u0000\u0000\u143b\u01ad\u0001\u0000"+
		"\u0000\u0000\u143c\u143d\u0005\u008f\u0000\u0000\u143d\u143e\u0005\u0226"+
		"\u0000\u0000\u143e\u143f\u0005r\u0000\u0000\u143f\u1440\u0003\u021c\u010e"+
		"\u0000\u1440\u1441\u0005A\u0000\u0000\u1441\u1446\u0003\u021c\u010e\u0000"+
		"\u1442\u1443\u0005\u0465\u0000\u0000\u1443\u1445\u0003\u021c\u010e\u0000"+
		"\u1444\u1442\u0001\u0000\u0000\u0000\u1445\u1448\u0001\u0000\u0000\u0000"+
		"\u1446\u1444\u0001\u0000\u0000\u0000\u1446\u1447\u0001\u0000\u0000\u0000"+
		"\u1447\u01af\u0001\u0000\u0000\u0000\u1448\u1446\u0001\u0000\u0000\u0000"+
		"\u1449\u144a\u0005\u0095\u0000\u0000\u144a\u144d\u0005\u0218\u0000\u0000"+
		"\u144b\u144c\u0005>\u0000\u0000\u144c\u144e\u0003\u021c\u010e\u0000\u144d"+
		"\u144b\u0001\u0000\u0000\u0000\u144d\u144e\u0001\u0000\u0000\u0000\u144e"+
		"\u144f\u0001\u0000\u0000\u0000\u144f\u1452\u0005\u045a\u0000\u0000\u1450"+
		"\u1453\u0003\u028e\u0147\u0000\u1451\u1453\u0005\u0472\u0000\u0000\u1452"+
		"\u1450\u0001\u0000\u0000\u0000\u1452\u1451\u0001\u0000\u0000\u0000\u1453"+
		"\u01b1\u0001\u0000\u0000\u0000\u1454\u1455\u0003\u021c\u010e\u0000\u1455"+
		"\u1456\u0003\u01ba\u00dd\u0000\u1456\u01b3\u0001\u0000\u0000\u0000\u1457"+
		"\u1458\u0003\u021c\u010e\u0000\u1458\u1459\u0005\u01b3\u0000\u0000\u1459"+
		"\u145a\u0005\u0012\u0000\u0000\u145a\u145b\u0005\u0218\u0000\u0000\u145b"+
		"\u145c\u0005\u0472\u0000\u0000\u145c\u1474\u0001\u0000\u0000\u0000\u145d"+
		"\u145e\u0003\u021c\u010e\u0000\u145e\u1461\u0005\u01b3\u0000\u0000\u145f"+
		"\u1460\u0005\u00ba\u0000\u0000\u1460\u1462\u0003\u022c\u0116\u0000\u1461"+
		"\u145f\u0001\u0000\u0000\u0000\u1461\u1462\u0001\u0000\u0000\u0000\u1462"+
		"\u1463\u0001\u0000\u0000\u0000\u1463\u1464\u0005\u0012\u0000\u0000\u1464"+
		"\u1468\u0005\u0472\u0000\u0000\u1465\u1466\u0005\u008d\u0000\u0000\u1466"+
		"\u1467\u0005\"\u0000\u0000\u1467\u1469\u0005\u0218\u0000\u0000\u1468\u1465"+
		"\u0001\u0000\u0000\u0000\u1468\u1469\u0001\u0000\u0000\u0000\u1469\u1474"+
		"\u0001\u0000\u0000\u0000\u146a\u146b\u0003\u021c\u010e\u0000\u146b\u146c"+
		"\u0005\u01b3\u0000\u0000\u146c\u146d\u0005\u00ba\u0000\u0000\u146d\u1470"+
		"\u0003\u022c\u0116\u0000\u146e\u146f\u0005\f\u0000\u0000\u146f\u1471\u0005"+
		"\u0472\u0000\u0000\u1470\u146e\u0001\u0000\u0000\u0000\u1470\u1471\u0001"+
		"\u0000\u0000\u0000\u1471\u1474\u0001\u0000\u0000\u0000\u1472\u1474\u0003"+
		"\u021c\u010e\u0000\u1473\u1457\u0001\u0000\u0000\u0000\u1473\u145d\u0001"+
		"\u0000\u0000\u0000\u1473\u146a\u0001\u0000\u0000\u0000\u1473\u1472\u0001"+
		"\u0000\u0000\u0000\u1474\u01b5\u0001\u0000\u0000\u0000\u1475\u147e\u0005"+
		"\u00a2\u0000\u0000\u1476\u147e\u0005\u0297\u0000\u0000\u1477\u1478\u0005"+
		"\u015d\u0000\u0000\u1478\u147e\u0005\u0472\u0000\u0000\u1479\u147a\u0005"+
		"\u01c4\u0000\u0000\u147a\u147e\u0005\u0472\u0000\u0000\u147b\u147c\u0005"+
		"\u026f\u0000\u0000\u147c\u147e\u0005\u0472\u0000\u0000\u147d\u1475\u0001"+
		"\u0000\u0000\u0000\u147d\u1476\u0001\u0000\u0000\u0000\u147d\u1477\u0001"+
		"\u0000\u0000\u0000\u147d\u1479\u0001\u0000\u0000\u0000\u147d\u147b\u0001"+
		"\u0000\u0000\u0000\u147e\u01b7\u0001\u0000\u0000\u0000\u147f\u1480\u0005"+
		"\u01e6\u0000\u0000\u1480\u1488\u0003\u0234\u011a\u0000\u1481\u1482\u0005"+
		"\u01e9\u0000\u0000\u1482\u1488\u0003\u0234\u011a\u0000\u1483\u1484\u0005"+
		"\u01e5\u0000\u0000\u1484\u1488\u0003\u0234\u011a\u0000\u1485\u1486\u0005"+
		"\u01ea\u0000\u0000\u1486\u1488\u0003\u0234\u011a\u0000\u1487\u147f\u0001"+
		"\u0000\u0000\u0000\u1487\u1481\u0001\u0000\u0000\u0000\u1487\u1483\u0001"+
		"\u0000\u0000\u0000\u1487\u1485\u0001\u0000\u0000\u0000\u1488\u01b9\u0001"+
		"\u0000\u0000\u0000\u1489\u148a\u0005\u0218\u0000\u0000\u148a\u1491\u0005"+
		"\u0199\u0000\u0000\u148b\u1492\u0005(\u0000\u0000\u148c\u1492\u0005\u01fa"+
		"\u0000\u0000\u148d\u148e\u0005S\u0000\u0000\u148e\u148f\u0003\u0234\u011a"+
		"\u0000\u148f\u1490\u0005\u02a2\u0000\u0000\u1490\u1492\u0001\u0000\u0000"+
		"\u0000\u1491\u148b\u0001\u0000\u0000\u0000\u1491\u148c\u0001\u0000\u0000"+
		"\u0000\u1491\u148d\u0001\u0000\u0000\u0000\u1491\u1492\u0001\u0000\u0000"+
		"\u0000\u1492\u01bb\u0001\u0000\u0000\u0000\u1493\u1494\u0005\u0143\u0000"+
		"\u0000\u1494\u1495\u0007F\u0000\u0000\u1495\u01bd\u0001\u0000\u0000\u0000"+
		"\u1496\u149b\u0003\u01c0\u00e0\u0000\u1497\u1498\u0005\u0463\u0000\u0000"+
		"\u1498\u1499\u0003\u024e\u0127\u0000\u1499\u149a\u0005\u0464\u0000\u0000"+
		"\u149a\u149c\u0001\u0000\u0000\u0000\u149b\u1497\u0001\u0000\u0000\u0000"+
		"\u149b\u149c\u0001\u0000\u0000\u0000\u149c\u01bf\u0001\u0000\u0000\u0000"+
		"\u149d\u149f\u0005\u0006\u0000\u0000\u149e\u14a0\u0005\u02b0\u0000\u0000"+
		"\u149f\u149e\u0001\u0000\u0000\u0000\u149f\u14a0\u0001\u0000\u0000\u0000"+
		"\u14a0\u14fb\u0001\u0000\u0000\u0000\u14a1\u14a3\u0005\u0007\u0000\u0000"+
		"\u14a2\u14a4\u0005\u02a9\u0000\u0000\u14a3\u14a2\u0001\u0000\u0000\u0000"+
		"\u14a3\u14a4\u0001\u0000\u0000\u0000\u14a4\u14fb\u0001\u0000\u0000\u0000"+
		"\u14a5\u14ad\u0005 \u0000\u0000\u14a6\u14a7\u0005\u0278\u0000\u0000\u14a7"+
		"\u14ae\u0005\u02a8\u0000\u0000\u14a8\u14ae\u0005\u02a9\u0000\u0000\u14a9"+
		"\u14ae\u0005\u028e\u0000\u0000\u14aa\u14ae\u0005\u0288\u0000\u0000\u14ab"+
		"\u14ae\u0005\u0276\u0000\u0000\u14ac\u14ae\u0005\u0243\u0000\u0000\u14ad"+
		"\u14a6\u0001\u0000\u0000\u0000\u14ad\u14a8\u0001\u0000\u0000\u0000\u14ad"+
		"\u14a9\u0001\u0000\u0000\u0000\u14ad\u14aa\u0001\u0000\u0000\u0000\u14ad"+
		"\u14ab\u0001\u0000\u0000\u0000\u14ad\u14ac\u0001\u0000\u0000\u0000\u14ad"+
		"\u14ae\u0001\u0000\u0000\u0000\u14ae\u14fb\u0001\u0000\u0000\u0000\u14af"+
		"\u14fb\u0005*\u0000\u0000\u14b0\u14b2\u00051\u0000\u0000\u14b1\u14b3\u0005"+
		"\u0243\u0000\u0000\u14b2\u14b1\u0001\u0000\u0000\u0000\u14b2\u14b3\u0001"+
		"\u0000\u0000\u0000\u14b3\u14fb\u0001\u0000\u0000\u0000\u14b4\u14fb\u0005"+
		"\u0194\u0000\u0000\u14b5\u14fb\u0005\u02aa\u0000\u0000\u14b6\u14fb\u0005"+
		"\u02ab\u0000\u0000\u14b7\u14b8\u0005E\u0000\u0000\u14b8\u14fb\u0005t\u0000"+
		"\u0000\u14b9\u14fb\u0005N\u0000\u0000\u14ba\u14fb\u0005R\u0000\u0000\u14bb"+
		"\u14bc\u0005c\u0000\u0000\u14bc\u14fb\u0005\u02a8\u0000\u0000\u14bd\u14fb"+
		"\u0005\u02ac\u0000\u0000\u14be\u14fb\u0005\u0226\u0000\u0000\u14bf\u14fb"+
		"\u0005\u0084\u0000\u0000\u14c0\u14fb\u0005\u02ad\u0000\u0000\u14c1\u14c2"+
		"\u0005\u023c\u0000\u0000\u14c2\u14fb\u0007G\u0000\u0000\u14c3\u14fb\u0005"+
		"\u0094\u0000\u0000\u14c4\u14c5\u0005\u0097\u0000\u0000\u14c5\u14fb\u0007"+
		"H\u0000\u0000\u14c6\u14fb\u0005\u02ae\u0000\u0000\u14c7\u14fb\u0005\u02af"+
		"\u0000\u0000\u14c8\u14fb\u0005\u00ab\u0000\u0000\u14c9\u14fb\u0005\u00b2"+
		"\u0000\u0000\u14ca\u14fb\u0005\u00b3\u0000\u0000\u14cb\u14fb\u0005\u02b1"+
		"\u0000\u0000\u14cc\u14fb\u0005\u02b2\u0000\u0000\u14cd\u14fb\u0005\u02b3"+
		"\u0000\u0000\u14ce\u14fb\u0005\u02b4\u0000\u0000\u14cf\u14fb\u0005\u02b5"+
		"\u0000\u0000\u14d0\u14fb\u0005\u02b6\u0000\u0000\u14d1\u14fb\u0005\u02b7"+
		"\u0000\u0000\u14d2\u14fb\u0005\u02b8\u0000\u0000\u14d3\u14fb\u0005\u02b9"+
		"\u0000\u0000\u14d4\u14fb\u0005\u02ba\u0000\u0000\u14d5\u14fb\u0005\u02bb"+
		"\u0000\u0000\u14d6\u14fb\u0005\u02bc\u0000\u0000\u14d7\u14fb\u0005\u02bd"+
		"\u0000\u0000\u14d8\u14fb\u0005\u02be\u0000\u0000\u14d9\u14fb\u0005\u02c0"+
		"\u0000\u0000\u14da\u14fb\u0005\u02c1\u0000\u0000\u14db\u14fb\u0005\u02c2"+
		"\u0000\u0000\u14dc\u14fb\u0005\u02c5\u0000\u0000\u14dd\u14fb\u0005\u02c6"+
		"\u0000\u0000\u14de\u14fb\u0005\u02c7\u0000\u0000\u14df\u14fb\u0005\u02c8"+
		"\u0000\u0000\u14e0\u14fb\u0005\u02c9\u0000\u0000\u14e1\u14fb\u0005\u02ca"+
		"\u0000\u0000\u14e2\u14fb\u0005\u02cb\u0000\u0000\u14e3\u14fb\u0005\u02cc"+
		"\u0000\u0000\u14e4\u14fb\u0005\u02ce\u0000\u0000\u14e5\u14fb\u0005\u02cf"+
		"\u0000\u0000\u14e6\u14fb\u0005\u02d0\u0000\u0000\u14e7\u14fb\u0005\u02d1"+
		"\u0000\u0000\u14e8\u14fb\u0005\u0420\u0000\u0000\u14e9\u14fb\u0005\u02d2"+
		"\u0000\u0000\u14ea\u14fb\u0005\u02d3\u0000\u0000\u14eb\u14fb\u0005\u02d4"+
		"\u0000\u0000\u14ec\u14fb\u0005\u02d5\u0000\u0000\u14ed\u14fb\u0005\u0444"+
		"\u0000\u0000\u14ee\u14fb\u0005\u0445\u0000\u0000\u14ef\u14fb\u0005\u0446"+
		"\u0000\u0000\u14f0\u14fb\u0005\u0447\u0000\u0000\u14f1\u14fb\u0005\u0449"+
		"\u0000\u0000\u14f2\u14f3\u0005b\u0000\u0000\u14f3\u14f4\u0005A\u0000\u0000"+
		"\u14f4\u14fb\u0005\u02cd\u0000\u0000\u14f5\u14f6\u0005\u0094\u0000\u0000"+
		"\u14f6\u14f7\u0005T\u0000\u0000\u14f7\u14fb\u0005\u02cd\u0000\u0000\u14f8"+
		"\u14f9\u0005\u02c3\u0000\u0000\u14f9\u14fb\u0005\u02c4\u0000\u0000\u14fa"+
		"\u149d\u0001\u0000\u0000\u0000\u14fa\u14a1\u0001\u0000\u0000\u0000\u14fa"+
		"\u14a5\u0001\u0000\u0000\u0000\u14fa\u14af\u0001\u0000\u0000\u0000\u14fa"+
		"\u14b0\u0001\u0000\u0000\u0000\u14fa\u14b4\u0001\u0000\u0000\u0000\u14fa"+
		"\u14b5\u0001\u0000\u0000\u0000\u14fa\u14b6\u0001\u0000\u0000\u0000\u14fa"+
		"\u14b7\u0001\u0000\u0000\u0000\u14fa\u14b9\u0001\u0000\u0000\u0000\u14fa"+
		"\u14ba\u0001\u0000\u0000\u0000\u14fa\u14bb\u0001\u0000\u0000\u0000\u14fa"+
		"\u14bd\u0001\u0000\u0000\u0000\u14fa\u14be\u0001\u0000\u0000\u0000\u14fa"+
		"\u14bf\u0001\u0000\u0000\u0000\u14fa\u14c0\u0001\u0000\u0000\u0000\u14fa"+
		"\u14c1\u0001\u0000\u0000\u0000\u14fa\u14c3\u0001\u0000\u0000\u0000\u14fa"+
		"\u14c4\u0001\u0000\u0000\u0000\u14fa\u14c6\u0001\u0000\u0000\u0000\u14fa"+
		"\u14c7\u0001\u0000\u0000\u0000\u14fa\u14c8\u0001\u0000\u0000\u0000\u14fa"+
		"\u14c9\u0001\u0000\u0000\u0000\u14fa\u14ca\u0001\u0000\u0000\u0000\u14fa"+
		"\u14cb\u0001\u0000\u0000\u0000\u14fa\u14cc\u0001\u0000\u0000\u0000\u14fa"+
		"\u14cd\u0001\u0000\u0000\u0000\u14fa\u14ce\u0001\u0000\u0000\u0000\u14fa"+
		"\u14cf\u0001\u0000\u0000\u0000\u14fa\u14d0\u0001\u0000\u0000\u0000\u14fa"+
		"\u14d1\u0001\u0000\u0000\u0000\u14fa\u14d2\u0001\u0000\u0000\u0000\u14fa"+
		"\u14d3\u0001\u0000\u0000\u0000\u14fa\u14d4\u0001\u0000\u0000\u0000\u14fa"+
		"\u14d5\u0001\u0000\u0000\u0000\u14fa\u14d6\u0001\u0000\u0000\u0000\u14fa"+
		"\u14d7\u0001\u0000\u0000\u0000\u14fa\u14d8\u0001\u0000\u0000\u0000\u14fa"+
		"\u14d9\u0001\u0000\u0000\u0000\u14fa\u14da\u0001\u0000\u0000\u0000\u14fa"+
		"\u14db\u0001\u0000\u0000\u0000\u14fa\u14dc\u0001\u0000\u0000\u0000\u14fa"+
		"\u14dd\u0001\u0000\u0000\u0000\u14fa\u14de\u0001\u0000\u0000\u0000\u14fa"+
		"\u14df\u0001\u0000\u0000\u0000\u14fa\u14e0\u0001\u0000\u0000\u0000\u14fa"+
		"\u14e1\u0001\u0000\u0000\u0000\u14fa\u14e2\u0001\u0000\u0000\u0000\u14fa"+
		"\u14e3\u0001\u0000\u0000\u0000\u14fa\u14e4\u0001\u0000\u0000\u0000\u14fa"+
		"\u14e5\u0001\u0000\u0000\u0000\u14fa\u14e6\u0001\u0000\u0000\u0000\u14fa"+
		"\u14e7\u0001\u0000\u0000\u0000\u14fa\u14e8\u0001\u0000\u0000\u0000\u14fa"+
		"\u14e9\u0001\u0000\u0000\u0000\u14fa\u14ea\u0001\u0000\u0000\u0000\u14fa"+
		"\u14eb\u0001\u0000\u0000\u0000\u14fa\u14ec\u0001\u0000\u0000\u0000\u14fa"+
		"\u14ed\u0001\u0000\u0000\u0000\u14fa\u14ee\u0001\u0000\u0000\u0000\u14fa"+
		"\u14ef\u0001\u0000\u0000\u0000\u14fa\u14f0\u0001\u0000\u0000\u0000\u14fa"+
		"\u14f1\u0001\u0000\u0000\u0000\u14fa\u14f2\u0001\u0000\u0000\u0000\u14fa"+
		"\u14f5\u0001\u0000\u0000\u0000\u14fa\u14f8\u0001\u0000\u0000\u0000\u14fb"+
		"\u01c1\u0001\u0000\u0000\u0000\u14fc\u150d\u0005\u0453\u0000\u0000\u14fd"+
		"\u14fe\u0005\u0453\u0000\u0000\u14fe\u14ff\u0005\u0462\u0000\u0000\u14ff"+
		"\u150d\u0005\u0453\u0000\u0000\u1500\u1501\u0003\u022e\u0117\u0000\u1501"+
		"\u1502\u0005\u0462\u0000\u0000\u1502\u1503\u0005\u0453\u0000\u0000\u1503"+
		"\u150d\u0001\u0000\u0000\u0000\u1504\u1505\u0003\u022e\u0117\u0000\u1505"+
		"\u1506\u0005\u0462\u0000\u0000\u1506\u1507\u0003\u022e\u0117\u0000\u1507"+
		"\u150d\u0001\u0000\u0000\u0000\u1508\u1509\u0003\u022e\u0117\u0000\u1509"+
		"\u150a\u0003\u0232\u0119\u0000\u150a\u150d\u0001\u0000\u0000\u0000\u150b"+
		"\u150d\u0003\u022e\u0117\u0000\u150c\u14fc\u0001\u0000\u0000\u0000\u150c"+
		"\u14fd\u0001\u0000\u0000\u0000\u150c\u1500\u0001\u0000\u0000\u0000\u150c"+
		"\u1504\u0001\u0000\u0000\u0000\u150c\u1508\u0001\u0000\u0000\u0000\u150c"+
		"\u150b\u0001\u0000\u0000\u0000\u150d\u01c3\u0001\u0000\u0000\u0000\u150e"+
		"\u150f\u0003\u021c\u010e\u0000\u150f\u1510\u0005\u00a9\u0000\u0000\u1510"+
		"\u1511\u0003\u021c\u010e\u0000\u1511\u01c5\u0001\u0000\u0000\u0000\u1512"+
		"\u1514\u0005\t\u0000\u0000\u1513\u1515\u0007I\u0000\u0000\u1514\u1513"+
		"\u0001\u0000\u0000\u0000\u1514\u1515\u0001\u0000\u0000\u0000\u1515\u1516"+
		"\u0001\u0000\u0000\u0000\u1516\u1517\u00079\u0000\u0000\u1517\u1529\u0003"+
		"\u0250\u0128\u0000\u1518\u1519\u0005\u00b2\u0000\u0000\u1519\u151a\u0005"+
		"I\u0000\u0000\u151a\u151b\u0005r\u0000\u0000\u151b\u1520\u0003\u0218\u010c"+
		"\u0000\u151c\u151d\u0005\u0465\u0000\u0000\u151d\u151f\u0003\u0218\u010c"+
		"\u0000\u151e\u151c\u0001\u0000\u0000\u0000\u151f\u1522\u0001\u0000\u0000"+
		"\u0000\u1520\u151e\u0001\u0000\u0000\u0000\u1520\u1521\u0001\u0000\u0000"+
		"\u0000\u1521\u1527\u0001\u0000\u0000\u0000\u1522\u1520\u0001\u0000\u0000"+
		"\u0000\u1523\u1524\u0005\u00ba\u0000\u0000\u1524\u1525\u0003\u0234\u011a"+
		"\u0000\u1525\u1526\u0005\u0011\u0000\u0000\u1526\u1528\u0001\u0000\u0000"+
		"\u0000\u1527\u1523\u0001\u0000\u0000\u0000\u1527\u1528\u0001\u0000\u0000"+
		"\u0000\u1528\u152a\u0001\u0000\u0000\u0000\u1529\u1518\u0001\u0000\u0000"+
		"\u0000\u1529\u152a\u0001\u0000\u0000\u0000\u152a\u1536\u0001\u0000\u0000"+
		"\u0000\u152b\u152c\u00051\u0000\u0000\u152c\u152d\u0005I\u0000\u0000\u152d"+
		"\u152e\u0005r\u0000\u0000\u152e\u1533\u0003\u0218\u010c\u0000\u152f\u1530"+
		"\u0005\u0465\u0000\u0000\u1530\u1532\u0003\u0218\u010c\u0000\u1531\u152f"+
		"\u0001\u0000\u0000\u0000\u1532\u1535\u0001\u0000\u0000\u0000\u1533\u1531"+
		"\u0001\u0000\u0000\u0000\u1533\u1534\u0001\u0000\u0000\u0000\u1534\u1537"+
		"\u0001\u0000\u0000\u0000\u1535\u1533\u0001\u0000\u0000\u0000\u1536\u152b"+
		"\u0001\u0000\u0000\u0000\u1536\u1537\u0001\u0000\u0000\u0000\u1537\u01c7"+
		"\u0001\u0000\u0000\u0000\u1538\u1539\u0005\u0019\u0000\u0000\u1539\u153a"+
		"\u0005\u00a6\u0000\u0000\u153a\u153e\u0003\u0250\u0128\u0000\u153b\u153d"+
		"\u0003\u01d0\u00e8\u0000\u153c\u153b\u0001\u0000\u0000\u0000\u153d\u1540"+
		"\u0001\u0000\u0000\u0000\u153e\u153c\u0001\u0000\u0000\u0000\u153e\u153f"+
		"\u0001\u0000\u0000\u0000\u153f\u01c9\u0001\u0000\u0000\u0000\u1540\u153e"+
		"\u0001\u0000\u0000\u0000\u1541\u1542\u0005\u015b\u0000\u0000\u1542\u1543"+
		"\u0005\u00a6\u0000\u0000\u1543\u1545\u0003\u0250\u0128\u0000\u1544\u1546"+
		"\u0007J\u0000\u0000\u1545\u1544\u0001\u0000\u0000\u0000\u1545\u1546\u0001"+
		"\u0000\u0000\u0000\u1546\u01cb\u0001\u0000\u0000\u0000\u1547\u1549\u0005"+
		"s\u0000\u0000\u1548\u154a\u0007I\u0000\u0000\u1549\u1548\u0001\u0000\u0000"+
		"\u0000\u1549\u154a\u0001\u0000\u0000\u0000\u154a\u154b\u0001\u0000\u0000"+
		"\u0000\u154b\u154c\u00079\u0000\u0000\u154c\u154e\u0003\u0250\u0128\u0000"+
		"\u154d\u154f\u0003\u0268\u0134\u0000\u154e\u154d\u0001\u0000\u0000\u0000"+
		"\u154e\u154f\u0001\u0000\u0000\u0000\u154f\u01cd\u0001\u0000\u0000\u0000"+
		"\u1550\u1552\u0005\u0234\u0000\u0000\u1551\u1553\u0007I\u0000\u0000\u1552"+
		"\u1551\u0001\u0000\u0000\u0000\u1552\u1553\u0001\u0000\u0000\u0000\u1553"+
		"\u1554\u0001\u0000\u0000\u0000\u1554\u1555\u0005\u00a6\u0000\u0000\u1555"+
		"\u1557\u0003\u0250\u0128\u0000\u1556\u1558\u0005\u0228\u0000\u0000\u1557"+
		"\u1556\u0001\u0000\u0000\u0000\u1557\u1558\u0001\u0000\u0000\u0000\u1558"+
		"\u155a\u0001\u0000\u0000\u0000\u1559\u155b\u0005\u019b\u0000\u0000\u155a"+
		"\u1559\u0001\u0000\u0000\u0000\u155a\u155b\u0001\u0000\u0000\u0000\u155b"+
		"\u155d\u0001\u0000\u0000\u0000\u155c\u155e\u0005\u0289\u0000\u0000\u155d"+
		"\u155c\u0001\u0000\u0000\u0000\u155d\u155e\u0001\u0000\u0000\u0000\u155e"+
		"\u01cf\u0001\u0000\u0000\u0000\u155f\u1560\u0005>\u0000\u0000\u1560\u1567"+
		"\u0005\u0287\u0000\u0000\u1561\u1567\u0005\u0228\u0000\u0000\u1562\u1567"+
		"\u0005\u019d\u0000\u0000\u1563\u1567\u0005\u01eb\u0000\u0000\u1564\u1567"+
		"\u0005\u019b\u0000\u0000\u1565\u1567\u0005\u0159\u0000\u0000\u1566\u155f"+
		"\u0001\u0000\u0000\u0000\u1566\u1561\u0001\u0000\u0000\u0000\u1566\u1562"+
		"\u0001\u0000\u0000\u0000\u1566\u1563\u0001\u0000\u0000\u0000\u1566\u1564"+
		"\u0001\u0000\u0000\u0000\u1566\u1565\u0001\u0000\u0000\u0000\u1567\u01d1"+
		"\u0001\u0000\u0000\u0000\u1568\u156a\u0005 \u0000\u0000\u1569\u156b\u0005"+
		"\u0146\u0000\u0000\u156a\u1569\u0001\u0000\u0000\u0000\u156a\u156b\u0001"+
		"\u0000\u0000\u0000\u156b\u156c\u0001\u0000\u0000\u0000\u156c\u156d\u0005"+
		"\u01a9\u0000\u0000\u156d\u156e\u0003\u022e\u0117\u0000\u156e\u156f\u0005"+
		"\u0242\u0000\u0000\u156f\u1570\u0007K\u0000\u0000\u1570\u1571\u0005\u025a"+
		"\u0000\u0000\u1571\u1572\u0005\u0472\u0000\u0000\u1572\u01d3\u0001\u0000"+
		"\u0000\u0000\u1573\u1574\u0005\u01bb\u0000\u0000\u1574\u1575\u0005\u021a"+
		"\u0000\u0000\u1575\u1576\u0003\u022e\u0117\u0000\u1576\u1577\u0005\u025a"+
		"\u0000\u0000\u1577\u1578\u0005\u0472\u0000\u0000\u1578\u01d5\u0001\u0000"+
		"\u0000\u0000\u1579\u157a\u0005\u0284\u0000\u0000\u157a\u157b\u0005\u021a"+
		"\u0000\u0000\u157b\u157c\u0003\u022e\u0117\u0000\u157c\u01d7\u0001\u0000"+
		"\u0000\u0000\u157d\u157e\u0005\u0095\u0000\u0000\u157e\u157f\u0003\u01dc"+
		"\u00ee\u0000\u157f\u1582\u0007L\u0000\u0000\u1580\u1583\u0003\u0294\u014a"+
		"\u0000\u1581\u1583\u0005r\u0000\u0000\u1582\u1580\u0001\u0000\u0000\u0000"+
		"\u1582\u1581\u0001\u0000\u0000\u0000\u1583\u158d\u0001\u0000\u0000\u0000"+
		"\u1584\u1585\u0005\u0465\u0000\u0000\u1585\u1586\u0003\u01dc\u00ee\u0000"+
		"\u1586\u1589\u0007L\u0000\u0000\u1587\u158a\u0003\u0294\u014a\u0000\u1588"+
		"\u158a\u0005r\u0000\u0000\u1589\u1587\u0001\u0000\u0000\u0000\u1589\u1588"+
		"\u0001\u0000\u0000\u0000\u158a\u158c\u0001\u0000\u0000\u0000\u158b\u1584"+
		"\u0001\u0000\u0000\u0000\u158c\u158f\u0001\u0000\u0000\u0000\u158d\u158b"+
		"\u0001\u0000\u0000\u0000\u158d\u158e\u0001\u0000\u0000\u0000\u158e\u15b2"+
		"\u0001\u0000\u0000\u0000\u158f\u158d\u0001\u0000\u0000\u0000\u1590\u1591"+
		"\u0005\u0095\u0000\u0000\u1591\u1594\u0003@ \u0000\u1592\u1595\u0003\u0220"+
		"\u0110\u0000\u1593\u1595\u0005(\u0000\u0000\u1594\u1592\u0001\u0000\u0000"+
		"\u0000\u1594\u1593\u0001\u0000\u0000\u0000\u1595\u15b2\u0001\u0000\u0000"+
		"\u0000\u1596\u1597\u0005\u0095\u0000\u0000\u1597\u159e\u0005\u01f8\u0000"+
		"\u0000\u1598\u159b\u0003\u0220\u0110\u0000\u1599\u159a\u0005\u001a\u0000"+
		"\u0000\u159a\u159c\u0003\u0222\u0111\u0000\u159b\u1599\u0001\u0000\u0000"+
		"\u0000\u159b\u159c\u0001\u0000\u0000\u0000\u159c\u159f\u0001\u0000\u0000"+
		"\u0000\u159d\u159f\u0005(\u0000\u0000\u159e\u1598\u0001\u0000\u0000\u0000"+
		"\u159e\u159d\u0001\u0000\u0000\u0000\u159f\u15b2\u0001\u0000\u0000\u0000"+
		"\u15a0\u15b2\u0003\u01b0\u00d8\u0000\u15a1\u15b2\u0003\u0132\u0099\u0000"+
		"\u15a2\u15b2\u0003\u0130\u0098\u0000\u15a3\u15a4\u0005\u0095\u0000\u0000"+
		"\u15a4\u15a5\u0003\u0212\u0109\u0000\u15a5\u15a6\u0007L\u0000\u0000\u15a6"+
		"\u15ae\u0003\u0294\u014a\u0000\u15a7\u15a8\u0005\u0465\u0000\u0000\u15a8"+
		"\u15a9\u0003\u0212\u0109\u0000\u15a9\u15aa\u0007L\u0000\u0000\u15aa\u15ab"+
		"\u0003\u0294\u014a\u0000\u15ab\u15ad\u0001\u0000\u0000\u0000\u15ac\u15a7"+
		"\u0001\u0000\u0000\u0000\u15ad\u15b0\u0001\u0000\u0000\u0000\u15ae\u15ac"+
		"\u0001\u0000\u0000\u0000\u15ae\u15af\u0001\u0000\u0000\u0000\u15af\u15b2"+
		"\u0001\u0000\u0000\u0000\u15b0\u15ae\u0001\u0000\u0000\u0000\u15b1\u157d"+
		"\u0001\u0000\u0000\u0000\u15b1\u1590\u0001\u0000\u0000\u0000\u15b1\u1596"+
		"\u0001\u0000\u0000\u0000\u15b1\u15a0\u0001\u0000\u0000\u0000\u15b1\u15a1"+
		"\u0001\u0000\u0000\u0000\u15b1\u15a2\u0001\u0000\u0000\u0000\u15b1\u15a3"+
		"\u0001\u0000\u0000\u0000\u15b2\u01d9\u0001\u0000\u0000\u0000\u15b3\u15b4"+
		"\u0005\u0097\u0000\u0000\u15b4\u15b5\u0007;\u0000\u0000\u15b5\u164d\u0005"+
		"\u01cf\u0000\u0000\u15b6\u15b7\u0005\u0097\u0000\u0000\u15b7\u15b8\u0007"+
		"M\u0000\u0000\u15b8\u15bb\u0005\u0195\u0000\u0000\u15b9\u15ba\u0005M\u0000"+
		"\u0000\u15ba\u15bc\u0005\u0472\u0000\u0000\u15bb\u15b9\u0001\u0000\u0000"+
		"\u0000\u15bb\u15bc\u0001\u0000\u0000\u0000\u15bc\u15bf\u0001\u0000\u0000"+
		"\u0000\u15bd\u15be\u0005A\u0000\u0000\u15be\u15c0\u0003\u0234\u011a\u0000"+
		"\u15bf\u15bd\u0001\u0000\u0000\u0000\u15bf\u15c0\u0001\u0000\u0000\u0000"+
		"\u15c0\u15c8\u0001\u0000\u0000\u0000\u15c1\u15c5\u0005_\u0000\u0000\u15c2"+
		"\u15c3\u0003\u0234\u011a\u0000\u15c3\u15c4\u0005\u0465\u0000\u0000\u15c4"+
		"\u15c6\u0001\u0000\u0000\u0000\u15c5\u15c2\u0001\u0000\u0000\u0000\u15c5"+
		"\u15c6\u0001\u0000\u0000\u0000\u15c6\u15c7\u0001\u0000\u0000\u0000\u15c7"+
		"\u15c9\u0003\u0234\u011a\u0000\u15c8\u15c1\u0001\u0000\u0000\u0000\u15c8"+
		"\u15c9\u0001\u0000\u0000\u0000\u15c9\u164d\u0001\u0000\u0000\u0000\u15ca"+
		"\u15cb\u0005\u0097\u0000\u0000\u15cb\u15cd\u0003\u01de\u00ef\u0000\u15cc"+
		"\u15ce\u0003\u01e0\u00f0\u0000\u15cd\u15cc\u0001\u0000\u0000\u0000\u15cd"+
		"\u15ce\u0001\u0000\u0000\u0000\u15ce\u164d\u0001\u0000\u0000\u0000\u15cf"+
		"\u15d1\u0005\u0097\u0000\u0000\u15d0\u15d2\u0005\u01a8\u0000\u0000\u15d1"+
		"\u15d0\u0001\u0000\u0000\u0000\u15d1\u15d2\u0001\u0000\u0000\u0000\u15d2"+
		"\u15d3\u0001\u0000\u0000\u0000\u15d3\u15d4\u0007,\u0000\u0000\u15d4\u15d5"+
		"\u0007N\u0000\u0000\u15d5\u15d8\u0003\u0214\u010a\u0000\u15d6\u15d7\u0007"+
		"N\u0000\u0000\u15d7\u15d9\u0003\u022e\u0117\u0000\u15d8\u15d6\u0001\u0000"+
		"\u0000\u0000\u15d8\u15d9\u0001\u0000\u0000\u0000\u15d9\u15db\u0001\u0000"+
		"\u0000\u0000\u15da\u15dc\u0003\u01e0\u00f0\u0000\u15db\u15da\u0001\u0000"+
		"\u0000\u0000\u15db\u15dc\u0001\u0000\u0000\u0000\u15dc\u164d\u0001\u0000"+
		"\u0000\u0000\u15dd\u15de\u0005\u0097\u0000\u0000\u15de\u15df\u0005 \u0000"+
		"\u0000\u15df\u15e1\u0007\u0000\u0000\u0000\u15e0\u15e2\u0003\u0266\u0133"+
		"\u0000\u15e1\u15e0\u0001\u0000\u0000\u0000\u15e1\u15e2\u0001\u0000\u0000"+
		"\u0000\u15e2\u15e3\u0001\u0000\u0000\u0000\u15e3\u164d\u0003\u022e\u0117"+
		"\u0000\u15e4\u15e5\u0005\u0097\u0000\u0000\u15e5\u15e6\u0005 \u0000\u0000"+
		"\u15e6\u15e7\u0007O\u0000\u0000\u15e7\u164d\u0003\u0212\u0109\u0000\u15e8"+
		"\u15e9\u0005\u0097\u0000\u0000\u15e9\u15ea\u0005 \u0000\u0000\u15ea\u15eb"+
		"\u0005\u0288\u0000\u0000\u15eb\u164d\u0003\u021c\u010e\u0000\u15ec\u15ed"+
		"\u0005\u0097\u0000\u0000\u15ed\u15ee\u0005\u018e\u0000\u0000\u15ee\u15ef"+
		"\u0003\u0224\u0112\u0000\u15ef\u15f0\u0007P\u0000\u0000\u15f0\u164d\u0001"+
		"\u0000\u0000\u0000\u15f1\u15f2\u0005\u0097\u0000\u0000\u15f2\u164d\u0003"+
		"\u01e2\u00f1\u0000\u15f3\u15f4\u0005\u0097\u0000\u0000\u15f4\u15fc\u0007"+
		"Q\u0000\u0000\u15f5\u15f9\u0005_\u0000\u0000\u15f6\u15f7\u0003\u0234\u011a"+
		"\u0000\u15f7\u15f8\u0005\u0465\u0000\u0000\u15f8\u15fa\u0001\u0000\u0000"+
		"\u0000\u15f9\u15f6\u0001\u0000\u0000\u0000\u15f9\u15fa\u0001\u0000\u0000"+
		"\u0000\u15fa\u15fb\u0001\u0000\u0000\u0000\u15fb\u15fd\u0003\u0234\u011a"+
		"\u0000\u15fc\u15f5\u0001\u0000\u0000\u0000\u15fc\u15fd\u0001\u0000\u0000"+
		"\u0000\u15fd\u164d\u0001\u0000\u0000\u0000\u15fe\u15ff\u0005\u0097\u0000"+
		"\u0000\u15ff\u1600\u0005\u0119\u0000\u0000\u1600\u1601\u0005\u0463\u0000"+
		"\u0000\u1601\u1602\u0005\u0453\u0000\u0000\u1602\u1603\u0005\u0464\u0000"+
		"\u0000\u1603\u164d\u0007Q\u0000\u0000\u1604\u1605\u0005\u0097\u0000\u0000"+
		"\u1605\u1608\u0003\u01e4\u00f2\u0000\u1606\u1607\u0007N\u0000\u0000\u1607"+
		"\u1609\u0003\u022e\u0117\u0000\u1608\u1606\u0001\u0000\u0000\u0000\u1608"+
		"\u1609\u0001\u0000\u0000\u0000\u1609\u160b\u0001\u0000\u0000\u0000\u160a"+
		"\u160c\u0003\u01e0\u00f0\u0000\u160b\u160a\u0001\u0000\u0000\u0000\u160b"+
		"\u160c\u0001\u0000\u0000\u0000\u160c\u164d\u0001\u0000\u0000\u0000\u160d"+
		"\u160e\u0005\u0097\u0000\u0000\u160e\u160f\u0007R\u0000\u0000\u160f\u1610"+
		"\u0005\u0163\u0000\u0000\u1610\u164d\u0003\u0212\u0109\u0000\u1611\u1612"+
		"\u0005\u0097\u0000\u0000\u1612\u1615\u0005\u01ac\u0000\u0000\u1613\u1614"+
		"\u0005>\u0000\u0000\u1614\u1616\u0003\u021c\u010e\u0000\u1615\u1613\u0001"+
		"\u0000\u0000\u0000\u1615\u1616\u0001\u0000\u0000\u0000\u1616\u164d\u0001"+
		"\u0000\u0000\u0000\u1617\u1618\u0005\u0097\u0000\u0000\u1618\u1619\u0007"+
		"S\u0000\u0000\u1619\u161a\u0007N\u0000\u0000\u161a\u161d\u0003\u0214\u010a"+
		"\u0000\u161b\u161c\u0007N\u0000\u0000\u161c\u161e\u0003\u022e\u0117\u0000"+
		"\u161d\u161b\u0001\u0000\u0000\u0000\u161d\u161e\u0001\u0000\u0000\u0000"+
		"\u161e\u1621\u0001\u0000\u0000\u0000\u161f\u1620\u0005\u00b8\u0000\u0000"+
		"\u1620\u1622\u0003\u0294\u014a\u0000\u1621\u161f\u0001\u0000\u0000\u0000"+
		"\u1621\u1622\u0001\u0000\u0000\u0000\u1622\u164d\u0001\u0000\u0000\u0000"+
		"\u1623\u1624\u0005\u0097\u0000\u0000\u1624\u1625\u0005\u020e\u0000\u0000"+
		"\u1625\u1628\u0005\u02a8\u0000\u0000\u1626\u1627\u0007N\u0000\u0000\u1627"+
		"\u1629\u0003\u022e\u0117\u0000\u1628\u1626\u0001\u0000\u0000\u0000\u1628"+
		"\u1629\u0001\u0000\u0000\u0000\u1629\u162b\u0001\u0000\u0000\u0000\u162a"+
		"\u162c\u0003\u01e0\u00f0\u0000\u162b\u162a\u0001\u0000\u0000\u0000\u162b"+
		"\u162c\u0001\u0000\u0000\u0000\u162c\u164d\u0001\u0000\u0000\u0000\u162d"+
		"\u162e\u0005\u0097\u0000\u0000\u162e\u162f\u0005\u0224\u0000\u0000\u162f"+
		"\u1634\u0003\u01e6\u00f3\u0000\u1630\u1631\u0005\u0465\u0000\u0000\u1631"+
		"\u1633\u0003\u01e6\u00f3\u0000\u1632\u1630\u0001\u0000\u0000\u0000\u1633"+
		"\u1636\u0001\u0000\u0000\u0000\u1634\u1632\u0001\u0000\u0000\u0000\u1634"+
		"\u1635\u0001\u0000\u0000\u0000\u1635\u163a\u0001\u0000\u0000\u0000\u1636"+
		"\u1634\u0001\u0000\u0000\u0000\u1637\u1638\u0005>\u0000\u0000\u1638\u1639"+
		"\u0005\u0227\u0000\u0000\u1639\u163b\u0003\u0234\u011a\u0000\u163a\u1637"+
		"\u0001\u0000\u0000\u0000\u163a\u163b\u0001\u0000\u0000\u0000\u163b\u163c"+
		"\u0001\u0000\u0000\u0000\u163c\u1640\u0005_\u0000\u0000\u163d\u163e\u0003"+
		"\u0234\u011a\u0000\u163e\u163f\u0005\u0465\u0000\u0000\u163f\u1641\u0001"+
		"\u0000\u0000\u0000\u1640\u163d\u0001\u0000\u0000\u0000\u1640\u1641\u0001"+
		"\u0000\u0000\u0000\u1641\u1642\u0001\u0000\u0000\u0000\u1642\u1643\u0003"+
		"\u0234\u011a\u0000\u1643\u164d\u0001\u0000\u0000\u0000\u1644\u1645\u0005"+
		"\u0097\u0000\u0000\u1645\u1646\u0005\u0255\u0000\u0000\u1646\u164a\u0005"+
		"\u0269\u0000\u0000\u1647\u1648\u0005>\u0000\u0000\u1648\u1649\u0005\u015a"+
		"\u0000\u0000\u1649\u164b\u0005\u0472\u0000\u0000\u164a\u1647\u0001\u0000"+
		"\u0000\u0000\u164a\u164b\u0001\u0000\u0000\u0000\u164b\u164d\u0001\u0000"+
		"\u0000\u0000\u164c\u15b3\u0001\u0000\u0000\u0000\u164c\u15b6\u0001\u0000"+
		"\u0000\u0000\u164c\u15ca\u0001\u0000\u0000\u0000\u164c\u15cf\u0001\u0000"+
		"\u0000\u0000\u164c\u15dd\u0001\u0000\u0000\u0000\u164c\u15e4\u0001\u0000"+
		"\u0000\u0000\u164c\u15e8\u0001\u0000\u0000\u0000\u164c\u15ec\u0001\u0000"+
		"\u0000\u0000\u164c\u15f1\u0001\u0000\u0000\u0000\u164c\u15f3\u0001\u0000"+
		"\u0000\u0000\u164c\u15fe\u0001\u0000\u0000\u0000\u164c\u1604\u0001\u0000"+
		"\u0000\u0000\u164c\u160d\u0001\u0000\u0000\u0000\u164c\u1611\u0001\u0000"+
		"\u0000\u0000\u164c\u1617\u0001\u0000\u0000\u0000\u164c\u1623\u0001\u0000"+
		"\u0000\u0000\u164c\u162d\u0001\u0000\u0000\u0000\u164c\u1644\u0001\u0000"+
		"\u0000\u0000\u164d\u01db\u0001\u0000\u0000\u0000\u164e\u1659\u0005\u047f"+
		"\u0000\u0000\u164f\u1659\u0005\u0480\u0000\u0000\u1650\u1651\u0005\u0467"+
		"\u0000\u0000\u1651\u1653\u0005\u0467\u0000\u0000\u1652\u1650\u0001\u0000"+
		"\u0000\u0000\u1652\u1653\u0001\u0000\u0000\u0000\u1653\u1654\u0001\u0000"+
		"\u0000\u0000\u1654\u1656\u0007T\u0000\u0000\u1655\u1652\u0001\u0000\u0000"+
		"\u0000\u1655\u1656\u0001\u0000\u0000\u0000\u1656\u1657\u0001\u0000\u0000"+
		"\u0000\u1657\u1659\u0003\u022e\u0117\u0000\u1658\u164e\u0001\u0000\u0000"+
		"\u0000\u1658\u164f\u0001\u0000\u0000\u0000\u1658\u1655\u0001\u0000\u0000"+
		"\u0000\u1659\u01dd\u0001\u0000\u0000\u0000\u165a\u165b\u0005\u0018\u0000"+
		"\u0000\u165b\u1668\u0005\u0095\u0000\u0000\u165c\u1668\u0005\u0338\u0000"+
		"\u0000\u165d\u1668\u0005&\u0000\u0000\u165e\u1668\u0005\u0093\u0000\u0000"+
		"\u165f\u1660\u0005\u01a9\u0000\u0000\u1660\u1668\u0005\u0269\u0000\u0000"+
		"\u1661\u1662\u0005\u007f\u0000\u0000\u1662\u1668\u0005\u0269\u0000\u0000"+
		"\u1663\u1665\u0007:\u0000\u0000\u1664\u1663\u0001\u0000\u0000\u0000\u1664"+
		"\u1665\u0001\u0000\u0000\u0000\u1665\u1666\u0001\u0000\u0000\u0000\u1666"+
		"\u1668\u0007U\u0000\u0000\u1667\u165a\u0001\u0000\u0000\u0000\u1667\u165c"+
		"\u0001\u0000\u0000\u0000\u1667\u165d\u0001\u0000\u0000\u0000\u1667\u165e"+
		"\u0001\u0000\u0000\u0000\u1667\u165f\u0001\u0000\u0000\u0000\u1667\u1661"+
		"\u0001\u0000\u0000\u0000\u1667\u1664\u0001\u0000\u0000\u0000\u1668\u01df"+
		"\u0001\u0000\u0000\u0000\u1669\u166a\u0005^\u0000\u0000\u166a\u166e\u0005"+
		"\u0472\u0000\u0000\u166b\u166c\u0005\u00b8\u0000\u0000\u166c\u166e\u0003"+
		"\u0294\u014a\u0000\u166d\u1669\u0001\u0000\u0000\u0000\u166d\u166b\u0001"+
		"\u0000\u0000\u0000\u166e\u01e1\u0001\u0000\u0000\u0000\u166f\u1671\u0005"+
		"\u026b\u0000\u0000\u1670\u166f\u0001\u0000\u0000\u0000\u1670\u1671\u0001"+
		"\u0000\u0000\u0000\u1671\u1672\u0001\u0000\u0000\u0000\u1672\u1681\u0005"+
		"\u018f\u0000\u0000\u1673\u1674\u0005\u01d0\u0000\u0000\u1674\u1681\u0005"+
		"\u0269\u0000\u0000\u1675\u1681\u0005\u021c\u0000\u0000\u1676\u1681\u0005"+
		"\u02b0\u0000\u0000\u1677\u1679\u0005\u01a8\u0000\u0000\u1678\u1677\u0001"+
		"\u0000\u0000\u0000\u1678\u1679\u0001\u0000\u0000\u0000\u1679\u167a\u0001"+
		"\u0000\u0000\u0000\u167a\u1681\u0005\u0223\u0000\u0000\u167b\u1681\u0005"+
		"\u0225\u0000\u0000\u167c\u167d\u0005\u0255\u0000\u0000\u167d\u1681\u0005"+
		"\u01b2\u0000\u0000\u167e\u1681\u0005\u014a\u0000\u0000\u167f\u1681\u0005"+
		"\u0176\u0000\u0000\u1680\u1670\u0001\u0000\u0000\u0000\u1680\u1673\u0001"+
		"\u0000\u0000\u0000\u1680\u1675\u0001\u0000\u0000\u0000\u1680\u1676\u0001"+
		"\u0000\u0000\u0000\u1680\u1678\u0001\u0000\u0000\u0000\u1680\u167b\u0001"+
		"\u0000\u0000\u0000\u1680\u167c\u0001\u0000\u0000\u0000\u1680\u167e\u0001"+
		"\u0000\u0000\u0000\u1680\u167f\u0001\u0000\u0000\u0000\u1681\u01e3\u0001"+
		"\u0000\u0000\u0000\u1682\u168b\u0005\u0195\u0000\u0000\u1683\u1684\u0005"+
		"\u00a6\u0000\u0000\u1684\u168b\u0005\u0269\u0000\u0000\u1685\u1687\u0005"+
		"\u01a8\u0000\u0000\u1686\u1685\u0001\u0000\u0000\u0000\u1686\u1687\u0001"+
		"\u0000\u0000\u0000\u1687\u1688\u0001\u0000\u0000\u0000\u1688\u168b\u0005"+
		"\u02a8\u0000\u0000\u1689\u168b\u0005\u027e\u0000\u0000\u168a\u1682\u0001"+
		"\u0000\u0000\u0000\u168a\u1683\u0001\u0000\u0000\u0000\u168a\u1686\u0001"+
		"\u0000\u0000\u0000\u168a\u1689\u0001\u0000\u0000\u0000\u168b\u01e5\u0001"+
		"\u0000\u0000\u0000\u168c\u1699\u0005\u0006\u0000\u0000\u168d\u168e\u0005"+
		"\u0152\u0000\u0000\u168e\u1699\u0005\u01c0\u0000\u0000\u168f\u1690\u0005"+
		"\u0175\u0000\u0000\u1690\u1699\u0005\u0274\u0000\u0000\u1691\u1699\u0005"+
		"\u0178\u0000\u0000\u1692\u1699\u0005\u01c2\u0000\u0000\u1693\u1699\u0005"+
		"\u0304\u0000\u0000\u1694\u1695\u0005\u0213\u0000\u0000\u1695\u1699\u0005"+
		"\u019e\u0000\u0000\u1696\u1699\u0005\u025c\u0000\u0000\u1697\u1699\u0005"+
		"\u0273\u0000\u0000\u1698\u168c\u0001\u0000\u0000\u0000\u1698\u168d\u0001"+
		"\u0000\u0000\u0000\u1698\u168f\u0001\u0000\u0000\u0000\u1698\u1691\u0001"+
		"\u0000\u0000\u0000\u1698\u1692\u0001\u0000\u0000\u0000\u1698\u1693\u0001"+
		"\u0000\u0000\u0000\u1698\u1694\u0001\u0000\u0000\u0000\u1698\u1696\u0001"+
		"\u0000\u0000\u0000\u1698\u1697\u0001\u0000\u0000\u0000\u1699\u01e7\u0001"+
		"\u0000\u0000\u0000\u169a\u169b\u0005\u0150\u0000\u0000\u169b\u169c\u0005"+
		"\u0472\u0000\u0000\u169c\u01e9\u0001\u0000\u0000\u0000\u169d\u169e\u0005"+
		"\u0156\u0000\u0000\u169e\u169f\u0005N\u0000\u0000\u169f\u16a4\u0003\u01f6"+
		"\u00fb\u0000\u16a0\u16a1\u0005\u0465\u0000\u0000\u16a1\u16a3\u0003\u01f6"+
		"\u00fb\u0000\u16a2\u16a0\u0001\u0000\u0000\u0000\u16a3\u16a6\u0001\u0000"+
		"\u0000\u0000\u16a4\u16a2\u0001\u0000\u0000\u0000\u16a4\u16a5\u0001\u0000"+
		"\u0000\u0000\u16a5\u16ae\u0001\u0000\u0000\u0000\u16a6\u16a4\u0001\u0000"+
		"\u0000\u0000\u16a7\u16a8\u0005}\u0000\u0000\u16a8\u16ab\u0005\u0463\u0000"+
		"\u0000\u16a9\u16ac\u0003\u024e\u0127\u0000\u16aa\u16ac\u0005\u0006\u0000"+
		"\u0000\u16ab\u16a9\u0001\u0000\u0000\u0000\u16ab\u16aa\u0001\u0000\u0000"+
		"\u0000\u16ac\u16ad\u0001\u0000\u0000\u0000\u16ad\u16af\u0005\u0464\u0000"+
		"\u0000\u16ae\u16a7\u0001\u0000\u0000\u0000\u16ae\u16af\u0001\u0000\u0000"+
		"\u0000\u16af\u16b0\u0001\u0000\u0000\u0000\u16b0\u16b1\u0005M\u0000\u0000"+
		"\u16b1\u16b2\u0003\u022e\u0117\u0000\u16b2\u01eb\u0001\u0000\u0000\u0000"+
		"\u16b3\u16b5\u0005\u01a4\u0000\u0000\u16b4\u16b6\u0007I\u0000\u0000\u16b5"+
		"\u16b4\u0001\u0000\u0000\u0000\u16b5\u16b6\u0001\u0000\u0000\u0000\u16b6"+
		"\u16b7\u0001\u0000\u0000\u0000\u16b7\u16bc\u0003\u01f8\u00fc\u0000\u16b8"+
		"\u16b9\u0005\u0465\u0000\u0000\u16b9\u16bb\u0003\u01f8\u00fc\u0000\u16ba"+
		"\u16b8\u0001\u0000\u0000\u0000\u16bb\u16be\u0001\u0000\u0000\u0000\u16bc"+
		"\u16ba\u0001\u0000\u0000\u0000\u16bc\u16bd\u0001\u0000\u0000\u0000\u16bd"+
		"\u01ed\u0001\u0000\u0000\u0000\u16be\u16bc\u0001\u0000\u0000\u0000\u16bf"+
		"\u16c1\u0005Z\u0000\u0000\u16c0\u16c2\u0007V\u0000\u0000\u16c1\u16c0\u0001"+
		"\u0000\u0000\u0000\u16c1\u16c2\u0001\u0000\u0000\u0000\u16c2\u16c3\u0001"+
		"\u0000\u0000\u0000\u16c3\u16c4\u0003\u0294\u014a\u0000\u16c4\u01ef\u0001"+
		"\u0000\u0000\u0000\u16c5\u16c6\u0005b\u0000\u0000\u16c6\u16c7\u0005N\u0000"+
		"\u0000\u16c7\u16c8\u0005T\u0000\u0000\u16c8\u16c9\u0005\u0156\u0000\u0000"+
		"\u16c9\u16ce\u0003\u01fc\u00fe\u0000\u16ca\u16cb\u0005\u0465\u0000\u0000"+
		"\u16cb\u16cd\u0003\u01fc\u00fe\u0000\u16cc\u16ca\u0001\u0000\u0000\u0000"+
		"\u16cd\u16d0\u0001\u0000\u0000\u0000\u16ce\u16cc\u0001\u0000\u0000\u0000"+
		"\u16ce\u16cf\u0001\u0000\u0000\u0000\u16cf\u01f1\u0001\u0000\u0000\u0000"+
		"\u16d0\u16ce\u0001\u0000\u0000\u0000\u16d1\u16d2\u0005\u023d\u0000\u0000"+
		"\u16d2\u16d3\u0005\u0227\u0000\u0000\u16d3\u16d4\u0005\u0156\u0000\u0000"+
		"\u16d4\u01f3\u0001\u0000\u0000\u0000\u16d5\u16d6\u0005\u02ae\u0000\u0000"+
		"\u16d6\u01f5\u0001\u0000\u0000\u0000\u16d7\u16df\u0003\u0214\u010a\u0000"+
		"\u16d8\u16da\u0007\u0017\u0000\u0000\u16d9\u16d8\u0001\u0000\u0000\u0000"+
		"\u16d9\u16da\u0001\u0000\u0000\u0000\u16da\u16db\u0001\u0000\u0000\u0000"+
		"\u16db\u16dc\u0005\u0463\u0000\u0000\u16dc\u16dd\u0003\u024e\u0127\u0000"+
		"\u16dd\u16de\u0005\u0464\u0000\u0000\u16de\u16e0\u0001\u0000\u0000\u0000"+
		"\u16df\u16d9\u0001\u0000\u0000\u0000\u16df\u16e0\u0001\u0000\u0000\u0000"+
		"\u16e0\u01f7\u0001\u0000\u0000\u0000\u16e1\u16f4\u0005\u0181\u0000\u0000"+
		"\u16e2\u16f4\u0005\u01b2\u0000\u0000\u16e3\u16e5\u0007W\u0000\u0000\u16e4"+
		"\u16e3\u0001\u0000\u0000\u0000\u16e4\u16e5\u0001\u0000\u0000\u0000\u16e5"+
		"\u16e6\u0001\u0000\u0000\u0000\u16e6\u16f4\u0005\u01cf\u0000\u0000\u16e7"+
		"\u16f4\u0005\u020f\u0000\u0000\u16e8\u16f4\u0005\u02b0\u0000\u0000\u16e9"+
		"\u16ea\u0005\u0227\u0000\u0000\u16ea\u16f4\u0005\u0156\u0000\u0000\u16eb"+
		"\u16f4\u0005\u0269\u0000\u0000\u16ec\u16f4\u0005\u028a\u0000\u0000\u16ed"+
		"\u16f1\u0005\u02a8\u0000\u0000\u16ee\u16ef\u0005\u00ba\u0000\u0000\u16ef"+
		"\u16f0\u0005\u0082\u0000\u0000\u16f0\u16f2\u0005c\u0000\u0000\u16f1\u16ee"+
		"\u0001\u0000\u0000\u0000\u16f1\u16f2\u0001\u0000\u0000\u0000\u16f2\u16f4"+
		"\u0001\u0000\u0000\u0000\u16f3\u16e1\u0001\u0000\u0000\u0000\u16f3\u16e2"+
		"\u0001\u0000\u0000\u0000\u16f3\u16e4\u0001\u0000\u0000\u0000\u16f3\u16e7"+
		"\u0001\u0000\u0000\u0000\u16f3\u16e8\u0001\u0000\u0000\u0000\u16f3\u16e9"+
		"\u0001\u0000\u0000\u0000\u16f3\u16eb\u0001\u0000\u0000\u0000\u16f3\u16ec"+
		"\u0001\u0000\u0000\u0000\u16f3\u16ed\u0001\u0000\u0000\u0000\u16f4\u1702"+
		"\u0001\u0000\u0000\u0000\u16f5\u16f6\u0005\u022e\u0000\u0000\u16f6\u16f8"+
		"\u0005\u01cf\u0000\u0000\u16f7\u16f9\u0003\u0158\u00ac\u0000\u16f8\u16f7"+
		"\u0001\u0000\u0000\u0000\u16f8\u16f9\u0001\u0000\u0000\u0000\u16f9\u1702"+
		"\u0001\u0000\u0000\u0000\u16fa\u16fc\u00079\u0000\u0000\u16fb\u16fd\u0003"+
		"\u0250\u0128\u0000\u16fc\u16fb\u0001\u0000\u0000\u0000\u16fc\u16fd\u0001"+
		"\u0000\u0000\u0000\u16fd\u16ff\u0001\u0000\u0000\u0000\u16fe\u1700\u0003"+
		"\u01fa\u00fd\u0000\u16ff\u16fe\u0001\u0000\u0000\u0000\u16ff\u1700\u0001"+
		"\u0000\u0000\u0000\u1700\u1702\u0001\u0000\u0000\u0000\u1701\u16f3\u0001"+
		"\u0000\u0000\u0000\u1701\u16f5\u0001\u0000\u0000\u0000\u1701\u16fa\u0001"+
		"\u0000\u0000\u0000\u1702\u01f9\u0001\u0000\u0000\u0000\u1703\u1704\u0005"+
		"\u00ba\u0000\u0000\u1704\u1705\u0005\u0082\u0000\u0000\u1705\u1709\u0005"+
		"c\u0000\u0000\u1706\u1707\u0005>\u0000\u0000\u1707\u1709\u0005\u019a\u0000"+
		"\u0000\u1708\u1703\u0001\u0000\u0000\u0000\u1708\u1706\u0001\u0000\u0000"+
		"\u0000\u1709\u01fb\u0001\u0000\u0000\u0000\u170a\u1712\u0003\u0214\u010a"+
		"\u0000\u170b\u170c\u0005}\u0000\u0000\u170c\u170f\u0005\u0463\u0000\u0000"+
		"\u170d\u1710\u0003\u024e\u0127\u0000\u170e\u1710\u0005\u0006\u0000\u0000"+
		"\u170f\u170d\u0001\u0000\u0000\u0000\u170f\u170e\u0001\u0000\u0000\u0000"+
		"\u1710\u1711\u0001\u0000\u0000\u0000\u1711\u1713\u0005\u0464\u0000\u0000"+
		"\u1712\u170b\u0001\u0000\u0000\u0000\u1712\u1713\u0001\u0000\u0000\u0000"+
		"\u1713\u171b\u0001\u0000\u0000\u0000\u1714\u1716\u0007\u0017\u0000\u0000"+
		"\u1715\u1714\u0001\u0000\u0000\u0000\u1715\u1716\u0001\u0000\u0000\u0000"+
		"\u1716\u1717\u0001\u0000\u0000\u0000\u1717\u1718\u0005\u0463\u0000\u0000"+
		"\u1718\u1719\u0003\u024e\u0127\u0000\u1719\u171a\u0005\u0464\u0000\u0000"+
		"\u171a\u171c\u0001\u0000\u0000\u0000\u171b\u1715\u0001\u0000\u0000\u0000"+
		"\u171b\u171c\u0001\u0000\u0000\u0000\u171c\u171f\u0001\u0000\u0000\u0000"+
		"\u171d\u171e\u0005K\u0000\u0000\u171e\u1720\u0005\u01c9\u0000\u0000\u171f"+
		"\u171d\u0001\u0000\u0000\u0000\u171f\u1720\u0001\u0000\u0000\u0000\u1720"+
		"\u01fd\u0001\u0000\u0000\u0000\u1721\u1722\u0007X\u0000\u0000\u1722\u1725"+
		"\u0003\u0214\u010a\u0000\u1723\u1726\u0003\u022e\u0117\u0000\u1724\u1726"+
		"\u0005\u0472\u0000\u0000\u1725\u1723\u0001\u0000\u0000\u0000\u1725\u1724"+
		"\u0001\u0000\u0000\u0000\u1725\u1726\u0001\u0000\u0000\u0000\u1726\u01ff"+
		"\u0001\u0000\u0000\u0000\u1727\u172b\u0007X\u0000\u0000\u1728\u1729\u0007"+
		"Y\u0000\u0000\u1729\u172a\u0005\u045a\u0000\u0000\u172a\u172c\u0007Z\u0000"+
		"\u0000\u172b\u1728\u0001\u0000\u0000\u0000\u172b\u172c\u0001\u0000\u0000"+
		"\u0000\u172c\u172d\u0001\u0000\u0000\u0000\u172d\u172e\u0003\u0210\u0108"+
		"\u0000\u172e\u0201\u0001\u0000\u0000\u0000\u172f\u1730\u0005\u01b0\u0000"+
		"\u0000\u1730\u1731\u0005\u0472\u0000\u0000\u1731\u0203\u0001\u0000\u0000"+
		"\u0000\u1732\u1733\u0005\u00b4\u0000\u0000\u1733\u1734\u0003\u022e\u0117"+
		"\u0000\u1734\u0205\u0001\u0000\u0000\u0000\u1735\u173d\u0005\u0098\u0000"+
		"\u0000\u1736\u1738\u0005\u009d\u0000\u0000\u1737\u1739\u0005\u028c\u0000"+
		"\u0000\u1738\u1737\u0001\u0000\u0000\u0000\u1738\u1739\u0001\u0000\u0000"+
		"\u0000\u1739\u173a\u0001\u0000\u0000\u0000\u173a\u173e\u0003\u0238\u011c"+
		"\u0000\u173b\u173e\u0005\u047a\u0000\u0000\u173c\u173e\u0005\u047b\u0000"+
		"\u0000\u173d\u1736\u0001\u0000\u0000\u0000\u173d\u173b\u0001\u0000\u0000"+
		"\u0000\u173d\u173c\u0001\u0000\u0000\u0000\u173e\u1748\u0001\u0000\u0000"+
		"\u0000\u173f\u1740\u0005\u0095\u0000\u0000\u1740\u1745\u0003\u020a\u0105"+
		"\u0000\u1741\u1742\u0005\u0465\u0000\u0000\u1742\u1744\u0003\u020a\u0105"+
		"\u0000\u1743\u1741\u0001\u0000\u0000\u0000\u1744\u1747\u0001\u0000\u0000"+
		"\u0000\u1745\u1743\u0001\u0000\u0000\u0000\u1745\u1746\u0001\u0000\u0000"+
		"\u0000\u1746\u1749\u0001\u0000\u0000\u0000\u1747\u1745\u0001\u0000\u0000"+
		"\u0000\u1748\u173f\u0001\u0000\u0000\u0000\u1748\u1749\u0001\u0000\u0000"+
		"\u0000\u1749\u0207\u0001\u0000\u0000\u0000\u174a\u1752\u0005\u008b\u0000"+
		"\u0000\u174b\u174d\u0005\u009d\u0000\u0000\u174c\u174e\u0005\u028c\u0000"+
		"\u0000\u174d\u174c\u0001\u0000\u0000\u0000\u174d\u174e\u0001\u0000\u0000"+
		"\u0000\u174e\u174f\u0001\u0000\u0000\u0000\u174f\u1753\u0003\u0238\u011c"+
		"\u0000\u1750\u1753\u0005\u047a\u0000\u0000\u1751\u1753\u0005\u047b\u0000"+
		"\u0000\u1752\u174b\u0001\u0000\u0000\u0000\u1752\u1750\u0001\u0000\u0000"+
		"\u0000\u1752\u1751\u0001\u0000\u0000\u0000\u1752\u1753\u0001\u0000\u0000"+
		"\u0000\u1753\u175d\u0001\u0000\u0000\u0000\u1754\u1755\u0005\u0095\u0000"+
		"\u0000\u1755\u175a\u0003\u020a\u0105\u0000\u1756\u1757\u0005\u0465\u0000"+
		"\u0000\u1757\u1759\u0003\u020a\u0105\u0000\u1758\u1756\u0001\u0000\u0000"+
		"\u0000\u1759\u175c\u0001\u0000\u0000\u0000\u175a\u1758\u0001\u0000\u0000"+
		"\u0000\u175a\u175b\u0001\u0000\u0000\u0000\u175b\u175e\u0001\u0000\u0000"+
		"\u0000\u175c\u175a\u0001\u0000\u0000\u0000\u175d\u1754\u0001\u0000\u0000"+
		"\u0000\u175d\u175e\u0001\u0000\u0000\u0000\u175e\u0209\u0001\u0000\u0000"+
		"\u0000\u175f\u1760\u0007[\u0000\u0000\u1760\u1765\u0005\u045a\u0000\u0000"+
		"\u1761\u1766\u0003\u0238\u011c\u0000\u1762\u1766\u0005\u0473\u0000\u0000"+
		"\u1763\u1766\u0003\u021e\u010f\u0000\u1764\u1766\u0003\u0230\u0118\u0000"+
		"\u1765\u1761\u0001\u0000\u0000\u0000\u1765\u1762\u0001\u0000\u0000\u0000"+
		"\u1765\u1763\u0001\u0000\u0000\u0000\u1765\u1764\u0001\u0000\u0000\u0000"+
		"\u1766\u020b\u0001\u0000\u0000\u0000\u1767\u1769\u0005D\u0000\u0000\u1768"+
		"\u176a\u0007\\\u0000\u0000\u1769\u1768\u0001\u0000\u0000\u0000\u1769\u176a"+
		"\u0001\u0000\u0000\u0000\u176a\u176b\u0001\u0000\u0000\u0000\u176b\u178b"+
		"\u0005.\u0000\u0000\u176c\u176d\u0003\u01dc\u00ee\u0000\u176d\u176e\u0005"+
		"\u045a\u0000\u0000\u176e\u1776\u0007]\u0000\u0000\u176f\u1770\u0005\u0465"+
		"\u0000\u0000\u1770\u1771\u0003\u01dc\u00ee\u0000\u1771\u1772\u0005\u045a"+
		"\u0000\u0000\u1772\u1773\u0007]\u0000\u0000\u1773\u1775\u0001\u0000\u0000"+
		"\u0000\u1774\u176f\u0001\u0000\u0000\u0000\u1775\u1778\u0001\u0000\u0000"+
		"\u0000\u1776\u1774\u0001\u0000\u0000\u0000\u1776\u1777\u0001\u0000\u0000"+
		"\u0000\u1777\u178c\u0001\u0000\u0000\u0000\u1778\u1776\u0001\u0000\u0000"+
		"\u0000\u1779\u177c\u0005\u001c\u0000\u0000\u177a\u177d\u0003\u0234\u011a"+
		"\u0000\u177b\u177d\u0003\u01dc\u00ee\u0000\u177c\u177a\u0001\u0000\u0000"+
		"\u0000\u177c\u177b\u0001\u0000\u0000\u0000\u177d\u177e\u0001\u0000\u0000"+
		"\u0000\u177e\u177f\u0003\u01dc\u00ee\u0000\u177f\u1780\u0005\u045a\u0000"+
		"\u0000\u1780\u1788\u0003\u020e\u0107\u0000\u1781\u1782\u0005\u0465\u0000"+
		"\u0000\u1782\u1783\u0003\u01dc\u00ee\u0000\u1783\u1784\u0005\u045a\u0000"+
		"\u0000\u1784\u1785\u0003\u020e\u0107\u0000\u1785\u1787\u0001\u0000\u0000"+
		"\u0000\u1786\u1781\u0001\u0000\u0000\u0000\u1787\u178a\u0001\u0000\u0000"+
		"\u0000\u1788\u1786\u0001\u0000\u0000\u0000\u1788\u1789\u0001\u0000\u0000"+
		"\u0000\u1789\u178c\u0001\u0000\u0000\u0000\u178a\u1788\u0001\u0000\u0000"+
		"\u0000\u178b\u176c\u0001\u0000\u0000\u0000\u178b\u1779\u0001\u0000\u0000"+
		"\u0000\u178c\u020d\u0001\u0000\u0000\u0000\u178d\u178e\u0007^\u0000\u0000"+
		"\u178e\u020f\u0001\u0000\u0000\u0000\u178f\u1795\u0003\u00ccf\u0000\u1790"+
		"\u1795\u0003\u00be_\u0000\u1791\u1795\u0003\u00c4b\u0000\u1792\u1795\u0003"+
		"\u00cae\u0000\u1793\u1795\u0003\u00ceg\u0000\u1794\u178f\u0001\u0000\u0000"+
		"\u0000\u1794\u1790\u0001\u0000\u0000\u0000\u1794\u1791\u0001\u0000\u0000"+
		"\u0000\u1794\u1792\u0001\u0000\u0000\u0000\u1794\u1793\u0001\u0000\u0000"+
		"\u0000\u1795\u179a\u0001\u0000\u0000\u0000\u1796\u1797\u0005>\u0000\u0000"+
		"\u1797\u1798\u0005\u016f\u0000\u0000\u1798\u179a\u0003\u022e\u0117\u0000"+
		"\u1799\u1794\u0001\u0000\u0000\u0000\u1799\u1796\u0001\u0000\u0000\u0000"+
		"\u179a\u0211\u0001\u0000\u0000\u0000\u179b\u179f\u0003\u022e\u0117\u0000"+
		"\u179c\u17a0\u0005\u0479\u0000\u0000\u179d\u179e\u0005\u0462\u0000\u0000"+
		"\u179e\u17a0\u0003\u022e\u0117\u0000\u179f\u179c\u0001\u0000\u0000\u0000"+
		"\u179f\u179d\u0001\u0000\u0000\u0000\u179f\u17a0\u0001\u0000\u0000\u0000"+
		"\u17a0\u0213\u0001\u0000\u0000\u0000\u17a1\u17a2\u0003\u0212\u0109\u0000"+
		"\u17a2\u0215\u0001\u0000\u0000\u0000\u17a3\u17a6\u0003\u021c\u010e\u0000"+
		"\u17a4\u17a6\u0003\u022e\u0117\u0000\u17a5\u17a3\u0001\u0000\u0000\u0000"+
		"\u17a5\u17a4\u0001\u0000\u0000\u0000\u17a6\u0217\u0001\u0000\u0000\u0000"+
		"\u17a7\u17ac\u0003\u022e\u0117\u0000\u17a8\u17aa\u0003\u0232\u0119\u0000"+
		"\u17a9\u17ab\u0003\u0232\u0119\u0000\u17aa\u17a9\u0001\u0000\u0000\u0000"+
		"\u17aa\u17ab\u0001\u0000\u0000\u0000\u17ab\u17ad\u0001\u0000\u0000\u0000"+
		"\u17ac\u17a8\u0001\u0000\u0000\u0000\u17ac\u17ad\u0001\u0000\u0000\u0000"+
		"\u17ad\u17b4\u0001\u0000\u0000\u0000\u17ae\u17af\t\u0000\u0000\u0000\u17af"+
		"\u17b1\u0003\u0232\u0119\u0000\u17b0\u17b2\u0003\u0232\u0119\u0000\u17b1"+
		"\u17b0\u0001\u0000\u0000\u0000\u17b1\u17b2\u0001\u0000\u0000\u0000\u17b2"+
		"\u17b4\u0001\u0000\u0000\u0000\u17b3\u17a7\u0001\u0000\u0000\u0000\u17b3"+
		"\u17ae\u0001\u0000\u0000\u0000\u17b4\u0219\u0001\u0000\u0000\u0000\u17b5"+
		"\u17b8\u0003\u022e\u0117\u0000\u17b6\u17b8\u0005\u0472\u0000\u0000\u17b7"+
		"\u17b5\u0001\u0000\u0000\u0000\u17b7\u17b6\u0001\u0000\u0000\u0000\u17b8"+
		"\u17bd\u0001\u0000\u0000\u0000\u17b9\u17ba\u0005\u0463\u0000\u0000\u17ba"+
		"\u17bb\u0003\u0234\u011a\u0000\u17bb\u17bc\u0005\u0464\u0000\u0000\u17bc"+
		"\u17be\u0001\u0000\u0000\u0000\u17bd\u17b9\u0001\u0000\u0000\u0000\u17bd"+
		"\u17be\u0001\u0000\u0000\u0000\u17be\u17c1\u0001\u0000\u0000\u0000\u17bf"+
		"\u17c1\u0003\u0294\u014a\u0000\u17c0\u17b7\u0001\u0000\u0000\u0000\u17c0"+
		"\u17bf\u0001\u0000\u0000\u0000\u17c1\u17c3\u0001\u0000\u0000\u0000\u17c2"+
		"\u17c4\u00073\u0000\u0000\u17c3\u17c2\u0001\u0000\u0000\u0000\u17c3\u17c4"+
		"\u0001\u0000\u0000\u0000\u17c4\u021b\u0001\u0000\u0000\u0000\u17c5\u17cc"+
		"\u0005\u047c\u0000\u0000\u17c6\u17cc\u0005\u047e\u0000\u0000\u17c7\u17cc"+
		"\u0005\u047a\u0000\u0000\u17c8\u17cc\u0005\u0472\u0000\u0000\u17c9\u17cc"+
		"\u0005\u02bf\u0000\u0000\u17ca\u17cc\u0003\u02b0\u0158\u0000\u17cb\u17c5"+
		"\u0001\u0000\u0000\u0000\u17cb\u17c6\u0001\u0000\u0000\u0000\u17cb\u17c7"+
		"\u0001\u0000\u0000\u0000\u17cb\u17c8\u0001\u0000\u0000\u0000\u17cb\u17c9"+
		"\u0001\u0000\u0000\u0000\u17cb\u17ca\u0001\u0000\u0000\u0000\u17cc\u021d"+
		"\u0001\u0000\u0000\u0000\u17cd\u17ce\u0007_\u0000\u0000\u17ce\u021f\u0001"+
		"\u0000\u0000\u0000\u17cf\u17d4\u0005\u00dc\u0000\u0000\u17d0\u17d4\u0003"+
		"\u02a6\u0153\u0000\u17d1\u17d4\u0005\u0472\u0000\u0000\u17d2\u17d4\u0005"+
		"\u046f\u0000\u0000\u17d3\u17cf\u0001\u0000\u0000\u0000\u17d3\u17d0\u0001"+
		"\u0000\u0000\u0000\u17d3\u17d1\u0001\u0000\u0000\u0000\u17d3\u17d2\u0001"+
		"\u0000\u0000\u0000\u17d4\u0221\u0001\u0000\u0000\u0000\u17d5\u17d8\u0003"+
		"\u022e\u0117\u0000\u17d6\u17d8\u0005\u0472\u0000\u0000\u17d7\u17d5\u0001"+
		"\u0000\u0000\u0000\u17d7\u17d6\u0001\u0000\u0000\u0000\u17d8\u0223\u0001"+
		"\u0000\u0000\u0000\u17d9\u17da\u0007`\u0000\u0000\u17da\u0225\u0001\u0000"+
		"\u0000\u0000\u17db\u17dc\u0003\u0234\u011a\u0000\u17dc\u17dd\u0005\u0457"+
		"\u0000\u0000\u17dd\u17de\u0003\u0234\u011a\u0000\u17de\u17df\u0005\u0457"+
		"\u0000\u0000\u17df\u17e0\u0003\u0234\u011a\u0000\u17e0\u17e1\u0005\u0457"+
		"\u0000\u0000\u17e1\u17e2\u0003\u0234\u011a\u0000\u17e2\u17e3\u0005\u0457"+
		"\u0000\u0000\u17e3\u17e9\u0003\u0234\u011a\u0000\u17e4\u17e5\u0005\u046e"+
		"\u0000\u0000\u17e5\u17e6\u0003\u0234\u011a\u0000\u17e6\u17e7\u0005\u0457"+
		"\u0000\u0000\u17e7\u17e8\u0003\u0234\u011a\u0000\u17e8\u17ea\u0001\u0000"+
		"\u0000\u0000\u17e9\u17e4\u0001\u0000\u0000\u0000\u17ea\u17eb\u0001\u0000"+
		"\u0000\u0000\u17eb\u17e9\u0001\u0000\u0000\u0000\u17eb\u17ec\u0001\u0000"+
		"\u0000\u0000\u17ec\u0227\u0001\u0000\u0000\u0000\u17ed\u17f4\u0003\u022a"+
		"\u0115\u0000\u17ee\u17ef\u0005\u0465\u0000\u0000\u17ef\u17f2\u0003\u022a"+
		"\u0115\u0000\u17f0\u17f1\u0005\u0465\u0000\u0000\u17f1\u17f3\u0003\u0234"+
		"\u011a\u0000\u17f2\u17f0\u0001\u0000\u0000\u0000\u17f2\u17f3\u0001\u0000"+
		"\u0000\u0000\u17f3\u17f5\u0001\u0000\u0000\u0000\u17f4\u17ee\u0001\u0000"+
		"\u0000\u0000\u17f4\u17f5\u0001\u0000\u0000\u0000\u17f5\u0229\u0001\u0000"+
		"\u0000\u0000\u17f6\u17fe\u0005\u0472\u0000\u0000\u17f7\u17fe\u0005\u0477"+
		"\u0000\u0000\u17f8\u17fa\u0005\u0474\u0000\u0000\u17f9\u17f8\u0001\u0000"+
		"\u0000\u0000\u17fa\u17fb\u0001\u0000\u0000\u0000\u17fb\u17f9\u0001\u0000"+
		"\u0000\u0000\u17fb\u17fc\u0001\u0000\u0000\u0000\u17fc\u17fe\u0001\u0000"+
		"\u0000\u0000\u17fd\u17f6\u0001\u0000\u0000\u0000\u17fd\u17f7\u0001\u0000"+
		"\u0000\u0000\u17fd\u17f9\u0001\u0000\u0000\u0000\u17fe\u022b\u0001\u0000"+
		"\u0000\u0000\u17ff\u1802\u0003\u022e\u0117\u0000\u1800\u1802\u0005\u0472"+
		"\u0000\u0000\u1801\u17ff\u0001\u0000\u0000\u0000\u1801\u1800\u0001\u0000"+
		"\u0000\u0000\u1802\u022d\u0001\u0000\u0000\u0000\u1803\u1807\u0003\u0230"+
		"\u0118\u0000\u1804\u1807\u0005\u047b\u0000\u0000\u1805\u1807\u0005\u046f"+
		"\u0000\u0000\u1806\u1803\u0001\u0000\u0000\u0000\u1806\u1804\u0001\u0000"+
		"\u0000\u0000\u1806\u1805\u0001\u0000\u0000\u0000\u1807\u022f\u0001\u0000"+
		"\u0000\u0000\u1808\u1812\u0005\u047a\u0000\u0000\u1809\u1812\u0003\u02a6"+
		"\u0153\u0000\u180a\u1812\u0003\u02a8\u0154\u0000\u180b\u1812\u0003\u0224"+
		"\u0112\u0000\u180c\u1812\u0003\u02aa\u0155\u0000\u180d\u1812\u0003\u02ac"+
		"\u0156\u0000\u180e\u1812\u0003\u02ae\u0157\u0000\u180f\u1812\u0003\u02b0"+
		"\u0158\u0000\u1810\u1812\u0003\u02b2\u0159\u0000\u1811\u1808\u0001\u0000"+
		"\u0000\u0000\u1811\u1809\u0001\u0000\u0000\u0000\u1811\u180a\u0001\u0000"+
		"\u0000\u0000\u1811\u180b\u0001\u0000\u0000\u0000\u1811\u180c\u0001\u0000"+
		"\u0000\u0000\u1811\u180d\u0001\u0000\u0000\u0000\u1811\u180e\u0001\u0000"+
		"\u0000\u0000\u1811\u180f\u0001\u0000\u0000\u0000\u1811\u1810\u0001\u0000"+
		"\u0000\u0000\u1812\u0231\u0001\u0000\u0000\u0000\u1813\u1817\u0005\u0479"+
		"\u0000\u0000\u1814\u1815\u0005\u0462\u0000\u0000\u1815\u1817\u0003\u022e"+
		"\u0117\u0000\u1816\u1813\u0001\u0000\u0000\u0000\u1816\u1814\u0001\u0000"+
		"\u0000\u0000\u1817\u0233\u0001\u0000\u0000\u0000\u1818\u1819\u0007a\u0000"+
		"\u0000\u1819\u0235\u0001\u0000\u0000\u0000\u181a\u181d\u0005\u0470\u0000"+
		"\u0000\u181b\u181d\u0003\u0234\u011a\u0000\u181c\u181a\u0001\u0000\u0000"+
		"\u0000\u181c\u181b\u0001\u0000\u0000\u0000\u181d\u0237\u0001\u0000\u0000"+
		"\u0000\u181e\u1820\u0005\u0478\u0000\u0000\u181f\u181e\u0001\u0000\u0000"+
		"\u0000\u181f\u1820\u0001\u0000\u0000\u0000\u1820\u1821\u0001\u0000\u0000"+
		"\u0000\u1821\u1824\u0005\u0472\u0000\u0000\u1822\u1824\u0005\u0471\u0000"+
		"\u0000\u1823\u181f\u0001\u0000\u0000\u0000\u1823\u1822\u0001\u0000\u0000"+
		"\u0000\u1824\u1826\u0001\u0000\u0000\u0000\u1825\u1827\u0005\u0472\u0000"+
		"\u0000\u1826\u1825\u0001\u0000\u0000\u0000\u1827\u1828\u0001\u0000\u0000"+
		"\u0000\u1828\u1826\u0001\u0000\u0000\u0000\u1828\u1829\u0001\u0000\u0000"+
		"\u0000\u1829\u1836\u0001\u0000\u0000\u0000\u182a\u182c\u0005\u0478\u0000"+
		"\u0000\u182b\u182a\u0001\u0000\u0000\u0000\u182b\u182c\u0001\u0000\u0000"+
		"\u0000\u182c\u182d\u0001\u0000\u0000\u0000\u182d\u1830\u0005\u0472\u0000"+
		"\u0000\u182e\u1830\u0005\u0471\u0000\u0000\u182f\u182b\u0001\u0000\u0000"+
		"\u0000\u182f\u182e\u0001\u0000\u0000\u0000\u1830\u1833\u0001\u0000\u0000"+
		"\u0000\u1831\u1832\u0005\u001a\u0000\u0000\u1832\u1834\u0003\u0222\u0111"+
		"\u0000\u1833\u1831\u0001\u0000\u0000\u0000\u1833\u1834\u0001\u0000\u0000"+
		"\u0000\u1834\u1836\u0001\u0000\u0000\u0000\u1835\u1823\u0001\u0000\u0000"+
		"\u0000\u1835\u182f\u0001\u0000\u0000\u0000\u1836\u0239\u0001\u0000\u0000"+
		"\u0000\u1837\u1838\u0007b\u0000\u0000\u1838\u023b\u0001\u0000\u0000\u0000"+
		"\u1839\u183b\u0005\u0478\u0000\u0000\u183a\u1839\u0001\u0000\u0000\u0000"+
		"\u183a\u183b\u0001\u0000\u0000\u0000\u183b\u183c\u0001\u0000\u0000\u0000"+
		"\u183c\u183d\u0005\u0474\u0000\u0000\u183d\u023d\u0001\u0000\u0000\u0000"+
		"\u183e\u1840\u0005n\u0000\u0000\u183f\u183e\u0001\u0000\u0000\u0000\u183f"+
		"\u1840\u0001\u0000\u0000\u0000\u1840\u1841\u0001\u0000\u0000\u0000\u1841"+
		"\u1842\u0007c\u0000\u0000\u1842\u023f\u0001\u0000\u0000\u0000\u1843\u1850"+
		"\u0003\u0238\u011c\u0000\u1844\u1850\u0003\u0234\u011a\u0000\u1845\u1846"+
		"\u0005\u0457\u0000\u0000\u1846\u1850\u0003\u0234\u011a\u0000\u1847\u1850"+
		"\u0003\u023c\u011e\u0000\u1848\u1850\u0003\u023a\u011d\u0000\u1849\u1850"+
		"\u0005\u0475\u0000\u0000\u184a\u1850\u0005\u0477\u0000\u0000\u184b\u184d"+
		"\u0005n\u0000\u0000\u184c\u184b\u0001\u0000\u0000\u0000\u184c\u184d\u0001"+
		"\u0000\u0000\u0000\u184d\u184e\u0001\u0000\u0000\u0000\u184e\u1850\u0007"+
		"c\u0000\u0000\u184f\u1843\u0001\u0000\u0000\u0000\u184f\u1844\u0001\u0000"+
		"\u0000\u0000\u184f\u1845\u0001\u0000\u0000\u0000\u184f\u1847\u0001\u0000"+
		"\u0000\u0000\u184f\u1848\u0001\u0000\u0000\u0000\u184f\u1849\u0001\u0000"+
		"\u0000\u0000\u184f\u184a\u0001\u0000\u0000\u0000\u184f\u184c\u0001\u0000"+
		"\u0000\u0000\u1850\u0241\u0001\u0000\u0000\u0000\u1851\u1853\u0007d\u0000"+
		"\u0000\u1852\u1854\u0005\u00e8\u0000\u0000\u1853\u1852\u0001\u0000\u0000"+
		"\u0000\u1853\u1854\u0001\u0000\u0000\u0000\u1854\u1856\u0001\u0000\u0000"+
		"\u0000\u1855\u1857\u0003\u0248\u0124\u0000\u1856\u1855\u0001\u0000\u0000"+
		"\u0000\u1856\u1857\u0001\u0000\u0000\u0000\u1857\u1859\u0001\u0000\u0000"+
		"\u0000\u1858\u185a\u0005\u00dc\u0000\u0000\u1859\u1858\u0001\u0000\u0000"+
		"\u0000\u1859\u185a\u0001\u0000\u0000\u0000\u185a\u185e\u0001\u0000\u0000"+
		"\u0000\u185b\u185c\u0003@ \u0000\u185c\u185d\u0003\u0220\u0110\u0000\u185d"+
		"\u185f\u0001\u0000\u0000\u0000\u185e\u185b\u0001\u0000\u0000\u0000\u185e"+
		"\u185f\u0001\u0000\u0000\u0000\u185f\u1863\u0001\u0000\u0000\u0000\u1860"+
		"\u1861\u0005\u001a\u0000\u0000\u1861\u1864\u0003\u0222\u0111\u0000\u1862"+
		"\u1864\u0005\u00dc\u0000\u0000\u1863\u1860\u0001\u0000\u0000\u0000\u1863"+
		"\u1862\u0001\u0000\u0000\u0000\u1863\u1864\u0001\u0000\u0000\u0000\u1864"+
		"\u18cc\u0001\u0000\u0000\u0000\u1865\u1866\u0005\u00db\u0000\u0000\u1866"+
		"\u1868\u0007e\u0000\u0000\u1867\u1869\u0003\u0248\u0124\u0000\u1868\u1867"+
		"\u0001\u0000\u0000\u0000\u1868\u1869\u0001\u0000\u0000\u0000\u1869\u186b"+
		"\u0001\u0000\u0000\u0000\u186a\u186c\u0005\u00dc\u0000\u0000\u186b\u186a"+
		"\u0001\u0000\u0000\u0000\u186b\u186c\u0001\u0000\u0000\u0000\u186c\u18cc"+
		"\u0001\u0000\u0000\u0000\u186d\u186e\u0005\u01f9\u0000\u0000\u186e\u1870"+
		"\u0005\u00d9\u0000\u0000\u186f\u1871\u0003\u0248\u0124\u0000\u1870\u186f"+
		"\u0001\u0000\u0000\u0000\u1870\u1871\u0001\u0000\u0000\u0000\u1871\u1873"+
		"\u0001\u0000\u0000\u0000\u1872\u1874\u0005\u00dc\u0000\u0000\u1873\u1872"+
		"\u0001\u0000\u0000\u0000\u1873\u1874\u0001\u0000\u0000\u0000\u1874\u18cc"+
		"\u0001\u0000\u0000\u0000\u1875\u1876\u0005\u00db\u0000\u0000\u1876\u1877"+
		"\u0007f\u0000\u0000\u1877\u1879\u0005\u00e8\u0000\u0000\u1878\u187a\u0003"+
		"\u0248\u0124\u0000\u1879\u1878\u0001\u0000\u0000\u0000\u1879\u187a\u0001"+
		"\u0000\u0000\u0000\u187a\u187c\u0001\u0000\u0000\u0000\u187b\u187d\u0005"+
		"\u00dc\u0000\u0000\u187c\u187b\u0001\u0000\u0000\u0000\u187c\u187d\u0001"+
		"\u0000\u0000\u0000\u187d\u18cc\u0001\u0000\u0000\u0000\u187e\u1880\u0007"+
		"g\u0000\u0000\u187f\u1881\u0003\u0248\u0124\u0000\u1880\u187f\u0001\u0000"+
		"\u0000\u0000\u1880\u1881\u0001\u0000\u0000\u0000\u1881\u1885\u0001\u0000"+
		"\u0000\u0000\u1882\u1884\u0007h\u0000\u0000\u1883\u1882\u0001\u0000\u0000"+
		"\u0000\u1884\u1887\u0001\u0000\u0000\u0000\u1885\u1883\u0001\u0000\u0000"+
		"\u0000\u1885\u1886\u0001\u0000\u0000\u0000\u1886\u18cc\u0001\u0000\u0000"+
		"\u0000\u1887\u1885\u0001\u0000\u0000\u0000\u1888\u188a\u0005\u00ca\u0000"+
		"\u0000\u1889\u188b\u0003\u024a\u0125\u0000\u188a\u1889\u0001\u0000\u0000"+
		"\u0000\u188a\u188b\u0001\u0000\u0000\u0000\u188b\u188f\u0001\u0000\u0000"+
		"\u0000\u188c\u188e\u0007h\u0000\u0000\u188d\u188c\u0001\u0000\u0000\u0000"+
		"\u188e\u1891\u0001\u0000\u0000\u0000\u188f\u188d\u0001\u0000\u0000\u0000"+
		"\u188f\u1890\u0001\u0000\u0000\u0000\u1890\u18cc\u0001\u0000\u0000\u0000"+
		"\u1891\u188f\u0001\u0000\u0000\u0000\u1892\u1894\u0005\u00cb\u0000\u0000"+
		"\u1893\u1895\u0005\u00cc\u0000\u0000\u1894\u1893\u0001\u0000\u0000\u0000"+
		"\u1894\u1895\u0001\u0000\u0000\u0000\u1895\u1897\u0001\u0000\u0000\u0000"+
		"\u1896\u1898\u0003\u024a\u0125\u0000\u1897\u1896\u0001\u0000\u0000\u0000"+
		"\u1897\u1898\u0001\u0000\u0000\u0000\u1898\u189c\u0001\u0000\u0000\u0000"+
		"\u1899\u189b\u0007h\u0000\u0000\u189a\u1899\u0001\u0000\u0000\u0000\u189b"+
		"\u189e\u0001\u0000\u0000\u0000\u189c\u189a\u0001\u0000\u0000\u0000\u189c"+
		"\u189d\u0001\u0000\u0000\u0000\u189d\u18cc\u0001\u0000\u0000\u0000\u189e"+
		"\u189c\u0001\u0000\u0000\u0000\u189f\u18a1\u0007i\u0000\u0000\u18a0\u18a2"+
		"\u0003\u024c\u0126\u0000\u18a1\u18a0\u0001\u0000\u0000\u0000\u18a1\u18a2"+
		"\u0001\u0000\u0000\u0000\u18a2\u18a6\u0001\u0000\u0000\u0000\u18a3\u18a5"+
		"\u0007h\u0000\u0000\u18a4\u18a3\u0001\u0000\u0000\u0000\u18a5\u18a8\u0001"+
		"\u0000\u0000\u0000\u18a6\u18a4\u0001\u0000\u0000\u0000\u18a6\u18a7\u0001"+
		"\u0000\u0000\u0000\u18a7\u18cc\u0001\u0000\u0000\u0000\u18a8\u18a6\u0001"+
		"\u0000\u0000\u0000\u18a9\u18cc\u0007j\u0000\u0000\u18aa\u18ac\u0007k\u0000"+
		"\u0000\u18ab\u18ad\u0003\u0248\u0124\u0000\u18ac\u18ab\u0001\u0000\u0000"+
		"\u0000\u18ac\u18ad\u0001\u0000\u0000\u0000\u18ad\u18cc\u0001\u0000\u0000"+
		"\u0000\u18ae\u18af\u0007l\u0000\u0000\u18af\u18b1\u0003\u0244\u0122\u0000"+
		"\u18b0\u18b2\u0005\u00dc\u0000\u0000\u18b1\u18b0\u0001\u0000\u0000\u0000"+
		"\u18b1\u18b2\u0001\u0000\u0000\u0000\u18b2\u18b6\u0001\u0000\u0000\u0000"+
		"\u18b3\u18b4\u0003@ \u0000\u18b4\u18b5\u0003\u0220\u0110\u0000\u18b5\u18b7"+
		"\u0001\u0000\u0000\u0000\u18b6\u18b3\u0001\u0000\u0000\u0000\u18b6\u18b7"+
		"\u0001\u0000\u0000\u0000\u18b7\u18cc\u0001\u0000\u0000\u0000\u18b8\u18cc"+
		"\u0007m\u0000\u0000\u18b9\u18bb\u0005\u00e1\u0000\u0000\u18ba\u18bc\u0005"+
		"\u00d9\u0000\u0000\u18bb\u18ba\u0001\u0000\u0000\u0000\u18bb\u18bc\u0001"+
		"\u0000\u0000\u0000\u18bc\u18be\u0001\u0000\u0000\u0000\u18bd\u18bf\u0005"+
		"\u00dc\u0000\u0000\u18be\u18bd\u0001\u0000\u0000\u0000\u18be\u18bf\u0001"+
		"\u0000\u0000\u0000\u18bf\u18c3\u0001\u0000\u0000\u0000\u18c0\u18c1\u0003"+
		"@ \u0000\u18c1\u18c2\u0003\u0220\u0110\u0000\u18c2\u18c4\u0001\u0000\u0000"+
		"\u0000\u18c3\u18c0\u0001\u0000\u0000\u0000\u18c3\u18c4\u0001\u0000\u0000"+
		"\u0000\u18c4\u18c7\u0001\u0000\u0000\u0000\u18c5\u18c6\u0005\u001a\u0000"+
		"\u0000\u18c6\u18c8\u0003\u0222\u0111\u0000\u18c7\u18c5\u0001\u0000\u0000"+
		"\u0000\u18c7\u18c8\u0001\u0000\u0000\u0000\u18c8\u18cc\u0001\u0000\u0000"+
		"\u0000\u18c9\u18ca\u0005\u00e1\u0000\u0000\u18ca\u18cc\u0005\u00dd\u0000"+
		"\u0000\u18cb\u1851\u0001\u0000\u0000\u0000\u18cb\u1865\u0001\u0000\u0000"+
		"\u0000\u18cb\u186d\u0001\u0000\u0000\u0000\u18cb\u1875\u0001\u0000\u0000"+
		"\u0000\u18cb\u187e\u0001\u0000\u0000\u0000\u18cb\u1888\u0001\u0000\u0000"+
		"\u0000\u18cb\u1892\u0001\u0000\u0000\u0000\u18cb\u189f\u0001\u0000\u0000"+
		"\u0000\u18cb\u18a9\u0001\u0000\u0000\u0000\u18cb\u18aa\u0001\u0000\u0000"+
		"\u0000\u18cb\u18ae\u0001\u0000\u0000\u0000\u18cb\u18b8\u0001\u0000\u0000"+
		"\u0000\u18cb\u18b9\u0001\u0000\u0000\u0000\u18cb\u18c9\u0001\u0000\u0000"+
		"\u0000\u18cc\u0243\u0001\u0000\u0000\u0000\u18cd\u18ce\u0005\u0463\u0000"+
		"\u0000\u18ce\u18d3\u0005\u0472\u0000\u0000\u18cf\u18d0\u0005\u0465\u0000"+
		"\u0000\u18d0\u18d2\u0005\u0472\u0000\u0000\u18d1\u18cf\u0001\u0000\u0000"+
		"\u0000\u18d2\u18d5\u0001\u0000\u0000\u0000\u18d3\u18d1\u0001\u0000\u0000"+
		"\u0000\u18d3\u18d4\u0001\u0000\u0000\u0000\u18d4\u18d6\u0001\u0000\u0000"+
		"\u0000\u18d5\u18d3\u0001\u0000\u0000\u0000\u18d6\u18d7\u0005\u0464\u0000"+
		"\u0000\u18d7\u0245\u0001\u0000\u0000\u0000\u18d8\u18da\u0007n\u0000\u0000"+
		"\u18d9\u18db\u0003\u0248\u0124\u0000\u18da\u18d9\u0001\u0000\u0000\u0000"+
		"\u18da\u18db\u0001\u0000\u0000\u0000\u18db\u18ef\u0001\u0000\u0000\u0000"+
		"\u18dc\u18de\u0005\u00d8\u0000\u0000\u18dd\u18df\u0003\u0248\u0124\u0000"+
		"\u18de\u18dd\u0001\u0000\u0000\u0000\u18de\u18df\u0001\u0000\u0000\u0000"+
		"\u18df\u18e3\u0001\u0000\u0000\u0000\u18e0\u18e1\u0003@ \u0000\u18e1\u18e2"+
		"\u0003\u0220\u0110\u0000\u18e2\u18e4\u0001\u0000\u0000\u0000\u18e3\u18e0"+
		"\u0001\u0000\u0000\u0000\u18e3\u18e4\u0001\u0000\u0000\u0000\u18e4\u18ef"+
		"\u0001\u0000\u0000\u0000\u18e5\u18ef\u0007o\u0000\u0000\u18e6\u18e8\u0005"+
		"\u00d0\u0000\u0000\u18e7\u18e9\u0003\u024c\u0126\u0000\u18e8\u18e7\u0001"+
		"\u0000\u0000\u0000\u18e8\u18e9\u0001\u0000\u0000\u0000\u18e9\u18ef\u0001"+
		"\u0000\u0000\u0000\u18ea\u18ec\u0007p\u0000\u0000\u18eb\u18ed\u0005\u00c8"+
		"\u0000\u0000\u18ec\u18eb\u0001\u0000\u0000\u0000\u18ec\u18ed\u0001\u0000"+
		"\u0000\u0000\u18ed\u18ef\u0001\u0000\u0000\u0000\u18ee\u18d8\u0001\u0000"+
		"\u0000\u0000\u18ee\u18dc\u0001\u0000\u0000\u0000\u18ee\u18e5\u0001\u0000"+
		"\u0000\u0000\u18ee\u18e6\u0001\u0000\u0000\u0000\u18ee\u18ea\u0001\u0000"+
		"\u0000\u0000\u18ef\u18f1\u0001\u0000\u0000\u0000\u18f0\u18f2\u0005\u000b"+
		"\u0000\u0000\u18f1\u18f0\u0001\u0000\u0000\u0000\u18f1\u18f2\u0001\u0000"+
		"\u0000\u0000\u18f2\u0247\u0001\u0000\u0000\u0000\u18f3\u18f4\u0005\u0463"+
		"\u0000\u0000\u18f4\u18f5\u0003\u0234\u011a\u0000\u18f5\u18f6\u0005\u0464"+
		"\u0000\u0000\u18f6\u0249\u0001\u0000\u0000\u0000\u18f7\u18f8\u0005\u0463"+
		"\u0000\u0000\u18f8\u18f9\u0003\u0234\u011a\u0000\u18f9\u18fa\u0005\u0465"+
		"\u0000\u0000\u18fa\u18fb\u0003\u0234\u011a\u0000\u18fb\u18fc\u0005\u0464"+
		"\u0000\u0000\u18fc\u024b\u0001\u0000\u0000\u0000\u18fd\u18fe\u0005\u0463"+
		"\u0000\u0000\u18fe\u1901\u0003\u0234\u011a\u0000\u18ff\u1900\u0005\u0465"+
		"\u0000\u0000\u1900\u1902\u0003\u0234\u011a\u0000\u1901\u18ff\u0001\u0000"+
		"\u0000\u0000\u1901\u1902\u0001\u0000\u0000\u0000\u1902\u1903\u0001\u0000"+
		"\u0000\u0000\u1903\u1904\u0005\u0464\u0000\u0000\u1904\u024d\u0001\u0000"+
		"\u0000\u0000\u1905\u190a\u0003\u022e\u0117\u0000\u1906\u1907\u0005\u0465"+
		"\u0000\u0000\u1907\u1909\u0003\u022e\u0117\u0000\u1908\u1906\u0001\u0000"+
		"\u0000\u0000\u1909\u190c\u0001\u0000\u0000\u0000\u190a\u1908\u0001\u0000"+
		"\u0000\u0000\u190a\u190b\u0001\u0000\u0000\u0000\u190b\u024f\u0001\u0000"+
		"\u0000\u0000\u190c\u190a\u0001\u0000\u0000\u0000\u190d\u1912\u0003\u0214"+
		"\u010a\u0000\u190e\u190f\u0005\u0465\u0000\u0000\u190f\u1911\u0003\u0214"+
		"\u010a\u0000\u1910\u190e\u0001\u0000\u0000\u0000\u1911\u1914\u0001\u0000"+
		"\u0000\u0000\u1912\u1910\u0001\u0000\u0000\u0000\u1912\u1913\u0001\u0000"+
		"\u0000\u0000\u1913\u0251\u0001\u0000\u0000\u0000\u1914\u1912\u0001\u0000"+
		"\u0000\u0000\u1915\u1916\u0005\u0463\u0000\u0000\u1916\u191b\u0003\u021a"+
		"\u010d\u0000\u1917\u1918\u0005\u0465\u0000\u0000\u1918\u191a\u0003\u021a"+
		"\u010d\u0000\u1919\u1917\u0001\u0000\u0000\u0000\u191a\u191d\u0001\u0000"+
		"\u0000\u0000\u191b\u1919\u0001\u0000\u0000\u0000\u191b\u191c\u0001\u0000"+
		"\u0000\u0000\u191c\u191e\u0001\u0000\u0000\u0000\u191d\u191b\u0001\u0000"+
		"\u0000\u0000\u191e\u191f\u0005\u0464\u0000\u0000\u191f\u0253\u0001\u0000"+
		"\u0000\u0000\u1920\u1925\u0003\u0294\u014a\u0000\u1921\u1922\u0005\u0465"+
		"\u0000\u0000\u1922\u1924\u0003\u0294\u014a\u0000\u1923\u1921\u0001\u0000"+
		"\u0000\u0000\u1924\u1927\u0001\u0000\u0000\u0000\u1925\u1923\u0001\u0000"+
		"\u0000\u0000\u1925\u1926\u0001\u0000\u0000\u0000\u1926\u0255\u0001\u0000"+
		"\u0000\u0000\u1927\u1925\u0001\u0000\u0000\u0000\u1928\u192d\u0003\u0262"+
		"\u0131\u0000\u1929\u192a\u0005\u0465\u0000\u0000\u192a\u192c\u0003\u0262"+
		"\u0131\u0000\u192b\u1929\u0001\u0000\u0000\u0000\u192c\u192f\u0001\u0000"+
		"\u0000\u0000\u192d\u192b\u0001\u0000\u0000\u0000\u192d\u192e\u0001\u0000"+
		"\u0000\u0000\u192e\u0257\u0001\u0000\u0000\u0000\u192f\u192d\u0001\u0000"+
		"\u0000\u0000\u1930\u1935\u0003\u0240\u0120\u0000\u1931\u1932\u0005\u0465"+
		"\u0000\u0000\u1932\u1934\u0003\u0240\u0120\u0000\u1933\u1931\u0001\u0000"+
		"\u0000\u0000\u1934\u1937\u0001\u0000\u0000\u0000\u1935\u1933\u0001\u0000"+
		"\u0000\u0000\u1935\u1936\u0001\u0000\u0000\u0000\u1936\u0259\u0001\u0000"+
		"\u0000\u0000\u1937\u1935\u0001\u0000\u0000\u0000\u1938\u193d\u0005\u0472"+
		"\u0000\u0000\u1939\u193a\u0005\u0465\u0000\u0000\u193a\u193c\u0005\u0472"+
		"\u0000\u0000\u193b\u1939\u0001\u0000\u0000\u0000\u193c\u193f\u0001\u0000"+
		"\u0000\u0000\u193d\u193b\u0001\u0000\u0000\u0000\u193d\u193e\u0001\u0000"+
		"\u0000\u0000\u193e\u025b\u0001\u0000\u0000\u0000\u193f\u193d\u0001\u0000"+
		"\u0000\u0000\u1940\u1945\u0005\u047f\u0000\u0000\u1941\u1942\u0005\u0465"+
		"\u0000\u0000\u1942\u1944\u0005\u047f\u0000\u0000\u1943\u1941\u0001\u0000"+
		"\u0000\u0000\u1944\u1947\u0001\u0000\u0000\u0000\u1945\u1943\u0001\u0000"+
		"\u0000\u0000\u1945\u1946\u0001\u0000\u0000\u0000\u1946\u025d\u0001\u0000"+
		"\u0000\u0000\u1947\u1945\u0001\u0000\u0000\u0000\u1948\u196c\u0005p\u0000"+
		"\u0000\u1949\u194a\u0005\u0016\u0000\u0000\u194a\u194b\u0005\u0463\u0000"+
		"\u0000\u194b\u194c\u0003\u0294\u014a\u0000\u194c\u194d\u0005\f\u0000\u0000"+
		"\u194d\u194e\u0003\u0246\u0123\u0000\u194e\u194f\u0005\u0464\u0000\u0000"+
		"\u194f\u196c\u0001\u0000\u0000\u0000\u1950\u1952\u0003\u029a\u014d\u0000"+
		"\u1951\u1950\u0001\u0000\u0000\u0000\u1951\u1952\u0001\u0000\u0000\u0000"+
		"\u1952\u1953\u0001\u0000\u0000\u0000\u1953\u196c\u0003\u0240\u0120\u0000"+
		"\u1954\u1958\u0003\u0260\u0130\u0000\u1955\u1956\u0005r\u0000\u0000\u1956"+
		"\u1957\u0005\u00b2\u0000\u0000\u1957\u1959\u0003\u0260\u0130\u0000\u1958"+
		"\u1955\u0001\u0000\u0000\u0000\u1958\u1959\u0001\u0000\u0000\u0000\u1959"+
		"\u196c\u0001\u0000\u0000\u0000\u195a\u195b\u0005\u0463\u0000\u0000\u195b"+
		"\u195c\u0003\u0294\u014a\u0000\u195c\u195d\u0005\u0464\u0000\u0000\u195d"+
		"\u196c\u0001\u0000\u0000\u0000\u195e\u195f\u0007q\u0000\u0000\u195f\u1960"+
		"\u0005\u0463\u0000\u0000\u1960\u1961\u0003\u0212\u0109\u0000\u1961\u1962"+
		"\u0005\u0464\u0000\u0000\u1962\u196c\u0001\u0000\u0000\u0000\u1963\u1964"+
		"\u0005\u0463\u0000\u0000\u1964\u1965\u0007r\u0000\u0000\u1965\u1966\u0005"+
		"\u028c\u0000\u0000\u1966\u1967\u0005>\u0000\u0000\u1967\u1968\u0003\u0212"+
		"\u0109\u0000\u1968\u1969\u0005\u0464\u0000\u0000\u1969\u196c\u0001\u0000"+
		"\u0000\u0000\u196a\u196c\u0003\u0294\u014a\u0000\u196b\u1948\u0001\u0000"+
		"\u0000\u0000\u196b\u1949\u0001\u0000\u0000\u0000\u196b\u1951\u0001\u0000"+
		"\u0000\u0000\u196b\u1954\u0001\u0000\u0000\u0000\u196b\u195a\u0001\u0000"+
		"\u0000\u0000\u196b\u195e\u0001\u0000\u0000\u0000\u196b\u1963\u0001\u0000"+
		"\u0000\u0000\u196b\u196a\u0001\u0000\u0000\u0000\u196c\u025f\u0001\u0000"+
		"\u0000\u0000\u196d\u1973\u0007s\u0000\u0000\u196e\u1970\u0005\u0463\u0000"+
		"\u0000\u196f\u1971\u0003\u0234\u011a\u0000\u1970\u196f\u0001\u0000\u0000"+
		"\u0000\u1970\u1971\u0001\u0000\u0000\u0000\u1971\u1972\u0001\u0000\u0000"+
		"\u0000\u1972\u1974\u0005\u0464\u0000\u0000\u1973\u196e\u0001\u0000\u0000"+
		"\u0000\u1973\u1974\u0001\u0000\u0000\u0000\u1974\u197c\u0001\u0000\u0000"+
		"\u0000\u1975\u1976\u0005\u013a\u0000\u0000\u1976\u1978\u0005\u0463\u0000"+
		"\u0000\u1977\u1979\u0003\u0234\u011a\u0000\u1978\u1977\u0001\u0000\u0000"+
		"\u0000\u1978\u1979\u0001\u0000\u0000\u0000\u1979\u197a\u0001\u0000\u0000"+
		"\u0000\u197a\u197c\u0005\u0464\u0000\u0000\u197b\u196d\u0001\u0000\u0000"+
		"\u0000\u197b\u1975\u0001\u0000\u0000\u0000\u197c\u0261\u0001\u0000\u0000"+
		"\u0000\u197d\u1980\u0003\u0294\u014a\u0000\u197e\u1980\u0005(\u0000\u0000"+
		"\u197f\u197d\u0001\u0000\u0000\u0000\u197f\u197e\u0001\u0000\u0000\u0000"+
		"\u1980\u0263\u0001\u0000\u0000\u0000\u1981\u1982\u0005J\u0000\u0000\u1982"+
		"\u1983\u00059\u0000\u0000\u1983\u0265\u0001\u0000\u0000\u0000\u1984\u1985"+
		"\u0005J\u0000\u0000\u1985\u1986\u0005n\u0000\u0000\u1986\u1987\u00059"+
		"\u0000\u0000\u1987\u0267\u0001\u0000\u0000\u0000\u1988\u1989\u0005\u0291"+
		"\u0000\u0000\u1989\u198c\u0003\u0234\u011a\u0000\u198a\u198c\u0005\u0202"+
		"\u0000\u0000\u198b\u1988\u0001\u0000\u0000\u0000\u198b\u198a\u0001\u0000"+
		"\u0000\u0000\u198c\u0269\u0001\u0000\u0000\u0000\u198d\u1991\u0003\u0268"+
		"\u0134\u0000\u198e\u198f\u0005\u0099\u0000\u0000\u198f\u1991\u0005d\u0000"+
		"\u0000\u1990\u198d\u0001\u0000\u0000\u0000\u1990\u198e\u0001\u0000\u0000"+
		"\u0000\u1991\u026b\u0001\u0000\u0000\u0000\u1992\u19a5\u0003\u026e\u0137"+
		"\u0000\u1993\u19a5\u0003\u0276\u013b\u0000\u1994\u19a5\u0003\u0278\u013c"+
		"\u0000\u1995\u1996\u0003\u028c\u0146\u0000\u1996\u1998\u0005\u0463\u0000"+
		"\u0000\u1997\u1999\u0003\u0290\u0148\u0000\u1998\u1997\u0001\u0000\u0000"+
		"\u0000\u1998\u1999\u0001\u0000\u0000\u0000\u1999\u199a\u0001\u0000\u0000"+
		"\u0000\u199a\u199b\u0005\u0464\u0000\u0000\u199b\u19a5\u0001\u0000\u0000"+
		"\u0000\u199c\u199d\u0003\u0212\u0109\u0000\u199d\u199f\u0005\u0463\u0000"+
		"\u0000\u199e\u19a0\u0003\u0290\u0148\u0000\u199f\u199e\u0001\u0000\u0000"+
		"\u0000\u199f\u19a0\u0001\u0000\u0000\u0000\u19a0\u19a1\u0001\u0000\u0000"+
		"\u0000\u19a1\u19a2\u0005\u0464\u0000\u0000\u19a2\u19a5\u0001\u0000\u0000"+
		"\u0000\u19a3\u19a5\u0003\u028e\u0147\u0000\u19a4\u1992\u0001\u0000\u0000"+
		"\u0000\u19a4\u1993\u0001\u0000\u0000\u0000\u19a4\u1994\u0001\u0000\u0000"+
		"\u0000\u19a4\u1995\u0001\u0000\u0000\u0000\u19a4\u199c\u0001\u0000\u0000"+
		"\u0000\u19a4\u19a3\u0001\u0000\u0000\u0000\u19a5\u026d\u0001\u0000\u0000"+
		"\u0000\u19a6\u19a9\u0007t\u0000\u0000\u19a7\u19a8\u0005\u0463\u0000\u0000"+
		"\u19a8\u19aa\u0005\u0464\u0000\u0000\u19a9\u19a7\u0001\u0000\u0000\u0000"+
		"\u19a9\u19aa\u0001\u0000\u0000\u0000\u19aa\u1a67\u0001\u0000\u0000\u0000"+
		"\u19ab\u19ac\u0005\u001f\u0000\u0000\u19ac\u19ad\u0005\u0463\u0000\u0000"+
		"\u19ad\u19ae\u0003\u0294\u014a\u0000\u19ae\u19af\u0005\u0465\u0000\u0000"+
		"\u19af\u19b0\u0003\u0246\u0123\u0000\u19b0\u19b1\u0005\u0464\u0000\u0000"+
		"\u19b1\u1a67\u0001\u0000\u0000\u0000\u19b2\u19b3\u0005\u001f\u0000\u0000"+
		"\u19b3\u19b4\u0005\u0463\u0000\u0000\u19b4\u19b5\u0003\u0294\u014a\u0000"+
		"\u19b5\u19b6\u0005\u00b5\u0000\u0000\u19b6\u19b7\u0003\u0220\u0110\u0000"+
		"\u19b7\u19b8\u0005\u0464\u0000\u0000\u19b8\u1a67\u0001\u0000\u0000\u0000"+
		"\u19b9\u19ba\u0005\u0016\u0000\u0000\u19ba\u19bb\u0005\u0463\u0000\u0000"+
		"\u19bb\u19bc\u0003\u0294\u014a\u0000\u19bc\u19bd\u0005\f\u0000\u0000\u19bd"+
		"\u19be\u0003\u0246\u0123\u0000\u19be\u19bf\u0005\u0464\u0000\u0000\u19bf"+
		"\u1a67\u0001\u0000\u0000\u0000\u19c0\u19c1\u0005\u00b6\u0000\u0000\u19c1"+
		"\u19c2\u0005\u0463\u0000\u0000\u19c2\u19c3\u0003\u0218\u010c\u0000\u19c3"+
		"\u19c4\u0005\u0464\u0000\u0000\u19c4\u1a67\u0001\u0000\u0000\u0000\u19c5"+
		"\u19c6\u0005\u0015\u0000\u0000\u19c6\u19c8\u0003\u0294\u014a\u0000\u19c7"+
		"\u19c9\u0003\u0270\u0138\u0000\u19c8\u19c7\u0001\u0000\u0000\u0000\u19c9"+
		"\u19ca\u0001\u0000\u0000\u0000\u19ca\u19c8\u0001\u0000\u0000\u0000\u19ca"+
		"\u19cb\u0001\u0000\u0000\u0000\u19cb\u19ce\u0001\u0000\u0000\u0000\u19cc"+
		"\u19cd\u00053\u0000\u0000\u19cd\u19cf\u0003\u0292\u0149\u0000\u19ce\u19cc"+
		"\u0001\u0000\u0000\u0000\u19ce\u19cf\u0001\u0000\u0000\u0000\u19cf\u19d0"+
		"\u0001\u0000\u0000\u0000\u19d0\u19d1\u0005\u018c\u0000\u0000\u19d1\u1a67"+
		"\u0001\u0000\u0000\u0000\u19d2\u19d4\u0005\u0015\u0000\u0000\u19d3\u19d5"+
		"\u0003\u0270\u0138\u0000\u19d4\u19d3\u0001\u0000\u0000\u0000\u19d5\u19d6"+
		"\u0001\u0000\u0000\u0000\u19d6\u19d4\u0001\u0000\u0000\u0000\u19d6\u19d7"+
		"\u0001\u0000\u0000\u0000\u19d7\u19da\u0001\u0000\u0000\u0000\u19d8\u19d9"+
		"\u00053\u0000\u0000\u19d9\u19db\u0003\u0292\u0149\u0000\u19da\u19d8\u0001"+
		"\u0000\u0000\u0000\u19da\u19db\u0001\u0000\u0000\u0000\u19db\u19dc\u0001"+
		"\u0000\u0000\u0000\u19dc\u19dd\u0005\u018c\u0000\u0000\u19dd\u1a67\u0001"+
		"\u0000\u0000\u0000\u19de\u19df\u0005\u00d8\u0000\u0000\u19df\u19e0\u0005"+
		"\u0463\u0000\u0000\u19e0\u19e3\u0003\u0290\u0148\u0000\u19e1\u19e2\u0005"+
		"\u00b5\u0000\u0000\u19e2\u19e4\u0003\u0220\u0110\u0000\u19e3\u19e1\u0001"+
		"\u0000\u0000\u0000\u19e3\u19e4\u0001\u0000\u0000\u0000\u19e4\u19e5\u0001"+
		"\u0000\u0000\u0000\u19e5\u19e6\u0005\u0464\u0000\u0000\u19e6\u1a67\u0001"+
		"\u0000\u0000\u0000\u19e7\u19e8\u0005\u013b\u0000\u0000\u19e8\u19eb\u0005"+
		"\u0463\u0000\u0000\u19e9\u19ec\u0003\u0238\u011c\u0000\u19ea\u19ec\u0003"+
		"\u0294\u014a\u0000\u19eb\u19e9\u0001\u0000\u0000\u0000\u19eb\u19ea\u0001"+
		"\u0000\u0000\u0000\u19ec\u19ed\u0001\u0000\u0000\u0000\u19ed\u19f0\u0005"+
		"M\u0000\u0000\u19ee\u19f1\u0003\u0238\u011c\u0000\u19ef\u19f1\u0003\u0294"+
		"\u014a\u0000\u19f0\u19ee\u0001\u0000\u0000\u0000\u19f0\u19ef\u0001\u0000"+
		"\u0000\u0000\u19f1\u19f2\u0001\u0000\u0000\u0000\u19f2\u19f3\u0005\u0464"+
		"\u0000\u0000\u19f3\u1a67\u0001\u0000\u0000\u0000\u19f4\u19f5\u0007u\u0000"+
		"\u0000\u19f5\u19f8\u0005\u0463\u0000\u0000\u19f6\u19f9\u0003\u0238\u011c"+
		"\u0000\u19f7\u19f9\u0003\u0294\u014a\u0000\u19f8\u19f6\u0001\u0000\u0000"+
		"\u0000\u19f8\u19f7\u0001\u0000\u0000\u0000\u19f9\u19fa\u0001\u0000\u0000"+
		"\u0000\u19fa\u19fd\u0005A\u0000\u0000\u19fb\u19fe\u0003\u0234\u011a\u0000"+
		"\u19fc\u19fe\u0003\u0294\u014a\u0000\u19fd\u19fb\u0001\u0000\u0000\u0000"+
		"\u19fd\u19fc\u0001\u0000\u0000\u0000\u19fe\u1a04\u0001\u0000\u0000\u0000"+
		"\u19ff\u1a02\u0005>\u0000\u0000\u1a00\u1a03\u0003\u0234\u011a\u0000\u1a01"+
		"\u1a03\u0003\u0294\u014a\u0000\u1a02\u1a00\u0001\u0000\u0000\u0000\u1a02"+
		"\u1a01\u0001\u0000\u0000\u0000\u1a03\u1a05\u0001\u0000\u0000\u0000\u1a04"+
		"\u19ff\u0001\u0000\u0000\u0000\u1a04\u1a05\u0001\u0000\u0000\u0000\u1a05"+
		"\u1a06\u0001\u0000\u0000\u0000\u1a06\u1a07\u0005\u0464\u0000\u0000\u1a07"+
		"\u1a67\u0001\u0000\u0000\u0000\u1a08\u1a09\u0005\u013f\u0000\u0000\u1a09"+
		"\u1a0a\u0005\u0463\u0000\u0000\u1a0a\u1a0d\u0007v\u0000\u0000\u1a0b\u1a0e"+
		"\u0003\u0238\u011c\u0000\u1a0c\u1a0e\u0003\u0294\u014a\u0000\u1a0d\u1a0b"+
		"\u0001\u0000\u0000\u0000\u1a0d\u1a0c\u0001\u0000\u0000\u0000\u1a0d\u1a0e"+
		"\u0001\u0000\u0000\u0000\u1a0e\u1a0f\u0001\u0000\u0000\u0000\u1a0f\u1a12"+
		"\u0005A\u0000\u0000\u1a10\u1a13\u0003\u0238\u011c\u0000\u1a11\u1a13\u0003"+
		"\u0294\u014a\u0000\u1a12\u1a10\u0001\u0000\u0000\u0000\u1a12\u1a11\u0001"+
		"\u0000\u0000\u0000\u1a13\u1a14\u0001\u0000\u0000\u0000\u1a14\u1a15\u0005"+
		"\u0464\u0000\u0000\u1a15\u1a67\u0001\u0000\u0000\u0000\u1a16\u1a17\u0005"+
		"\u013f\u0000\u0000\u1a17\u1a1a\u0005\u0463\u0000\u0000\u1a18\u1a1b\u0003"+
		"\u0238\u011c\u0000\u1a19\u1a1b\u0003\u0294\u014a\u0000\u1a1a\u1a18\u0001"+
		"\u0000\u0000\u0000\u1a1a\u1a19\u0001\u0000\u0000\u0000\u1a1b\u1a1c\u0001"+
		"\u0000\u0000\u0000\u1a1c\u1a1f\u0005A\u0000\u0000\u1a1d\u1a20\u0003\u0238"+
		"\u011c\u0000\u1a1e\u1a20\u0003\u0294\u014a\u0000\u1a1f\u1a1d\u0001\u0000"+
		"\u0000\u0000\u1a1f\u1a1e\u0001\u0000\u0000\u0000\u1a20\u1a21\u0001\u0000"+
		"\u0000\u0000\u1a21\u1a22\u0005\u0464\u0000\u0000\u1a22\u1a67\u0001\u0000"+
		"\u0000\u0000\u1a23\u1a24\u0005\u0439\u0000\u0000\u1a24\u1a27\u0005\u0463"+
		"\u0000\u0000\u1a25\u1a28\u0003\u0238\u011c\u0000\u1a26\u1a28\u0003\u0294"+
		"\u014a\u0000\u1a27\u1a25\u0001\u0000\u0000\u0000\u1a27\u1a26\u0001\u0000"+
		"\u0000\u0000\u1a28\u1a2f\u0001\u0000\u0000\u0000\u1a29\u1a2a\u0005\f\u0000"+
		"\u0000\u1a2a\u1a2b\u0007w\u0000\u0000\u1a2b\u1a2c\u0005\u0463\u0000\u0000"+
		"\u1a2c\u1a2d\u0003\u0234\u011a\u0000\u1a2d\u1a2e\u0005\u0464\u0000\u0000"+
		"\u1a2e\u1a30\u0001\u0000\u0000\u0000\u1a2f\u1a29\u0001\u0000\u0000\u0000"+
		"\u1a2f\u1a30\u0001\u0000\u0000\u0000\u1a30\u1a32\u0001\u0000\u0000\u0000"+
		"\u1a31\u1a33\u0003\u0272\u0139\u0000\u1a32\u1a31\u0001\u0000\u0000\u0000"+
		"\u1a32\u1a33\u0001\u0000\u0000\u0000\u1a33\u1a34\u0001\u0000\u0000\u0000"+
		"\u1a34\u1a35\u0005\u0464\u0000\u0000\u1a35\u1a67\u0001\u0000\u0000\u0000"+
		"\u1a36\u1a37\u0005\u0138\u0000\u0000\u1a37\u1a38\u0005\u0463\u0000\u0000"+
		"\u1a38\u1a39\u0003J%\u0000\u1a39\u1a3c\u0005A\u0000\u0000\u1a3a\u1a3d"+
		"\u0003\u0238\u011c\u0000\u1a3b\u1a3d\u0003\u0294\u014a\u0000\u1a3c\u1a3a"+
		"\u0001\u0000\u0000\u0000\u1a3c\u1a3b\u0001\u0000\u0000\u0000\u1a3d\u1a3e"+
		"\u0001\u0000\u0000\u0000\u1a3e\u1a3f\u0005\u0464\u0000\u0000\u1a3f\u1a67"+
		"\u0001\u0000\u0000\u0000\u1a40\u1a41\u0005\u0370\u0000\u0000\u1a41\u1a42"+
		"\u0005\u0463\u0000\u0000\u1a42\u1a43\u0007x\u0000\u0000\u1a43\u1a44\u0005"+
		"\u0465\u0000\u0000\u1a44\u1a45\u0003\u0238\u011c\u0000\u1a45\u1a46\u0005"+
		"\u0464\u0000\u0000\u1a46\u1a67\u0001\u0000\u0000\u0000\u1a47\u1a48\u0005"+
		"\u00fe\u0000\u0000\u1a48\u1a49\u0005\u0463\u0000\u0000\u1a49\u1a4a\u0003"+
		"\u0294\u014a\u0000\u1a4a\u1a4b\u0005\u0465\u0000\u0000\u1a4b\u1a4e\u0003"+
		"\u0294\u014a\u0000\u1a4c\u1a4d\u0005\u0241\u0000\u0000\u1a4d\u1a4f\u0003"+
		"\u0246\u0123\u0000\u1a4e\u1a4c\u0001\u0000\u0000\u0000\u1a4e\u1a4f\u0001"+
		"\u0000\u0000\u0000\u1a4f\u1a58\u0001\u0000\u0000\u0000\u1a50\u1a55\u0005"+
		"p\u0000\u0000\u1a51\u1a55\u0005\u0190\u0000\u0000\u1a52\u1a53\u0005(\u0000"+
		"\u0000\u1a53\u1a55\u0003\u025e\u012f\u0000\u1a54\u1a50\u0001\u0000\u0000"+
		"\u0000\u1a54\u1a51\u0001\u0000\u0000\u0000\u1a54\u1a52\u0001\u0000\u0000"+
		"\u0000\u1a55\u1a56\u0001\u0000\u0000\u0000\u1a56\u1a57\u0005r\u0000\u0000"+
		"\u1a57\u1a59\u00055\u0000\u0000\u1a58\u1a54\u0001\u0000\u0000\u0000\u1a58"+
		"\u1a59\u0001\u0000\u0000\u0000\u1a59\u1a62\u0001\u0000\u0000\u0000\u1a5a"+
		"\u1a5f\u0005p\u0000\u0000\u1a5b\u1a5f\u0005\u0190\u0000\u0000\u1a5c\u1a5d"+
		"\u0005(\u0000\u0000\u1a5d\u1a5f\u0003\u025e\u012f\u0000\u1a5e\u1a5a\u0001"+
		"\u0000\u0000\u0000\u1a5e\u1a5b\u0001\u0000\u0000\u0000\u1a5e\u1a5c\u0001"+
		"\u0000\u0000\u0000\u1a5f\u1a60\u0001\u0000\u0000\u0000\u1a60\u1a61\u0005"+
		"r\u0000\u0000\u1a61\u1a63\u0005\u0190\u0000\u0000\u1a62\u1a5e\u0001\u0000"+
		"\u0000\u0000\u1a62\u1a63\u0001\u0000\u0000\u0000\u1a63\u1a64\u0001\u0000"+
		"\u0000\u0000\u1a64\u1a65\u0005\u0464\u0000\u0000\u1a65\u1a67\u0001\u0000"+
		"\u0000\u0000\u1a66\u19a6\u0001\u0000\u0000\u0000\u1a66\u19ab\u0001\u0000"+
		"\u0000\u0000\u1a66\u19b2\u0001\u0000\u0000\u0000\u1a66\u19b9\u0001\u0000"+
		"\u0000\u0000\u1a66\u19c0\u0001\u0000\u0000\u0000\u1a66\u19c5\u0001\u0000"+
		"\u0000\u0000\u1a66\u19d2\u0001\u0000\u0000\u0000\u1a66\u19de\u0001\u0000"+
		"\u0000\u0000\u1a66\u19e7\u0001\u0000\u0000\u0000\u1a66\u19f4\u0001\u0000"+
		"\u0000\u0000\u1a66\u1a08\u0001\u0000\u0000\u0000\u1a66\u1a16\u0001\u0000"+
		"\u0000\u0000\u1a66\u1a23\u0001\u0000\u0000\u0000\u1a66\u1a36\u0001\u0000"+
		"\u0000\u0000\u1a66\u1a40\u0001\u0000\u0000\u0000\u1a66\u1a47\u0001\u0000"+
		"\u0000\u0000\u1a67\u026f\u0001\u0000\u0000\u0000\u1a68\u1a69\u0005\u00b7"+
		"\u0000\u0000\u1a69\u1a6a\u0003\u0292\u0149\u0000\u1a6a\u1a6b\u0005\u00a8"+
		"\u0000\u0000\u1a6b\u1a6c\u0003\u0292\u0149\u0000\u1a6c\u0271\u0001\u0000"+
		"\u0000\u0000\u1a6d\u1a6e\u0005\u01cb\u0000\u0000\u1a6e\u1a73\u0003\u0274"+
		"\u013a\u0000\u1a6f\u1a70\u0005\u0465\u0000\u0000\u1a70\u1a72\u0003\u0274"+
		"\u013a\u0000\u1a71\u1a6f\u0001\u0000\u0000\u0000\u1a72\u1a75\u0001\u0000"+
		"\u0000\u0000\u1a73\u1a71\u0001\u0000\u0000\u0000\u1a73\u1a74\u0001\u0000"+
		"\u0000\u0000\u1a74\u1a7c\u0001\u0000\u0000\u0000\u1a75\u1a73\u0001\u0000"+
		"\u0000\u0000\u1a76\u1a77\u0005\u01cb\u0000\u0000\u1a77\u1a78\u0003\u0234"+
		"\u011a\u0000\u1a78\u1a79\u0005\u0457\u0000\u0000\u1a79\u1a7a\u0003\u0234"+
		"\u011a\u0000\u1a7a\u1a7c\u0001\u0000\u0000\u0000\u1a7b\u1a6d\u0001\u0000"+
		"\u0000\u0000\u1a7b\u1a76\u0001\u0000\u0000\u0000\u1a7c\u0273\u0001\u0000"+
		"\u0000\u0000\u1a7d\u1a7f\u0003\u0234\u011a\u0000\u1a7e\u1a80\u0007y\u0000"+
		"\u0000\u1a7f\u1a7e\u0001\u0000\u0000\u0000\u1a7f\u1a80\u0001\u0000\u0000"+
		"\u0000\u1a80\u0275\u0001\u0000\u0000\u0000\u1a81\u1a82\u0007z\u0000\u0000"+
		"\u1a82\u1a84\u0005\u0463\u0000\u0000\u1a83\u1a85\u0007/\u0000\u0000\u1a84"+
		"\u1a83\u0001\u0000\u0000\u0000\u1a84\u1a85\u0001\u0000\u0000\u0000\u1a85"+
		"\u1a86\u0001\u0000\u0000\u0000\u1a86\u1a87\u0003\u0292\u0149\u0000\u1a87"+
		"\u1a89\u0005\u0464\u0000\u0000\u1a88\u1a8a\u0003\u027a\u013d\u0000\u1a89"+
		"\u1a88\u0001\u0000\u0000\u0000\u1a89\u1a8a\u0001\u0000\u0000\u0000\u1a8a"+
		"\u1abd\u0001\u0000\u0000\u0000\u1a8b\u1a8c\u0005\u0119\u0000\u0000\u1a8c"+
		"\u1a94\u0005\u0463\u0000\u0000\u1a8d\u1a95\u0005\u0453\u0000\u0000\u1a8e"+
		"\u1a90\u0005\u0006\u0000\u0000\u1a8f\u1a8e\u0001\u0000\u0000\u0000\u1a8f"+
		"\u1a90\u0001\u0000\u0000\u0000\u1a90\u1a91\u0001\u0000\u0000\u0000\u1a91"+
		"\u1a95\u0003\u0292\u0149\u0000\u1a92\u1a93\u0005/\u0000\u0000\u1a93\u1a95"+
		"\u0003\u0290\u0148\u0000\u1a94\u1a8d\u0001\u0000\u0000\u0000\u1a94\u1a8f"+
		"\u0001\u0000\u0000\u0000\u1a94\u1a92\u0001\u0000\u0000\u0000\u1a95\u1a96"+
		"\u0001\u0000\u0000\u0000\u1a96\u1a98\u0005\u0464\u0000\u0000\u1a97\u1a99"+
		"\u0003\u027a\u013d\u0000\u1a98\u1a97\u0001\u0000\u0000\u0000\u1a98\u1a99"+
		"\u0001\u0000\u0000\u0000\u1a99\u1abd\u0001\u0000\u0000\u0000\u1a9a\u1a9b"+
		"\u0007{\u0000\u0000\u1a9b\u1a9d\u0005\u0463\u0000\u0000\u1a9c\u1a9e\u0005"+
		"\u0006\u0000\u0000\u1a9d\u1a9c\u0001\u0000\u0000\u0000\u1a9d\u1a9e\u0001"+
		"\u0000\u0000\u0000\u1a9e\u1a9f\u0001\u0000\u0000\u0000\u1a9f\u1aa0\u0003"+
		"\u0292\u0149\u0000\u1aa0\u1aa2\u0005\u0464\u0000\u0000\u1aa1\u1aa3\u0003"+
		"\u027a\u013d\u0000\u1aa2\u1aa1\u0001\u0000\u0000\u0000\u1aa2\u1aa3\u0001"+
		"\u0000\u0000\u0000\u1aa3\u1abd\u0001\u0000\u0000\u0000\u1aa4\u1aa5\u0005"+
		"\u011d\u0000\u0000\u1aa5\u1aa7\u0005\u0463\u0000\u0000\u1aa6\u1aa8\u0005"+
		"/\u0000\u0000\u1aa7\u1aa6\u0001\u0000\u0000\u0000\u1aa7\u1aa8\u0001\u0000"+
		"\u0000\u0000\u1aa8\u1aa9\u0001\u0000\u0000\u0000\u1aa9\u1ab4\u0003\u0290"+
		"\u0148\u0000\u1aaa\u1aab\u0005x\u0000\u0000\u1aab\u1aac\u0005\u0012\u0000"+
		"\u0000\u1aac\u1ab1\u0003\u00eau\u0000\u1aad\u1aae\u0005\u0465\u0000\u0000"+
		"\u1aae\u1ab0\u0003\u00eau\u0000\u1aaf\u1aad\u0001\u0000\u0000\u0000\u1ab0"+
		"\u1ab3\u0001\u0000\u0000\u0000\u1ab1\u1aaf\u0001\u0000\u0000\u0000\u1ab1"+
		"\u1ab2\u0001\u0000\u0000\u0000\u1ab2\u1ab5\u0001\u0000\u0000\u0000\u1ab3"+
		"\u1ab1\u0001\u0000\u0000\u0000\u1ab4\u1aaa\u0001\u0000\u0000\u0000\u1ab4"+
		"\u1ab5\u0001\u0000\u0000\u0000\u1ab5\u1ab8\u0001\u0000\u0000\u0000\u1ab6"+
		"\u1ab7\u0005\u0096\u0000\u0000\u1ab7\u1ab9\u0005\u0472\u0000\u0000\u1ab8"+
		"\u1ab6\u0001\u0000\u0000\u0000\u1ab8\u1ab9\u0001\u0000\u0000\u0000\u1ab9"+
		"\u1aba\u0001\u0000\u0000\u0000\u1aba\u1abb\u0005\u0464\u0000\u0000\u1abb"+
		"\u1abd\u0001\u0000\u0000\u0000\u1abc\u1a81\u0001\u0000\u0000\u0000\u1abc"+
		"\u1a8b\u0001\u0000\u0000\u0000\u1abc\u1a9a\u0001\u0000\u0000\u0000\u1abc"+
		"\u1aa4\u0001\u0000\u0000\u0000\u1abd\u0277\u0001\u0000\u0000\u0000\u1abe"+
		"\u1abf\u0007|\u0000\u0000\u1abf\u1ac0\u0005\u0463\u0000\u0000\u1ac0\u1ac3"+
		"\u0003\u0294\u014a\u0000\u1ac1\u1ac2\u0005\u0465\u0000\u0000\u1ac2\u1ac4"+
		"\u0003\u0234\u011a\u0000\u1ac3\u1ac1\u0001\u0000\u0000\u0000\u1ac3\u1ac4"+
		"\u0001\u0000\u0000\u0000\u1ac4\u1ac7\u0001\u0000\u0000\u0000\u1ac5\u1ac6"+
		"\u0005\u0465\u0000\u0000\u1ac6\u1ac8\u0003\u0234\u011a\u0000\u1ac7\u1ac5"+
		"\u0001\u0000\u0000\u0000\u1ac7\u1ac8\u0001\u0000\u0000\u0000\u1ac8\u1ac9"+
		"\u0001\u0000\u0000\u0000\u1ac9\u1aca\u0005\u0464\u0000\u0000\u1aca\u1acb"+
		"\u0003\u027a\u013d\u0000\u1acb\u1ae5\u0001\u0000\u0000\u0000\u1acc\u1acd"+
		"\u0007}\u0000\u0000\u1acd\u1ace\u0005\u0463\u0000\u0000\u1ace\u1acf\u0003"+
		"\u0294";
	private static final String _serializedATNSegment3 =
		"\u014a\u0000\u1acf\u1ad0\u0005\u0464\u0000\u0000\u1ad0\u1ad1\u0003\u027a"+
		"\u013d\u0000\u1ad1\u1ae5\u0001\u0000\u0000\u0000\u1ad2\u1ad3\u0007~\u0000"+
		"\u0000\u1ad3\u1ad4\u0005\u0463\u0000\u0000\u1ad4\u1ad5\u0005\u0464\u0000"+
		"\u0000\u1ad5\u1ae5\u0003\u027a\u013d\u0000\u1ad6\u1ad7\u0005\u0124\u0000"+
		"\u0000\u1ad7\u1ad8\u0005\u0463\u0000\u0000\u1ad8\u1ad9\u0003\u0294\u014a"+
		"\u0000\u1ad9\u1ada\u0005\u0465\u0000\u0000\u1ada\u1adb\u0003\u0234\u011a"+
		"\u0000\u1adb\u1adc\u0005\u0464\u0000\u0000\u1adc\u1add\u0003\u027a\u013d"+
		"\u0000\u1add\u1ae5\u0001\u0000\u0000\u0000\u1ade\u1adf\u0005\u0123\u0000"+
		"\u0000\u1adf\u1ae0\u0005\u0463\u0000\u0000\u1ae0\u1ae1\u0003\u0234\u011a"+
		"\u0000\u1ae1\u1ae2\u0005\u0464\u0000\u0000\u1ae2\u1ae3\u0003\u027a\u013d"+
		"\u0000\u1ae3\u1ae5\u0001\u0000\u0000\u0000\u1ae4\u1abe\u0001\u0000\u0000"+
		"\u0000\u1ae4\u1acc\u0001\u0000\u0000\u0000\u1ae4\u1ad2\u0001\u0000\u0000"+
		"\u0000\u1ae4\u1ad6\u0001\u0000\u0000\u0000\u1ae4\u1ade\u0001\u0000\u0000"+
		"\u0000\u1ae5\u0279\u0001\u0000\u0000\u0000\u1ae6\u1aed\u0005z\u0000\u0000"+
		"\u1ae7\u1ae9\u0005\u0463\u0000\u0000\u1ae8\u1aea\u0003\u027c\u013e\u0000"+
		"\u1ae9\u1ae8\u0001\u0000\u0000\u0000\u1ae9\u1aea\u0001\u0000\u0000\u0000"+
		"\u1aea\u1aeb\u0001\u0000\u0000\u0000\u1aeb\u1aee\u0005\u0464\u0000\u0000"+
		"\u1aec\u1aee\u0003\u027e\u013f\u0000\u1aed\u1ae7\u0001\u0000\u0000\u0000"+
		"\u1aed\u1aec\u0001\u0000\u0000\u0000\u1aee\u027b\u0001\u0000\u0000\u0000"+
		"\u1aef\u1af1\u0003\u027e\u013f\u0000\u1af0\u1aef\u0001\u0000\u0000\u0000"+
		"\u1af0\u1af1\u0001\u0000\u0000\u0000\u1af1\u1af3\u0001\u0000\u0000\u0000"+
		"\u1af2\u1af4\u0003\u028a\u0145\u0000\u1af3\u1af2\u0001\u0000\u0000\u0000"+
		"\u1af3\u1af4\u0001\u0000\u0000\u0000\u1af4\u1af6\u0001\u0000\u0000\u0000"+
		"\u1af5\u1af7\u0003\u00e8t\u0000\u1af6\u1af5\u0001\u0000\u0000\u0000\u1af6"+
		"\u1af7\u0001\u0000\u0000\u0000\u1af7\u1af9\u0001\u0000\u0000\u0000\u1af8"+
		"\u1afa\u0003\u0280\u0140\u0000\u1af9\u1af8\u0001\u0000\u0000\u0000\u1af9"+
		"\u1afa\u0001\u0000\u0000\u0000\u1afa\u027d\u0001\u0000\u0000\u0000\u1afb"+
		"\u1afc\u0003\u022e\u0117\u0000\u1afc\u027f\u0001\u0000\u0000\u0000\u1afd"+
		"\u1afe\u0003\u0282\u0141\u0000\u1afe\u1aff\u0003\u0284\u0142\u0000\u1aff"+
		"\u0281\u0001\u0000\u0000\u0000\u1b00\u1b01\u0007\u007f\u0000\u0000\u1b01"+
		"\u0283\u0001\u0000\u0000\u0000\u1b02\u1b05\u0003\u0288\u0144\u0000\u1b03"+
		"\u1b05\u0003\u0286\u0143\u0000\u1b04\u1b02\u0001\u0000\u0000\u0000\u1b04"+
		"\u1b03\u0001\u0000\u0000\u0000\u1b05\u0285\u0001\u0000\u0000\u0000\u1b06"+
		"\u1b07\u0005\u000f\u0000\u0000\u1b07\u1b08\u0003\u0288\u0144\u0000\u1b08"+
		"\u1b09\u0005\n\u0000\u0000\u1b09\u1b0a\u0003\u0288\u0144\u0000\u1b0a\u0287"+
		"\u0001\u0000\u0000\u0000\u1b0b\u1b0c\u0005\"\u0000\u0000\u1b0c\u1b13\u0005"+
		"\u0247\u0000\u0000\u1b0d\u1b0e\u0005\u0280\u0000\u0000\u1b0e\u1b13\u0007"+
		"\u0080\u0000\u0000\u1b0f\u1b10\u0003\u0294\u014a\u0000\u1b10\u1b11\u0007"+
		"\u0080\u0000\u0000\u1b11\u1b13\u0001\u0000\u0000\u0000\u1b12\u1b0b\u0001"+
		"\u0000\u0000\u0000\u1b12\u1b0d\u0001\u0000\u0000\u0000\u1b12\u1b0f\u0001"+
		"\u0000\u0000\u0000\u1b13\u0289\u0001\u0000\u0000\u0000\u1b14\u1b15\u0005"+
		"}\u0000\u0000\u1b15\u1b16\u0005\u0012\u0000\u0000\u1b16\u1b1b\u0003\u0294"+
		"\u014a\u0000\u1b17\u1b18\u0005\u0465\u0000\u0000\u1b18\u1b1a\u0003\u0294"+
		"\u014a\u0000\u1b19\u1b17\u0001\u0000\u0000\u0000\u1b1a\u1b1d\u0001\u0000"+
		"\u0000\u0000\u1b1b\u1b19\u0001\u0000\u0000\u0000\u1b1b\u1b1c\u0001\u0000"+
		"\u0000\u0000\u1b1c\u028b\u0001\u0000\u0000\u0000\u1b1d\u1b1b\u0001\u0000"+
		"\u0000\u0000\u1b1e\u1b36\u0003\u02b2\u0159\u0000\u1b1f\u1b36\u0005\u02d7"+
		"\u0000\u0000\u1b20\u1b36\u0005\u0134\u0000\u0000\u1b21\u1b36\u0005\u0130"+
		"\u0000\u0000\u1b22\u1b36\u0005\u0131\u0000\u0000\u1b23\u1b36\u0005\u0132"+
		"\u0000\u0000\u1b24\u1b36\u0005\u0135\u0000\u0000\u1b25\u1b36\u0005\u0136"+
		"\u0000\u0000\u1b26\u1b36\u0005\u0137\u0000\u0000\u1b27\u1b36\u0005J\u0000"+
		"\u0000\u1b28\u1b36\u0005R\u0000\u0000\u1b29\u1b36\u0005\u0133\u0000\u0000"+
		"\u1b2a\u1b36\u0005\u0139\u0000\u0000\u1b2b\u1b36\u0005\u01ef\u0000\u0000"+
		"\u1b2c\u1b36\u0005\u013a\u0000\u0000\u1b2d\u1b36\u0005\u0089\u0000\u0000"+
		"\u1b2e\u1b36\u0005\u013c\u0000\u0000\u1b2f\u1b36\u0005\u013d\u0000\u0000"+
		"\u1b30\u1b36\u0005\u013e\u0000\u0000\u1b31\u1b36\u0005\u013f\u0000\u0000"+
		"\u1b32\u1b36\u0005\u0140\u0000\u0000\u1b33\u1b36\u0005\u0141\u0000\u0000"+
		"\u1b34\u1b36\u0005\u0142\u0000\u0000\u1b35\u1b1e\u0001\u0000\u0000\u0000"+
		"\u1b35\u1b1f\u0001\u0000\u0000\u0000\u1b35\u1b20\u0001\u0000\u0000\u0000"+
		"\u1b35\u1b21\u0001\u0000\u0000\u0000\u1b35\u1b22\u0001\u0000\u0000\u0000"+
		"\u1b35\u1b23\u0001\u0000\u0000\u0000\u1b35\u1b24\u0001\u0000\u0000\u0000"+
		"\u1b35\u1b25\u0001\u0000\u0000\u0000\u1b35\u1b26\u0001\u0000\u0000\u0000"+
		"\u1b35\u1b27\u0001\u0000\u0000\u0000\u1b35\u1b28\u0001\u0000\u0000\u0000"+
		"\u1b35\u1b29\u0001\u0000\u0000\u0000\u1b35\u1b2a\u0001\u0000\u0000\u0000"+
		"\u1b35\u1b2b\u0001\u0000\u0000\u0000\u1b35\u1b2c\u0001\u0000\u0000\u0000"+
		"\u1b35\u1b2d\u0001\u0000\u0000\u0000\u1b35\u1b2e\u0001\u0000\u0000\u0000"+
		"\u1b35\u1b2f\u0001\u0000\u0000\u0000\u1b35\u1b30\u0001\u0000\u0000\u0000"+
		"\u1b35\u1b31\u0001\u0000\u0000\u0000\u1b35\u1b32\u0001\u0000\u0000\u0000"+
		"\u1b35\u1b33\u0001\u0000\u0000\u0000\u1b35\u1b34\u0001\u0000\u0000\u0000"+
		"\u1b36\u028d\u0001\u0000\u0000\u0000\u1b37\u1b38\u0007\u0081\u0000\u0000"+
		"\u1b38\u1b39\u0005\u0463\u0000\u0000\u1b39\u1b3a\u0003\u0292\u0149\u0000"+
		"\u1b3a\u1b3b\u0005\u0464\u0000\u0000\u1b3b\u028f\u0001\u0000\u0000\u0000"+
		"\u1b3c\u1b41\u0003\u0240\u0120\u0000\u1b3d\u1b41\u0003\u0218\u010c\u0000"+
		"\u1b3e\u1b41\u0003\u026c\u0136\u0000\u1b3f\u1b41\u0003\u0294\u014a\u0000"+
		"\u1b40\u1b3c\u0001\u0000\u0000\u0000\u1b40\u1b3d\u0001\u0000\u0000\u0000"+
		"\u1b40\u1b3e\u0001\u0000\u0000\u0000\u1b40\u1b3f\u0001\u0000\u0000\u0000"+
		"\u1b41\u1b4b\u0001\u0000\u0000\u0000\u1b42\u1b47\u0005\u0465\u0000\u0000"+
		"\u1b43\u1b48\u0003\u0240\u0120\u0000\u1b44\u1b48\u0003\u0218\u010c\u0000"+
		"\u1b45\u1b48\u0003\u026c\u0136\u0000\u1b46\u1b48\u0003\u0294\u014a\u0000"+
		"\u1b47\u1b43\u0001\u0000\u0000\u0000\u1b47\u1b44\u0001\u0000\u0000\u0000"+
		"\u1b47\u1b45\u0001\u0000\u0000\u0000\u1b47\u1b46\u0001\u0000\u0000\u0000"+
		"\u1b48\u1b4a\u0001\u0000\u0000\u0000\u1b49\u1b42\u0001\u0000\u0000\u0000"+
		"\u1b4a\u1b4d\u0001\u0000\u0000\u0000\u1b4b\u1b49\u0001\u0000\u0000\u0000"+
		"\u1b4b\u1b4c\u0001\u0000\u0000\u0000\u1b4c\u0291\u0001\u0000\u0000\u0000"+
		"\u1b4d\u1b4b\u0001\u0000\u0000\u0000\u1b4e\u1b53\u0003\u0240\u0120\u0000"+
		"\u1b4f\u1b53\u0003\u0218\u010c\u0000\u1b50\u1b53\u0003\u026c\u0136\u0000"+
		"\u1b51\u1b53\u0003\u0294\u014a\u0000\u1b52\u1b4e\u0001\u0000\u0000\u0000"+
		"\u1b52\u1b4f\u0001\u0000\u0000\u0000\u1b52\u1b50\u0001\u0000\u0000\u0000"+
		"\u1b52\u1b51\u0001\u0000\u0000\u0000\u1b53\u0293\u0001\u0000\u0000\u0000"+
		"\u1b54\u1b55\u0006\u014a\uffff\uffff\u0000\u1b55\u1b56\u0007\u0082\u0000"+
		"\u0000\u1b56\u1b60\u0003\u0294\u014a\u0004\u1b57\u1b58\u0003\u0296\u014b"+
		"\u0000\u1b58\u1b5a\u0005U\u0000\u0000\u1b59\u1b5b\u0005n\u0000\u0000\u1b5a"+
		"\u1b59\u0001\u0000\u0000\u0000\u1b5a\u1b5b\u0001\u0000\u0000\u0000\u1b5b"+
		"\u1b5c\u0001\u0000\u0000\u0000\u1b5c\u1b5d\u0007\u0083\u0000\u0000\u1b5d"+
		"\u1b60\u0001\u0000\u0000\u0000\u1b5e\u1b60\u0003\u0296\u014b\u0000\u1b5f"+
		"\u1b54\u0001\u0000\u0000\u0000\u1b5f\u1b57\u0001\u0000\u0000\u0000\u1b5f"+
		"\u1b5e\u0001\u0000\u0000\u0000\u1b60\u1b67\u0001\u0000\u0000\u0000\u1b61"+
		"\u1b62\n\u0003\u0000\u0000\u1b62\u1b63\u0003\u029e\u014f\u0000\u1b63\u1b64"+
		"\u0003\u0294\u014a\u0004\u1b64\u1b66\u0001\u0000\u0000\u0000\u1b65\u1b61"+
		"\u0001\u0000\u0000\u0000\u1b66\u1b69\u0001\u0000\u0000\u0000\u1b67\u1b65"+
		"\u0001\u0000\u0000\u0000\u1b67\u1b68\u0001\u0000\u0000\u0000\u1b68\u0295"+
		"\u0001\u0000\u0000\u0000\u1b69\u1b67\u0001\u0000\u0000\u0000\u1b6a\u1b6d"+
		"\u0006\u014b\uffff\uffff\u0000\u1b6b\u1b6c\u0005\u047f\u0000\u0000\u1b6c"+
		"\u1b6e\u0005\u044a\u0000\u0000\u1b6d\u1b6b\u0001\u0000\u0000\u0000\u1b6d"+
		"\u1b6e\u0001\u0000\u0000\u0000\u1b6e\u1b6f\u0001\u0000\u0000\u0000\u1b6f"+
		"\u1b70\u0003\u0298\u014c\u0000\u1b70\u1bb1\u0001\u0000\u0000\u0000\u1b71"+
		"\u1b72\n\b\u0000\u0000\u1b72\u1b73\u0003\u029c\u014e\u0000\u1b73\u1b74"+
		"\u0003\u0296\u014b\t\u1b74\u1bb0\u0001\u0000\u0000\u0000\u1b75\u1b77\n"+
		"\u0006\u0000\u0000\u1b76\u1b78\u0005n\u0000\u0000\u1b77\u1b76\u0001\u0000"+
		"\u0000\u0000\u1b77\u1b78\u0001\u0000\u0000\u0000\u1b78\u1b79\u0001\u0000"+
		"\u0000\u0000\u1b79\u1b7a\u0005\u000f\u0000\u0000\u1b7a\u1b7b\u0003\u0296"+
		"\u014b\u0000\u1b7b\u1b7c\u0005\n\u0000\u0000\u1b7c\u1b7d\u0003\u0296\u014b"+
		"\u0007\u1b7d\u1bb0\u0001\u0000\u0000\u0000\u1b7e\u1b7f\n\u0005\u0000\u0000"+
		"\u1b7f\u1b80\u0005\u025b\u0000\u0000\u1b80\u1b81\u0005^\u0000\u0000\u1b81"+
		"\u1bb0\u0003\u0296\u014b\u0006\u1b82\u1b84\n\u0003\u0000\u0000\u1b83\u1b85"+
		"\u0005n\u0000\u0000\u1b84\u1b83\u0001\u0000\u0000\u0000\u1b84\u1b85\u0001"+
		"\u0000\u0000\u0000\u1b85\u1b86\u0001\u0000\u0000\u0000\u1b86\u1b87\u0007"+
		"\u0084\u0000\u0000\u1b87\u1bb0\u0003\u0296\u014b\u0004\u1b88\u1b8a\n\n"+
		"\u0000\u0000\u1b89\u1b8b\u0005n\u0000\u0000\u1b8a\u1b89\u0001\u0000\u0000"+
		"\u0000\u1b8a\u1b8b\u0001\u0000\u0000\u0000\u1b8b\u1b8c\u0001\u0000\u0000"+
		"\u0000\u1b8c\u1b8d\u0005M\u0000\u0000\u1b8d\u1b90\u0005\u0463\u0000\u0000"+
		"\u1b8e\u1b91\u0003\u00ccf\u0000\u1b8f\u1b91\u0003\u0254\u012a\u0000\u1b90"+
		"\u1b8e\u0001\u0000\u0000\u0000\u1b90\u1b8f\u0001\u0000\u0000\u0000\u1b91"+
		"\u1b92\u0001\u0000\u0000\u0000\u1b92\u1b93\u0005\u0464\u0000\u0000\u1b93"+
		"\u1bb0\u0001\u0000\u0000\u0000\u1b94\u1b95\n\t\u0000\u0000\u1b95\u1b96"+
		"\u0005U\u0000\u0000\u1b96\u1bb0\u0003\u023e\u011f\u0000\u1b97\u1b98\n"+
		"\u0007\u0000\u0000\u1b98\u1b99\u0003\u029c\u014e\u0000\u1b99\u1b9a\u0007"+
		"\u0085\u0000\u0000\u1b9a\u1b9b\u0005\u0463\u0000\u0000\u1b9b\u1b9c\u0003"+
		"\u00ccf\u0000\u1b9c\u1b9d\u0005\u0464\u0000\u0000\u1b9d\u1bb0\u0001\u0000"+
		"\u0000\u0000\u1b9e\u1ba0\n\u0004\u0000\u0000\u1b9f\u1ba1\u0005n\u0000"+
		"\u0000\u1ba0\u1b9f\u0001\u0000\u0000\u0000\u1ba0\u1ba1\u0001\u0000\u0000"+
		"\u0000\u1ba1\u1ba2\u0001\u0000\u0000\u0000\u1ba2\u1ba3\u0005^\u0000\u0000"+
		"\u1ba3\u1ba6\u0003\u0296\u014b\u0000\u1ba4\u1ba5\u0005\u0192\u0000\u0000"+
		"\u1ba5\u1ba7\u0005\u0472\u0000\u0000\u1ba6\u1ba4\u0001\u0000\u0000\u0000"+
		"\u1ba6\u1ba7\u0001\u0000\u0000\u0000\u1ba7\u1bb0\u0001\u0000\u0000\u0000"+
		"\u1ba8\u1ba9\n\u0001\u0000\u0000\u1ba9\u1baa\u0005\u01ec\u0000\u0000\u1baa"+
		"\u1bab\u0005\u0208\u0000\u0000\u1bab\u1bac\u0005\u0463\u0000\u0000\u1bac"+
		"\u1bad\u0003\u0296\u014b\u0000\u1bad\u1bae\u0005\u0464\u0000\u0000\u1bae"+
		"\u1bb0\u0001\u0000\u0000\u0000\u1baf\u1b71\u0001\u0000\u0000\u0000\u1baf"+
		"\u1b75\u0001\u0000\u0000\u0000\u1baf\u1b7e\u0001\u0000\u0000\u0000\u1baf"+
		"\u1b82\u0001\u0000\u0000\u0000\u1baf\u1b88\u0001\u0000\u0000\u0000\u1baf"+
		"\u1b94\u0001\u0000\u0000\u0000\u1baf\u1b97\u0001\u0000\u0000\u0000\u1baf"+
		"\u1b9e\u0001\u0000\u0000\u0000\u1baf\u1ba8\u0001\u0000\u0000\u0000\u1bb0"+
		"\u1bb3\u0001\u0000\u0000\u0000\u1bb1\u1baf\u0001\u0000\u0000\u0000\u1bb1"+
		"\u1bb2\u0001\u0000\u0000\u0000\u1bb2\u0297\u0001\u0000\u0000\u0000\u1bb3"+
		"\u1bb1\u0001\u0000\u0000\u0000\u1bb4\u1bb5\u0006\u014c\uffff\uffff\u0000"+
		"\u1bb5\u1be2\u0003\u0240\u0120\u0000\u1bb6\u1be2\u0003\u0218\u010c\u0000"+
		"\u1bb7\u1be2\u0003\u026c\u0136\u0000\u1bb8\u1be2\u0003\u021e\u010f\u0000"+
		"\u1bb9\u1bba\u0003\u029a\u014d\u0000\u1bba\u1bbb\u0003\u0298\u014c\n\u1bbb"+
		"\u1be2\u0001\u0000\u0000\u0000\u1bbc\u1bbd\u0005\u00dc\u0000\u0000\u1bbd"+
		"\u1be2\u0003\u0298\u014c\t\u1bbe\u1bbf\u0005\u0463\u0000\u0000\u1bbf\u1bc4"+
		"\u0003\u0294\u014a\u0000\u1bc0\u1bc1\u0005\u0465\u0000\u0000\u1bc1\u1bc3"+
		"\u0003\u0294\u014a\u0000\u1bc2\u1bc0\u0001\u0000\u0000\u0000\u1bc3\u1bc6"+
		"\u0001\u0000\u0000\u0000\u1bc4\u1bc2\u0001\u0000\u0000\u0000\u1bc4\u1bc5"+
		"\u0001\u0000\u0000\u0000\u1bc5\u1bc7\u0001\u0000\u0000\u0000\u1bc6\u1bc4"+
		"\u0001\u0000\u0000\u0000\u1bc7\u1bc8\u0005\u0464\u0000\u0000\u1bc8\u1be2"+
		"\u0001\u0000\u0000\u0000\u1bc9\u1bca\u0005\u0247\u0000\u0000\u1bca\u1bcb"+
		"\u0005\u0463\u0000\u0000\u1bcb\u1bce\u0003\u0294\u014a\u0000\u1bcc\u1bcd"+
		"\u0005\u0465\u0000\u0000\u1bcd\u1bcf\u0003\u0294\u014a\u0000\u1bce\u1bcc"+
		"\u0001\u0000\u0000\u0000\u1bcf\u1bd0\u0001\u0000\u0000\u0000\u1bd0\u1bce"+
		"\u0001\u0000\u0000\u0000\u1bd0\u1bd1\u0001\u0000\u0000\u0000\u1bd1\u1bd2"+
		"\u0001\u0000\u0000\u0000\u1bd2\u1bd3\u0005\u0464\u0000\u0000\u1bd3\u1be2"+
		"\u0001\u0000\u0000\u0000\u1bd4\u1bd5\u00059\u0000\u0000\u1bd5\u1bd6\u0005"+
		"\u0463\u0000\u0000\u1bd6\u1bd7\u0003\u00ccf\u0000\u1bd7\u1bd8\u0005\u0464"+
		"\u0000\u0000\u1bd8\u1be2\u0001\u0000\u0000\u0000\u1bd9\u1bda\u0005\u0463"+
		"\u0000\u0000\u1bda\u1bdb\u0003\u00ccf\u0000\u1bdb\u1bdc\u0005\u0464\u0000"+
		"\u0000\u1bdc\u1be2\u0001\u0000\u0000\u0000\u1bdd\u1bde\u0005S\u0000\u0000"+
		"\u1bde\u1bdf\u0003\u0294\u014a\u0000\u1bdf\u1be0\u0003J%\u0000\u1be0\u1be2"+
		"\u0001\u0000\u0000\u0000\u1be1\u1bb4\u0001\u0000\u0000\u0000\u1be1\u1bb6"+
		"\u0001\u0000\u0000\u0000\u1be1\u1bb7\u0001\u0000\u0000\u0000\u1be1\u1bb8"+
		"\u0001\u0000\u0000\u0000\u1be1\u1bb9\u0001\u0000\u0000\u0000\u1be1\u1bbc"+
		"\u0001\u0000\u0000\u0000\u1be1\u1bbe\u0001\u0000\u0000\u0000\u1be1\u1bc9"+
		"\u0001\u0000\u0000\u0000\u1be1\u1bd4\u0001\u0000\u0000\u0000\u1be1\u1bd9"+
		"\u0001\u0000\u0000\u0000\u1be1\u1bdd\u0001\u0000\u0000\u0000\u1be2\u1bf4"+
		"\u0001\u0000\u0000\u0000\u1be3\u1be4\n\u0003\u0000\u0000\u1be4\u1be5\u0003"+
		"\u02a0\u0150\u0000\u1be5\u1be6\u0003\u0298\u014c\u0004\u1be6\u1bf3\u0001"+
		"\u0000\u0000\u0000\u1be7\u1be8\n\u0002\u0000\u0000\u1be8\u1be9\u0003\u02a2"+
		"\u0151\u0000\u1be9\u1bea\u0003\u0298\u014c\u0003\u1bea\u1bf3\u0001\u0000"+
		"\u0000\u0000\u1beb\u1bec\n\u0001\u0000\u0000\u1bec\u1bed\u0003\u02a4\u0152"+
		"\u0000\u1bed\u1bee\u0003\u0298\u014c\u0002\u1bee\u1bf3\u0001\u0000\u0000"+
		"\u0000\u1bef\u1bf0\n\f\u0000\u0000\u1bf0\u1bf1\u0005\u001a\u0000\u0000"+
		"\u1bf1\u1bf3\u0003\u0222\u0111\u0000\u1bf2\u1be3\u0001\u0000\u0000\u0000"+
		"\u1bf2\u1be7\u0001\u0000\u0000\u0000\u1bf2\u1beb\u0001\u0000\u0000\u0000"+
		"\u1bf2\u1bef\u0001\u0000\u0000\u0000\u1bf3\u1bf6\u0001\u0000\u0000\u0000"+
		"\u1bf4\u1bf2\u0001\u0000\u0000\u0000\u1bf4\u1bf5\u0001\u0000\u0000\u0000"+
		"\u1bf5\u0299\u0001\u0000\u0000\u0000\u1bf6\u1bf4\u0001\u0000\u0000\u0000"+
		"\u1bf7\u1bf8\u0007\u0086\u0000\u0000\u1bf8\u029b\u0001\u0000\u0000\u0000"+
		"\u1bf9\u1c08\u0005\u045a\u0000\u0000\u1bfa\u1c08\u0005\u045b\u0000\u0000"+
		"\u1bfb\u1c08\u0005\u045c\u0000\u0000\u1bfc\u1bfd\u0005\u045c\u0000\u0000"+
		"\u1bfd\u1c08\u0005\u045a\u0000\u0000\u1bfe\u1bff\u0005\u045b\u0000\u0000"+
		"\u1bff\u1c08\u0005\u045a\u0000\u0000\u1c00\u1c01\u0005\u045c\u0000\u0000"+
		"\u1c01\u1c08\u0005\u045b\u0000\u0000\u1c02\u1c03\u0005\u045d\u0000\u0000"+
		"\u1c03\u1c08\u0005\u045a\u0000\u0000\u1c04\u1c05\u0005\u045c\u0000\u0000"+
		"\u1c05\u1c06\u0005\u045a\u0000\u0000\u1c06\u1c08\u0005\u045b\u0000\u0000"+
		"\u1c07\u1bf9\u0001\u0000\u0000\u0000\u1c07\u1bfa\u0001\u0000\u0000\u0000"+
		"\u1c07\u1bfb\u0001\u0000\u0000\u0000\u1c07\u1bfc\u0001\u0000\u0000\u0000"+
		"\u1c07\u1bfe\u0001\u0000\u0000\u0000\u1c07\u1c00\u0001\u0000\u0000\u0000"+
		"\u1c07\u1c02\u0001\u0000\u0000\u0000\u1c07\u1c04\u0001\u0000\u0000\u0000"+
		"\u1c08\u029d\u0001\u0000\u0000\u0000\u1c09\u1c11\u0005\n\u0000\u0000\u1c0a"+
		"\u1c0b\u0005\u0460\u0000\u0000\u1c0b\u1c11\u0005\u0460\u0000\u0000\u1c0c"+
		"\u1c11\u0005\u00bc\u0000\u0000\u1c0d\u1c11\u0005w\u0000\u0000\u1c0e\u1c0f"+
		"\u0005\u045f\u0000\u0000\u1c0f\u1c11\u0005\u045f\u0000\u0000\u1c10\u1c09"+
		"\u0001\u0000\u0000\u0000\u1c10\u1c0a\u0001\u0000\u0000\u0000\u1c10\u1c0c"+
		"\u0001\u0000\u0000\u0000\u1c10\u1c0d\u0001\u0000\u0000\u0000\u1c10\u1c0e"+
		"\u0001\u0000\u0000\u0000\u1c11\u029f\u0001\u0000\u0000\u0000\u1c12\u1c13"+
		"\u0005\u045c\u0000\u0000\u1c13\u1c1a\u0005\u045c\u0000\u0000\u1c14\u1c15"+
		"\u0005\u045b\u0000\u0000\u1c15\u1c1a\u0005\u045b\u0000\u0000\u1c16\u1c1a"+
		"\u0005\u0460\u0000\u0000\u1c17\u1c1a\u0005\u0461\u0000\u0000\u1c18\u1c1a"+
		"\u0005\u045f\u0000\u0000\u1c19\u1c12\u0001\u0000\u0000\u0000\u1c19\u1c14"+
		"\u0001\u0000\u0000\u0000\u1c19\u1c16\u0001\u0000\u0000\u0000\u1c19\u1c17"+
		"\u0001\u0000\u0000\u0000\u1c19\u1c18\u0001\u0000\u0000\u0000\u1c1a\u02a1"+
		"\u0001\u0000\u0000\u0000\u1c1b\u1c1c\u0007\u0087\u0000\u0000\u1c1c\u02a3"+
		"\u0001\u0000\u0000\u0000\u1c1d\u1c1e\u0005\u0457\u0000\u0000\u1c1e\u1c23"+
		"\u0005\u045b\u0000\u0000\u1c1f\u1c20\u0005\u0457\u0000\u0000\u1c20\u1c21"+
		"\u0005\u045b\u0000\u0000\u1c21\u1c23\u0005\u045b\u0000\u0000\u1c22\u1c1d"+
		"\u0001\u0000\u0000\u0000\u1c22\u1c1f\u0001\u0000\u0000\u0000\u1c23\u02a5"+
		"\u0001\u0000\u0000\u0000\u1c24\u1c25\u0007\u0088\u0000\u0000\u1c25\u02a7"+
		"\u0001\u0000\u0000\u0000\u1c26\u1c27\u0007\u0089\u0000\u0000\u1c27\u02a9"+
		"\u0001\u0000\u0000\u0000\u1c28\u1c29\u0007\u008a\u0000\u0000\u1c29\u02ab"+
		"\u0001\u0000\u0000\u0000\u1c2a\u1c2b\u0007\u008b\u0000\u0000\u1c2b\u02ad"+
		"\u0001\u0000\u0000\u0000\u1c2c\u1c2d\u0007\u008c\u0000\u0000\u1c2d\u02af"+
		"\u0001\u0000\u0000\u0000\u1c2e\u1c2f\u0007\u008d\u0000\u0000\u1c2f\u02b1"+
		"\u0001\u0000\u0000\u0000\u1c30\u1c31\u0007\u008e\u0000\u0000\u1c31\u02b3"+
		"\u0001\u0000\u0000\u0000\u0422\u02b5\u02b9\u02c0\u02c3\u02c6\u02c8\u02ce"+
		"\u02d1\u02d4\u02dd\u030a\u0316\u0321\u0332\u0337\u0343\u035e\u0367\u036c"+
		"\u0372\u0377\u037b\u0384\u0387\u038a\u038e\u0396\u0399\u039c\u03a2\u03a6"+
		"\u03ac\u03b1\u03b6\u03bb\u03be\u03c0\u03cc\u03cf\u03d3\u03d6\u03da\u03dd"+
		"\u03e1\u03e4\u03e7\u03eb\u03ee\u03f2\u03f8\u03fe\u0404\u040b\u0412\u0418"+
		"\u041e\u0427\u042c\u0433\u043a\u044b\u0453\u0456\u045a\u0464\u0469\u046c"+
		"\u0470\u0474\u0478\u047d\u0480\u0483\u0486\u0489\u0490\u0493\u0497\u049d"+
		"\u04a2\u04a5\u04a8\u04aa\u04b5\u04b9\u04bc\u04ca\u04cd\u04d1\u04d4\u04d8"+
		"\u04db\u04df\u04e2\u04e6\u04e9\u04ec\u04f0\u04f3\u04f7\u04fe\u0501\u050e"+
		"\u0514\u051f\u0524\u052c\u0535\u053a\u053d\u0542\u054a\u054e\u0553\u0557"+
		"\u055c\u055f\u0563\u0568\u056a\u056f\u0574\u057c\u0584\u0589\u0591\u0594"+
		"\u0597\u059b\u059f\u05a2\u05a6\u05aa\u05ae\u05b4\u05b7\u05be\u05c6\u05c8"+
		"\u05cf\u05d5\u05dd\u05e0\u05e7\u05ea\u05ec\u05f2\u05f8\u0609\u0610\u0617"+
		"\u0623\u0628\u0631\u0633\u0636\u0643\u0650\u0655\u0665\u066d\u0677\u067d"+
		"\u0689\u068c\u0691\u069e\u06a5\u06ac\u06ae\u06b5\u06b9\u06bb\u06c0\u06c3"+
		"\u06c9\u06ce\u06d0\u06d4\u06d7\u06da\u06e0\u06e5\u06e7\u06ec\u06f3\u06f5"+
		"\u06fc\u0701\u0705\u0708\u0710\u0718\u071a\u0722\u0726\u0729\u072f\u0734"+
		"\u0737\u073d\u0740\u0744\u0747\u074b\u0750\u0755\u075a\u075e\u0762\u0766"+
		"\u076a\u076e\u0772\u0777\u077c\u0781\u0787\u078c\u0791\u0797\u079c\u07a1"+
		"\u07a6\u07ab\u07b0\u07b5\u07ba\u07c1\u07c6\u07cb\u07d0\u07d6\u07de\u07e4"+
		"\u07f0\u07f7\u07f9\u0801\u0806\u0809\u0811\u0817\u0827\u0833\u0835\u0838"+
		"\u0840\u0846\u084c\u0859\u0860\u0869\u086e\u0879\u0882\u0887\u0893\u089a"+
		"\u08a3\u08a8\u08b4\u08bb\u08c4\u08c9\u08d0\u08d9\u08de\u08e0\u08e5\u08ed"+
		"\u08f6\u08fa\u08fd\u0901\u0906\u090c\u0912\u0917\u091c\u0921\u0926\u0929"+
		"\u092e\u0933\u093d\u0941\u0948\u094d\u0950\u0955\u0958\u095c\u0960\u0968"+
		"\u097b\u097e\u0981\u0985\u098f\u099c\u09a3\u09a6\u09ab\u09b2\u09b5\u09b8"+
		"\u09c3\u09c6\u09ca\u09d2\u09d5\u09da\u09e2\u09e8\u09ec\u09f1\u09f7\u09fb"+
		"\u0a00\u0a05\u0a08\u0a0f\u0a13\u0a16\u0a21\u0a29\u0a2c\u0a2f\u0a35\u0a3b"+
		"\u0a3d\u0a42\u0a45\u0a4b\u0a51\u0a53\u0a57\u0a5a\u0a5d\u0a63\u0a69\u0a6c"+
		"\u0a72\u0a78\u0a7a\u0a7f\u0a82\u0a8a\u0a8c\u0a95\u0a9a\u0aa2\u0aa6\u0aa9"+
		"\u0ab1\u0abb\u0ac0\u0ac3\u0aca\u0ace\u0ad1\u0ad5\u0ada\u0aee\u0af5\u0afe"+
		"\u0b02\u0b0e\u0b11\u0b1a\u0b26\u0b2e\u0b36\u0b3d\u0b44\u0b4b\u0b5a\u0b67"+
		"\u0b6d\u0b73\u0b79\u0b7f\u0b85\u0b8d\u0b90\u0b98\u0b9d\u0ba2\u0ba9\u0bb0"+
		"\u0bb7\u0bbc\u0bbf\u0bc1\u0bc5\u0bd2\u0bd9\u0be0\u0be6\u0bea\u0bee\u0bf1"+
		"\u0bf8\u0bfb\u0c00\u0c07\u0c0e\u0c12\u0c17\u0c1e\u0c2b\u0c2e\u0c33\u0c38"+
		"\u0c3c\u0c42\u0c46\u0c4a\u0c4d\u0c54\u0c5e\u0c63\u0c6a\u0c6e\u0c75\u0c78"+
		"\u0c7c\u0c85\u0c89\u0c8c\u0c8f\u0c95\u0c98\u0c9e\u0ca7\u0caa\u0cb5\u0cb8"+
		"\u0cbd\u0cc0\u0cc5\u0ccf\u0cd4\u0cda\u0cdc\u0ce2\u0ce4\u0cea\u0cf2\u0cf7"+
		"\u0cff\u0d02\u0d07\u0d0a\u0d0f\u0d17\u0d1f\u0d25\u0d2d\u0d32\u0d3a\u0d3d"+
		"\u0d41\u0d44\u0d4c\u0d52\u0d5b\u0d5e\u0d62\u0d66\u0d6c\u0d70\u0d74\u0d76"+
		"\u0d79\u0d7c\u0d7f\u0d85\u0d89\u0d8c\u0d8f\u0d92\u0d95\u0d97\u0d9b\u0da1"+
		"\u0da7\u0dac\u0daf\u0db5\u0db9\u0dc1\u0dc4\u0dc8\u0dcb\u0dce\u0dd7\u0ddb"+
		"\u0dde\u0de2\u0de6\u0de9\u0dec\u0df1\u0df7\u0dfb\u0e05\u0e0b\u0e0f\u0e15"+
		"\u0e19\u0e1f\u0e22\u0e2e\u0e32\u0e36\u0e3e\u0e42\u0e4a\u0e4d\u0e51\u0e54"+
		"\u0e5c\u0e61\u0e64\u0e67\u0e6b\u0e6e\u0e77\u0e7c\u0e85\u0e8a\u0e91\u0e98"+
		"\u0ea0\u0ea5\u0ead\u0eb0\u0eb3\u0eba\u0ebd\u0ec4\u0ec7\u0ecf\u0ed5\u0ee0"+
		"\u0ee3\u0eee\u0ef4\u0ef8\u0f03\u0f08\u0f0a\u0f0e\u0f18\u0f22\u0f28\u0f2d"+
		"\u0f30\u0f33\u0f36\u0f39\u0f3c\u0f3f\u0f45\u0f4a\u0f4d\u0f50\u0f53\u0f56"+
		"\u0f59\u0f5c\u0f5e\u0f64\u0f69\u0f6c\u0f6f\u0f72\u0f75\u0f78\u0f7c\u0f82"+
		"\u0f86\u0f90\u0f94\u0f9a\u0fa3\u0fa6\u0faa\u0fad\u0fb1\u0fb5\u0fb8\u0fba"+
		"\u0fc2\u0fce\u0fd4\u0fd6\u0fdc\u0fde\u0fe0\u0fe6\u0fee\u0ff6\u0ffa\u0ffe"+
		"\u1007\u100c\u1020\u1025\u102b\u1032\u1037\u1040\u1043\u1047\u104b\u104f"+
		"\u1052\u1055\u1058\u105c\u1060\u1063\u1066\u1069\u1070\u1074\u1083\u1087"+
		"\u1093\u109b\u10a5\u10a9\u10ac\u10b2\u10b5\u10b8\u10c1\u10ca\u10d4\u10d8"+
		"\u10e2\u10ec\u10f4\u10f7\u1100\u1103\u1107\u110c\u1110\u1119\u111c\u113b"+
		"\u113e\u1141\u1179\u117e\u119a\u11a8\u11af\u11b3\u11b9\u11c1\u11c3\u11ce"+
		"\u11d8\u11df\u11e5\u11ed\u11f2\u11fa\u1202\u120a\u1212\u1218\u121b\u121f"+
		"\u1224\u1229\u122f\u1231\u123c\u1241\u1248\u124a\u1258\u125e\u1263\u1268"+
		"\u126e\u1275\u127d\u1285\u128a\u1290\u1293\u129b\u12a2\u12ab\u12ae\u12bf"+
		"\u12c7\u12cf\u12d3\u12da\u12e0\u12e8\u12f1\u12f7\u12fe\u1305\u130a\u130d"+
		"\u130f\u1315\u1317\u131b\u131d\u1320\u1329\u132f\u1336\u133d\u1342\u1345"+
		"\u1347\u134d\u134f\u1353\u1355\u1358\u135d\u1364\u136d\u1372\u137b\u1382"+
		"\u1387\u138a\u138c\u1392\u1394\u1397\u139f\u13a4\u13a9\u13ad\u13b3\u13b8"+
		"\u13bc\u13c2\u13c4\u13cf\u13d2\u13d9\u13dc\u13e8\u13ee\u13f7\u1400\u1405"+
		"\u140e\u1414\u141f\u1428\u142e\u1433\u1437\u143a\u1446\u144d\u1452\u1461"+
		"\u1468\u1470\u1473\u147d\u1487\u1491\u149b\u149f\u14a3\u14ad\u14b2\u14fa"+
		"\u150c\u1514\u1520\u1527\u1529\u1533\u1536\u153e\u1545\u1549\u154e\u1552"+
		"\u1557\u155a\u155d\u1566\u156a\u1582\u1589\u158d\u1594\u159b\u159e\u15ae"+
		"\u15b1\u15bb\u15bf\u15c5\u15c8\u15cd\u15d1\u15d8\u15db\u15e1\u15f9\u15fc"+
		"\u1608\u160b\u1615\u161d\u1621\u1628\u162b\u1634\u163a\u1640\u164a\u164c"+
		"\u1652\u1655\u1658\u1664\u1667\u166d\u1670\u1678\u1680\u1686\u168a\u1698"+
		"\u16a4\u16ab\u16ae\u16b5\u16bc\u16c1\u16ce\u16d9\u16df\u16e4\u16f1\u16f3"+
		"\u16f8\u16fc\u16ff\u1701\u1708\u170f\u1712\u1715\u171b\u171f\u1725\u172b"+
		"\u1738\u173d\u1745\u1748\u174d\u1752\u175a\u175d\u1765\u1769\u1776\u177c"+
		"\u1788\u178b\u1794\u1799\u179f\u17a5\u17aa\u17ac\u17b1\u17b3\u17b7\u17bd"+
		"\u17c0\u17c3\u17cb\u17d3\u17d7\u17eb\u17f2\u17f4\u17fb\u17fd\u1801\u1806"+
		"\u1811\u1816\u181c\u181f\u1823\u1828\u182b\u182f\u1833\u1835\u183a\u183f"+
		"\u184c\u184f\u1853\u1856\u1859\u185e\u1863\u1868\u186b\u1870\u1873\u1879"+
		"\u187c\u1880\u1885\u188a\u188f\u1894\u1897\u189c\u18a1\u18a6\u18ac\u18b1"+
		"\u18b6\u18bb\u18be\u18c3\u18c7\u18cb\u18d3\u18da\u18de\u18e3\u18e8\u18ec"+
		"\u18ee\u18f1\u1901\u190a\u1912\u191b\u1925\u192d\u1935\u193d\u1945\u1951"+
		"\u1958\u196b\u1970\u1973\u1978\u197b\u197f\u198b\u1990\u1998\u199f\u19a4"+
		"\u19a9\u19ca\u19ce\u19d6\u19da\u19e3\u19eb\u19f0\u19f8\u19fd\u1a02\u1a04"+
		"\u1a0d\u1a12\u1a1a\u1a1f\u1a27\u1a2f\u1a32\u1a3c\u1a4e\u1a54\u1a58\u1a5e"+
		"\u1a62\u1a66\u1a73\u1a7b\u1a7f\u1a84\u1a89\u1a8f\u1a94\u1a98\u1a9d\u1aa2"+
		"\u1aa7\u1ab1\u1ab4\u1ab8\u1abc\u1ac3\u1ac7\u1ae4\u1ae9\u1aed\u1af0\u1af3"+
		"\u1af6\u1af9\u1b04\u1b12\u1b1b\u1b35\u1b40\u1b47\u1b4b\u1b52\u1b5a\u1b5f"+
		"\u1b67\u1b6d\u1b77\u1b84\u1b8a\u1b90\u1ba0\u1ba6\u1baf\u1bb1\u1bc4\u1bd0"+
		"\u1be1\u1bf2\u1bf4\u1c07\u1c10\u1c19\u1c22";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}