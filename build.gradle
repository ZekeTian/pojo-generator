plugins {
    id 'org.jetbrains.intellij' version '1.13.3'
    id 'java'
}

group 'com.zeketian.plugin'
version '0.1'

repositories {
    maven {
        url 'https://maven.aliyun.com/repository/public/'
    }
    maven {
        url 'https://maven.aliyun.com/repository/central'
    }
    maven {
        url 'https://cache-redirector.jetbrains.com/intellij-dependencies'
    }

    mavenLocal()
    mavenCentral()
}

dependencies {
    testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.9'
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.9'
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
    implementation group: 'org.antlr', name: 'antlr4-runtime', version: '4.10.1'

    // 如果想在本地直接运行 pojo 类文件的生成方法，则需要添加如下依赖。如果是 runIde 方式运行，则不需要添加如下依赖，因为 idea 本身的运行环境中包含了 velocity
    // implementation group: 'org.apache.velocity', name: 'velocity-engine-core', version: '2.3'
    // 如果想在本地直接运行，并且 GUI Designer 使用的是 GridLayoutManger (Intellij)，则需要添加如下依赖。如果使用的是 GridBagLayout，则不需要
    // implementation group: 'com.intellij', name: 'forms_rt', version: '7.0.3'

    // 添加 lombok。在 gradle 5.0 及以后，除了添加 compileOnly 之外，还需要添加 annotationProcessor
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
    // mapstruct （注意：lombok 要在 mapstruct 前面）
    implementation group: 'org.mapstruct', name: 'mapstruct', version: '1.4.2.Final'
    annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.4.2.Final'
}

// idea 2023 版本需要 jdk17
sourceCompatibility = 17
// jdk 1.8 用于以前旧 idea 开发
//sourceCompatibility = 1.8

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    // 本地运行的版本。此处的版本需要和电脑安装的版本一样，否则 runIde 时会无法启动
    version = '2023.1.2'
    type = 'IC'
}
patchPluginXml {
    // 可以兼容的最低的 idea 版本
    sinceBuild = "191"
    // 可以兼容的最高的 idea 版本
    untilBuild = "999"
    //    changeNotes = """
    //      Add change notes here.<br>
    //      <em>most HTML tags may be used</em>"""
}
test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// package an 'uber' (AKA 'fat') JAR
tasks.register('uberJar', Jar) {
    archiveClassifier = 'uber'

    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}